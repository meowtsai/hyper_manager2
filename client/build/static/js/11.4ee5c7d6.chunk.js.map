{"version":3,"sources":["../node_modules/reactstrap/es/Breadcrumb.js","../node_modules/reactstrap/es/BreadcrumbItem.js","../node_modules/reactstrap/es/Card.js","../node_modules/reactstrap/es/CardBody.js","../node_modules/react-chartjs-2/es/index.js","../node_modules/chart.js/dist/Chart.js","../node_modules/lodash/keyBy.js","../node_modules/lodash/_createAggregator.js","../node_modules/lodash/_arrayAggregator.js","../node_modules/lodash/_baseAggregator.js","../node_modules/lodash/_baseEach.js","../node_modules/lodash/_baseForOwn.js","../node_modules/lodash/_baseFor.js","../node_modules/lodash/_createBaseFor.js","../node_modules/lodash/_createBaseEach.js"],"names":["_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_2___default","n","prop_types__WEBPACK_IMPORTED_MODULE_3__","prop_types__WEBPACK_IMPORTED_MODULE_3___default","classnames__WEBPACK_IMPORTED_MODULE_4__","classnames__WEBPACK_IMPORTED_MODULE_4___default","_utils__WEBPACK_IMPORTED_MODULE_5__","propTypes","tag","listTag","className","a","string","listClassName","cssModule","object","children","node","aria-label","Breadcrumb","props","Tag","ListTag","label","attributes","Object","classes","listClasses","createElement","defaultProps","__webpack_exports__","active","bool","BreadcrumbItem","aria-current","undefined","inverse","color","body","outline","innerRef","oneOfType","func","Card","ref","CardBody","process","d","Doughnut","Line","Bar","Radar","Polar","Bubble","defaults","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","chart_js__WEBPACK_IMPORTED_MODULE_2__","chart_js__WEBPACK_IMPORTED_MODULE_2___default","lodash_isEqual__WEBPACK_IMPORTED_MODULE_3__","lodash_isEqual__WEBPACK_IMPORTED_MODULE_3___default","lodash_keyBy__WEBPACK_IMPORTED_MODULE_4__","lodash_keyBy__WEBPACK_IMPORTED_MODULE_4___default","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_objectWithoutProperties","obj","keys","indexOf","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","NODE_ENV","PUBLIC_URL","ChartComponent","_React$Component","_temp","_this","this","_len","args","Array","_key","apply","concat","handleOnClick","event","chartInstance","_this$props","getDatasetAtEvent","getElementAtEvent","getElementsAtEvent","onElementsClick","element","componentWillMount","componentDidMount","renderChart","componentDidUpdate","redraw","destroyChart","updateChart","shouldComponentUpdate","nextProps","_props","type","options","plugins","legend","height","width","nextData","transformDataProp","shadowDataProp","componentWillUnmount","data","memoizeDataProps","datasets","map","set","saveCurrentDatasets","checkDatasets","isDev","usingCustomKeyProvider","datasetKeyProvider","getLabelAsKey","multipleDatasets","shouldWarn","forEach","dataset","console","error","getCurrentDatasets","config","_this2","_this3","helpers","configMerge","currentDatasets","nextDatasets","currentDatasetsIndexed","next","current","splice","point","pid","otherProps","rest","update","_props2","values","destroy","render","_props3","id","onClick","Component","isRequired","number","arrayOf","propName","componentName","controllers","Error","display","position","_React$Component2","_this5","_ref","_React$Component3","Pie","_this7","_ref2","_React$Component4","_this9","_ref3","_React$Component5","_this11","_ref4","_React$Component6","HorizontalBar","_this13","_ref5","_React$Component7","_this15","_ref6","_React$Component8","_this17","_ref7","_React$Component9","_this19","_ref8","_React$Component10","Scatter","_this21","_ref9","module","exports","moment","conversions","rgb2hsl","rgb2hsv","rgb2hwb","rgb2cmyk","rgb2keyword","rgb2xyz","rgb2lab","rgb2lch","lab2lch","hsl2rgb","hsl2hsv","hsl","h","s","l","hsl2hwb","hsl2cmyk","hsl2keyword","hsv2rgb","hsv2hsl","hsv","sl","v","hsv2hwb","hsv2cmyk","hsv2keyword","hwb2rgb","hwb2hsl","hwb2hsv","hwb2cmyk","hwb2keyword","cmyk2rgb","cmyk2hsl","cmyk2hsv","cmyk2hwb","cmyk2keyword","keyword2rgb","keyword2hsl","keyword2hsv","keyword2hwb","keyword2cmyk","keyword2lab","keyword2xyz","xyz2rgb","xyz2lab","xyz2lch","lab2xyz","lab2rgb","lch2lab","lch2xyz","lch2rgb","rgb","r","g","b","min","Math","max","delta","w","k","reverseKeywords","JSON","stringify","pow","x","y","z","xyz","t1","t2","t3","val","hi","floor","f","p","q","t","hwb","wh","bl","ratio","cmyk","c","m","lab","y2","hr","atan2","PI","sqrt","lch","cos","sin","keyword","cssKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","convert","Converter","arg","slice","pair","exec","from","to","round","convs","routeSpace","space","getValues","setValues","vals","fspace","colorConvert","colorName","colorString","getRgba","getHsla","getRgb","rgba","getHsl","hsla","getHwb","getAlpha","hexString","hexDouble","rgbString","alpha","rgbaString","percentString","percentaString","hslString","hslaString","hwbString","reverseNames","match","hexAlpha","parseInt","parseFloat","scale","isNaN","num","str","toString","toUpperCase","name","Color","valid","lightness","whiteness","isValid","setSpace","rgbArray","hslArray","hsvArray","hwbArray","cmykArray","rgbaArray","hslaArray","setChannel","hue","saturation","saturationv","blackness","rgbNumber","luminosity","lum","chan","contrast","color2","lum1","lum2","level","contrastRatio","dark","light","negate","lighten","darken","saturate","desaturate","whiten","blacken","greyscale","clearer","opaquer","rotate","degrees","mix","mixinColor","weight","w1","w2","toJSON","clone","result","prop","spaces","maxes","charAt","capped","chans","sname","index","svalues","window","chartjsColor","noop","uid","isNullOrUndef","isArray","substr","isObject","isFinite","_isFinite","_x","Number","valueOrDefault","defaultValue","valueAtIndexOrDefault","callback","fn","thisArg","each","loopable","reverse","len","arrayEquals","a0","a1","ilen","v0","v1","klen","_merger","tval","sval","merge","_mergerIf","mergeIf","sources","merger","extend","setFn","inherits","extensions","me","ChartElement","Surrogate","__super__","helpers_core","callCallback","array","item","fromIndex","getValueOrDefault","getValueAtIndexOrDefault","effects","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","asin","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","helpers_easing","easingEffects","RAD_PER_DEG","DOUBLE_PI","HALF_PI","QUARTER_PI","TWO_THIRDS_PI","exports$1","clear","chart","ctx","clearRect","roundedRect","radius","left","top","right","bottom","moveTo","arc","closePath","rect","drawPoint","style","rotation","xOffset","yOffset","size","cornerRadius","rad","beginPath","lineTo","SQRT1_2","fill","stroke","drawImage","_isPointInArea","area","clipArea","save","clip","unclipArea","restore","previous","flip","stepped","steppedLine","midpoint","tension","bezierCurveTo","controlPointPreviousX","controlPointNextX","controlPointPreviousY","controlPointNextY","helpers_canvas","drawRoundedRectangle","_set","scope","defaultColor","defaultFontColor","defaultFontFamily","defaultFontSize","defaultFontStyle","defaultLineHeight","showLines","core_defaults","helpers_options","toLineHeight","matches","toPadding","_parseFont","globalDefaults","global","fontSize","font","family","fontFamily","lineHeight","fontStyle","toFontString","resolve","inputs","context","helpers$1","easing","canvas","Element","configuration","initialize","hidden","pivot","_view","_model","_start","transition","ease","model","start","view","actual","origin","c0","c1","interpolate","tooltipPosition","hasValue","isNumber","core_element","exports$2","currentStep","numSteps","onAnimationProgress","onAnimationComplete","core_animation","defineProperty","get","animation","duration","onProgress","onComplete","core_animations","animations","request","addAnimation","lazy","startTime","Date","now","animating","push","requestAnimationFrame","cancelAnimation","findIndex","requestAnimFrame","startDigest","advance","nextStep","arrayEvents","unlistenArrayEvents","listener","stub","_chartjs","listeners","DatasetController","datasetIndex","datasetElementType","dataElementType","linkScales","addElements","updateIndex","meta","getMeta","getDataset","xAxisID","scales","xAxes","yAxisID","yAxes","getDatasetMeta","getScaleForId","scaleID","_getValueScaleId","_getIndexScaleId","_getValueScale","_getIndexScale","reset","_data","createMetaDataset","_chart","_datasetIndex","createMetaData","_index","metaData","addElementAndReset","updateElement","buildOrUpdateElements","isExtensible","method","base","res","resyncElements","easingValue","elements","draw","removeHoverStyle","$previousStyle","setHoverStyle","custom","getHoverColor","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth","numMeta","numData","insertElements","count","onDataPush","onDataPop","pop","onDataShift","shift","onDataSplice","onDataUnshift","core_datasetController","borderAlign","element_arc","inLabelRange","mouseX","vm","hoverRadius","inRange","chartX","chartY","pointRelativePosition","getAngleFromPoint","angle","distance","startAngle","endAngle","betweenAngles","withinRadius","innerRadius","outerRadius","getCenterPoint","halfAngle","halfRadius","getArea","centreAngle","rangeFromCentre","angleMargin","sA","eA","pixelMargin","fillStyle","lineWidth","lineJoin","strokeStyle","valueOrDefault$1","line","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","capBezierPoints","element_line","currentVM","spanGaps","points","_children","globalOptionLineElements","lastDrawnIndex","_loop","lineCap","setLineDash","lineDashOffset","previousItem","skip","valueOrDefault$2","defaultColor$1","xRange","abs","hitRadius","pointStyle","element_point","mouseY","inXRange","inYRange","padding","chartArea","defaultColor$2","isVertical","getBarBounds","x1","x2","y1","half","swap","orig","v2","parseBorderWidth","maxW","maxH","edge","borderSkipped","horizontal","parseBorderSkipped","_inRange","skipX","skipY","bounds","rectangle","element_rectangle","rects","border","outer","inner","boundingRects","fillRect","Arc","Point","Rectangle","resolve$1","hover","mode","categoryPercentage","barPercentage","offset","gridLines","offsetGridLines","controller_bar","stack","bar","_ruler","getRuler","_resolveElementOptions","_xScale","_yScale","datasetLabel","labels","_updateElementGeometry","vscale","getBasePixel","isHorizontal","ruler","vpixels","calculateBarValuePixels","ipixels","calculateBarIndexPixels","head","center","_getStacks","last","stacked","stacks","isDatasetVisible","getStackCount","getStackIndex","stackCount","end","pixels","getPixelForValue","barThickness","prev","curr","ticks","getTicks","getPixelForTick","computeMinSampleSize","imeta","ivalue","getRightValue","minBarLength","controller","range","percent","chunk","computeFlexCategoryTraits","thickness","computeFitCategoryTraits","stackIndex","maxBarThickness","Infinity","dataIndex","valueOrDefault$3","resolve$2","tooltips","callbacks","title","dataPoint","xLabel","yLabel","controller_bubble","xScale","yScale","dsIndex","getPixelForDecimal","NaN","_options","resolve$3","valueOrDefault$4","animateRotate","animateScale","legendCallback","text","join","generateLabels","ds","arcOpts","bw","e","legendItem","cutoutPercentage","circumference","tooltipItem","dataLabel","controller_doughnut","getRingIndex","ringIndex","j","opts","availableWidth","availableHeight","minSize","arcs","chartWeight","_getRingWeight","contains0","contains90","contains180","contains270","cutout","getMaxBorderWidth","radiusLength","_getVisibleDatasetWeightTotal","offsetX","offsetY","total","calculateTotal","_getRingWeightOffset","animationOpts","centerX","centerY","calculateCircumference","hoverWidth","ringWeightOffset","dataSetIndex","axis","controller_horizontalBar","valueOrDefault$5","resolve$4","isPointInArea","lineEnabled","showLine","controller_line","lineTension","_scale","_resolveLineOptions","updateBezierControlPoints","lineModel","_resolvePointOptions","calculatePointY","ELEMENT_OPTIONS","elementOptions","dsMeta","sumPos","sumNeg","stackedRightValue","rightValue","controlPoints","capControlPoint","pt","filter","cubicInterpolationMode","splineCurveMonotone","splineCurve","nextItem","halfBorderWidth","resolve$5","angleLines","circular","pointLabels","beginAtZero","controller_polarArea","starts","_starts","angles","_angles","_updateRadius","countVisibleElements","_computeAngle","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getDistanceFromCenterForValue","resetRadius","doughnut","controller_pie","valueOrDefault$6","resolve$6","controller_radar","pointPosition","getPointPositionForValue","bubble","horizontalBar","polarArea","pie","radar","scatter","getRelativePosition","native","parseVisibleItems","handler","jlen","getIntersectItems","getNearestItems","intersect","distanceMetric","minDistance","POSITIVE_INFINITY","nearestItems","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","indexMode","items","core_interaction","modes","single","x-axis","nearest","intersectsItem","filterByPosition","where","sortByWeight","_tmpIndex_","sort","addSizeByPosition","boxes","box","layout","core_layouts","addBox","fullWidth","removeBox","layoutItem","configure","layoutOptions","leftPadding","rightPadding","topPadding","bottomPadding","leftBoxes","rightBoxes","topBoxes","bottomBoxes","chartAreaBoxes","maxPadding","verticalBoxes","horizontalBoxes","outerBoxes","chartWidth","chartHeight","chartAreaWidth","verticalBoxWidth","maxChartAreaWidth","maxChartAreaHeight","outerBoxSizes","minBoxSizes","getPadding","boxPadding","findMaxPadding","fitBox","minBoxSize","findNextWhere","scaleMargin","leftPaddingAddition","topPaddingAddition","newMaxChartAreaHeight","newMaxChartAreaWidth","placeBox","minBox","stylesheet","freeze","default","EXPANDO_KEY","CSS_SIZE_MONITOR","CSS_PREFIX","CSS_RENDER_MONITOR","CSS_RENDER_ANIMATION","ANIMATION_START_EVENTS","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","readUsedSize","property","getStyle","eventListenerOptions","supports","addEventListener","passive","addListener","removeListener","removeEventListener","createEvent","nativeEvent","createDiv","cls","el","document","addResizeListener","expando","resizer","expand","shrink","appendChild","_reset","scrollLeft","scrollTop","onScroll","bind","createResizer","ticking","throttled","container","maintainAspectRatio","parentNode","clientWidth","proxy","renderProxy","animationName","reflow","offsetParent","classList","add","watchForRender","insertBefore","firstChild","removeResizeListener","remove","unwatchForRender","removeChild","platform_dom$2","disableCSSInjection","_enabled","_ensureLoaded","_loaded","platform","css","_style","setAttribute","getElementsByTagName","createTextNode","injectCSS","acquireContext","getElementById","getContext","renderHeight","getAttribute","renderWidth","initial","displayWidth","aspectRatio","displayHeight","initCanvas","releaseContext","removeAttribute","proxies","pos","fromNativeEvent","addEvent","removeEvent","implementation","core_plugins","_plugins","_cacheId","register","plugin","unregister","idx","getAll","notify","hook","descriptor","params","descriptors","cache","$plugins","_invalidate","core_scaleService","constructors","registerScaleType","scaleConstructor","scaleDefaults","getScaleConstructor","getScaleDefaults","updateScaleDefaults","additions","addScalesToLayout","valueOrDefault$7","enabled","titleFontStyle","titleSpacing","titleMarginBottom","titleFontColor","titleAlign","bodySpacing","bodyFontColor","bodyAlign","footerFontStyle","footerSpacing","footerMarginTop","footerFontColor","footerAlign","yPadding","xPadding","caretPadding","caretSize","multiKeyBackground","displayColors","beforeTitle","tooltipItems","labelCount","afterTitle","beforeBody","beforeLabel","labelColor","activeElement","labelTextColor","afterLabel","afterBody","beforeFooter","footer","afterFooter","positioners","average","eventPosition","nearestElement","distanceBetweenPoints","tp","pushOrConcat","toPush","splitNewlines","String","split","createTooltipItem","indexScale","valueScale","getLabelForIndex","getBaseModel","tooltipOpts","xAlign","yAlign","_bodyFontFamily","bodyFontFamily","_bodyFontStyle","bodyFontStyle","_bodyAlign","bodyFontSize","_titleFontFamily","titleFontFamily","_titleFontStyle","titleFontSize","_titleAlign","_footerFontFamily","footerFontFamily","_footerFontStyle","footerFontSize","_footerAlign","opacity","legendColorBackground","getAlignedX","align","getBeforeAfterBodyLines","exports$3","_lastActive","getTitle","lines","getBeforeBody","getBody","bodyItems","bodyItem","before","after","getAfterBody","getFooter","changed","existingModel","_active","alignment","backgroundPoint","tooltipSize","caretX","caretY","labelColors","labelTextColors","_eventPosition","itemSort","dataPoints","tooltip","combinedBodyLength","reduce","titleLineCount","footerLineCount","widthPadding","maxLineWidth","measureText","fontString","getTooltipSize","lf","rf","olf","orf","yf","midX","midY","determineAlignment","paddingAndSize","radiusAndPadding","getBackgroundPoint","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","tmp","drawTitle","textAlign","textBaseline","fillText","drawBody","textColor","drawColorBoxes","xLinePadding","colorX","fillLineOfText","strokeRect","drawFooter","drawBackground","quadraticCurveTo","hasTooltipContent","globalAlpha","handleEvent","getElementsAtEventForMode","positioners_1","core_tooltip","valueOrDefault$8","mergeScaleConfig","slen","mergeConfig","positionIsHorizontal","events","onHover","animationDuration","responsive","responsiveAnimationDuration","Chart","construct","initConfig","_bufferedRender","instances","retinaScale","devicePixelRatio","bindEvents","resize","ensureScalesHaveIDs","buildOrUpdateScales","initToolTip","stop","silent","newWidth","getMaximumWidth","newHeight","getMaximumHeight","newSize","onResize","scalesOptions","scaleOptions","xAxisOptions","yAxisOptions","updated","dtype","dposition","isDefault","scaleType","scaleClass","mergeTicksOptions","hasUpdated","buildOrUpdateControllers","newControllers","destroyDatasetMeta","ControllerClass","resetElements","newOptions","updateConfig","updateLayout","updateDatasets","lastActive","_bufferedRequest","updateDataset","animationOptions","animationObject","easingFunction","stepDecimal","drawDatasets","_drawTooltip","drawDataset","getElementsAtXAxis","_meta","generateLegend","unbindEvents","toBase64Image","toDataURL","_chartInstance","_listeners","eventHandler","updateHoverStyle","bufferedRequest","hoverOptions","core_controller","abstract","DateAdapter","Controller","types","scaleMerge","formats","parse","format","diff","startOf","endOf","_create","override","members","core_adapters","_date","core_ticks","formatters","tickValue","logDelta","log10","tickString","maxTick","logTick","toExponential","numDecimal","toFixed","logarithmic","remain","valueOrDefault$9","labelsFromTicks","computeTextSize","tick","longestText","drawBorder","drawOnChartArea","drawTicks","tickMarkLength","zeroLineWidth","zeroLineColor","zeroLineBorderDash","zeroLineBorderDashOffset","scaleLabel","labelString","minRotation","maxRotation","mirror","autoSkip","autoSkipPadding","labelOffset","minor","major","core_scale","paddingLeft","paddingTop","paddingRight","paddingBottom","_ticks","beforeUpdate","maxWidth","maxHeight","margins","_maxLabelLines","longestLabelWidth","longestTextCache","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","beforeBuildTicks","buildTicks","afterBuildTicks","beforeTickToLabelConversion","convertTicksToLabels","afterTickToLabelConversion","beforeCalculateTickRotation","calculateTickRotation","afterCalculateTickRotation","beforeFit","fit","afterFit","afterUpdate","tickOpts","userCallback","tickFont","labelRotation","cosRotation","originalLabelWidth","labelWidth","tickWidth","angleRadians","toRadians","scaleLabelOpts","gridLineOpts","_isVisible","parseFont","isFullWidth","scaleLabelFont","scaleLabelPadding","deltaHeight","largestTextWidth","tallestLabelHeightInLines","numberOfLabelLines","lineSpace","tickPadding","sinRotation","labelHeight","firstLabelWidth","lastLabelWidth","offsetLeft","offsetRight","handleMargins","rawValue","getValueForPixel","innerWidth","pixel","finalVal","innerHeight","decimal","valueOffset","getBaseValue","_autoSkip","optionTicks","tickCount","skipRatio","maxTicks","maxTicksLimit","ticksLength","_tickSize","axisLength","PaddingBottom","rot","borderValue","tickStart","tickEnd","optionMajorTicks","isRotated","isMirrored","tickFontColor","fontColor","majorTickFontColor","majorTickFont","tl","scaleLabelFontColor","labelRotationRadians","itemsToDraw","axisWidth","alignPixel","_alignPixel","lineColor","tx1","ty1","tx2","ty2","labelX","labelY","textOffset","zeroLineIndex","lineValue","getPixelForGridLine","labelYOffset","labelXOffset","glWidth","glColor","glBorderDash","glBorderDashOffset","itemToDraw","translate","scaleLabelX","scaleLabelY","halfLineHeight","isLeft","firstLineWidth","lastLineWidth","scale_category","getLabels","xLabels","yLabels","minIndex","maxIndex","valueCategory","offsetAmt","valueWidth","widthOffset","valueHeight","heightOffset","horz","valueDimension","_defaults","scale_linearbase","handleTickRangeOptions","minSign","sign","maxSign","setMin","suggestedMin","setMax","suggestedMax","getTickLimit","stepSize","ceil","_computeTickLimit","handleDirectionalChanges","numericGeneratorOptions","precision","fixedStepSize","generationOptions","dataRange","factor","niceMin","niceMax","numSpaces","unit","maxNumSpaces","rmin","rmax","spacing","niceNum","_decimalPlaces","almostWhole","almostEquals","generateTicks","ticksAsNumbers","defaultConfig$1","scale_linear","IDMatches","hasStacks","valuesPerStack","positiveValues","negativeValues","relativePoints","valuesForType","minVal","maxVal","innerDimension","_defaults$1","valueOrDefault$a","defaultConfig$2","nonNegativeOrDefault","scale_logarithmic","minNotZero","exp","significand","tickVal","endExp","endSignificand","lastTick","generateTicks$1","tickValues","_getFirstTickValue","firstTickValue","_defaults$2","valueOrDefault$b","valueAtIndexOrDefault$1","resolve$7","defaultConfig$3","animate","showLabelBackdrop","backdropColor","backdropPaddingY","backdropPaddingX","getValueCount","getTickBackdropHeight","determineLimits","getTextAlignForAngle","adjustPointPositionForLabelHeight","textSize","numberOrZero","param","scale_radialLinear","drawingArea","NEGATIVE_INFINITY","plFont","furthestLimits","furthestAngles","_pointLabelSizes","valueCount","getPointPosition","getIndexAngle","toDegrees","hLimits","vLimits","setReductions","fitWithPointLabels","setCenterPoint","largestPossibleRadius","radiusReductionLeft","radiusReductionRight","radiusReductionTop","radiusReductionBottom","leftMovement","rightMovement","topMovement","bottomMovement","maxRight","maxLeft","maxTop","maxBottom","angleMultiplier","startAngleRadians","scalingFactor","distanceFromCenter","thisAngle","getBasePosition","angleLineOpts","pointLabelOpts","tickBackdropHeight","outerDistance","outerPosition","extra","pointLabelPosition","pointLabelFontColor","drawPointLabels","yCenterOffset","drawRadiusLine","_defaults$3","valueOrDefault$c","MIN_INTEGER","MIN_SAFE_INTEGER","MAX_INTEGER","MAX_SAFE_INTEGER","INTERVALS","millisecond","common","steps","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","arrayUnique","hash","out","interpolate$1","table","skey","tkey","mid","i0","i1","lo","lookup","span","toTimestamp","input","adapter","_adapter","time","parser","determineMajorUnit","generate","capacity","timeOpts","minUnit","interval","determineUnitForAutoTicks","unitStepSize","weekday","isoWeekday","majorTicksEnabled","first","milliseconds","determineStepSize","scale_time","adapters","date","warn","displayFormats","timestamp","timestamps","dataLabels","_horizontal","_table","_timestamps","getLabelCapacity","_unit","determineUnitForFormatting","_majorUnit","distribution","buildLookupTable","_offsets","computeOffsets","majorUnit","ticksFromTimestamps","tooltipFormat","datetime","tickFormatFunction","minorFormat","majorFormat","majorTime","majorTickOpts","formatter","getPixelForOffset","isReverse","getLabelWidth","ticksOpts","tickLabelWidth","tickFontSize","exampleTime","exampleLabel","_defaults$4","displayFormat","category","radialLinear","FORMATS","_id","valueOf","_format","amount","as","filler","propagate","mappers","visible","boundary","decodeFill","computeBoundary","scaleBottom","scaleTop","scaleZero","resolveTarget","visited","createMapper","isDrawable","drawArea","curve0","curve1","len0","len1","plugin_filler","afterDatasetsUpdate","$filler","mapper","beforeDatasetDraw","loop","p0","p1","d0","d1","doFill","noop$1","valueOrDefault$d","getBoxWidth","labelOpts","usePointStyle","boxWidth","ci","onLeave","lineDash","Legend","legendHitBoxes","_hoveredItem","doughnutMode","beforeBuildLabels","buildLabels","afterBuildLabels","legendItems","labelFont","hitboxes","lineWidths","totalHeight","vPadding","columnWidths","totalWidth","currentColWidth","currentColHeight","itemHeight","itemWidth","lineDefault","legendWidth","cursor","textWidth","SQRT2","drawLegendBox","halfFontSize","xLeft","yMiddle","_getLegendItemAt","hitBox","lh","hoveredItem","createNewLegendAndAttach","legendOpts","plugin_legend","_element","beforeInit","afterEvent","noop$2","Title","lineCount","fontOpts","titleX","titleY","createNewTitleBlockAndAttach","titleOpts","titleBlock","parseMaxStyle","styleValue","parentProperty","valueInPixels","isConstrainedValue","getConstraintDimension","domNode","maxStyle","percentageProperty","defaultView","_getParentNode","constrainedNode","getComputedStyle","constrainedContainer","hasCNode","hasCContainer","infinity","collection","filterCallback","filtered","arrayToSearch","startIndex","currentItem","findPreviousWhere","epsilon","rounded","exponent","log","LOG10E","powerOf10","isPowerOf10","radians","centrePoint","anglePoint","distanceFromXCenter","distanceFromYCenter","radialDistanceFromCenter","aliasPixel","pixelWidth","currentDevicePixelRatio","halfWidth","firstPoint","middlePoint","afterPoint","d01","d12","s01","s12","fa","fb","EPSILON","pointBefore","pointCurrent","pointAfter","alphaK","betaK","tauK","squaredMagnitude","pointsWithTangents","deltaK","mK","pointsLen","slopeDeltaX","fraction","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","setTimeout","evt","originalEvent","srcElement","boundingRect","getBoundingClientRect","touches","clientX","clientY","getConstraintWidth","getConstraintHeight","_calculatePadding","parentDimension","parent","host","cw","clientHeight","ch","currentStyle","getPropertyValue","forceRatio","pixelRatio","pixelSize","arrayOfThings","gc","garbageCollect","longest","thing","nestedThing","gcLen","numberOfLines","CanvasGradient","colorValue","CanvasPattern","core_helpers","_adapters","Animation","animationService","Interaction","layouts","Scale","scaleService","Ticks","Tooltip","src","pluginService","PluginBase","canvasHelpers","layoutService","LinearScaleBase","klass","cfg","toLowerCase","factory","baseAssignValue","keyBy","createAggregator","arrayAggregator","baseAggregator","baseIteratee","setter","initializer","iteratee","accumulator","baseEach","baseForOwn","createBaseEach","baseFor","createBaseFor","fromRight","keysFunc","iterable","isArrayLike","eachFunc"],"mappings":"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","file":"static/js/11.4ee5c7d6.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  listTag: tagPropType,\n  className: PropTypes.string,\n  listClassName: PropTypes.string,\n  cssModule: PropTypes.object,\n  children: PropTypes.node,\n  'aria-label': PropTypes.string\n};\nvar defaultProps = {\n  tag: 'nav',\n  listTag: 'ol',\n  'aria-label': 'breadcrumb'\n};\n\nvar Breadcrumb = function Breadcrumb(props) {\n  var className = props.className,\n      listClassName = props.listClassName,\n      cssModule = props.cssModule,\n      children = props.children,\n      Tag = props.tag,\n      ListTag = props.listTag,\n      label = props['aria-label'],\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"listClassName\", \"cssModule\", \"children\", \"tag\", \"listTag\", \"aria-label\"]);\n\n  var classes = mapToCssModules(classNames(className), cssModule);\n  var listClasses = mapToCssModules(classNames('breadcrumb', listClassName), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    \"aria-label\": label\n  }), React.createElement(ListTag, {\n    className: listClasses\n  }, children));\n};\n\nBreadcrumb.propTypes = propTypes;\nBreadcrumb.defaultProps = defaultProps;\nexport default Breadcrumb;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  active: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'li'\n};\n\nvar BreadcrumbItem = function BreadcrumbItem(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      active = props.active,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"active\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, active ? 'active' : false, 'breadcrumb-item'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    \"aria-current\": active ? 'page' : undefined\n  }));\n};\n\nBreadcrumbItem.propTypes = propTypes;\nBreadcrumbItem.defaultProps = defaultProps;\nexport default BreadcrumbItem;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  inverse: PropTypes.bool,\n  color: PropTypes.string,\n  body: PropTypes.bool,\n  outline: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar Card = function Card(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      color = props.color,\n      body = props.body,\n      inverse = props.inverse,\n      outline = props.outline,\n      Tag = props.tag,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"color\", \"body\", \"inverse\", \"outline\", \"tag\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card', inverse ? 'text-white' : false, body ? 'card-body' : false, color ? (outline ? 'border' : 'bg') + \"-\" + color : false), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nCard.propTypes = propTypes;\nCard.defaultProps = defaultProps;\nexport default Card;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardBody = function CardBody(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      innerRef = props.innerRef,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"innerRef\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-body'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nCardBody.propTypes = propTypes;\nCardBody.defaultProps = defaultProps;\nexport default CardBody;","var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Chart from 'chart.js';\nimport isEqual from 'lodash/isEqual';\nimport keyBy from 'lodash/keyBy';\nvar NODE_ENV = typeof process !== 'undefined' && process.env && process.env.NODE_ENV;\n\nvar ChartComponent = function (_React$Component) {\n  _inherits(ChartComponent, _React$Component);\n\n  function ChartComponent() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, ChartComponent);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleOnClick = function (event) {\n      var instance = _this.chartInstance;\n      var _this$props = _this.props,\n          getDatasetAtEvent = _this$props.getDatasetAtEvent,\n          getElementAtEvent = _this$props.getElementAtEvent,\n          getElementsAtEvent = _this$props.getElementsAtEvent,\n          onElementsClick = _this$props.onElementsClick;\n      getDatasetAtEvent && getDatasetAtEvent(instance.getDatasetAtEvent(event), event);\n      getElementAtEvent && getElementAtEvent(instance.getElementAtEvent(event), event);\n      getElementsAtEvent && getElementsAtEvent(instance.getElementsAtEvent(event), event);\n      onElementsClick && onElementsClick(instance.getElementsAtEvent(event), event); // Backward compatibility\n    }, _this.ref = function (element) {\n      _this.element = element;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  ChartComponent.prototype.componentWillMount = function componentWillMount() {\n    this.chartInstance = undefined;\n  };\n\n  ChartComponent.prototype.componentDidMount = function componentDidMount() {\n    this.renderChart();\n  };\n\n  ChartComponent.prototype.componentDidUpdate = function componentDidUpdate() {\n    if (this.props.redraw) {\n      this.destroyChart();\n      this.renderChart();\n      return;\n    }\n\n    this.updateChart();\n  };\n\n  ChartComponent.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n    var _props = this.props,\n        redraw = _props.redraw,\n        type = _props.type,\n        options = _props.options,\n        plugins = _props.plugins,\n        legend = _props.legend,\n        height = _props.height,\n        width = _props.width;\n\n    if (nextProps.redraw === true) {\n      return true;\n    }\n\n    if (height !== nextProps.height || width !== nextProps.width) {\n      return true;\n    }\n\n    if (type !== nextProps.type) {\n      return true;\n    }\n\n    if (!isEqual(legend, nextProps.legend)) {\n      return true;\n    }\n\n    if (!isEqual(options, nextProps.options)) {\n      return true;\n    }\n\n    var nextData = this.transformDataProp(nextProps);\n\n    if (!isEqual(this.shadowDataProp, nextData)) {\n      return true;\n    }\n\n    return !isEqual(plugins, nextProps.plugins);\n  };\n\n  ChartComponent.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.destroyChart();\n  };\n\n  ChartComponent.prototype.transformDataProp = function transformDataProp(props) {\n    var data = props.data;\n\n    if (typeof data == 'function') {\n      var node = this.element;\n      return data(node);\n    } else {\n      return data;\n    }\n  }; // Chart.js directly mutates the data.dataset objects by adding _meta proprerty\n  // this makes impossible to compare the current and next data changes\n  // therefore we memoize the data prop while sending a fake to Chart.js for mutation.\n  // see https://github.com/chartjs/Chart.js/blob/master/src/core/core.controller.js#L615-L617\n\n\n  ChartComponent.prototype.memoizeDataProps = function memoizeDataProps() {\n    if (!this.props.data) {\n      return;\n    }\n\n    var data = this.transformDataProp(this.props);\n    this.shadowDataProp = _extends({}, data, {\n      datasets: data.datasets && data.datasets.map(function (set) {\n        return _extends({}, set);\n      })\n    });\n    this.saveCurrentDatasets(); // to remove the dataset metadata from this chart when the chart is destroyed\n\n    return data;\n  };\n\n  ChartComponent.prototype.checkDatasets = function checkDatasets(datasets) {\n    var isDev = NODE_ENV !== 'production' && NODE_ENV !== 'prod';\n    var usingCustomKeyProvider = this.props.datasetKeyProvider !== ChartComponent.getLabelAsKey;\n    var multipleDatasets = datasets.length > 1;\n\n    if (isDev && multipleDatasets && !usingCustomKeyProvider) {\n      var shouldWarn = false;\n      datasets.forEach(function (dataset) {\n        if (!dataset.label) {\n          shouldWarn = true;\n        }\n      });\n\n      if (shouldWarn) {\n        console.error('[react-chartjs-2] Warning: Each dataset needs a unique key. By default, the \"label\" property on each dataset is used. Alternatively, you may provide a \"datasetKeyProvider\" as a prop that returns a unique key.');\n      }\n    }\n  };\n\n  ChartComponent.prototype.getCurrentDatasets = function getCurrentDatasets() {\n    return this.chartInstance && this.chartInstance.config.data && this.chartInstance.config.data.datasets || [];\n  };\n\n  ChartComponent.prototype.saveCurrentDatasets = function saveCurrentDatasets() {\n    var _this2 = this;\n\n    this.datasets = this.datasets || {};\n    var currentDatasets = this.getCurrentDatasets();\n    currentDatasets.forEach(function (d) {\n      _this2.datasets[_this2.props.datasetKeyProvider(d)] = d;\n    });\n  };\n\n  ChartComponent.prototype.updateChart = function updateChart() {\n    var _this3 = this;\n\n    var options = this.props.options;\n    var data = this.memoizeDataProps(this.props);\n    if (!this.chartInstance) return;\n\n    if (options) {\n      this.chartInstance.options = Chart.helpers.configMerge(this.chartInstance.options, options);\n    } // Pipe datasets to chart instance datasets enabling\n    // seamless transitions\n\n\n    var currentDatasets = this.getCurrentDatasets();\n    var nextDatasets = data.datasets || [];\n    this.checkDatasets(currentDatasets);\n    var currentDatasetsIndexed = keyBy(currentDatasets, this.props.datasetKeyProvider); // We can safely replace the dataset array, as long as we retain the _meta property\n    // on each dataset.\n\n    this.chartInstance.config.data.datasets = nextDatasets.map(function (next) {\n      var current = currentDatasetsIndexed[_this3.props.datasetKeyProvider(next)];\n\n      if (current && current.type === next.type) {\n        // The data array must be edited in place. As chart.js adds listeners to it.\n        current.data.splice(next.data.length);\n        next.data.forEach(function (point, pid) {\n          current.data[pid] = next.data[pid];\n        });\n\n        var _data = next.data,\n            otherProps = _objectWithoutProperties(next, ['data']); // Merge properties. Notice a weakness here. If a property is removed\n        // from next, it will be retained by current and never disappears.\n        // Workaround is to set value to null or undefined in next.\n\n\n        return _extends({}, current, otherProps);\n      } else {\n        return next;\n      }\n    });\n\n    var datasets = data.datasets,\n        rest = _objectWithoutProperties(data, ['datasets']);\n\n    this.chartInstance.config.data = _extends({}, this.chartInstance.config.data, rest);\n    this.chartInstance.update();\n  };\n\n  ChartComponent.prototype.renderChart = function renderChart() {\n    var _props2 = this.props,\n        options = _props2.options,\n        legend = _props2.legend,\n        type = _props2.type,\n        plugins = _props2.plugins;\n    var node = this.element;\n    var data = this.memoizeDataProps();\n\n    if (typeof legend !== 'undefined' && !isEqual(ChartComponent.defaultProps.legend, legend)) {\n      options.legend = legend;\n    }\n\n    this.chartInstance = new Chart(node, {\n      type: type,\n      data: data,\n      options: options,\n      plugins: plugins\n    });\n  };\n\n  ChartComponent.prototype.destroyChart = function destroyChart() {\n    // Put all of the datasets that have existed in the chart back on the chart\n    // so that the metadata associated with this chart get destroyed.\n    // This allows the datasets to be used in another chart. This can happen,\n    // for example, in a tabbed UI where the chart gets created each time the\n    // tab gets switched to the chart and uses the same data).\n    this.saveCurrentDatasets();\n    var datasets = Object.values(this.datasets);\n    this.chartInstance.config.data.datasets = datasets;\n    this.chartInstance.destroy();\n  };\n\n  ChartComponent.prototype.render = function render() {\n    var _props3 = this.props,\n        height = _props3.height,\n        width = _props3.width,\n        id = _props3.id;\n    return React.createElement('canvas', {\n      ref: this.ref,\n      height: height,\n      width: width,\n      id: id,\n      onClick: this.handleOnClick\n    });\n  };\n\n  return ChartComponent;\n}(React.Component);\n\nChartComponent.getLabelAsKey = function (d) {\n  return d.label;\n};\n\nChartComponent.propTypes = {\n  data: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired,\n  getDatasetAtEvent: PropTypes.func,\n  getElementAtEvent: PropTypes.func,\n  getElementsAtEvent: PropTypes.func,\n  height: PropTypes.number,\n  legend: PropTypes.object,\n  onElementsClick: PropTypes.func,\n  options: PropTypes.object,\n  plugins: PropTypes.arrayOf(PropTypes.object),\n  redraw: PropTypes.bool,\n  type: function type(props, propName, componentName) {\n    if (!Chart.controllers[props[propName]]) {\n      return new Error('Invalid chart type `' + props[propName] + '` supplied to' + ' `' + componentName + '`.');\n    }\n  },\n  width: PropTypes.number,\n  datasetKeyProvider: PropTypes.func\n};\nChartComponent.defaultProps = {\n  legend: {\n    display: true,\n    position: 'bottom'\n  },\n  type: 'doughnut',\n  height: 150,\n  width: 300,\n  redraw: false,\n  options: {},\n  datasetKeyProvider: ChartComponent.getLabelAsKey\n};\nexport default ChartComponent;\nexport var Doughnut = function (_React$Component2) {\n  _inherits(Doughnut, _React$Component2);\n\n  function Doughnut() {\n    _classCallCheck(this, Doughnut);\n\n    return _possibleConstructorReturn(this, _React$Component2.apply(this, arguments));\n  }\n\n  Doughnut.prototype.render = function render() {\n    var _this5 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref) {\n        return _this5.chartInstance = _ref && _ref.chartInstance;\n      },\n      type: 'doughnut'\n    }));\n  };\n\n  return Doughnut;\n}(React.Component);\nexport var Pie = function (_React$Component3) {\n  _inherits(Pie, _React$Component3);\n\n  function Pie() {\n    _classCallCheck(this, Pie);\n\n    return _possibleConstructorReturn(this, _React$Component3.apply(this, arguments));\n  }\n\n  Pie.prototype.render = function render() {\n    var _this7 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref2) {\n        return _this7.chartInstance = _ref2 && _ref2.chartInstance;\n      },\n      type: 'pie'\n    }));\n  };\n\n  return Pie;\n}(React.Component);\nexport var Line = function (_React$Component4) {\n  _inherits(Line, _React$Component4);\n\n  function Line() {\n    _classCallCheck(this, Line);\n\n    return _possibleConstructorReturn(this, _React$Component4.apply(this, arguments));\n  }\n\n  Line.prototype.render = function render() {\n    var _this9 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref3) {\n        return _this9.chartInstance = _ref3 && _ref3.chartInstance;\n      },\n      type: 'line'\n    }));\n  };\n\n  return Line;\n}(React.Component);\nexport var Bar = function (_React$Component5) {\n  _inherits(Bar, _React$Component5);\n\n  function Bar() {\n    _classCallCheck(this, Bar);\n\n    return _possibleConstructorReturn(this, _React$Component5.apply(this, arguments));\n  }\n\n  Bar.prototype.render = function render() {\n    var _this11 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref4) {\n        return _this11.chartInstance = _ref4 && _ref4.chartInstance;\n      },\n      type: 'bar'\n    }));\n  };\n\n  return Bar;\n}(React.Component);\nexport var HorizontalBar = function (_React$Component6) {\n  _inherits(HorizontalBar, _React$Component6);\n\n  function HorizontalBar() {\n    _classCallCheck(this, HorizontalBar);\n\n    return _possibleConstructorReturn(this, _React$Component6.apply(this, arguments));\n  }\n\n  HorizontalBar.prototype.render = function render() {\n    var _this13 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref5) {\n        return _this13.chartInstance = _ref5 && _ref5.chartInstance;\n      },\n      type: 'horizontalBar'\n    }));\n  };\n\n  return HorizontalBar;\n}(React.Component);\nexport var Radar = function (_React$Component7) {\n  _inherits(Radar, _React$Component7);\n\n  function Radar() {\n    _classCallCheck(this, Radar);\n\n    return _possibleConstructorReturn(this, _React$Component7.apply(this, arguments));\n  }\n\n  Radar.prototype.render = function render() {\n    var _this15 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref6) {\n        return _this15.chartInstance = _ref6 && _ref6.chartInstance;\n      },\n      type: 'radar'\n    }));\n  };\n\n  return Radar;\n}(React.Component);\nexport var Polar = function (_React$Component8) {\n  _inherits(Polar, _React$Component8);\n\n  function Polar() {\n    _classCallCheck(this, Polar);\n\n    return _possibleConstructorReturn(this, _React$Component8.apply(this, arguments));\n  }\n\n  Polar.prototype.render = function render() {\n    var _this17 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref7) {\n        return _this17.chartInstance = _ref7 && _ref7.chartInstance;\n      },\n      type: 'polarArea'\n    }));\n  };\n\n  return Polar;\n}(React.Component);\nexport var Bubble = function (_React$Component9) {\n  _inherits(Bubble, _React$Component9);\n\n  function Bubble() {\n    _classCallCheck(this, Bubble);\n\n    return _possibleConstructorReturn(this, _React$Component9.apply(this, arguments));\n  }\n\n  Bubble.prototype.render = function render() {\n    var _this19 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref8) {\n        return _this19.chartInstance = _ref8 && _ref8.chartInstance;\n      },\n      type: 'bubble'\n    }));\n  };\n\n  return Bubble;\n}(React.Component);\nexport var Scatter = function (_React$Component10) {\n  _inherits(Scatter, _React$Component10);\n\n  function Scatter() {\n    _classCallCheck(this, Scatter);\n\n    return _possibleConstructorReturn(this, _React$Component10.apply(this, arguments));\n  }\n\n  Scatter.prototype.render = function render() {\n    var _this21 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref9) {\n        return _this21.chartInstance = _ref9 && _ref9.chartInstance;\n      },\n      type: 'scatter'\n    }));\n  };\n\n  return Scatter;\n}(React.Component);\nexport var defaults = Chart.defaults;\nexport { Chart };","/*!\n * Chart.js v2.8.0\n * https://www.chartjs.org\n * (c) 2019 Chart.js Contributors\n * Released under the MIT License\n */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(function () {\n    try {\n      return require('moment');\n    } catch (e) {}\n  }()) : typeof define === 'function' && define.amd ? define(['require'], function (require) {\n    return factory(function () {\n      try {\n        return require('moment');\n      } catch (e) {}\n    }());\n  }) : global.Chart = factory(global.moment);\n})(this, function (moment) {\n  'use strict';\n\n  moment = moment && moment.hasOwnProperty('default') ? moment['default'] : moment;\n  /* MIT license */\n\n  var conversions = {\n    rgb2hsl: rgb2hsl,\n    rgb2hsv: rgb2hsv,\n    rgb2hwb: rgb2hwb,\n    rgb2cmyk: rgb2cmyk,\n    rgb2keyword: rgb2keyword,\n    rgb2xyz: rgb2xyz,\n    rgb2lab: rgb2lab,\n    rgb2lch: rgb2lch,\n    hsl2rgb: hsl2rgb,\n    hsl2hsv: hsl2hsv,\n    hsl2hwb: hsl2hwb,\n    hsl2cmyk: hsl2cmyk,\n    hsl2keyword: hsl2keyword,\n    hsv2rgb: hsv2rgb,\n    hsv2hsl: hsv2hsl,\n    hsv2hwb: hsv2hwb,\n    hsv2cmyk: hsv2cmyk,\n    hsv2keyword: hsv2keyword,\n    hwb2rgb: hwb2rgb,\n    hwb2hsl: hwb2hsl,\n    hwb2hsv: hwb2hsv,\n    hwb2cmyk: hwb2cmyk,\n    hwb2keyword: hwb2keyword,\n    cmyk2rgb: cmyk2rgb,\n    cmyk2hsl: cmyk2hsl,\n    cmyk2hsv: cmyk2hsv,\n    cmyk2hwb: cmyk2hwb,\n    cmyk2keyword: cmyk2keyword,\n    keyword2rgb: keyword2rgb,\n    keyword2hsl: keyword2hsl,\n    keyword2hsv: keyword2hsv,\n    keyword2hwb: keyword2hwb,\n    keyword2cmyk: keyword2cmyk,\n    keyword2lab: keyword2lab,\n    keyword2xyz: keyword2xyz,\n    xyz2rgb: xyz2rgb,\n    xyz2lab: xyz2lab,\n    xyz2lch: xyz2lch,\n    lab2xyz: lab2xyz,\n    lab2rgb: lab2rgb,\n    lab2lch: lab2lch,\n    lch2lab: lch2lab,\n    lch2xyz: lch2xyz,\n    lch2rgb: lch2rgb\n  };\n\n  function rgb2hsl(rgb) {\n    var r = rgb[0] / 255,\n        g = rgb[1] / 255,\n        b = rgb[2] / 255,\n        min = Math.min(r, g, b),\n        max = Math.max(r, g, b),\n        delta = max - min,\n        h,\n        s,\n        l;\n    if (max == min) h = 0;else if (r == max) h = (g - b) / delta;else if (g == max) h = 2 + (b - r) / delta;else if (b == max) h = 4 + (r - g) / delta;\n    h = Math.min(h * 60, 360);\n    if (h < 0) h += 360;\n    l = (min + max) / 2;\n    if (max == min) s = 0;else if (l <= 0.5) s = delta / (max + min);else s = delta / (2 - max - min);\n    return [h, s * 100, l * 100];\n  }\n\n  function rgb2hsv(rgb) {\n    var r = rgb[0],\n        g = rgb[1],\n        b = rgb[2],\n        min = Math.min(r, g, b),\n        max = Math.max(r, g, b),\n        delta = max - min,\n        h,\n        s,\n        v;\n    if (max == 0) s = 0;else s = delta / max * 1000 / 10;\n    if (max == min) h = 0;else if (r == max) h = (g - b) / delta;else if (g == max) h = 2 + (b - r) / delta;else if (b == max) h = 4 + (r - g) / delta;\n    h = Math.min(h * 60, 360);\n    if (h < 0) h += 360;\n    v = max / 255 * 1000 / 10;\n    return [h, s, v];\n  }\n\n  function rgb2hwb(rgb) {\n    var r = rgb[0],\n        g = rgb[1],\n        b = rgb[2],\n        h = rgb2hsl(rgb)[0],\n        w = 1 / 255 * Math.min(r, Math.min(g, b)),\n        b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n    return [h, w * 100, b * 100];\n  }\n\n  function rgb2cmyk(rgb) {\n    var r = rgb[0] / 255,\n        g = rgb[1] / 255,\n        b = rgb[2] / 255,\n        c,\n        m,\n        y,\n        k;\n    k = Math.min(1 - r, 1 - g, 1 - b);\n    c = (1 - r - k) / (1 - k) || 0;\n    m = (1 - g - k) / (1 - k) || 0;\n    y = (1 - b - k) / (1 - k) || 0;\n    return [c * 100, m * 100, y * 100, k * 100];\n  }\n\n  function rgb2keyword(rgb) {\n    return reverseKeywords[JSON.stringify(rgb)];\n  }\n\n  function rgb2xyz(rgb) {\n    var r = rgb[0] / 255,\n        g = rgb[1] / 255,\n        b = rgb[2] / 255; // assume sRGB\n\n    r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\n    g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\n    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;\n    var x = r * 0.4124 + g * 0.3576 + b * 0.1805;\n    var y = r * 0.2126 + g * 0.7152 + b * 0.0722;\n    var z = r * 0.0193 + g * 0.1192 + b * 0.9505;\n    return [x * 100, y * 100, z * 100];\n  }\n\n  function rgb2lab(rgb) {\n    var xyz = rgb2xyz(rgb),\n        x = xyz[0],\n        y = xyz[1],\n        z = xyz[2],\n        l,\n        a,\n        b;\n    x /= 95.047;\n    y /= 100;\n    z /= 108.883;\n    x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\n    y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\n    z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\n    l = 116 * y - 16;\n    a = 500 * (x - y);\n    b = 200 * (y - z);\n    return [l, a, b];\n  }\n\n  function rgb2lch(args) {\n    return lab2lch(rgb2lab(args));\n  }\n\n  function hsl2rgb(hsl) {\n    var h = hsl[0] / 360,\n        s = hsl[1] / 100,\n        l = hsl[2] / 100,\n        t1,\n        t2,\n        t3,\n        rgb,\n        val;\n\n    if (s == 0) {\n      val = l * 255;\n      return [val, val, val];\n    }\n\n    if (l < 0.5) t2 = l * (1 + s);else t2 = l + s - l * s;\n    t1 = 2 * l - t2;\n    rgb = [0, 0, 0];\n\n    for (var i = 0; i < 3; i++) {\n      t3 = h + 1 / 3 * -(i - 1);\n      t3 < 0 && t3++;\n      t3 > 1 && t3--;\n      if (6 * t3 < 1) val = t1 + (t2 - t1) * 6 * t3;else if (2 * t3 < 1) val = t2;else if (3 * t3 < 2) val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;else val = t1;\n      rgb[i] = val * 255;\n    }\n\n    return rgb;\n  }\n\n  function hsl2hsv(hsl) {\n    var h = hsl[0],\n        s = hsl[1] / 100,\n        l = hsl[2] / 100,\n        sv,\n        v;\n\n    if (l === 0) {\n      // no need to do calc on black\n      // also avoids divide by 0 error\n      return [0, 0, 0];\n    }\n\n    l *= 2;\n    s *= l <= 1 ? l : 2 - l;\n    v = (l + s) / 2;\n    sv = 2 * s / (l + s);\n    return [h, sv * 100, v * 100];\n  }\n\n  function hsl2hwb(args) {\n    return rgb2hwb(hsl2rgb(args));\n  }\n\n  function hsl2cmyk(args) {\n    return rgb2cmyk(hsl2rgb(args));\n  }\n\n  function hsl2keyword(args) {\n    return rgb2keyword(hsl2rgb(args));\n  }\n\n  function hsv2rgb(hsv) {\n    var h = hsv[0] / 60,\n        s = hsv[1] / 100,\n        v = hsv[2] / 100,\n        hi = Math.floor(h) % 6;\n    var f = h - Math.floor(h),\n        p = 255 * v * (1 - s),\n        q = 255 * v * (1 - s * f),\n        t = 255 * v * (1 - s * (1 - f)),\n        v = 255 * v;\n\n    switch (hi) {\n      case 0:\n        return [v, t, p];\n\n      case 1:\n        return [q, v, p];\n\n      case 2:\n        return [p, v, t];\n\n      case 3:\n        return [p, q, v];\n\n      case 4:\n        return [t, p, v];\n\n      case 5:\n        return [v, p, q];\n    }\n  }\n\n  function hsv2hsl(hsv) {\n    var h = hsv[0],\n        s = hsv[1] / 100,\n        v = hsv[2] / 100,\n        sl,\n        l;\n    l = (2 - s) * v;\n    sl = s * v;\n    sl /= l <= 1 ? l : 2 - l;\n    sl = sl || 0;\n    l /= 2;\n    return [h, sl * 100, l * 100];\n  }\n\n  function hsv2hwb(args) {\n    return rgb2hwb(hsv2rgb(args));\n  }\n\n  function hsv2cmyk(args) {\n    return rgb2cmyk(hsv2rgb(args));\n  }\n\n  function hsv2keyword(args) {\n    return rgb2keyword(hsv2rgb(args));\n  } // http://dev.w3.org/csswg/css-color/#hwb-to-rgb\n\n\n  function hwb2rgb(hwb) {\n    var h = hwb[0] / 360,\n        wh = hwb[1] / 100,\n        bl = hwb[2] / 100,\n        ratio = wh + bl,\n        i,\n        v,\n        f,\n        n; // wh + bl cant be > 1\n\n    if (ratio > 1) {\n      wh /= ratio;\n      bl /= ratio;\n    }\n\n    i = Math.floor(6 * h);\n    v = 1 - bl;\n    f = 6 * h - i;\n\n    if ((i & 0x01) != 0) {\n      f = 1 - f;\n    }\n\n    n = wh + f * (v - wh); // linear interpolation\n\n    switch (i) {\n      default:\n      case 6:\n      case 0:\n        r = v;\n        g = n;\n        b = wh;\n        break;\n\n      case 1:\n        r = n;\n        g = v;\n        b = wh;\n        break;\n\n      case 2:\n        r = wh;\n        g = v;\n        b = n;\n        break;\n\n      case 3:\n        r = wh;\n        g = n;\n        b = v;\n        break;\n\n      case 4:\n        r = n;\n        g = wh;\n        b = v;\n        break;\n\n      case 5:\n        r = v;\n        g = wh;\n        b = n;\n        break;\n    }\n\n    return [r * 255, g * 255, b * 255];\n  }\n\n  function hwb2hsl(args) {\n    return rgb2hsl(hwb2rgb(args));\n  }\n\n  function hwb2hsv(args) {\n    return rgb2hsv(hwb2rgb(args));\n  }\n\n  function hwb2cmyk(args) {\n    return rgb2cmyk(hwb2rgb(args));\n  }\n\n  function hwb2keyword(args) {\n    return rgb2keyword(hwb2rgb(args));\n  }\n\n  function cmyk2rgb(cmyk) {\n    var c = cmyk[0] / 100,\n        m = cmyk[1] / 100,\n        y = cmyk[2] / 100,\n        k = cmyk[3] / 100,\n        r,\n        g,\n        b;\n    r = 1 - Math.min(1, c * (1 - k) + k);\n    g = 1 - Math.min(1, m * (1 - k) + k);\n    b = 1 - Math.min(1, y * (1 - k) + k);\n    return [r * 255, g * 255, b * 255];\n  }\n\n  function cmyk2hsl(args) {\n    return rgb2hsl(cmyk2rgb(args));\n  }\n\n  function cmyk2hsv(args) {\n    return rgb2hsv(cmyk2rgb(args));\n  }\n\n  function cmyk2hwb(args) {\n    return rgb2hwb(cmyk2rgb(args));\n  }\n\n  function cmyk2keyword(args) {\n    return rgb2keyword(cmyk2rgb(args));\n  }\n\n  function xyz2rgb(xyz) {\n    var x = xyz[0] / 100,\n        y = xyz[1] / 100,\n        z = xyz[2] / 100,\n        r,\n        g,\n        b;\n    r = x * 3.2406 + y * -1.5372 + z * -0.4986;\n    g = x * -0.9689 + y * 1.8758 + z * 0.0415;\n    b = x * 0.0557 + y * -0.2040 + z * 1.0570; // assume sRGB\n\n    r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r = r * 12.92;\n    g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g = g * 12.92;\n    b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b = b * 12.92;\n    r = Math.min(Math.max(0, r), 1);\n    g = Math.min(Math.max(0, g), 1);\n    b = Math.min(Math.max(0, b), 1);\n    return [r * 255, g * 255, b * 255];\n  }\n\n  function xyz2lab(xyz) {\n    var x = xyz[0],\n        y = xyz[1],\n        z = xyz[2],\n        l,\n        a,\n        b;\n    x /= 95.047;\n    y /= 100;\n    z /= 108.883;\n    x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\n    y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\n    z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\n    l = 116 * y - 16;\n    a = 500 * (x - y);\n    b = 200 * (y - z);\n    return [l, a, b];\n  }\n\n  function xyz2lch(args) {\n    return lab2lch(xyz2lab(args));\n  }\n\n  function lab2xyz(lab) {\n    var l = lab[0],\n        a = lab[1],\n        b = lab[2],\n        x,\n        y,\n        z,\n        y2;\n\n    if (l <= 8) {\n      y = l * 100 / 903.3;\n      y2 = 7.787 * (y / 100) + 16 / 116;\n    } else {\n      y = 100 * Math.pow((l + 16) / 116, 3);\n      y2 = Math.pow(y / 100, 1 / 3);\n    }\n\n    x = x / 95.047 <= 0.008856 ? x = 95.047 * (a / 500 + y2 - 16 / 116) / 7.787 : 95.047 * Math.pow(a / 500 + y2, 3);\n    z = z / 108.883 <= 0.008859 ? z = 108.883 * (y2 - b / 200 - 16 / 116) / 7.787 : 108.883 * Math.pow(y2 - b / 200, 3);\n    return [x, y, z];\n  }\n\n  function lab2lch(lab) {\n    var l = lab[0],\n        a = lab[1],\n        b = lab[2],\n        hr,\n        h,\n        c;\n    hr = Math.atan2(b, a);\n    h = hr * 360 / 2 / Math.PI;\n\n    if (h < 0) {\n      h += 360;\n    }\n\n    c = Math.sqrt(a * a + b * b);\n    return [l, c, h];\n  }\n\n  function lab2rgb(args) {\n    return xyz2rgb(lab2xyz(args));\n  }\n\n  function lch2lab(lch) {\n    var l = lch[0],\n        c = lch[1],\n        h = lch[2],\n        a,\n        b,\n        hr;\n    hr = h / 360 * 2 * Math.PI;\n    a = c * Math.cos(hr);\n    b = c * Math.sin(hr);\n    return [l, a, b];\n  }\n\n  function lch2xyz(args) {\n    return lab2xyz(lch2lab(args));\n  }\n\n  function lch2rgb(args) {\n    return lab2rgb(lch2lab(args));\n  }\n\n  function keyword2rgb(keyword) {\n    return cssKeywords[keyword];\n  }\n\n  function keyword2hsl(args) {\n    return rgb2hsl(keyword2rgb(args));\n  }\n\n  function keyword2hsv(args) {\n    return rgb2hsv(keyword2rgb(args));\n  }\n\n  function keyword2hwb(args) {\n    return rgb2hwb(keyword2rgb(args));\n  }\n\n  function keyword2cmyk(args) {\n    return rgb2cmyk(keyword2rgb(args));\n  }\n\n  function keyword2lab(args) {\n    return rgb2lab(keyword2rgb(args));\n  }\n\n  function keyword2xyz(args) {\n    return rgb2xyz(keyword2rgb(args));\n  }\n\n  var cssKeywords = {\n    aliceblue: [240, 248, 255],\n    antiquewhite: [250, 235, 215],\n    aqua: [0, 255, 255],\n    aquamarine: [127, 255, 212],\n    azure: [240, 255, 255],\n    beige: [245, 245, 220],\n    bisque: [255, 228, 196],\n    black: [0, 0, 0],\n    blanchedalmond: [255, 235, 205],\n    blue: [0, 0, 255],\n    blueviolet: [138, 43, 226],\n    brown: [165, 42, 42],\n    burlywood: [222, 184, 135],\n    cadetblue: [95, 158, 160],\n    chartreuse: [127, 255, 0],\n    chocolate: [210, 105, 30],\n    coral: [255, 127, 80],\n    cornflowerblue: [100, 149, 237],\n    cornsilk: [255, 248, 220],\n    crimson: [220, 20, 60],\n    cyan: [0, 255, 255],\n    darkblue: [0, 0, 139],\n    darkcyan: [0, 139, 139],\n    darkgoldenrod: [184, 134, 11],\n    darkgray: [169, 169, 169],\n    darkgreen: [0, 100, 0],\n    darkgrey: [169, 169, 169],\n    darkkhaki: [189, 183, 107],\n    darkmagenta: [139, 0, 139],\n    darkolivegreen: [85, 107, 47],\n    darkorange: [255, 140, 0],\n    darkorchid: [153, 50, 204],\n    darkred: [139, 0, 0],\n    darksalmon: [233, 150, 122],\n    darkseagreen: [143, 188, 143],\n    darkslateblue: [72, 61, 139],\n    darkslategray: [47, 79, 79],\n    darkslategrey: [47, 79, 79],\n    darkturquoise: [0, 206, 209],\n    darkviolet: [148, 0, 211],\n    deeppink: [255, 20, 147],\n    deepskyblue: [0, 191, 255],\n    dimgray: [105, 105, 105],\n    dimgrey: [105, 105, 105],\n    dodgerblue: [30, 144, 255],\n    firebrick: [178, 34, 34],\n    floralwhite: [255, 250, 240],\n    forestgreen: [34, 139, 34],\n    fuchsia: [255, 0, 255],\n    gainsboro: [220, 220, 220],\n    ghostwhite: [248, 248, 255],\n    gold: [255, 215, 0],\n    goldenrod: [218, 165, 32],\n    gray: [128, 128, 128],\n    green: [0, 128, 0],\n    greenyellow: [173, 255, 47],\n    grey: [128, 128, 128],\n    honeydew: [240, 255, 240],\n    hotpink: [255, 105, 180],\n    indianred: [205, 92, 92],\n    indigo: [75, 0, 130],\n    ivory: [255, 255, 240],\n    khaki: [240, 230, 140],\n    lavender: [230, 230, 250],\n    lavenderblush: [255, 240, 245],\n    lawngreen: [124, 252, 0],\n    lemonchiffon: [255, 250, 205],\n    lightblue: [173, 216, 230],\n    lightcoral: [240, 128, 128],\n    lightcyan: [224, 255, 255],\n    lightgoldenrodyellow: [250, 250, 210],\n    lightgray: [211, 211, 211],\n    lightgreen: [144, 238, 144],\n    lightgrey: [211, 211, 211],\n    lightpink: [255, 182, 193],\n    lightsalmon: [255, 160, 122],\n    lightseagreen: [32, 178, 170],\n    lightskyblue: [135, 206, 250],\n    lightslategray: [119, 136, 153],\n    lightslategrey: [119, 136, 153],\n    lightsteelblue: [176, 196, 222],\n    lightyellow: [255, 255, 224],\n    lime: [0, 255, 0],\n    limegreen: [50, 205, 50],\n    linen: [250, 240, 230],\n    magenta: [255, 0, 255],\n    maroon: [128, 0, 0],\n    mediumaquamarine: [102, 205, 170],\n    mediumblue: [0, 0, 205],\n    mediumorchid: [186, 85, 211],\n    mediumpurple: [147, 112, 219],\n    mediumseagreen: [60, 179, 113],\n    mediumslateblue: [123, 104, 238],\n    mediumspringgreen: [0, 250, 154],\n    mediumturquoise: [72, 209, 204],\n    mediumvioletred: [199, 21, 133],\n    midnightblue: [25, 25, 112],\n    mintcream: [245, 255, 250],\n    mistyrose: [255, 228, 225],\n    moccasin: [255, 228, 181],\n    navajowhite: [255, 222, 173],\n    navy: [0, 0, 128],\n    oldlace: [253, 245, 230],\n    olive: [128, 128, 0],\n    olivedrab: [107, 142, 35],\n    orange: [255, 165, 0],\n    orangered: [255, 69, 0],\n    orchid: [218, 112, 214],\n    palegoldenrod: [238, 232, 170],\n    palegreen: [152, 251, 152],\n    paleturquoise: [175, 238, 238],\n    palevioletred: [219, 112, 147],\n    papayawhip: [255, 239, 213],\n    peachpuff: [255, 218, 185],\n    peru: [205, 133, 63],\n    pink: [255, 192, 203],\n    plum: [221, 160, 221],\n    powderblue: [176, 224, 230],\n    purple: [128, 0, 128],\n    rebeccapurple: [102, 51, 153],\n    red: [255, 0, 0],\n    rosybrown: [188, 143, 143],\n    royalblue: [65, 105, 225],\n    saddlebrown: [139, 69, 19],\n    salmon: [250, 128, 114],\n    sandybrown: [244, 164, 96],\n    seagreen: [46, 139, 87],\n    seashell: [255, 245, 238],\n    sienna: [160, 82, 45],\n    silver: [192, 192, 192],\n    skyblue: [135, 206, 235],\n    slateblue: [106, 90, 205],\n    slategray: [112, 128, 144],\n    slategrey: [112, 128, 144],\n    snow: [255, 250, 250],\n    springgreen: [0, 255, 127],\n    steelblue: [70, 130, 180],\n    tan: [210, 180, 140],\n    teal: [0, 128, 128],\n    thistle: [216, 191, 216],\n    tomato: [255, 99, 71],\n    turquoise: [64, 224, 208],\n    violet: [238, 130, 238],\n    wheat: [245, 222, 179],\n    white: [255, 255, 255],\n    whitesmoke: [245, 245, 245],\n    yellow: [255, 255, 0],\n    yellowgreen: [154, 205, 50]\n  };\n  var reverseKeywords = {};\n\n  for (var key in cssKeywords) {\n    reverseKeywords[JSON.stringify(cssKeywords[key])] = key;\n  }\n\n  var convert = function convert() {\n    return new Converter();\n  };\n\n  for (var func in conversions) {\n    // export Raw versions\n    convert[func + \"Raw\"] = function (func) {\n      // accept array or plain args\n      return function (arg) {\n        if (typeof arg == \"number\") arg = Array.prototype.slice.call(arguments);\n        return conversions[func](arg);\n      };\n    }(func);\n\n    var pair = /(\\w+)2(\\w+)/.exec(func),\n        from = pair[1],\n        to = pair[2]; // export rgb2hsl and [\"rgb\"][\"hsl\"]\n\n    convert[from] = convert[from] || {};\n\n    convert[from][to] = convert[func] = function (func) {\n      return function (arg) {\n        if (typeof arg == \"number\") arg = Array.prototype.slice.call(arguments);\n        var val = conversions[func](arg);\n        if (typeof val == \"string\" || val === undefined) return val; // keyword\n\n        for (var i = 0; i < val.length; i++) {\n          val[i] = Math.round(val[i]);\n        }\n\n        return val;\n      };\n    }(func);\n  }\n  /* Converter does lazy conversion and caching */\n\n\n  var Converter = function Converter() {\n    this.convs = {};\n  };\n  /* Either get the values for a space or\n    set the values for a space, depending on args */\n\n\n  Converter.prototype.routeSpace = function (space, args) {\n    var values = args[0];\n\n    if (values === undefined) {\n      // color.rgb()\n      return this.getValues(space);\n    } // color.rgb(10, 10, 10)\n\n\n    if (typeof values == \"number\") {\n      values = Array.prototype.slice.call(args);\n    }\n\n    return this.setValues(space, values);\n  };\n  /* Set the values for a space, invalidating cache */\n\n\n  Converter.prototype.setValues = function (space, values) {\n    this.space = space;\n    this.convs = {};\n    this.convs[space] = values;\n    return this;\n  };\n  /* Get the values for a space. If there's already\n    a conversion for the space, fetch it, otherwise\n    compute it */\n\n\n  Converter.prototype.getValues = function (space) {\n    var vals = this.convs[space];\n\n    if (!vals) {\n      var fspace = this.space,\n          from = this.convs[fspace];\n      vals = convert[fspace][space](from);\n      this.convs[space] = vals;\n    }\n\n    return vals;\n  };\n\n  [\"rgb\", \"hsl\", \"hsv\", \"cmyk\", \"keyword\"].forEach(function (space) {\n    Converter.prototype[space] = function (vals) {\n      return this.routeSpace(space, arguments);\n    };\n  });\n  var colorConvert = convert;\n  var colorName = {\n    \"aliceblue\": [240, 248, 255],\n    \"antiquewhite\": [250, 235, 215],\n    \"aqua\": [0, 255, 255],\n    \"aquamarine\": [127, 255, 212],\n    \"azure\": [240, 255, 255],\n    \"beige\": [245, 245, 220],\n    \"bisque\": [255, 228, 196],\n    \"black\": [0, 0, 0],\n    \"blanchedalmond\": [255, 235, 205],\n    \"blue\": [0, 0, 255],\n    \"blueviolet\": [138, 43, 226],\n    \"brown\": [165, 42, 42],\n    \"burlywood\": [222, 184, 135],\n    \"cadetblue\": [95, 158, 160],\n    \"chartreuse\": [127, 255, 0],\n    \"chocolate\": [210, 105, 30],\n    \"coral\": [255, 127, 80],\n    \"cornflowerblue\": [100, 149, 237],\n    \"cornsilk\": [255, 248, 220],\n    \"crimson\": [220, 20, 60],\n    \"cyan\": [0, 255, 255],\n    \"darkblue\": [0, 0, 139],\n    \"darkcyan\": [0, 139, 139],\n    \"darkgoldenrod\": [184, 134, 11],\n    \"darkgray\": [169, 169, 169],\n    \"darkgreen\": [0, 100, 0],\n    \"darkgrey\": [169, 169, 169],\n    \"darkkhaki\": [189, 183, 107],\n    \"darkmagenta\": [139, 0, 139],\n    \"darkolivegreen\": [85, 107, 47],\n    \"darkorange\": [255, 140, 0],\n    \"darkorchid\": [153, 50, 204],\n    \"darkred\": [139, 0, 0],\n    \"darksalmon\": [233, 150, 122],\n    \"darkseagreen\": [143, 188, 143],\n    \"darkslateblue\": [72, 61, 139],\n    \"darkslategray\": [47, 79, 79],\n    \"darkslategrey\": [47, 79, 79],\n    \"darkturquoise\": [0, 206, 209],\n    \"darkviolet\": [148, 0, 211],\n    \"deeppink\": [255, 20, 147],\n    \"deepskyblue\": [0, 191, 255],\n    \"dimgray\": [105, 105, 105],\n    \"dimgrey\": [105, 105, 105],\n    \"dodgerblue\": [30, 144, 255],\n    \"firebrick\": [178, 34, 34],\n    \"floralwhite\": [255, 250, 240],\n    \"forestgreen\": [34, 139, 34],\n    \"fuchsia\": [255, 0, 255],\n    \"gainsboro\": [220, 220, 220],\n    \"ghostwhite\": [248, 248, 255],\n    \"gold\": [255, 215, 0],\n    \"goldenrod\": [218, 165, 32],\n    \"gray\": [128, 128, 128],\n    \"green\": [0, 128, 0],\n    \"greenyellow\": [173, 255, 47],\n    \"grey\": [128, 128, 128],\n    \"honeydew\": [240, 255, 240],\n    \"hotpink\": [255, 105, 180],\n    \"indianred\": [205, 92, 92],\n    \"indigo\": [75, 0, 130],\n    \"ivory\": [255, 255, 240],\n    \"khaki\": [240, 230, 140],\n    \"lavender\": [230, 230, 250],\n    \"lavenderblush\": [255, 240, 245],\n    \"lawngreen\": [124, 252, 0],\n    \"lemonchiffon\": [255, 250, 205],\n    \"lightblue\": [173, 216, 230],\n    \"lightcoral\": [240, 128, 128],\n    \"lightcyan\": [224, 255, 255],\n    \"lightgoldenrodyellow\": [250, 250, 210],\n    \"lightgray\": [211, 211, 211],\n    \"lightgreen\": [144, 238, 144],\n    \"lightgrey\": [211, 211, 211],\n    \"lightpink\": [255, 182, 193],\n    \"lightsalmon\": [255, 160, 122],\n    \"lightseagreen\": [32, 178, 170],\n    \"lightskyblue\": [135, 206, 250],\n    \"lightslategray\": [119, 136, 153],\n    \"lightslategrey\": [119, 136, 153],\n    \"lightsteelblue\": [176, 196, 222],\n    \"lightyellow\": [255, 255, 224],\n    \"lime\": [0, 255, 0],\n    \"limegreen\": [50, 205, 50],\n    \"linen\": [250, 240, 230],\n    \"magenta\": [255, 0, 255],\n    \"maroon\": [128, 0, 0],\n    \"mediumaquamarine\": [102, 205, 170],\n    \"mediumblue\": [0, 0, 205],\n    \"mediumorchid\": [186, 85, 211],\n    \"mediumpurple\": [147, 112, 219],\n    \"mediumseagreen\": [60, 179, 113],\n    \"mediumslateblue\": [123, 104, 238],\n    \"mediumspringgreen\": [0, 250, 154],\n    \"mediumturquoise\": [72, 209, 204],\n    \"mediumvioletred\": [199, 21, 133],\n    \"midnightblue\": [25, 25, 112],\n    \"mintcream\": [245, 255, 250],\n    \"mistyrose\": [255, 228, 225],\n    \"moccasin\": [255, 228, 181],\n    \"navajowhite\": [255, 222, 173],\n    \"navy\": [0, 0, 128],\n    \"oldlace\": [253, 245, 230],\n    \"olive\": [128, 128, 0],\n    \"olivedrab\": [107, 142, 35],\n    \"orange\": [255, 165, 0],\n    \"orangered\": [255, 69, 0],\n    \"orchid\": [218, 112, 214],\n    \"palegoldenrod\": [238, 232, 170],\n    \"palegreen\": [152, 251, 152],\n    \"paleturquoise\": [175, 238, 238],\n    \"palevioletred\": [219, 112, 147],\n    \"papayawhip\": [255, 239, 213],\n    \"peachpuff\": [255, 218, 185],\n    \"peru\": [205, 133, 63],\n    \"pink\": [255, 192, 203],\n    \"plum\": [221, 160, 221],\n    \"powderblue\": [176, 224, 230],\n    \"purple\": [128, 0, 128],\n    \"rebeccapurple\": [102, 51, 153],\n    \"red\": [255, 0, 0],\n    \"rosybrown\": [188, 143, 143],\n    \"royalblue\": [65, 105, 225],\n    \"saddlebrown\": [139, 69, 19],\n    \"salmon\": [250, 128, 114],\n    \"sandybrown\": [244, 164, 96],\n    \"seagreen\": [46, 139, 87],\n    \"seashell\": [255, 245, 238],\n    \"sienna\": [160, 82, 45],\n    \"silver\": [192, 192, 192],\n    \"skyblue\": [135, 206, 235],\n    \"slateblue\": [106, 90, 205],\n    \"slategray\": [112, 128, 144],\n    \"slategrey\": [112, 128, 144],\n    \"snow\": [255, 250, 250],\n    \"springgreen\": [0, 255, 127],\n    \"steelblue\": [70, 130, 180],\n    \"tan\": [210, 180, 140],\n    \"teal\": [0, 128, 128],\n    \"thistle\": [216, 191, 216],\n    \"tomato\": [255, 99, 71],\n    \"turquoise\": [64, 224, 208],\n    \"violet\": [238, 130, 238],\n    \"wheat\": [245, 222, 179],\n    \"white\": [255, 255, 255],\n    \"whitesmoke\": [245, 245, 245],\n    \"yellow\": [255, 255, 0],\n    \"yellowgreen\": [154, 205, 50]\n  };\n  /* MIT license */\n\n  var colorString = {\n    getRgba: getRgba,\n    getHsla: getHsla,\n    getRgb: getRgb,\n    getHsl: getHsl,\n    getHwb: getHwb,\n    getAlpha: getAlpha,\n    hexString: hexString,\n    rgbString: rgbString,\n    rgbaString: rgbaString,\n    percentString: percentString,\n    percentaString: percentaString,\n    hslString: hslString,\n    hslaString: hslaString,\n    hwbString: hwbString,\n    keyword: keyword\n  };\n\n  function getRgba(string) {\n    if (!string) {\n      return;\n    }\n\n    var abbr = /^#([a-fA-F0-9]{3,4})$/i,\n        hex = /^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i,\n        rgba = /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/i,\n        per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/i,\n        keyword = /(\\w+)/;\n    var rgb = [0, 0, 0],\n        a = 1,\n        match = string.match(abbr),\n        hexAlpha = \"\";\n\n    if (match) {\n      match = match[1];\n      hexAlpha = match[3];\n\n      for (var i = 0; i < rgb.length; i++) {\n        rgb[i] = parseInt(match[i] + match[i], 16);\n      }\n\n      if (hexAlpha) {\n        a = Math.round(parseInt(hexAlpha + hexAlpha, 16) / 255 * 100) / 100;\n      }\n    } else if (match = string.match(hex)) {\n      hexAlpha = match[2];\n      match = match[1];\n\n      for (var i = 0; i < rgb.length; i++) {\n        rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);\n      }\n\n      if (hexAlpha) {\n        a = Math.round(parseInt(hexAlpha, 16) / 255 * 100) / 100;\n      }\n    } else if (match = string.match(rgba)) {\n      for (var i = 0; i < rgb.length; i++) {\n        rgb[i] = parseInt(match[i + 1]);\n      }\n\n      a = parseFloat(match[4]);\n    } else if (match = string.match(per)) {\n      for (var i = 0; i < rgb.length; i++) {\n        rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\n      }\n\n      a = parseFloat(match[4]);\n    } else if (match = string.match(keyword)) {\n      if (match[1] == \"transparent\") {\n        return [0, 0, 0, 0];\n      }\n\n      rgb = colorName[match[1]];\n\n      if (!rgb) {\n        return;\n      }\n    }\n\n    for (var i = 0; i < rgb.length; i++) {\n      rgb[i] = scale(rgb[i], 0, 255);\n    }\n\n    if (!a && a != 0) {\n      a = 1;\n    } else {\n      a = scale(a, 0, 1);\n    }\n\n    rgb[3] = a;\n    return rgb;\n  }\n\n  function getHsla(string) {\n    if (!string) {\n      return;\n    }\n\n    var hsl = /^hsla?\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/;\n    var match = string.match(hsl);\n\n    if (match) {\n      var alpha = parseFloat(match[4]);\n      var h = scale(parseInt(match[1]), 0, 360),\n          s = scale(parseFloat(match[2]), 0, 100),\n          l = scale(parseFloat(match[3]), 0, 100),\n          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);\n      return [h, s, l, a];\n    }\n  }\n\n  function getHwb(string) {\n    if (!string) {\n      return;\n    }\n\n    var hwb = /^hwb\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/;\n    var match = string.match(hwb);\n\n    if (match) {\n      var alpha = parseFloat(match[4]);\n      var h = scale(parseInt(match[1]), 0, 360),\n          w = scale(parseFloat(match[2]), 0, 100),\n          b = scale(parseFloat(match[3]), 0, 100),\n          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);\n      return [h, w, b, a];\n    }\n  }\n\n  function getRgb(string) {\n    var rgba = getRgba(string);\n    return rgba && rgba.slice(0, 3);\n  }\n\n  function getHsl(string) {\n    var hsla = getHsla(string);\n    return hsla && hsla.slice(0, 3);\n  }\n\n  function getAlpha(string) {\n    var vals = getRgba(string);\n\n    if (vals) {\n      return vals[3];\n    } else if (vals = getHsla(string)) {\n      return vals[3];\n    } else if (vals = getHwb(string)) {\n      return vals[3];\n    }\n  } // generators\n\n\n  function hexString(rgba, a) {\n    var a = a !== undefined && rgba.length === 3 ? a : rgba[3];\n    return \"#\" + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (a >= 0 && a < 1 ? hexDouble(Math.round(a * 255)) : \"\");\n  }\n\n  function rgbString(rgba, alpha) {\n    if (alpha < 1 || rgba[3] && rgba[3] < 1) {\n      return rgbaString(rgba, alpha);\n    }\n\n    return \"rgb(\" + rgba[0] + \", \" + rgba[1] + \", \" + rgba[2] + \")\";\n  }\n\n  function rgbaString(rgba, alpha) {\n    if (alpha === undefined) {\n      alpha = rgba[3] !== undefined ? rgba[3] : 1;\n    }\n\n    return \"rgba(\" + rgba[0] + \", \" + rgba[1] + \", \" + rgba[2] + \", \" + alpha + \")\";\n  }\n\n  function percentString(rgba, alpha) {\n    if (alpha < 1 || rgba[3] && rgba[3] < 1) {\n      return percentaString(rgba, alpha);\n    }\n\n    var r = Math.round(rgba[0] / 255 * 100),\n        g = Math.round(rgba[1] / 255 * 100),\n        b = Math.round(rgba[2] / 255 * 100);\n    return \"rgb(\" + r + \"%, \" + g + \"%, \" + b + \"%)\";\n  }\n\n  function percentaString(rgba, alpha) {\n    var r = Math.round(rgba[0] / 255 * 100),\n        g = Math.round(rgba[1] / 255 * 100),\n        b = Math.round(rgba[2] / 255 * 100);\n    return \"rgba(\" + r + \"%, \" + g + \"%, \" + b + \"%, \" + (alpha || rgba[3] || 1) + \")\";\n  }\n\n  function hslString(hsla, alpha) {\n    if (alpha < 1 || hsla[3] && hsla[3] < 1) {\n      return hslaString(hsla, alpha);\n    }\n\n    return \"hsl(\" + hsla[0] + \", \" + hsla[1] + \"%, \" + hsla[2] + \"%)\";\n  }\n\n  function hslaString(hsla, alpha) {\n    if (alpha === undefined) {\n      alpha = hsla[3] !== undefined ? hsla[3] : 1;\n    }\n\n    return \"hsla(\" + hsla[0] + \", \" + hsla[1] + \"%, \" + hsla[2] + \"%, \" + alpha + \")\";\n  } // hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\n  // (hwb have alpha optional & 1 is default value)\n\n\n  function hwbString(hwb, alpha) {\n    if (alpha === undefined) {\n      alpha = hwb[3] !== undefined ? hwb[3] : 1;\n    }\n\n    return \"hwb(\" + hwb[0] + \", \" + hwb[1] + \"%, \" + hwb[2] + \"%\" + (alpha !== undefined && alpha !== 1 ? \", \" + alpha : \"\") + \")\";\n  }\n\n  function keyword(rgb) {\n    return reverseNames[rgb.slice(0, 3)];\n  } // helpers\n\n\n  function scale(num, min, max) {\n    return Math.min(Math.max(min, num), max);\n  }\n\n  function hexDouble(num) {\n    var str = num.toString(16).toUpperCase();\n    return str.length < 2 ? \"0\" + str : str;\n  } //create a list of reverse color names\n\n\n  var reverseNames = {};\n\n  for (var name in colorName) {\n    reverseNames[colorName[name]] = name;\n  }\n  /* MIT license */\n\n\n  var Color = function Color(obj) {\n    if (obj instanceof Color) {\n      return obj;\n    }\n\n    if (!(this instanceof Color)) {\n      return new Color(obj);\n    }\n\n    this.valid = false;\n    this.values = {\n      rgb: [0, 0, 0],\n      hsl: [0, 0, 0],\n      hsv: [0, 0, 0],\n      hwb: [0, 0, 0],\n      cmyk: [0, 0, 0, 0],\n      alpha: 1\n    }; // parse Color() argument\n\n    var vals;\n\n    if (typeof obj === 'string') {\n      vals = colorString.getRgba(obj);\n\n      if (vals) {\n        this.setValues('rgb', vals);\n      } else if (vals = colorString.getHsla(obj)) {\n        this.setValues('hsl', vals);\n      } else if (vals = colorString.getHwb(obj)) {\n        this.setValues('hwb', vals);\n      }\n    } else if (typeof obj === 'object') {\n      vals = obj;\n\n      if (vals.r !== undefined || vals.red !== undefined) {\n        this.setValues('rgb', vals);\n      } else if (vals.l !== undefined || vals.lightness !== undefined) {\n        this.setValues('hsl', vals);\n      } else if (vals.v !== undefined || vals.value !== undefined) {\n        this.setValues('hsv', vals);\n      } else if (vals.w !== undefined || vals.whiteness !== undefined) {\n        this.setValues('hwb', vals);\n      } else if (vals.c !== undefined || vals.cyan !== undefined) {\n        this.setValues('cmyk', vals);\n      }\n    }\n  };\n\n  Color.prototype = {\n    isValid: function isValid() {\n      return this.valid;\n    },\n    rgb: function rgb() {\n      return this.setSpace('rgb', arguments);\n    },\n    hsl: function hsl() {\n      return this.setSpace('hsl', arguments);\n    },\n    hsv: function hsv() {\n      return this.setSpace('hsv', arguments);\n    },\n    hwb: function hwb() {\n      return this.setSpace('hwb', arguments);\n    },\n    cmyk: function cmyk() {\n      return this.setSpace('cmyk', arguments);\n    },\n    rgbArray: function rgbArray() {\n      return this.values.rgb;\n    },\n    hslArray: function hslArray() {\n      return this.values.hsl;\n    },\n    hsvArray: function hsvArray() {\n      return this.values.hsv;\n    },\n    hwbArray: function hwbArray() {\n      var values = this.values;\n\n      if (values.alpha !== 1) {\n        return values.hwb.concat([values.alpha]);\n      }\n\n      return values.hwb;\n    },\n    cmykArray: function cmykArray() {\n      return this.values.cmyk;\n    },\n    rgbaArray: function rgbaArray() {\n      var values = this.values;\n      return values.rgb.concat([values.alpha]);\n    },\n    hslaArray: function hslaArray() {\n      var values = this.values;\n      return values.hsl.concat([values.alpha]);\n    },\n    alpha: function alpha(val) {\n      if (val === undefined) {\n        return this.values.alpha;\n      }\n\n      this.setValues('alpha', val);\n      return this;\n    },\n    red: function red(val) {\n      return this.setChannel('rgb', 0, val);\n    },\n    green: function green(val) {\n      return this.setChannel('rgb', 1, val);\n    },\n    blue: function blue(val) {\n      return this.setChannel('rgb', 2, val);\n    },\n    hue: function hue(val) {\n      if (val) {\n        val %= 360;\n        val = val < 0 ? 360 + val : val;\n      }\n\n      return this.setChannel('hsl', 0, val);\n    },\n    saturation: function saturation(val) {\n      return this.setChannel('hsl', 1, val);\n    },\n    lightness: function lightness(val) {\n      return this.setChannel('hsl', 2, val);\n    },\n    saturationv: function saturationv(val) {\n      return this.setChannel('hsv', 1, val);\n    },\n    whiteness: function whiteness(val) {\n      return this.setChannel('hwb', 1, val);\n    },\n    blackness: function blackness(val) {\n      return this.setChannel('hwb', 2, val);\n    },\n    value: function value(val) {\n      return this.setChannel('hsv', 2, val);\n    },\n    cyan: function cyan(val) {\n      return this.setChannel('cmyk', 0, val);\n    },\n    magenta: function magenta(val) {\n      return this.setChannel('cmyk', 1, val);\n    },\n    yellow: function yellow(val) {\n      return this.setChannel('cmyk', 2, val);\n    },\n    black: function black(val) {\n      return this.setChannel('cmyk', 3, val);\n    },\n    hexString: function hexString() {\n      return colorString.hexString(this.values.rgb);\n    },\n    rgbString: function rgbString() {\n      return colorString.rgbString(this.values.rgb, this.values.alpha);\n    },\n    rgbaString: function rgbaString() {\n      return colorString.rgbaString(this.values.rgb, this.values.alpha);\n    },\n    percentString: function percentString() {\n      return colorString.percentString(this.values.rgb, this.values.alpha);\n    },\n    hslString: function hslString() {\n      return colorString.hslString(this.values.hsl, this.values.alpha);\n    },\n    hslaString: function hslaString() {\n      return colorString.hslaString(this.values.hsl, this.values.alpha);\n    },\n    hwbString: function hwbString() {\n      return colorString.hwbString(this.values.hwb, this.values.alpha);\n    },\n    keyword: function keyword() {\n      return colorString.keyword(this.values.rgb, this.values.alpha);\n    },\n    rgbNumber: function rgbNumber() {\n      var rgb = this.values.rgb;\n      return rgb[0] << 16 | rgb[1] << 8 | rgb[2];\n    },\n    luminosity: function luminosity() {\n      // http://www.w3.org/TR/WCAG20/#relativeluminancedef\n      var rgb = this.values.rgb;\n      var lum = [];\n\n      for (var i = 0; i < rgb.length; i++) {\n        var chan = rgb[i] / 255;\n        lum[i] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);\n      }\n\n      return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n    },\n    contrast: function contrast(color2) {\n      // http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n      var lum1 = this.luminosity();\n      var lum2 = color2.luminosity();\n\n      if (lum1 > lum2) {\n        return (lum1 + 0.05) / (lum2 + 0.05);\n      }\n\n      return (lum2 + 0.05) / (lum1 + 0.05);\n    },\n    level: function level(color2) {\n      var contrastRatio = this.contrast(color2);\n\n      if (contrastRatio >= 7.1) {\n        return 'AAA';\n      }\n\n      return contrastRatio >= 4.5 ? 'AA' : '';\n    },\n    dark: function dark() {\n      // YIQ equation from http://24ways.org/2010/calculating-color-contrast\n      var rgb = this.values.rgb;\n      var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n      return yiq < 128;\n    },\n    light: function light() {\n      return !this.dark();\n    },\n    negate: function negate() {\n      var rgb = [];\n\n      for (var i = 0; i < 3; i++) {\n        rgb[i] = 255 - this.values.rgb[i];\n      }\n\n      this.setValues('rgb', rgb);\n      return this;\n    },\n    lighten: function lighten(ratio) {\n      var hsl = this.values.hsl;\n      hsl[2] += hsl[2] * ratio;\n      this.setValues('hsl', hsl);\n      return this;\n    },\n    darken: function darken(ratio) {\n      var hsl = this.values.hsl;\n      hsl[2] -= hsl[2] * ratio;\n      this.setValues('hsl', hsl);\n      return this;\n    },\n    saturate: function saturate(ratio) {\n      var hsl = this.values.hsl;\n      hsl[1] += hsl[1] * ratio;\n      this.setValues('hsl', hsl);\n      return this;\n    },\n    desaturate: function desaturate(ratio) {\n      var hsl = this.values.hsl;\n      hsl[1] -= hsl[1] * ratio;\n      this.setValues('hsl', hsl);\n      return this;\n    },\n    whiten: function whiten(ratio) {\n      var hwb = this.values.hwb;\n      hwb[1] += hwb[1] * ratio;\n      this.setValues('hwb', hwb);\n      return this;\n    },\n    blacken: function blacken(ratio) {\n      var hwb = this.values.hwb;\n      hwb[2] += hwb[2] * ratio;\n      this.setValues('hwb', hwb);\n      return this;\n    },\n    greyscale: function greyscale() {\n      var rgb = this.values.rgb; // http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n\n      var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n      this.setValues('rgb', [val, val, val]);\n      return this;\n    },\n    clearer: function clearer(ratio) {\n      var alpha = this.values.alpha;\n      this.setValues('alpha', alpha - alpha * ratio);\n      return this;\n    },\n    opaquer: function opaquer(ratio) {\n      var alpha = this.values.alpha;\n      this.setValues('alpha', alpha + alpha * ratio);\n      return this;\n    },\n    rotate: function rotate(degrees) {\n      var hsl = this.values.hsl;\n      var hue = (hsl[0] + degrees) % 360;\n      hsl[0] = hue < 0 ? 360 + hue : hue;\n      this.setValues('hsl', hsl);\n      return this;\n    },\n\n    /**\n     * Ported from sass implementation in C\n     * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n     */\n    mix: function mix(mixinColor, weight) {\n      var color1 = this;\n      var color2 = mixinColor;\n      var p = weight === undefined ? 0.5 : weight;\n      var w = 2 * p - 1;\n      var a = color1.alpha() - color2.alpha();\n      var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n      var w2 = 1 - w1;\n      return this.rgb(w1 * color1.red() + w2 * color2.red(), w1 * color1.green() + w2 * color2.green(), w1 * color1.blue() + w2 * color2.blue()).alpha(color1.alpha() * p + color2.alpha() * (1 - p));\n    },\n    toJSON: function toJSON() {\n      return this.rgb();\n    },\n    clone: function clone() {\n      // NOTE(SB): using node-clone creates a dependency to Buffer when using browserify,\n      // making the final build way to big to embed in Chart.js. So let's do it manually,\n      // assuming that values to clone are 1 dimension arrays containing only numbers,\n      // except 'alpha' which is a number.\n      var result = new Color();\n      var source = this.values;\n      var target = result.values;\n      var value, type;\n\n      for (var prop in source) {\n        if (source.hasOwnProperty(prop)) {\n          value = source[prop];\n          type = {}.toString.call(value);\n\n          if (type === '[object Array]') {\n            target[prop] = value.slice(0);\n          } else if (type === '[object Number]') {\n            target[prop] = value;\n          } else {\n            console.error('unexpected color value:', value);\n          }\n        }\n      }\n\n      return result;\n    }\n  };\n  Color.prototype.spaces = {\n    rgb: ['red', 'green', 'blue'],\n    hsl: ['hue', 'saturation', 'lightness'],\n    hsv: ['hue', 'saturation', 'value'],\n    hwb: ['hue', 'whiteness', 'blackness'],\n    cmyk: ['cyan', 'magenta', 'yellow', 'black']\n  };\n  Color.prototype.maxes = {\n    rgb: [255, 255, 255],\n    hsl: [360, 100, 100],\n    hsv: [360, 100, 100],\n    hwb: [360, 100, 100],\n    cmyk: [100, 100, 100, 100]\n  };\n\n  Color.prototype.getValues = function (space) {\n    var values = this.values;\n    var vals = {};\n\n    for (var i = 0; i < space.length; i++) {\n      vals[space.charAt(i)] = values[space][i];\n    }\n\n    if (values.alpha !== 1) {\n      vals.a = values.alpha;\n    } // {r: 255, g: 255, b: 255, a: 0.4}\n\n\n    return vals;\n  };\n\n  Color.prototype.setValues = function (space, vals) {\n    var values = this.values;\n    var spaces = this.spaces;\n    var maxes = this.maxes;\n    var alpha = 1;\n    var i;\n    this.valid = true;\n\n    if (space === 'alpha') {\n      alpha = vals;\n    } else if (vals.length) {\n      // [10, 10, 10]\n      values[space] = vals.slice(0, space.length);\n      alpha = vals[space.length];\n    } else if (vals[space.charAt(0)] !== undefined) {\n      // {r: 10, g: 10, b: 10}\n      for (i = 0; i < space.length; i++) {\n        values[space][i] = vals[space.charAt(i)];\n      }\n\n      alpha = vals.a;\n    } else if (vals[spaces[space][0]] !== undefined) {\n      // {red: 10, green: 10, blue: 10}\n      var chans = spaces[space];\n\n      for (i = 0; i < space.length; i++) {\n        values[space][i] = vals[chans[i]];\n      }\n\n      alpha = vals.alpha;\n    }\n\n    values.alpha = Math.max(0, Math.min(1, alpha === undefined ? values.alpha : alpha));\n\n    if (space === 'alpha') {\n      return false;\n    }\n\n    var capped; // cap values of the space prior converting all values\n\n    for (i = 0; i < space.length; i++) {\n      capped = Math.max(0, Math.min(maxes[space][i], values[space][i]));\n      values[space][i] = Math.round(capped);\n    } // convert to all the other color spaces\n\n\n    for (var sname in spaces) {\n      if (sname !== space) {\n        values[sname] = colorConvert[space][sname](values[space]);\n      }\n    }\n\n    return true;\n  };\n\n  Color.prototype.setSpace = function (space, args) {\n    var vals = args[0];\n\n    if (vals === undefined) {\n      // color.rgb()\n      return this.getValues(space);\n    } // color.rgb(10, 10, 10)\n\n\n    if (typeof vals === 'number') {\n      vals = Array.prototype.slice.call(args);\n    }\n\n    this.setValues(space, vals);\n    return this;\n  };\n\n  Color.prototype.setChannel = function (space, index, val) {\n    var svalues = this.values[space];\n\n    if (val === undefined) {\n      // color.red()\n      return svalues[index];\n    } else if (val === svalues[index]) {\n      // color.red(color.red())\n      return this;\n    } // color.red(100)\n\n\n    svalues[index] = val;\n    this.setValues(space, svalues);\n    return this;\n  };\n\n  if (typeof window !== 'undefined') {\n    window.Color = Color;\n  }\n\n  var chartjsColor = Color;\n  /**\n   * @namespace Chart.helpers\n   */\n\n  var helpers = {\n    /**\n     * An empty function that can be used, for example, for optional callback.\n     */\n    noop: function noop() {},\n\n    /**\n     * Returns a unique id, sequentially generated from a global variable.\n     * @returns {number}\n     * @function\n     */\n    uid: function () {\n      var id = 0;\n      return function () {\n        return id++;\n      };\n    }(),\n\n    /**\n     * Returns true if `value` is neither null nor undefined, else returns false.\n     * @param {*} value - The value to test.\n     * @returns {boolean}\n     * @since 2.7.0\n     */\n    isNullOrUndef: function isNullOrUndef(value) {\n      return value === null || typeof value === 'undefined';\n    },\n\n    /**\n     * Returns true if `value` is an array (including typed arrays), else returns false.\n     * @param {*} value - The value to test.\n     * @returns {boolean}\n     * @function\n     */\n    isArray: function isArray(value) {\n      if (Array.isArray && Array.isArray(value)) {\n        return true;\n      }\n\n      var type = Object.prototype.toString.call(value);\n\n      if (type.substr(0, 7) === '[object' && type.substr(-6) === 'Array]') {\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * Returns true if `value` is an object (excluding null), else returns false.\n     * @param {*} value - The value to test.\n     * @returns {boolean}\n     * @since 2.7.0\n     */\n    isObject: function isObject(value) {\n      return value !== null && Object.prototype.toString.call(value) === '[object Object]';\n    },\n\n    /**\n     * Returns true if `value` is a finite number, else returns false\n     * @param {*} value  - The value to test.\n     * @returns {boolean}\n     */\n    isFinite: function (_isFinite) {\n      function isFinite(_x) {\n        return _isFinite.apply(this, arguments);\n      }\n\n      isFinite.toString = function () {\n        return _isFinite.toString();\n      };\n\n      return isFinite;\n    }(function (value) {\n      return (typeof value === 'number' || value instanceof Number) && isFinite(value);\n    }),\n\n    /**\n     * Returns `value` if defined, else returns `defaultValue`.\n     * @param {*} value - The value to return if defined.\n     * @param {*} defaultValue - The value to return if `value` is undefined.\n     * @returns {*}\n     */\n    valueOrDefault: function valueOrDefault(value, defaultValue) {\n      return typeof value === 'undefined' ? defaultValue : value;\n    },\n\n    /**\n     * Returns value at the given `index` in array if defined, else returns `defaultValue`.\n     * @param {Array} value - The array to lookup for value at `index`.\n     * @param {number} index - The index in `value` to lookup for value.\n     * @param {*} defaultValue - The value to return if `value[index]` is undefined.\n     * @returns {*}\n     */\n    valueAtIndexOrDefault: function valueAtIndexOrDefault(value, index, defaultValue) {\n      return helpers.valueOrDefault(helpers.isArray(value) ? value[index] : value, defaultValue);\n    },\n\n    /**\n     * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\n     * value returned by `fn`. If `fn` is not a function, this method returns undefined.\n     * @param {function} fn - The function to call.\n     * @param {Array|undefined|null} args - The arguments with which `fn` should be called.\n     * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.\n     * @returns {*}\n     */\n    callback: function callback(fn, args, thisArg) {\n      if (fn && typeof fn.call === 'function') {\n        return fn.apply(thisArg, args);\n      }\n    },\n\n    /**\n     * Note(SB) for performance sake, this method should only be used when loopable type\n     * is unknown or in none intensive code (not called often and small loopable). Else\n     * it's preferable to use a regular for() loop and save extra function calls.\n     * @param {object|Array} loopable - The object or array to be iterated.\n     * @param {function} fn - The function to call for each item.\n     * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.\n     * @param {boolean} [reverse] - If true, iterates backward on the loopable.\n     */\n    each: function each(loopable, fn, thisArg, reverse) {\n      var i, len, keys;\n\n      if (helpers.isArray(loopable)) {\n        len = loopable.length;\n\n        if (reverse) {\n          for (i = len - 1; i >= 0; i--) {\n            fn.call(thisArg, loopable[i], i);\n          }\n        } else {\n          for (i = 0; i < len; i++) {\n            fn.call(thisArg, loopable[i], i);\n          }\n        }\n      } else if (helpers.isObject(loopable)) {\n        keys = Object.keys(loopable);\n        len = keys.length;\n\n        for (i = 0; i < len; i++) {\n          fn.call(thisArg, loopable[keys[i]], keys[i]);\n        }\n      }\n    },\n\n    /**\n     * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\n     * @see https://stackoverflow.com/a/14853974\n     * @param {Array} a0 - The array to compare\n     * @param {Array} a1 - The array to compare\n     * @returns {boolean}\n     */\n    arrayEquals: function arrayEquals(a0, a1) {\n      var i, ilen, v0, v1;\n\n      if (!a0 || !a1 || a0.length !== a1.length) {\n        return false;\n      }\n\n      for (i = 0, ilen = a0.length; i < ilen; ++i) {\n        v0 = a0[i];\n        v1 = a1[i];\n\n        if (v0 instanceof Array && v1 instanceof Array) {\n          if (!helpers.arrayEquals(v0, v1)) {\n            return false;\n          }\n        } else if (v0 !== v1) {\n          // NOTE: two different object instances will never be equal: {x:20} != {x:20}\n          return false;\n        }\n      }\n\n      return true;\n    },\n\n    /**\n     * Returns a deep copy of `source` without keeping references on objects and arrays.\n     * @param {*} source - The value to clone.\n     * @returns {*}\n     */\n    clone: function clone(source) {\n      if (helpers.isArray(source)) {\n        return source.map(helpers.clone);\n      }\n\n      if (helpers.isObject(source)) {\n        var target = {};\n        var keys = Object.keys(source);\n        var klen = keys.length;\n        var k = 0;\n\n        for (; k < klen; ++k) {\n          target[keys[k]] = helpers.clone(source[keys[k]]);\n        }\n\n        return target;\n      }\n\n      return source;\n    },\n\n    /**\n     * The default merger when Chart.helpers.merge is called without merger option.\n     * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\n     * @private\n     */\n    _merger: function _merger(key, target, source, options) {\n      var tval = target[key];\n      var sval = source[key];\n\n      if (helpers.isObject(tval) && helpers.isObject(sval)) {\n        helpers.merge(tval, sval, options);\n      } else {\n        target[key] = helpers.clone(sval);\n      }\n    },\n\n    /**\n     * Merges source[key] in target[key] only if target[key] is undefined.\n     * @private\n     */\n    _mergerIf: function _mergerIf(key, target, source) {\n      var tval = target[key];\n      var sval = source[key];\n\n      if (helpers.isObject(tval) && helpers.isObject(sval)) {\n        helpers.mergeIf(tval, sval);\n      } else if (!target.hasOwnProperty(key)) {\n        target[key] = helpers.clone(sval);\n      }\n    },\n\n    /**\n     * Recursively deep copies `source` properties into `target` with the given `options`.\n     * IMPORTANT: `target` is not cloned and will be updated with `source` properties.\n     * @param {object} target - The target object in which all sources are merged into.\n     * @param {object|object[]} source - Object(s) to merge into `target`.\n     * @param {object} [options] - Merging options:\n     * @param {function} [options.merger] - The merge method (key, target, source, options)\n     * @returns {object} The `target` object.\n     */\n    merge: function merge(target, source, options) {\n      var sources = helpers.isArray(source) ? source : [source];\n      var ilen = sources.length;\n      var merge, i, keys, klen, k;\n\n      if (!helpers.isObject(target)) {\n        return target;\n      }\n\n      options = options || {};\n      merge = options.merger || helpers._merger;\n\n      for (i = 0; i < ilen; ++i) {\n        source = sources[i];\n\n        if (!helpers.isObject(source)) {\n          continue;\n        }\n\n        keys = Object.keys(source);\n\n        for (k = 0, klen = keys.length; k < klen; ++k) {\n          merge(keys[k], target, source, options);\n        }\n      }\n\n      return target;\n    },\n\n    /**\n     * Recursively deep copies `source` properties into `target` *only* if not defined in target.\n     * IMPORTANT: `target` is not cloned and will be updated with `source` properties.\n     * @param {object} target - The target object in which all sources are merged into.\n     * @param {object|object[]} source - Object(s) to merge into `target`.\n     * @returns {object} The `target` object.\n     */\n    mergeIf: function mergeIf(target, source) {\n      return helpers.merge(target, source, {\n        merger: helpers._mergerIf\n      });\n    },\n\n    /**\n     * Applies the contents of two or more objects together into the first object.\n     * @param {object} target - The target object in which all objects are merged into.\n     * @param {object} arg1 - Object containing additional properties to merge in target.\n     * @param {object} argN - Additional objects containing properties to merge in target.\n     * @returns {object} The `target` object.\n     */\n    extend: function extend(target) {\n      var setFn = function setFn(value, key) {\n        target[key] = value;\n      };\n\n      for (var i = 1, ilen = arguments.length; i < ilen; ++i) {\n        helpers.each(arguments[i], setFn);\n      }\n\n      return target;\n    },\n\n    /**\n     * Basic javascript inheritance based on the model created in Backbone.js\n     */\n    inherits: function inherits(extensions) {\n      var me = this;\n      var ChartElement = extensions && extensions.hasOwnProperty('constructor') ? extensions.constructor : function () {\n        return me.apply(this, arguments);\n      };\n\n      var Surrogate = function Surrogate() {\n        this.constructor = ChartElement;\n      };\n\n      Surrogate.prototype = me.prototype;\n      ChartElement.prototype = new Surrogate();\n      ChartElement.extend = helpers.inherits;\n\n      if (extensions) {\n        helpers.extend(ChartElement.prototype, extensions);\n      }\n\n      ChartElement.__super__ = me.prototype;\n      return ChartElement;\n    }\n  };\n  var helpers_core = helpers; // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, use Chart.helpers.callback instead.\n   * @function Chart.helpers.callCallback\n   * @deprecated since version 2.6.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers.callCallback = helpers.callback;\n  /**\n   * Provided for backward compatibility, use Array.prototype.indexOf instead.\n   * Array.prototype.indexOf compatibility: Chrome, Opera, Safari, FF1.5+, IE9+\n   * @function Chart.helpers.indexOf\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers.indexOf = function (array, item, fromIndex) {\n    return Array.prototype.indexOf.call(array, item, fromIndex);\n  };\n  /**\n   * Provided for backward compatibility, use Chart.helpers.valueOrDefault instead.\n   * @function Chart.helpers.getValueOrDefault\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n\n  helpers.getValueOrDefault = helpers.valueOrDefault;\n  /**\n   * Provided for backward compatibility, use Chart.helpers.valueAtIndexOrDefault instead.\n   * @function Chart.helpers.getValueAtIndexOrDefault\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers.getValueAtIndexOrDefault = helpers.valueAtIndexOrDefault;\n  /**\n   * Easing functions adapted from Robert Penner's easing equations.\n   * @namespace Chart.helpers.easingEffects\n   * @see http://www.robertpenner.com/easing/\n   */\n\n  var effects = {\n    linear: function linear(t) {\n      return t;\n    },\n    easeInQuad: function easeInQuad(t) {\n      return t * t;\n    },\n    easeOutQuad: function easeOutQuad(t) {\n      return -t * (t - 2);\n    },\n    easeInOutQuad: function easeInOutQuad(t) {\n      if ((t /= 0.5) < 1) {\n        return 0.5 * t * t;\n      }\n\n      return -0.5 * (--t * (t - 2) - 1);\n    },\n    easeInCubic: function easeInCubic(t) {\n      return t * t * t;\n    },\n    easeOutCubic: function easeOutCubic(t) {\n      return (t = t - 1) * t * t + 1;\n    },\n    easeInOutCubic: function easeInOutCubic(t) {\n      if ((t /= 0.5) < 1) {\n        return 0.5 * t * t * t;\n      }\n\n      return 0.5 * ((t -= 2) * t * t + 2);\n    },\n    easeInQuart: function easeInQuart(t) {\n      return t * t * t * t;\n    },\n    easeOutQuart: function easeOutQuart(t) {\n      return -((t = t - 1) * t * t * t - 1);\n    },\n    easeInOutQuart: function easeInOutQuart(t) {\n      if ((t /= 0.5) < 1) {\n        return 0.5 * t * t * t * t;\n      }\n\n      return -0.5 * ((t -= 2) * t * t * t - 2);\n    },\n    easeInQuint: function easeInQuint(t) {\n      return t * t * t * t * t;\n    },\n    easeOutQuint: function easeOutQuint(t) {\n      return (t = t - 1) * t * t * t * t + 1;\n    },\n    easeInOutQuint: function easeInOutQuint(t) {\n      if ((t /= 0.5) < 1) {\n        return 0.5 * t * t * t * t * t;\n      }\n\n      return 0.5 * ((t -= 2) * t * t * t * t + 2);\n    },\n    easeInSine: function easeInSine(t) {\n      return -Math.cos(t * (Math.PI / 2)) + 1;\n    },\n    easeOutSine: function easeOutSine(t) {\n      return Math.sin(t * (Math.PI / 2));\n    },\n    easeInOutSine: function easeInOutSine(t) {\n      return -0.5 * (Math.cos(Math.PI * t) - 1);\n    },\n    easeInExpo: function easeInExpo(t) {\n      return t === 0 ? 0 : Math.pow(2, 10 * (t - 1));\n    },\n    easeOutExpo: function easeOutExpo(t) {\n      return t === 1 ? 1 : -Math.pow(2, -10 * t) + 1;\n    },\n    easeInOutExpo: function easeInOutExpo(t) {\n      if (t === 0) {\n        return 0;\n      }\n\n      if (t === 1) {\n        return 1;\n      }\n\n      if ((t /= 0.5) < 1) {\n        return 0.5 * Math.pow(2, 10 * (t - 1));\n      }\n\n      return 0.5 * (-Math.pow(2, -10 * --t) + 2);\n    },\n    easeInCirc: function easeInCirc(t) {\n      if (t >= 1) {\n        return t;\n      }\n\n      return -(Math.sqrt(1 - t * t) - 1);\n    },\n    easeOutCirc: function easeOutCirc(t) {\n      return Math.sqrt(1 - (t = t - 1) * t);\n    },\n    easeInOutCirc: function easeInOutCirc(t) {\n      if ((t /= 0.5) < 1) {\n        return -0.5 * (Math.sqrt(1 - t * t) - 1);\n      }\n\n      return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n    },\n    easeInElastic: function easeInElastic(t) {\n      var s = 1.70158;\n      var p = 0;\n      var a = 1;\n\n      if (t === 0) {\n        return 0;\n      }\n\n      if (t === 1) {\n        return 1;\n      }\n\n      if (!p) {\n        p = 0.3;\n      }\n\n      if (a < 1) {\n        a = 1;\n        s = p / 4;\n      } else {\n        s = p / (2 * Math.PI) * Math.asin(1 / a);\n      }\n\n      return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));\n    },\n    easeOutElastic: function easeOutElastic(t) {\n      var s = 1.70158;\n      var p = 0;\n      var a = 1;\n\n      if (t === 0) {\n        return 0;\n      }\n\n      if (t === 1) {\n        return 1;\n      }\n\n      if (!p) {\n        p = 0.3;\n      }\n\n      if (a < 1) {\n        a = 1;\n        s = p / 4;\n      } else {\n        s = p / (2 * Math.PI) * Math.asin(1 / a);\n      }\n\n      return a * Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1;\n    },\n    easeInOutElastic: function easeInOutElastic(t) {\n      var s = 1.70158;\n      var p = 0;\n      var a = 1;\n\n      if (t === 0) {\n        return 0;\n      }\n\n      if ((t /= 0.5) === 2) {\n        return 1;\n      }\n\n      if (!p) {\n        p = 0.45;\n      }\n\n      if (a < 1) {\n        a = 1;\n        s = p / 4;\n      } else {\n        s = p / (2 * Math.PI) * Math.asin(1 / a);\n      }\n\n      if (t < 1) {\n        return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));\n      }\n\n      return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p) * 0.5 + 1;\n    },\n    easeInBack: function easeInBack(t) {\n      var s = 1.70158;\n      return t * t * ((s + 1) * t - s);\n    },\n    easeOutBack: function easeOutBack(t) {\n      var s = 1.70158;\n      return (t = t - 1) * t * ((s + 1) * t + s) + 1;\n    },\n    easeInOutBack: function easeInOutBack(t) {\n      var s = 1.70158;\n\n      if ((t /= 0.5) < 1) {\n        return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));\n      }\n\n      return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);\n    },\n    easeInBounce: function easeInBounce(t) {\n      return 1 - effects.easeOutBounce(1 - t);\n    },\n    easeOutBounce: function easeOutBounce(t) {\n      if (t < 1 / 2.75) {\n        return 7.5625 * t * t;\n      }\n\n      if (t < 2 / 2.75) {\n        return 7.5625 * (t -= 1.5 / 2.75) * t + 0.75;\n      }\n\n      if (t < 2.5 / 2.75) {\n        return 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375;\n      }\n\n      return 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;\n    },\n    easeInOutBounce: function easeInOutBounce(t) {\n      if (t < 0.5) {\n        return effects.easeInBounce(t * 2) * 0.5;\n      }\n\n      return effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5;\n    }\n  };\n  var helpers_easing = {\n    effects: effects\n  }; // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, use Chart.helpers.easing.effects instead.\n   * @function Chart.helpers.easingEffects\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers_core.easingEffects = effects;\n  var PI = Math.PI;\n  var RAD_PER_DEG = PI / 180;\n  var DOUBLE_PI = PI * 2;\n  var HALF_PI = PI / 2;\n  var QUARTER_PI = PI / 4;\n  var TWO_THIRDS_PI = PI * 2 / 3;\n  /**\n   * @namespace Chart.helpers.canvas\n   */\n\n  var exports$1 = {\n    /**\n     * Clears the entire canvas associated to the given `chart`.\n     * @param {Chart} chart - The chart for which to clear the canvas.\n     */\n    clear: function clear(chart) {\n      chart.ctx.clearRect(0, 0, chart.width, chart.height);\n    },\n\n    /**\n     * Creates a \"path\" for a rectangle with rounded corners at position (x, y) with a\n     * given size (width, height) and the same `radius` for all corners.\n     * @param {CanvasRenderingContext2D} ctx - The canvas 2D Context.\n     * @param {number} x - The x axis of the coordinate for the rectangle starting point.\n     * @param {number} y - The y axis of the coordinate for the rectangle starting point.\n     * @param {number} width - The rectangle's width.\n     * @param {number} height - The rectangle's height.\n     * @param {number} radius - The rounded amount (in pixels) for the four corners.\n     * @todo handle `radius` as top-left, top-right, bottom-right, bottom-left array/object?\n     */\n    roundedRect: function roundedRect(ctx, x, y, width, height, radius) {\n      if (radius) {\n        var r = Math.min(radius, height / 2, width / 2);\n        var left = x + r;\n        var top = y + r;\n        var right = x + width - r;\n        var bottom = y + height - r;\n        ctx.moveTo(x, top);\n\n        if (left < right && top < bottom) {\n          ctx.arc(left, top, r, -PI, -HALF_PI);\n          ctx.arc(right, top, r, -HALF_PI, 0);\n          ctx.arc(right, bottom, r, 0, HALF_PI);\n          ctx.arc(left, bottom, r, HALF_PI, PI);\n        } else if (left < right) {\n          ctx.moveTo(left, y);\n          ctx.arc(right, top, r, -HALF_PI, HALF_PI);\n          ctx.arc(left, top, r, HALF_PI, PI + HALF_PI);\n        } else if (top < bottom) {\n          ctx.arc(left, top, r, -PI, 0);\n          ctx.arc(left, bottom, r, 0, PI);\n        } else {\n          ctx.arc(left, top, r, -PI, PI);\n        }\n\n        ctx.closePath();\n        ctx.moveTo(x, y);\n      } else {\n        ctx.rect(x, y, width, height);\n      }\n    },\n    drawPoint: function drawPoint(ctx, style, radius, x, y, rotation) {\n      var type, xOffset, yOffset, size, cornerRadius;\n      var rad = (rotation || 0) * RAD_PER_DEG;\n\n      if (style && typeof style === 'object') {\n        type = style.toString();\n\n        if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n          ctx.drawImage(style, x - style.width / 2, y - style.height / 2, style.width, style.height);\n          return;\n        }\n      }\n\n      if (isNaN(radius) || radius <= 0) {\n        return;\n      }\n\n      ctx.beginPath();\n\n      switch (style) {\n        // Default includes circle\n        default:\n          ctx.arc(x, y, radius, 0, DOUBLE_PI);\n          ctx.closePath();\n          break;\n\n        case 'triangle':\n          ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n          rad += TWO_THIRDS_PI;\n          ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n          rad += TWO_THIRDS_PI;\n          ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n          ctx.closePath();\n          break;\n\n        case 'rectRounded':\n          // NOTE: the rounded rect implementation changed to use `arc` instead of\n          // `quadraticCurveTo` since it generates better results when rect is\n          // almost a circle. 0.516 (instead of 0.5) produces results with visually\n          // closer proportion to the previous impl and it is inscribed in the\n          // circle with `radius`. For more details, see the following PRs:\n          // https://github.com/chartjs/Chart.js/issues/5597\n          // https://github.com/chartjs/Chart.js/issues/5858\n          cornerRadius = radius * 0.516;\n          size = radius - cornerRadius;\n          xOffset = Math.cos(rad + QUARTER_PI) * size;\n          yOffset = Math.sin(rad + QUARTER_PI) * size;\n          ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n          ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n          ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n          ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n          ctx.closePath();\n          break;\n\n        case 'rect':\n          if (!rotation) {\n            size = Math.SQRT1_2 * radius;\n            ctx.rect(x - size, y - size, 2 * size, 2 * size);\n            break;\n          }\n\n          rad += QUARTER_PI;\n\n        /* falls through */\n\n        case 'rectRot':\n          xOffset = Math.cos(rad) * radius;\n          yOffset = Math.sin(rad) * radius;\n          ctx.moveTo(x - xOffset, y - yOffset);\n          ctx.lineTo(x + yOffset, y - xOffset);\n          ctx.lineTo(x + xOffset, y + yOffset);\n          ctx.lineTo(x - yOffset, y + xOffset);\n          ctx.closePath();\n          break;\n\n        case 'crossRot':\n          rad += QUARTER_PI;\n\n        /* falls through */\n\n        case 'cross':\n          xOffset = Math.cos(rad) * radius;\n          yOffset = Math.sin(rad) * radius;\n          ctx.moveTo(x - xOffset, y - yOffset);\n          ctx.lineTo(x + xOffset, y + yOffset);\n          ctx.moveTo(x + yOffset, y - xOffset);\n          ctx.lineTo(x - yOffset, y + xOffset);\n          break;\n\n        case 'star':\n          xOffset = Math.cos(rad) * radius;\n          yOffset = Math.sin(rad) * radius;\n          ctx.moveTo(x - xOffset, y - yOffset);\n          ctx.lineTo(x + xOffset, y + yOffset);\n          ctx.moveTo(x + yOffset, y - xOffset);\n          ctx.lineTo(x - yOffset, y + xOffset);\n          rad += QUARTER_PI;\n          xOffset = Math.cos(rad) * radius;\n          yOffset = Math.sin(rad) * radius;\n          ctx.moveTo(x - xOffset, y - yOffset);\n          ctx.lineTo(x + xOffset, y + yOffset);\n          ctx.moveTo(x + yOffset, y - xOffset);\n          ctx.lineTo(x - yOffset, y + xOffset);\n          break;\n\n        case 'line':\n          xOffset = Math.cos(rad) * radius;\n          yOffset = Math.sin(rad) * radius;\n          ctx.moveTo(x - xOffset, y - yOffset);\n          ctx.lineTo(x + xOffset, y + yOffset);\n          break;\n\n        case 'dash':\n          ctx.moveTo(x, y);\n          ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);\n          break;\n      }\n\n      ctx.fill();\n      ctx.stroke();\n    },\n\n    /**\n     * Returns true if the point is inside the rectangle\n     * @param {object} point - The point to test\n     * @param {object} area - The rectangle\n     * @returns {boolean}\n     * @private\n     */\n    _isPointInArea: function _isPointInArea(point, area) {\n      var epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n\n      return point.x > area.left - epsilon && point.x < area.right + epsilon && point.y > area.top - epsilon && point.y < area.bottom + epsilon;\n    },\n    clipArea: function clipArea(ctx, area) {\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n      ctx.clip();\n    },\n    unclipArea: function unclipArea(ctx) {\n      ctx.restore();\n    },\n    lineTo: function lineTo(ctx, previous, target, flip) {\n      var stepped = target.steppedLine;\n\n      if (stepped) {\n        if (stepped === 'middle') {\n          var midpoint = (previous.x + target.x) / 2.0;\n          ctx.lineTo(midpoint, flip ? target.y : previous.y);\n          ctx.lineTo(midpoint, flip ? previous.y : target.y);\n        } else if (stepped === 'after' && !flip || stepped !== 'after' && flip) {\n          ctx.lineTo(previous.x, target.y);\n        } else {\n          ctx.lineTo(target.x, previous.y);\n        }\n\n        ctx.lineTo(target.x, target.y);\n        return;\n      }\n\n      if (!target.tension) {\n        ctx.lineTo(target.x, target.y);\n        return;\n      }\n\n      ctx.bezierCurveTo(flip ? previous.controlPointPreviousX : previous.controlPointNextX, flip ? previous.controlPointPreviousY : previous.controlPointNextY, flip ? target.controlPointNextX : target.controlPointPreviousX, flip ? target.controlPointNextY : target.controlPointPreviousY, target.x, target.y);\n    }\n  };\n  var helpers_canvas = exports$1; // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, use Chart.helpers.canvas.clear instead.\n   * @namespace Chart.helpers.clear\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers_core.clear = exports$1.clear;\n  /**\n   * Provided for backward compatibility, use Chart.helpers.canvas.roundedRect instead.\n   * @namespace Chart.helpers.drawRoundedRectangle\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers_core.drawRoundedRectangle = function (ctx) {\n    ctx.beginPath();\n    exports$1.roundedRect.apply(exports$1, arguments);\n  };\n\n  var defaults = {\n    /**\n     * @private\n     */\n    _set: function _set(scope, values) {\n      return helpers_core.merge(this[scope] || (this[scope] = {}), values);\n    }\n  };\n\n  defaults._set('global', {\n    defaultColor: 'rgba(0,0,0,0.1)',\n    defaultFontColor: '#666',\n    defaultFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n    defaultFontSize: 12,\n    defaultFontStyle: 'normal',\n    defaultLineHeight: 1.2,\n    showLines: true\n  });\n\n  var core_defaults = defaults;\n  var valueOrDefault = helpers_core.valueOrDefault;\n  /**\n   * Converts the given font object into a CSS font string.\n   * @param {object} font - A font object.\n   * @return {string} The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\n   * @private\n   */\n\n  function toFontString(font) {\n    if (!font || helpers_core.isNullOrUndef(font.size) || helpers_core.isNullOrUndef(font.family)) {\n      return null;\n    }\n\n    return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;\n  }\n  /**\n   * @alias Chart.helpers.options\n   * @namespace\n   */\n\n\n  var helpers_options = {\n    /**\n     * Converts the given line height `value` in pixels for a specific font `size`.\n     * @param {number|string} value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\n     * @param {number} size - The font size (in pixels) used to resolve relative `value`.\n     * @returns {number} The effective line height in pixels (size * 1.2 if value is invalid).\n     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\n     * @since 2.7.0\n     */\n    toLineHeight: function toLineHeight(value, size) {\n      var matches = ('' + value).match(/^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/);\n\n      if (!matches || matches[1] === 'normal') {\n        return size * 1.2;\n      }\n\n      value = +matches[2];\n\n      switch (matches[3]) {\n        case 'px':\n          return value;\n\n        case '%':\n          value /= 100;\n          break;\n\n        default:\n          break;\n      }\n\n      return size * value;\n    },\n\n    /**\n     * Converts the given value into a padding object with pre-computed width/height.\n     * @param {number|object} value - If a number, set the value to all TRBL component,\n     *  else, if and object, use defined properties and sets undefined ones to 0.\n     * @returns {object} The padding values (top, right, bottom, left, width, height)\n     * @since 2.7.0\n     */\n    toPadding: function toPadding(value) {\n      var t, r, b, l;\n\n      if (helpers_core.isObject(value)) {\n        t = +value.top || 0;\n        r = +value.right || 0;\n        b = +value.bottom || 0;\n        l = +value.left || 0;\n      } else {\n        t = r = b = l = +value || 0;\n      }\n\n      return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        height: t + b,\n        width: l + r\n      };\n    },\n\n    /**\n     * Parses font options and returns the font object.\n     * @param {object} options - A object that contains font options to be parsed.\n     * @return {object} The font object.\n     * @todo Support font.* options and renamed to toFont().\n     * @private\n     */\n    _parseFont: function _parseFont(options) {\n      var globalDefaults = core_defaults.global;\n      var size = valueOrDefault(options.fontSize, globalDefaults.defaultFontSize);\n      var font = {\n        family: valueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily),\n        lineHeight: helpers_core.options.toLineHeight(valueOrDefault(options.lineHeight, globalDefaults.defaultLineHeight), size),\n        size: size,\n        style: valueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle),\n        weight: null,\n        string: ''\n      };\n      font.string = toFontString(font);\n      return font;\n    },\n\n    /**\n     * Evaluates the given `inputs` sequentially and returns the first defined value.\n     * @param {Array} inputs - An array of values, falling back to the last value.\n     * @param {object} [context] - If defined and the current value is a function, the value\n     * is called with `context` as first argument and the result becomes the new input.\n     * @param {number} [index] - If defined and the current value is an array, the value\n     * at `index` become the new input.\n     * @since 2.7.0\n     */\n    resolve: function resolve(inputs, context, index) {\n      var i, ilen, value;\n\n      for (i = 0, ilen = inputs.length; i < ilen; ++i) {\n        value = inputs[i];\n\n        if (value === undefined) {\n          continue;\n        }\n\n        if (context !== undefined && typeof value === 'function') {\n          value = value(context);\n        }\n\n        if (index !== undefined && helpers_core.isArray(value)) {\n          value = value[index];\n        }\n\n        if (value !== undefined) {\n          return value;\n        }\n      }\n    }\n  };\n  var helpers$1 = helpers_core;\n  var easing = helpers_easing;\n  var canvas = helpers_canvas;\n  var options = helpers_options;\n  helpers$1.easing = easing;\n  helpers$1.canvas = canvas;\n  helpers$1.options = options;\n\n  function interpolate(start, view, model, ease) {\n    var keys = Object.keys(model);\n    var i, ilen, key, actual, origin, target, type, c0, c1;\n\n    for (i = 0, ilen = keys.length; i < ilen; ++i) {\n      key = keys[i];\n      target = model[key]; // if a value is added to the model after pivot() has been called, the view\n      // doesn't contain it, so let's initialize the view to the target value.\n\n      if (!view.hasOwnProperty(key)) {\n        view[key] = target;\n      }\n\n      actual = view[key];\n\n      if (actual === target || key[0] === '_') {\n        continue;\n      }\n\n      if (!start.hasOwnProperty(key)) {\n        start[key] = actual;\n      }\n\n      origin = start[key];\n      type = typeof target;\n\n      if (type === typeof origin) {\n        if (type === 'string') {\n          c0 = chartjsColor(origin);\n\n          if (c0.valid) {\n            c1 = chartjsColor(target);\n\n            if (c1.valid) {\n              view[key] = c1.mix(c0, ease).rgbString();\n              continue;\n            }\n          }\n        } else if (helpers$1.isFinite(origin) && helpers$1.isFinite(target)) {\n          view[key] = origin + (target - origin) * ease;\n          continue;\n        }\n      }\n\n      view[key] = target;\n    }\n  }\n\n  var Element = function Element(configuration) {\n    helpers$1.extend(this, configuration);\n    this.initialize.apply(this, arguments);\n  };\n\n  helpers$1.extend(Element.prototype, {\n    initialize: function initialize() {\n      this.hidden = false;\n    },\n    pivot: function pivot() {\n      var me = this;\n\n      if (!me._view) {\n        me._view = helpers$1.clone(me._model);\n      }\n\n      me._start = {};\n      return me;\n    },\n    transition: function transition(ease) {\n      var me = this;\n      var model = me._model;\n      var start = me._start;\n      var view = me._view; // No animation -> No Transition\n\n      if (!model || ease === 1) {\n        me._view = model;\n        me._start = null;\n        return me;\n      }\n\n      if (!view) {\n        view = me._view = {};\n      }\n\n      if (!start) {\n        start = me._start = {};\n      }\n\n      interpolate(start, view, model, ease);\n      return me;\n    },\n    tooltipPosition: function tooltipPosition() {\n      return {\n        x: this._model.x,\n        y: this._model.y\n      };\n    },\n    hasValue: function hasValue() {\n      return helpers$1.isNumber(this._model.x) && helpers$1.isNumber(this._model.y);\n    }\n  });\n  Element.extend = helpers$1.inherits;\n  var core_element = Element;\n  var exports$2 = core_element.extend({\n    chart: null,\n    // the animation associated chart instance\n    currentStep: 0,\n    // the current animation step\n    numSteps: 60,\n    // default number of steps\n    easing: '',\n    // the easing to use for this animation\n    render: null,\n    // render function used by the animation service\n    onAnimationProgress: null,\n    // user specified callback to fire on each step of the animation\n    onAnimationComplete: null // user specified callback to fire when the animation finishes\n\n  });\n  var core_animation = exports$2; // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, use Chart.Animation instead\n   * @prop Chart.Animation#animationObject\n   * @deprecated since version 2.6.0\n   * @todo remove at version 3\n   */\n\n  Object.defineProperty(exports$2.prototype, 'animationObject', {\n    get: function get() {\n      return this;\n    }\n  });\n  /**\n   * Provided for backward compatibility, use Chart.Animation#chart instead\n   * @prop Chart.Animation#chartInstance\n   * @deprecated since version 2.6.0\n   * @todo remove at version 3\n   */\n\n  Object.defineProperty(exports$2.prototype, 'chartInstance', {\n    get: function get() {\n      return this.chart;\n    },\n    set: function set(value) {\n      this.chart = value;\n    }\n  });\n\n  core_defaults._set('global', {\n    animation: {\n      duration: 1000,\n      easing: 'easeOutQuart',\n      onProgress: helpers$1.noop,\n      onComplete: helpers$1.noop\n    }\n  });\n\n  var core_animations = {\n    animations: [],\n    request: null,\n\n    /**\n     * @param {Chart} chart - The chart to animate.\n     * @param {Chart.Animation} animation - The animation that we will animate.\n     * @param {number} duration - The animation duration in ms.\n     * @param {boolean} lazy - if true, the chart is not marked as animating to enable more responsive interactions\n     */\n    addAnimation: function addAnimation(chart, animation, duration, lazy) {\n      var animations = this.animations;\n      var i, ilen;\n      animation.chart = chart;\n      animation.startTime = Date.now();\n      animation.duration = duration;\n\n      if (!lazy) {\n        chart.animating = true;\n      }\n\n      for (i = 0, ilen = animations.length; i < ilen; ++i) {\n        if (animations[i].chart === chart) {\n          animations[i] = animation;\n          return;\n        }\n      }\n\n      animations.push(animation); // If there are no animations queued, manually kickstart a digest, for lack of a better word\n\n      if (animations.length === 1) {\n        this.requestAnimationFrame();\n      }\n    },\n    cancelAnimation: function cancelAnimation(chart) {\n      var index = helpers$1.findIndex(this.animations, function (animation) {\n        return animation.chart === chart;\n      });\n\n      if (index !== -1) {\n        this.animations.splice(index, 1);\n        chart.animating = false;\n      }\n    },\n    requestAnimationFrame: function requestAnimationFrame() {\n      var me = this;\n\n      if (me.request === null) {\n        // Skip animation frame requests until the active one is executed.\n        // This can happen when processing mouse events, e.g. 'mousemove'\n        // and 'mouseout' events will trigger multiple renders.\n        me.request = helpers$1.requestAnimFrame.call(window, function () {\n          me.request = null;\n          me.startDigest();\n        });\n      }\n    },\n\n    /**\n     * @private\n     */\n    startDigest: function startDigest() {\n      var me = this;\n      me.advance(); // Do we have more stuff to animate?\n\n      if (me.animations.length > 0) {\n        me.requestAnimationFrame();\n      }\n    },\n\n    /**\n     * @private\n     */\n    advance: function advance() {\n      var animations = this.animations;\n      var animation, chart, numSteps, nextStep;\n      var i = 0; // 1 animation per chart, so we are looping charts here\n\n      while (i < animations.length) {\n        animation = animations[i];\n        chart = animation.chart;\n        numSteps = animation.numSteps; // Make sure that currentStep starts at 1\n        // https://github.com/chartjs/Chart.js/issues/6104\n\n        nextStep = Math.floor((Date.now() - animation.startTime) / animation.duration * numSteps) + 1;\n        animation.currentStep = Math.min(nextStep, numSteps);\n        helpers$1.callback(animation.render, [chart, animation], chart);\n        helpers$1.callback(animation.onAnimationProgress, [animation], chart);\n\n        if (animation.currentStep >= numSteps) {\n          helpers$1.callback(animation.onAnimationComplete, [animation], chart);\n          chart.animating = false;\n          animations.splice(i, 1);\n        } else {\n          ++i;\n        }\n      }\n    }\n  };\n  var resolve = helpers$1.options.resolve;\n  var arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];\n  /**\n   * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',\n   * 'unshift') and notify the listener AFTER the array has been altered. Listeners are\n   * called on the 'onData*' callbacks (e.g. onDataPush, etc.) with same arguments.\n   */\n\n  function listenArrayEvents(array, listener) {\n    if (array._chartjs) {\n      array._chartjs.listeners.push(listener);\n\n      return;\n    }\n\n    Object.defineProperty(array, '_chartjs', {\n      configurable: true,\n      enumerable: false,\n      value: {\n        listeners: [listener]\n      }\n    });\n    arrayEvents.forEach(function (key) {\n      var method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);\n      var base = array[key];\n      Object.defineProperty(array, key, {\n        configurable: true,\n        enumerable: false,\n        value: function value() {\n          var args = Array.prototype.slice.call(arguments);\n          var res = base.apply(this, args);\n          helpers$1.each(array._chartjs.listeners, function (object) {\n            if (typeof object[method] === 'function') {\n              object[method].apply(object, args);\n            }\n          });\n          return res;\n        }\n      });\n    });\n  }\n  /**\n   * Removes the given array event listener and cleanup extra attached properties (such as\n   * the _chartjs stub and overridden methods) if array doesn't have any more listeners.\n   */\n\n\n  function unlistenArrayEvents(array, listener) {\n    var stub = array._chartjs;\n\n    if (!stub) {\n      return;\n    }\n\n    var listeners = stub.listeners;\n    var index = listeners.indexOf(listener);\n\n    if (index !== -1) {\n      listeners.splice(index, 1);\n    }\n\n    if (listeners.length > 0) {\n      return;\n    }\n\n    arrayEvents.forEach(function (key) {\n      delete array[key];\n    });\n    delete array._chartjs;\n  } // Base class for all dataset controllers (line, bar, etc)\n\n\n  var DatasetController = function DatasetController(chart, datasetIndex) {\n    this.initialize(chart, datasetIndex);\n  };\n\n  helpers$1.extend(DatasetController.prototype, {\n    /**\n     * Element type used to generate a meta dataset (e.g. Chart.element.Line).\n     * @type {Chart.core.element}\n     */\n    datasetElementType: null,\n\n    /**\n     * Element type used to generate a meta data (e.g. Chart.element.Point).\n     * @type {Chart.core.element}\n     */\n    dataElementType: null,\n    initialize: function initialize(chart, datasetIndex) {\n      var me = this;\n      me.chart = chart;\n      me.index = datasetIndex;\n      me.linkScales();\n      me.addElements();\n    },\n    updateIndex: function updateIndex(datasetIndex) {\n      this.index = datasetIndex;\n    },\n    linkScales: function linkScales() {\n      var me = this;\n      var meta = me.getMeta();\n      var dataset = me.getDataset();\n\n      if (meta.xAxisID === null || !(meta.xAxisID in me.chart.scales)) {\n        meta.xAxisID = dataset.xAxisID || me.chart.options.scales.xAxes[0].id;\n      }\n\n      if (meta.yAxisID === null || !(meta.yAxisID in me.chart.scales)) {\n        meta.yAxisID = dataset.yAxisID || me.chart.options.scales.yAxes[0].id;\n      }\n    },\n    getDataset: function getDataset() {\n      return this.chart.data.datasets[this.index];\n    },\n    getMeta: function getMeta() {\n      return this.chart.getDatasetMeta(this.index);\n    },\n    getScaleForId: function getScaleForId(scaleID) {\n      return this.chart.scales[scaleID];\n    },\n\n    /**\n     * @private\n     */\n    _getValueScaleId: function _getValueScaleId() {\n      return this.getMeta().yAxisID;\n    },\n\n    /**\n     * @private\n     */\n    _getIndexScaleId: function _getIndexScaleId() {\n      return this.getMeta().xAxisID;\n    },\n\n    /**\n     * @private\n     */\n    _getValueScale: function _getValueScale() {\n      return this.getScaleForId(this._getValueScaleId());\n    },\n\n    /**\n     * @private\n     */\n    _getIndexScale: function _getIndexScale() {\n      return this.getScaleForId(this._getIndexScaleId());\n    },\n    reset: function reset() {\n      this.update(true);\n    },\n\n    /**\n     * @private\n     */\n    destroy: function destroy() {\n      if (this._data) {\n        unlistenArrayEvents(this._data, this);\n      }\n    },\n    createMetaDataset: function createMetaDataset() {\n      var me = this;\n      var type = me.datasetElementType;\n      return type && new type({\n        _chart: me.chart,\n        _datasetIndex: me.index\n      });\n    },\n    createMetaData: function createMetaData(index) {\n      var me = this;\n      var type = me.dataElementType;\n      return type && new type({\n        _chart: me.chart,\n        _datasetIndex: me.index,\n        _index: index\n      });\n    },\n    addElements: function addElements() {\n      var me = this;\n      var meta = me.getMeta();\n      var data = me.getDataset().data || [];\n      var metaData = meta.data;\n      var i, ilen;\n\n      for (i = 0, ilen = data.length; i < ilen; ++i) {\n        metaData[i] = metaData[i] || me.createMetaData(i);\n      }\n\n      meta.dataset = meta.dataset || me.createMetaDataset();\n    },\n    addElementAndReset: function addElementAndReset(index) {\n      var element = this.createMetaData(index);\n      this.getMeta().data.splice(index, 0, element);\n      this.updateElement(element, index, true);\n    },\n    buildOrUpdateElements: function buildOrUpdateElements() {\n      var me = this;\n      var dataset = me.getDataset();\n      var data = dataset.data || (dataset.data = []); // In order to correctly handle data addition/deletion animation (an thus simulate\n      // real-time charts), we need to monitor these data modifications and synchronize\n      // the internal meta data accordingly.\n\n      if (me._data !== data) {\n        if (me._data) {\n          // This case happens when the user replaced the data array instance.\n          unlistenArrayEvents(me._data, me);\n        }\n\n        if (data && Object.isExtensible(data)) {\n          listenArrayEvents(data, me);\n        }\n\n        me._data = data;\n      } // Re-sync meta data in case the user replaced the data array or if we missed\n      // any updates and so make sure that we handle number of datapoints changing.\n\n\n      me.resyncElements();\n    },\n    update: helpers$1.noop,\n    transition: function transition(easingValue) {\n      var meta = this.getMeta();\n      var elements = meta.data || [];\n      var ilen = elements.length;\n      var i = 0;\n\n      for (; i < ilen; ++i) {\n        elements[i].transition(easingValue);\n      }\n\n      if (meta.dataset) {\n        meta.dataset.transition(easingValue);\n      }\n    },\n    draw: function draw() {\n      var meta = this.getMeta();\n      var elements = meta.data || [];\n      var ilen = elements.length;\n      var i = 0;\n\n      if (meta.dataset) {\n        meta.dataset.draw();\n      }\n\n      for (; i < ilen; ++i) {\n        elements[i].draw();\n      }\n    },\n    removeHoverStyle: function removeHoverStyle(element) {\n      helpers$1.merge(element._model, element.$previousStyle || {});\n      delete element.$previousStyle;\n    },\n    setHoverStyle: function setHoverStyle(element) {\n      var dataset = this.chart.data.datasets[element._datasetIndex];\n      var index = element._index;\n      var custom = element.custom || {};\n      var model = element._model;\n      var getHoverColor = helpers$1.getHoverColor;\n      element.$previousStyle = {\n        backgroundColor: model.backgroundColor,\n        borderColor: model.borderColor,\n        borderWidth: model.borderWidth\n      };\n      model.backgroundColor = resolve([custom.hoverBackgroundColor, dataset.hoverBackgroundColor, getHoverColor(model.backgroundColor)], undefined, index);\n      model.borderColor = resolve([custom.hoverBorderColor, dataset.hoverBorderColor, getHoverColor(model.borderColor)], undefined, index);\n      model.borderWidth = resolve([custom.hoverBorderWidth, dataset.hoverBorderWidth, model.borderWidth], undefined, index);\n    },\n\n    /**\n     * @private\n     */\n    resyncElements: function resyncElements() {\n      var me = this;\n      var meta = me.getMeta();\n      var data = me.getDataset().data;\n      var numMeta = meta.data.length;\n      var numData = data.length;\n\n      if (numData < numMeta) {\n        meta.data.splice(numData, numMeta - numData);\n      } else if (numData > numMeta) {\n        me.insertElements(numMeta, numData - numMeta);\n      }\n    },\n\n    /**\n     * @private\n     */\n    insertElements: function insertElements(start, count) {\n      for (var i = 0; i < count; ++i) {\n        this.addElementAndReset(start + i);\n      }\n    },\n\n    /**\n     * @private\n     */\n    onDataPush: function onDataPush() {\n      var count = arguments.length;\n      this.insertElements(this.getDataset().data.length - count, count);\n    },\n\n    /**\n     * @private\n     */\n    onDataPop: function onDataPop() {\n      this.getMeta().data.pop();\n    },\n\n    /**\n     * @private\n     */\n    onDataShift: function onDataShift() {\n      this.getMeta().data.shift();\n    },\n\n    /**\n     * @private\n     */\n    onDataSplice: function onDataSplice(start, count) {\n      this.getMeta().data.splice(start, count);\n      this.insertElements(start, arguments.length - 2);\n    },\n\n    /**\n     * @private\n     */\n    onDataUnshift: function onDataUnshift() {\n      this.insertElements(0, arguments.length);\n    }\n  });\n  DatasetController.extend = helpers$1.inherits;\n  var core_datasetController = DatasetController;\n\n  core_defaults._set('global', {\n    elements: {\n      arc: {\n        backgroundColor: core_defaults.global.defaultColor,\n        borderColor: '#fff',\n        borderWidth: 2,\n        borderAlign: 'center'\n      }\n    }\n  });\n\n  var element_arc = core_element.extend({\n    inLabelRange: function inLabelRange(mouseX) {\n      var vm = this._view;\n\n      if (vm) {\n        return Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2);\n      }\n\n      return false;\n    },\n    inRange: function inRange(chartX, chartY) {\n      var vm = this._view;\n\n      if (vm) {\n        var pointRelativePosition = helpers$1.getAngleFromPoint(vm, {\n          x: chartX,\n          y: chartY\n        });\n        var angle = pointRelativePosition.angle;\n        var distance = pointRelativePosition.distance; // Sanitise angle range\n\n        var startAngle = vm.startAngle;\n        var endAngle = vm.endAngle;\n\n        while (endAngle < startAngle) {\n          endAngle += 2.0 * Math.PI;\n        }\n\n        while (angle > endAngle) {\n          angle -= 2.0 * Math.PI;\n        }\n\n        while (angle < startAngle) {\n          angle += 2.0 * Math.PI;\n        } // Check if within the range of the open/close angle\n\n\n        var betweenAngles = angle >= startAngle && angle <= endAngle;\n        var withinRadius = distance >= vm.innerRadius && distance <= vm.outerRadius;\n        return betweenAngles && withinRadius;\n      }\n\n      return false;\n    },\n    getCenterPoint: function getCenterPoint() {\n      var vm = this._view;\n      var halfAngle = (vm.startAngle + vm.endAngle) / 2;\n      var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;\n      return {\n        x: vm.x + Math.cos(halfAngle) * halfRadius,\n        y: vm.y + Math.sin(halfAngle) * halfRadius\n      };\n    },\n    getArea: function getArea() {\n      var vm = this._view;\n      return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));\n    },\n    tooltipPosition: function tooltipPosition() {\n      var vm = this._view;\n      var centreAngle = vm.startAngle + (vm.endAngle - vm.startAngle) / 2;\n      var rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;\n      return {\n        x: vm.x + Math.cos(centreAngle) * rangeFromCentre,\n        y: vm.y + Math.sin(centreAngle) * rangeFromCentre\n      };\n    },\n    draw: function draw() {\n      var ctx = this._chart.ctx;\n      var vm = this._view;\n      var sA = vm.startAngle;\n      var eA = vm.endAngle;\n      var pixelMargin = vm.borderAlign === 'inner' ? 0.33 : 0;\n      var angleMargin;\n      ctx.save();\n      ctx.beginPath();\n      ctx.arc(vm.x, vm.y, Math.max(vm.outerRadius - pixelMargin, 0), sA, eA);\n      ctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);\n      ctx.closePath();\n      ctx.fillStyle = vm.backgroundColor;\n      ctx.fill();\n\n      if (vm.borderWidth) {\n        if (vm.borderAlign === 'inner') {\n          // Draw an inner border by cliping the arc and drawing a double-width border\n          // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n          ctx.beginPath();\n          angleMargin = pixelMargin / vm.outerRadius;\n          ctx.arc(vm.x, vm.y, vm.outerRadius, sA - angleMargin, eA + angleMargin);\n\n          if (vm.innerRadius > pixelMargin) {\n            angleMargin = pixelMargin / vm.innerRadius;\n            ctx.arc(vm.x, vm.y, vm.innerRadius - pixelMargin, eA + angleMargin, sA - angleMargin, true);\n          } else {\n            ctx.arc(vm.x, vm.y, pixelMargin, eA + Math.PI / 2, sA - Math.PI / 2);\n          }\n\n          ctx.closePath();\n          ctx.clip();\n          ctx.beginPath();\n          ctx.arc(vm.x, vm.y, vm.outerRadius, sA, eA);\n          ctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);\n          ctx.closePath();\n          ctx.lineWidth = vm.borderWidth * 2;\n          ctx.lineJoin = 'round';\n        } else {\n          ctx.lineWidth = vm.borderWidth;\n          ctx.lineJoin = 'bevel';\n        }\n\n        ctx.strokeStyle = vm.borderColor;\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  });\n  var valueOrDefault$1 = helpers$1.valueOrDefault;\n  var defaultColor = core_defaults.global.defaultColor;\n\n  core_defaults._set('global', {\n    elements: {\n      line: {\n        tension: 0.4,\n        backgroundColor: defaultColor,\n        borderWidth: 3,\n        borderColor: defaultColor,\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        capBezierPoints: true,\n        fill: true // do we fill in the area between the line and its base axis\n\n      }\n    }\n  });\n\n  var element_line = core_element.extend({\n    draw: function draw() {\n      var me = this;\n      var vm = me._view;\n      var ctx = me._chart.ctx;\n      var spanGaps = vm.spanGaps;\n\n      var points = me._children.slice(); // clone array\n\n\n      var globalDefaults = core_defaults.global;\n      var globalOptionLineElements = globalDefaults.elements.line;\n      var lastDrawnIndex = -1;\n      var index, current, previous, currentVM; // If we are looping, adding the first point again\n\n      if (me._loop && points.length) {\n        points.push(points[0]);\n      }\n\n      ctx.save(); // Stroke Line Options\n\n      ctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle; // IE 9 and 10 do not support line dash\n\n      if (ctx.setLineDash) {\n        ctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);\n      }\n\n      ctx.lineDashOffset = valueOrDefault$1(vm.borderDashOffset, globalOptionLineElements.borderDashOffset);\n      ctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;\n      ctx.lineWidth = valueOrDefault$1(vm.borderWidth, globalOptionLineElements.borderWidth);\n      ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor; // Stroke Line\n\n      ctx.beginPath();\n      lastDrawnIndex = -1;\n\n      for (index = 0; index < points.length; ++index) {\n        current = points[index];\n        previous = helpers$1.previousItem(points, index);\n        currentVM = current._view; // First point moves to it's starting position no matter what\n\n        if (index === 0) {\n          if (!currentVM.skip) {\n            ctx.moveTo(currentVM.x, currentVM.y);\n            lastDrawnIndex = index;\n          }\n        } else {\n          previous = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];\n\n          if (!currentVM.skip) {\n            if (lastDrawnIndex !== index - 1 && !spanGaps || lastDrawnIndex === -1) {\n              // There was a gap and this is the first point after the gap\n              ctx.moveTo(currentVM.x, currentVM.y);\n            } else {\n              // Line to next point\n              helpers$1.canvas.lineTo(ctx, previous._view, current._view);\n            }\n\n            lastDrawnIndex = index;\n          }\n        }\n      }\n\n      ctx.stroke();\n      ctx.restore();\n    }\n  });\n  var valueOrDefault$2 = helpers$1.valueOrDefault;\n  var defaultColor$1 = core_defaults.global.defaultColor;\n\n  core_defaults._set('global', {\n    elements: {\n      point: {\n        radius: 3,\n        pointStyle: 'circle',\n        backgroundColor: defaultColor$1,\n        borderColor: defaultColor$1,\n        borderWidth: 1,\n        // Hover\n        hitRadius: 1,\n        hoverRadius: 4,\n        hoverBorderWidth: 1\n      }\n    }\n  });\n\n  function xRange(mouseX) {\n    var vm = this._view;\n    return vm ? Math.abs(mouseX - vm.x) < vm.radius + vm.hitRadius : false;\n  }\n\n  function yRange(mouseY) {\n    var vm = this._view;\n    return vm ? Math.abs(mouseY - vm.y) < vm.radius + vm.hitRadius : false;\n  }\n\n  var element_point = core_element.extend({\n    inRange: function inRange(mouseX, mouseY) {\n      var vm = this._view;\n      return vm ? Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2) < Math.pow(vm.hitRadius + vm.radius, 2) : false;\n    },\n    inLabelRange: xRange,\n    inXRange: xRange,\n    inYRange: yRange,\n    getCenterPoint: function getCenterPoint() {\n      var vm = this._view;\n      return {\n        x: vm.x,\n        y: vm.y\n      };\n    },\n    getArea: function getArea() {\n      return Math.PI * Math.pow(this._view.radius, 2);\n    },\n    tooltipPosition: function tooltipPosition() {\n      var vm = this._view;\n      return {\n        x: vm.x,\n        y: vm.y,\n        padding: vm.radius + vm.borderWidth\n      };\n    },\n    draw: function draw(chartArea) {\n      var vm = this._view;\n      var ctx = this._chart.ctx;\n      var pointStyle = vm.pointStyle;\n      var rotation = vm.rotation;\n      var radius = vm.radius;\n      var x = vm.x;\n      var y = vm.y;\n      var globalDefaults = core_defaults.global;\n      var defaultColor = globalDefaults.defaultColor; // eslint-disable-line no-shadow\n\n      if (vm.skip) {\n        return;\n      } // Clipping for Points.\n\n\n      if (chartArea === undefined || helpers$1.canvas._isPointInArea(vm, chartArea)) {\n        ctx.strokeStyle = vm.borderColor || defaultColor;\n        ctx.lineWidth = valueOrDefault$2(vm.borderWidth, globalDefaults.elements.point.borderWidth);\n        ctx.fillStyle = vm.backgroundColor || defaultColor;\n        helpers$1.canvas.drawPoint(ctx, pointStyle, radius, x, y, rotation);\n      }\n    }\n  });\n  var defaultColor$2 = core_defaults.global.defaultColor;\n\n  core_defaults._set('global', {\n    elements: {\n      rectangle: {\n        backgroundColor: defaultColor$2,\n        borderColor: defaultColor$2,\n        borderSkipped: 'bottom',\n        borderWidth: 0\n      }\n    }\n  });\n\n  function isVertical(vm) {\n    return vm && vm.width !== undefined;\n  }\n  /**\n   * Helper function to get the bounds of the bar regardless of the orientation\n   * @param bar {Chart.Element.Rectangle} the bar\n   * @return {Bounds} bounds of the bar\n   * @private\n   */\n\n\n  function getBarBounds(vm) {\n    var x1, x2, y1, y2, half;\n\n    if (isVertical(vm)) {\n      half = vm.width / 2;\n      x1 = vm.x - half;\n      x2 = vm.x + half;\n      y1 = Math.min(vm.y, vm.base);\n      y2 = Math.max(vm.y, vm.base);\n    } else {\n      half = vm.height / 2;\n      x1 = Math.min(vm.x, vm.base);\n      x2 = Math.max(vm.x, vm.base);\n      y1 = vm.y - half;\n      y2 = vm.y + half;\n    }\n\n    return {\n      left: x1,\n      top: y1,\n      right: x2,\n      bottom: y2\n    };\n  }\n\n  function swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n  }\n\n  function parseBorderSkipped(vm) {\n    var edge = vm.borderSkipped;\n    var res = {};\n\n    if (!edge) {\n      return res;\n    }\n\n    if (vm.horizontal) {\n      if (vm.base > vm.x) {\n        edge = swap(edge, 'left', 'right');\n      }\n    } else if (vm.base < vm.y) {\n      edge = swap(edge, 'bottom', 'top');\n    }\n\n    res[edge] = true;\n    return res;\n  }\n\n  function parseBorderWidth(vm, maxW, maxH) {\n    var value = vm.borderWidth;\n    var skip = parseBorderSkipped(vm);\n    var t, r, b, l;\n\n    if (helpers$1.isObject(value)) {\n      t = +value.top || 0;\n      r = +value.right || 0;\n      b = +value.bottom || 0;\n      l = +value.left || 0;\n    } else {\n      t = r = b = l = +value || 0;\n    }\n\n    return {\n      t: skip.top || t < 0 ? 0 : t > maxH ? maxH : t,\n      r: skip.right || r < 0 ? 0 : r > maxW ? maxW : r,\n      b: skip.bottom || b < 0 ? 0 : b > maxH ? maxH : b,\n      l: skip.left || l < 0 ? 0 : l > maxW ? maxW : l\n    };\n  }\n\n  function boundingRects(vm) {\n    var bounds = getBarBounds(vm);\n    var width = bounds.right - bounds.left;\n    var height = bounds.bottom - bounds.top;\n    var border = parseBorderWidth(vm, width / 2, height / 2);\n    return {\n      outer: {\n        x: bounds.left,\n        y: bounds.top,\n        w: width,\n        h: height\n      },\n      inner: {\n        x: bounds.left + border.l,\n        y: bounds.top + border.t,\n        w: width - border.l - border.r,\n        h: height - border.t - border.b\n      }\n    };\n  }\n\n  function _inRange(vm, x, y) {\n    var skipX = x === null;\n    var skipY = y === null;\n    var bounds = !vm || skipX && skipY ? false : getBarBounds(vm);\n    return bounds && (skipX || x >= bounds.left && x <= bounds.right) && (skipY || y >= bounds.top && y <= bounds.bottom);\n  }\n\n  var element_rectangle = core_element.extend({\n    draw: function draw() {\n      var ctx = this._chart.ctx;\n      var vm = this._view;\n      var rects = boundingRects(vm);\n      var outer = rects.outer;\n      var inner = rects.inner;\n      ctx.fillStyle = vm.backgroundColor;\n      ctx.fillRect(outer.x, outer.y, outer.w, outer.h);\n\n      if (outer.w === inner.w && outer.h === inner.h) {\n        return;\n      }\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(outer.x, outer.y, outer.w, outer.h);\n      ctx.clip();\n      ctx.fillStyle = vm.borderColor;\n      ctx.rect(inner.x, inner.y, inner.w, inner.h);\n      ctx.fill('evenodd');\n      ctx.restore();\n    },\n    height: function height() {\n      var vm = this._view;\n      return vm.base - vm.y;\n    },\n    inRange: function inRange(mouseX, mouseY) {\n      return _inRange(this._view, mouseX, mouseY);\n    },\n    inLabelRange: function inLabelRange(mouseX, mouseY) {\n      var vm = this._view;\n      return isVertical(vm) ? _inRange(vm, mouseX, null) : _inRange(vm, null, mouseY);\n    },\n    inXRange: function inXRange(mouseX) {\n      return _inRange(this._view, mouseX, null);\n    },\n    inYRange: function inYRange(mouseY) {\n      return _inRange(this._view, null, mouseY);\n    },\n    getCenterPoint: function getCenterPoint() {\n      var vm = this._view;\n      var x, y;\n\n      if (isVertical(vm)) {\n        x = vm.x;\n        y = (vm.y + vm.base) / 2;\n      } else {\n        x = (vm.x + vm.base) / 2;\n        y = vm.y;\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    },\n    getArea: function getArea() {\n      var vm = this._view;\n      return isVertical(vm) ? vm.width * Math.abs(vm.y - vm.base) : vm.height * Math.abs(vm.x - vm.base);\n    },\n    tooltipPosition: function tooltipPosition() {\n      var vm = this._view;\n      return {\n        x: vm.x,\n        y: vm.y\n      };\n    }\n  });\n  var elements = {};\n  var Arc = element_arc;\n  var Line = element_line;\n  var Point = element_point;\n  var Rectangle = element_rectangle;\n  elements.Arc = Arc;\n  elements.Line = Line;\n  elements.Point = Point;\n  elements.Rectangle = Rectangle;\n  var resolve$1 = helpers$1.options.resolve;\n\n  core_defaults._set('bar', {\n    hover: {\n      mode: 'label'\n    },\n    scales: {\n      xAxes: [{\n        type: 'category',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        offset: true,\n        gridLines: {\n          offsetGridLines: true\n        }\n      }],\n      yAxes: [{\n        type: 'linear'\n      }]\n    }\n  });\n  /**\n   * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n   * @private\n   */\n\n\n  function computeMinSampleSize(scale, pixels) {\n    var min = scale.isHorizontal() ? scale.width : scale.height;\n    var ticks = scale.getTicks();\n    var prev, curr, i, ilen;\n\n    for (i = 1, ilen = pixels.length; i < ilen; ++i) {\n      min = Math.min(min, Math.abs(pixels[i] - pixels[i - 1]));\n    }\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      curr = scale.getPixelForTick(i);\n      min = i > 0 ? Math.min(min, curr - prev) : min;\n      prev = curr;\n    }\n\n    return min;\n  }\n  /**\n   * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n   * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n   * mode currently always generates bars equally sized (until we introduce scriptable options?).\n   * @private\n   */\n\n\n  function computeFitCategoryTraits(index, ruler, options) {\n    var thickness = options.barThickness;\n    var count = ruler.stackCount;\n    var curr = ruler.pixels[index];\n    var size, ratio;\n\n    if (helpers$1.isNullOrUndef(thickness)) {\n      size = ruler.min * options.categoryPercentage;\n      ratio = options.barPercentage;\n    } else {\n      // When bar thickness is enforced, category and bar percentages are ignored.\n      // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n      // and deprecate barPercentage since this value is ignored when thickness is absolute.\n      size = thickness * count;\n      ratio = 1;\n    }\n\n    return {\n      chunk: size / count,\n      ratio: ratio,\n      start: curr - size / 2\n    };\n  }\n  /**\n   * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n   * percentage options are 1), based on the previous and following categories. This mode\n   * generates bars with different widths when data are not evenly spaced.\n   * @private\n   */\n\n\n  function computeFlexCategoryTraits(index, ruler, options) {\n    var pixels = ruler.pixels;\n    var curr = pixels[index];\n    var prev = index > 0 ? pixels[index - 1] : null;\n    var next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    var percent = options.categoryPercentage;\n    var start, size;\n\n    if (prev === null) {\n      // first data: its size is double based on the next point or,\n      // if it's also the last data, we use the scale size.\n      prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n\n    if (next === null) {\n      // last data: its size is also double based on the previous point.\n      next = curr + curr - prev;\n    }\n\n    start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    size = Math.abs(next - prev) / 2 * percent;\n    return {\n      chunk: size / ruler.stackCount,\n      ratio: options.barPercentage,\n      start: start\n    };\n  }\n\n  var controller_bar = core_datasetController.extend({\n    dataElementType: elements.Rectangle,\n    initialize: function initialize() {\n      var me = this;\n      var meta;\n      core_datasetController.prototype.initialize.apply(me, arguments);\n      meta = me.getMeta();\n      meta.stack = me.getDataset().stack;\n      meta.bar = true;\n    },\n    update: function update(reset) {\n      var me = this;\n      var rects = me.getMeta().data;\n      var i, ilen;\n      me._ruler = me.getRuler();\n\n      for (i = 0, ilen = rects.length; i < ilen; ++i) {\n        me.updateElement(rects[i], i, reset);\n      }\n    },\n    updateElement: function updateElement(rectangle, index, reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var dataset = me.getDataset();\n\n      var options = me._resolveElementOptions(rectangle, index);\n\n      rectangle._xScale = me.getScaleForId(meta.xAxisID);\n      rectangle._yScale = me.getScaleForId(meta.yAxisID);\n      rectangle._datasetIndex = me.index;\n      rectangle._index = index;\n      rectangle._model = {\n        backgroundColor: options.backgroundColor,\n        borderColor: options.borderColor,\n        borderSkipped: options.borderSkipped,\n        borderWidth: options.borderWidth,\n        datasetLabel: dataset.label,\n        label: me.chart.data.labels[index]\n      };\n\n      me._updateElementGeometry(rectangle, index, reset);\n\n      rectangle.pivot();\n    },\n\n    /**\n     * @private\n     */\n    _updateElementGeometry: function _updateElementGeometry(rectangle, index, reset) {\n      var me = this;\n      var model = rectangle._model;\n\n      var vscale = me._getValueScale();\n\n      var base = vscale.getBasePixel();\n      var horizontal = vscale.isHorizontal();\n      var ruler = me._ruler || me.getRuler();\n      var vpixels = me.calculateBarValuePixels(me.index, index);\n      var ipixels = me.calculateBarIndexPixels(me.index, index, ruler);\n      model.horizontal = horizontal;\n      model.base = reset ? base : vpixels.base;\n      model.x = horizontal ? reset ? base : vpixels.head : ipixels.center;\n      model.y = horizontal ? ipixels.center : reset ? base : vpixels.head;\n      model.height = horizontal ? ipixels.size : undefined;\n      model.width = horizontal ? undefined : ipixels.size;\n    },\n\n    /**\n     * Returns the stacks based on groups and bar visibility.\n     * @param {number} [last] - The dataset index\n     * @returns {string[]} The list of stack IDs\n     * @private\n     */\n    _getStacks: function _getStacks(last) {\n      var me = this;\n      var chart = me.chart;\n\n      var scale = me._getIndexScale();\n\n      var stacked = scale.options.stacked;\n      var ilen = last === undefined ? chart.data.datasets.length : last + 1;\n      var stacks = [];\n      var i, meta;\n\n      for (i = 0; i < ilen; ++i) {\n        meta = chart.getDatasetMeta(i);\n\n        if (meta.bar && chart.isDatasetVisible(i) && (stacked === false || stacked === true && stacks.indexOf(meta.stack) === -1 || stacked === undefined && (meta.stack === undefined || stacks.indexOf(meta.stack) === -1))) {\n          stacks.push(meta.stack);\n        }\n      }\n\n      return stacks;\n    },\n\n    /**\n     * Returns the effective number of stacks based on groups and bar visibility.\n     * @private\n     */\n    getStackCount: function getStackCount() {\n      return this._getStacks().length;\n    },\n\n    /**\n     * Returns the stack index for the given dataset based on groups and bar visibility.\n     * @param {number} [datasetIndex] - The dataset index\n     * @param {string} [name] - The stack name to find\n     * @returns {number} The stack index\n     * @private\n     */\n    getStackIndex: function getStackIndex(datasetIndex, name) {\n      var stacks = this._getStacks(datasetIndex);\n\n      var index = name !== undefined ? stacks.indexOf(name) : -1; // indexOf returns -1 if element is not present\n\n      return index === -1 ? stacks.length - 1 : index;\n    },\n\n    /**\n     * @private\n     */\n    getRuler: function getRuler() {\n      var me = this;\n\n      var scale = me._getIndexScale();\n\n      var stackCount = me.getStackCount();\n      var datasetIndex = me.index;\n      var isHorizontal = scale.isHorizontal();\n      var start = isHorizontal ? scale.left : scale.top;\n      var end = start + (isHorizontal ? scale.width : scale.height);\n      var pixels = [];\n      var i, ilen, min;\n\n      for (i = 0, ilen = me.getMeta().data.length; i < ilen; ++i) {\n        pixels.push(scale.getPixelForValue(null, i, datasetIndex));\n      }\n\n      min = helpers$1.isNullOrUndef(scale.options.barThickness) ? computeMinSampleSize(scale, pixels) : -1;\n      return {\n        min: min,\n        pixels: pixels,\n        start: start,\n        end: end,\n        stackCount: stackCount,\n        scale: scale\n      };\n    },\n\n    /**\n     * Note: pixel values are not clamped to the scale area.\n     * @private\n     */\n    calculateBarValuePixels: function calculateBarValuePixels(datasetIndex, index) {\n      var me = this;\n      var chart = me.chart;\n      var meta = me.getMeta();\n\n      var scale = me._getValueScale();\n\n      var isHorizontal = scale.isHorizontal();\n      var datasets = chart.data.datasets;\n      var value = +scale.getRightValue(datasets[datasetIndex].data[index]);\n      var minBarLength = scale.options.minBarLength;\n      var stacked = scale.options.stacked;\n      var stack = meta.stack;\n      var start = 0;\n      var i, imeta, ivalue, base, head, size;\n\n      if (stacked || stacked === undefined && stack !== undefined) {\n        for (i = 0; i < datasetIndex; ++i) {\n          imeta = chart.getDatasetMeta(i);\n\n          if (imeta.bar && imeta.stack === stack && imeta.controller._getValueScaleId() === scale.id && chart.isDatasetVisible(i)) {\n            ivalue = +scale.getRightValue(datasets[i].data[index]);\n\n            if (value < 0 && ivalue < 0 || value >= 0 && ivalue > 0) {\n              start += ivalue;\n            }\n          }\n        }\n      }\n\n      base = scale.getPixelForValue(start);\n      head = scale.getPixelForValue(start + value);\n      size = head - base;\n\n      if (minBarLength !== undefined && Math.abs(size) < minBarLength) {\n        size = minBarLength;\n\n        if (value >= 0 && !isHorizontal || value < 0 && isHorizontal) {\n          head = base - minBarLength;\n        } else {\n          head = base + minBarLength;\n        }\n      }\n\n      return {\n        size: size,\n        base: base,\n        head: head,\n        center: head + size / 2\n      };\n    },\n\n    /**\n     * @private\n     */\n    calculateBarIndexPixels: function calculateBarIndexPixels(datasetIndex, index, ruler) {\n      var me = this;\n      var options = ruler.scale.options;\n      var range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options) : computeFitCategoryTraits(index, ruler, options);\n      var stackIndex = me.getStackIndex(datasetIndex, me.getMeta().stack);\n      var center = range.start + range.chunk * stackIndex + range.chunk / 2;\n      var size = Math.min(helpers$1.valueOrDefault(options.maxBarThickness, Infinity), range.chunk * range.ratio);\n      return {\n        base: center - size / 2,\n        head: center + size / 2,\n        center: center,\n        size: size\n      };\n    },\n    draw: function draw() {\n      var me = this;\n      var chart = me.chart;\n\n      var scale = me._getValueScale();\n\n      var rects = me.getMeta().data;\n      var dataset = me.getDataset();\n      var ilen = rects.length;\n      var i = 0;\n      helpers$1.canvas.clipArea(chart.ctx, chart.chartArea);\n\n      for (; i < ilen; ++i) {\n        if (!isNaN(scale.getRightValue(dataset.data[i]))) {\n          rects[i].draw();\n        }\n      }\n\n      helpers$1.canvas.unclipArea(chart.ctx);\n    },\n\n    /**\n     * @private\n     */\n    _resolveElementOptions: function _resolveElementOptions(rectangle, index) {\n      var me = this;\n      var chart = me.chart;\n      var datasets = chart.data.datasets;\n      var dataset = datasets[me.index];\n      var custom = rectangle.custom || {};\n      var options = chart.options.elements.rectangle;\n      var values = {};\n      var i, ilen, key; // Scriptable options\n\n      var context = {\n        chart: chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      var keys = ['backgroundColor', 'borderColor', 'borderSkipped', 'borderWidth'];\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$1([custom[key], dataset[key], options[key]], context, index);\n      }\n\n      return values;\n    }\n  });\n  var valueOrDefault$3 = helpers$1.valueOrDefault;\n  var resolve$2 = helpers$1.options.resolve;\n\n  core_defaults._set('bubble', {\n    hover: {\n      mode: 'single'\n    },\n    scales: {\n      xAxes: [{\n        type: 'linear',\n        // bubble should probably use a linear scale by default\n        position: 'bottom',\n        id: 'x-axis-0' // need an ID so datasets can reference the scale\n\n      }],\n      yAxes: [{\n        type: 'linear',\n        position: 'left',\n        id: 'y-axis-0'\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        title: function title() {\n          // Title doesn't make sense for scatter since we format the data as a point\n          return '';\n        },\n        label: function label(item, data) {\n          var datasetLabel = data.datasets[item.datasetIndex].label || '';\n          var dataPoint = data.datasets[item.datasetIndex].data[item.index];\n          return datasetLabel + ': (' + item.xLabel + ', ' + item.yLabel + ', ' + dataPoint.r + ')';\n        }\n      }\n    }\n  });\n\n  var controller_bubble = core_datasetController.extend({\n    /**\n     * @protected\n     */\n    dataElementType: elements.Point,\n\n    /**\n     * @protected\n     */\n    update: function update(reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var points = meta.data; // Update Points\n\n      helpers$1.each(points, function (point, index) {\n        me.updateElement(point, index, reset);\n      });\n    },\n\n    /**\n     * @protected\n     */\n    updateElement: function updateElement(point, index, reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var custom = point.custom || {};\n      var xScale = me.getScaleForId(meta.xAxisID);\n      var yScale = me.getScaleForId(meta.yAxisID);\n\n      var options = me._resolveElementOptions(point, index);\n\n      var data = me.getDataset().data[index];\n      var dsIndex = me.index;\n      var x = reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex);\n      var y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex);\n      point._xScale = xScale;\n      point._yScale = yScale;\n      point._options = options;\n      point._datasetIndex = dsIndex;\n      point._index = index;\n      point._model = {\n        backgroundColor: options.backgroundColor,\n        borderColor: options.borderColor,\n        borderWidth: options.borderWidth,\n        hitRadius: options.hitRadius,\n        pointStyle: options.pointStyle,\n        rotation: options.rotation,\n        radius: reset ? 0 : options.radius,\n        skip: custom.skip || isNaN(x) || isNaN(y),\n        x: x,\n        y: y\n      };\n      point.pivot();\n    },\n\n    /**\n     * @protected\n     */\n    setHoverStyle: function setHoverStyle(point) {\n      var model = point._model;\n      var options = point._options;\n      var getHoverColor = helpers$1.getHoverColor;\n      point.$previousStyle = {\n        backgroundColor: model.backgroundColor,\n        borderColor: model.borderColor,\n        borderWidth: model.borderWidth,\n        radius: model.radius\n      };\n      model.backgroundColor = valueOrDefault$3(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n      model.borderColor = valueOrDefault$3(options.hoverBorderColor, getHoverColor(options.borderColor));\n      model.borderWidth = valueOrDefault$3(options.hoverBorderWidth, options.borderWidth);\n      model.radius = options.radius + options.hoverRadius;\n    },\n\n    /**\n     * @private\n     */\n    _resolveElementOptions: function _resolveElementOptions(point, index) {\n      var me = this;\n      var chart = me.chart;\n      var datasets = chart.data.datasets;\n      var dataset = datasets[me.index];\n      var custom = point.custom || {};\n      var options = chart.options.elements.point;\n      var data = dataset.data[index];\n      var values = {};\n      var i, ilen, key; // Scriptable options\n\n      var context = {\n        chart: chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      var keys = ['backgroundColor', 'borderColor', 'borderWidth', 'hoverBackgroundColor', 'hoverBorderColor', 'hoverBorderWidth', 'hoverRadius', 'hitRadius', 'pointStyle', 'rotation'];\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$2([custom[key], dataset[key], options[key]], context, index);\n      } // Custom radius resolution\n\n\n      values.radius = resolve$2([custom.radius, data ? data.r : undefined, dataset.radius, options.radius], context, index);\n      return values;\n    }\n  });\n  var resolve$3 = helpers$1.options.resolve;\n  var valueOrDefault$4 = helpers$1.valueOrDefault;\n\n  core_defaults._set('doughnut', {\n    animation: {\n      // Boolean - Whether we animate the rotation of the Doughnut\n      animateRotate: true,\n      // Boolean - Whether we animate scaling the Doughnut from the centre\n      animateScale: false\n    },\n    hover: {\n      mode: 'single'\n    },\n    legendCallback: function legendCallback(chart) {\n      var text = [];\n      text.push('<ul class=\"' + chart.id + '-legend\">');\n      var data = chart.data;\n      var datasets = data.datasets;\n      var labels = data.labels;\n\n      if (datasets.length) {\n        for (var i = 0; i < datasets[0].data.length; ++i) {\n          text.push('<li><span style=\"background-color:' + datasets[0].backgroundColor[i] + '\"></span>');\n\n          if (labels[i]) {\n            text.push(labels[i]);\n          }\n\n          text.push('</li>');\n        }\n      }\n\n      text.push('</ul>');\n      return text.join('');\n    },\n    legend: {\n      labels: {\n        generateLabels: function generateLabels(chart) {\n          var data = chart.data;\n\n          if (data.labels.length && data.datasets.length) {\n            return data.labels.map(function (label, i) {\n              var meta = chart.getDatasetMeta(0);\n              var ds = data.datasets[0];\n              var arc = meta.data[i];\n              var custom = arc && arc.custom || {};\n              var arcOpts = chart.options.elements.arc;\n              var fill = resolve$3([custom.backgroundColor, ds.backgroundColor, arcOpts.backgroundColor], undefined, i);\n              var stroke = resolve$3([custom.borderColor, ds.borderColor, arcOpts.borderColor], undefined, i);\n              var bw = resolve$3([custom.borderWidth, ds.borderWidth, arcOpts.borderWidth], undefined, i);\n              return {\n                text: label,\n                fillStyle: fill,\n                strokeStyle: stroke,\n                lineWidth: bw,\n                hidden: isNaN(ds.data[i]) || meta.data[i].hidden,\n                // Extra data used for toggling the correct item\n                index: i\n              };\n            });\n          }\n\n          return [];\n        }\n      },\n      onClick: function onClick(e, legendItem) {\n        var index = legendItem.index;\n        var chart = this.chart;\n        var i, ilen, meta;\n\n        for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n          meta = chart.getDatasetMeta(i); // toggle visibility of index if exists\n\n          if (meta.data[index]) {\n            meta.data[index].hidden = !meta.data[index].hidden;\n          }\n        }\n\n        chart.update();\n      }\n    },\n    // The percentage of the chart that we cut out of the middle.\n    cutoutPercentage: 50,\n    // The rotation of the chart, where the first data arc begins.\n    rotation: Math.PI * -0.5,\n    // The total circumference of the chart.\n    circumference: Math.PI * 2.0,\n    // Need to override these to give a nice default\n    tooltips: {\n      callbacks: {\n        title: function title() {\n          return '';\n        },\n        label: function label(tooltipItem, data) {\n          var dataLabel = data.labels[tooltipItem.index];\n          var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n\n          if (helpers$1.isArray(dataLabel)) {\n            // show value on first line of multiline label\n            // need to clone because we are changing the value\n            dataLabel = dataLabel.slice();\n            dataLabel[0] += value;\n          } else {\n            dataLabel += value;\n          }\n\n          return dataLabel;\n        }\n      }\n    }\n  });\n\n  var controller_doughnut = core_datasetController.extend({\n    dataElementType: elements.Arc,\n    linkScales: helpers$1.noop,\n    // Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly\n    getRingIndex: function getRingIndex(datasetIndex) {\n      var ringIndex = 0;\n\n      for (var j = 0; j < datasetIndex; ++j) {\n        if (this.chart.isDatasetVisible(j)) {\n          ++ringIndex;\n        }\n      }\n\n      return ringIndex;\n    },\n    update: function update(reset) {\n      var me = this;\n      var chart = me.chart;\n      var chartArea = chart.chartArea;\n      var opts = chart.options;\n      var availableWidth = chartArea.right - chartArea.left;\n      var availableHeight = chartArea.bottom - chartArea.top;\n      var minSize = Math.min(availableWidth, availableHeight);\n      var offset = {\n        x: 0,\n        y: 0\n      };\n      var meta = me.getMeta();\n      var arcs = meta.data;\n      var cutoutPercentage = opts.cutoutPercentage;\n      var circumference = opts.circumference;\n\n      var chartWeight = me._getRingWeight(me.index);\n\n      var i, ilen; // If the chart's circumference isn't a full circle, calculate minSize as a ratio of the width/height of the arc\n\n      if (circumference < Math.PI * 2.0) {\n        var startAngle = opts.rotation % (Math.PI * 2.0);\n        startAngle += Math.PI * 2.0 * (startAngle >= Math.PI ? -1 : startAngle < -Math.PI ? 1 : 0);\n        var endAngle = startAngle + circumference;\n        var start = {\n          x: Math.cos(startAngle),\n          y: Math.sin(startAngle)\n        };\n        var end = {\n          x: Math.cos(endAngle),\n          y: Math.sin(endAngle)\n        };\n        var contains0 = startAngle <= 0 && endAngle >= 0 || startAngle <= Math.PI * 2.0 && Math.PI * 2.0 <= endAngle;\n        var contains90 = startAngle <= Math.PI * 0.5 && Math.PI * 0.5 <= endAngle || startAngle <= Math.PI * 2.5 && Math.PI * 2.5 <= endAngle;\n        var contains180 = startAngle <= -Math.PI && -Math.PI <= endAngle || startAngle <= Math.PI && Math.PI <= endAngle;\n        var contains270 = startAngle <= -Math.PI * 0.5 && -Math.PI * 0.5 <= endAngle || startAngle <= Math.PI * 1.5 && Math.PI * 1.5 <= endAngle;\n        var cutout = cutoutPercentage / 100.0;\n        var min = {\n          x: contains180 ? -1 : Math.min(start.x * (start.x < 0 ? 1 : cutout), end.x * (end.x < 0 ? 1 : cutout)),\n          y: contains270 ? -1 : Math.min(start.y * (start.y < 0 ? 1 : cutout), end.y * (end.y < 0 ? 1 : cutout))\n        };\n        var max = {\n          x: contains0 ? 1 : Math.max(start.x * (start.x > 0 ? 1 : cutout), end.x * (end.x > 0 ? 1 : cutout)),\n          y: contains90 ? 1 : Math.max(start.y * (start.y > 0 ? 1 : cutout), end.y * (end.y > 0 ? 1 : cutout))\n        };\n        var size = {\n          width: (max.x - min.x) * 0.5,\n          height: (max.y - min.y) * 0.5\n        };\n        minSize = Math.min(availableWidth / size.width, availableHeight / size.height);\n        offset = {\n          x: (max.x + min.x) * -0.5,\n          y: (max.y + min.y) * -0.5\n        };\n      }\n\n      for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n        arcs[i]._options = me._resolveElementOptions(arcs[i], i);\n      }\n\n      chart.borderWidth = me.getMaxBorderWidth();\n      chart.outerRadius = Math.max((minSize - chart.borderWidth) / 2, 0);\n      chart.innerRadius = Math.max(cutoutPercentage ? chart.outerRadius / 100 * cutoutPercentage : 0, 0);\n      chart.radiusLength = (chart.outerRadius - chart.innerRadius) / (me._getVisibleDatasetWeightTotal() || 1);\n      chart.offsetX = offset.x * chart.outerRadius;\n      chart.offsetY = offset.y * chart.outerRadius;\n      meta.total = me.calculateTotal();\n      me.outerRadius = chart.outerRadius - chart.radiusLength * me._getRingWeightOffset(me.index);\n      me.innerRadius = Math.max(me.outerRadius - chart.radiusLength * chartWeight, 0);\n\n      for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n        me.updateElement(arcs[i], i, reset);\n      }\n    },\n    updateElement: function updateElement(arc, index, reset) {\n      var me = this;\n      var chart = me.chart;\n      var chartArea = chart.chartArea;\n      var opts = chart.options;\n      var animationOpts = opts.animation;\n      var centerX = (chartArea.left + chartArea.right) / 2;\n      var centerY = (chartArea.top + chartArea.bottom) / 2;\n      var startAngle = opts.rotation; // non reset case handled later\n\n      var endAngle = opts.rotation; // non reset case handled later\n\n      var dataset = me.getDataset();\n      var circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / (2.0 * Math.PI));\n      var innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius;\n      var outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius;\n      var options = arc._options || {};\n      helpers$1.extend(arc, {\n        // Utility\n        _datasetIndex: me.index,\n        _index: index,\n        // Desired view properties\n        _model: {\n          backgroundColor: options.backgroundColor,\n          borderColor: options.borderColor,\n          borderWidth: options.borderWidth,\n          borderAlign: options.borderAlign,\n          x: centerX + chart.offsetX,\n          y: centerY + chart.offsetY,\n          startAngle: startAngle,\n          endAngle: endAngle,\n          circumference: circumference,\n          outerRadius: outerRadius,\n          innerRadius: innerRadius,\n          label: helpers$1.valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])\n        }\n      });\n      var model = arc._model; // Set correct angles if not resetting\n\n      if (!reset || !animationOpts.animateRotate) {\n        if (index === 0) {\n          model.startAngle = opts.rotation;\n        } else {\n          model.startAngle = me.getMeta().data[index - 1]._model.endAngle;\n        }\n\n        model.endAngle = model.startAngle + model.circumference;\n      }\n\n      arc.pivot();\n    },\n    calculateTotal: function calculateTotal() {\n      var dataset = this.getDataset();\n      var meta = this.getMeta();\n      var total = 0;\n      var value;\n      helpers$1.each(meta.data, function (element, index) {\n        value = dataset.data[index];\n\n        if (!isNaN(value) && !element.hidden) {\n          total += Math.abs(value);\n        }\n      });\n      /* if (total === 0) {\n      \ttotal = NaN;\n      }*/\n\n      return total;\n    },\n    calculateCircumference: function calculateCircumference(value) {\n      var total = this.getMeta().total;\n\n      if (total > 0 && !isNaN(value)) {\n        return Math.PI * 2.0 * (Math.abs(value) / total);\n      }\n\n      return 0;\n    },\n    // gets the max border or hover width to properly scale pie charts\n    getMaxBorderWidth: function getMaxBorderWidth(arcs) {\n      var me = this;\n      var max = 0;\n      var chart = me.chart;\n      var i, ilen, meta, arc, controller, options, borderWidth, hoverWidth;\n\n      if (!arcs) {\n        // Find the outmost visible dataset\n        for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n          if (chart.isDatasetVisible(i)) {\n            meta = chart.getDatasetMeta(i);\n            arcs = meta.data;\n\n            if (i !== me.index) {\n              controller = meta.controller;\n            }\n\n            break;\n          }\n        }\n      }\n\n      if (!arcs) {\n        return 0;\n      }\n\n      for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n        arc = arcs[i];\n        options = controller ? controller._resolveElementOptions(arc, i) : arc._options;\n\n        if (options.borderAlign !== 'inner') {\n          borderWidth = options.borderWidth;\n          hoverWidth = options.hoverBorderWidth;\n          max = borderWidth > max ? borderWidth : max;\n          max = hoverWidth > max ? hoverWidth : max;\n        }\n      }\n\n      return max;\n    },\n\n    /**\n     * @protected\n     */\n    setHoverStyle: function setHoverStyle(arc) {\n      var model = arc._model;\n      var options = arc._options;\n      var getHoverColor = helpers$1.getHoverColor;\n      arc.$previousStyle = {\n        backgroundColor: model.backgroundColor,\n        borderColor: model.borderColor,\n        borderWidth: model.borderWidth\n      };\n      model.backgroundColor = valueOrDefault$4(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n      model.borderColor = valueOrDefault$4(options.hoverBorderColor, getHoverColor(options.borderColor));\n      model.borderWidth = valueOrDefault$4(options.hoverBorderWidth, options.borderWidth);\n    },\n\n    /**\n     * @private\n     */\n    _resolveElementOptions: function _resolveElementOptions(arc, index) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = me.getDataset();\n      var custom = arc.custom || {};\n      var options = chart.options.elements.arc;\n      var values = {};\n      var i, ilen, key; // Scriptable options\n\n      var context = {\n        chart: chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      var keys = ['backgroundColor', 'borderColor', 'borderWidth', 'borderAlign', 'hoverBackgroundColor', 'hoverBorderColor', 'hoverBorderWidth'];\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$3([custom[key], dataset[key], options[key]], context, index);\n      }\n\n      return values;\n    },\n\n    /**\n     * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n     * @private\n     */\n    _getRingWeightOffset: function _getRingWeightOffset(datasetIndex) {\n      var ringWeightOffset = 0;\n\n      for (var i = 0; i < datasetIndex; ++i) {\n        if (this.chart.isDatasetVisible(i)) {\n          ringWeightOffset += this._getRingWeight(i);\n        }\n      }\n\n      return ringWeightOffset;\n    },\n\n    /**\n     * @private\n     */\n    _getRingWeight: function _getRingWeight(dataSetIndex) {\n      return Math.max(valueOrDefault$4(this.chart.data.datasets[dataSetIndex].weight, 1), 0);\n    },\n\n    /**\n     * Returns the sum of all visibile data set weights.  This value can be 0.\n     * @private\n     */\n    _getVisibleDatasetWeightTotal: function _getVisibleDatasetWeightTotal() {\n      return this._getRingWeightOffset(this.chart.data.datasets.length);\n    }\n  });\n\n  core_defaults._set('horizontalBar', {\n    hover: {\n      mode: 'index',\n      axis: 'y'\n    },\n    scales: {\n      xAxes: [{\n        type: 'linear',\n        position: 'bottom'\n      }],\n      yAxes: [{\n        type: 'category',\n        position: 'left',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        offset: true,\n        gridLines: {\n          offsetGridLines: true\n        }\n      }]\n    },\n    elements: {\n      rectangle: {\n        borderSkipped: 'left'\n      }\n    },\n    tooltips: {\n      mode: 'index',\n      axis: 'y'\n    }\n  });\n\n  var controller_horizontalBar = controller_bar.extend({\n    /**\n     * @private\n     */\n    _getValueScaleId: function _getValueScaleId() {\n      return this.getMeta().xAxisID;\n    },\n\n    /**\n     * @private\n     */\n    _getIndexScaleId: function _getIndexScaleId() {\n      return this.getMeta().yAxisID;\n    }\n  });\n  var valueOrDefault$5 = helpers$1.valueOrDefault;\n  var resolve$4 = helpers$1.options.resolve;\n  var isPointInArea = helpers$1.canvas._isPointInArea;\n\n  core_defaults._set('line', {\n    showLines: true,\n    spanGaps: false,\n    hover: {\n      mode: 'label'\n    },\n    scales: {\n      xAxes: [{\n        type: 'category',\n        id: 'x-axis-0'\n      }],\n      yAxes: [{\n        type: 'linear',\n        id: 'y-axis-0'\n      }]\n    }\n  });\n\n  function lineEnabled(dataset, options) {\n    return valueOrDefault$5(dataset.showLine, options.showLines);\n  }\n\n  var controller_line = core_datasetController.extend({\n    datasetElementType: elements.Line,\n    dataElementType: elements.Point,\n    update: function update(reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var line = meta.dataset;\n      var points = meta.data || [];\n      var scale = me.getScaleForId(meta.yAxisID);\n      var dataset = me.getDataset();\n      var showLine = lineEnabled(dataset, me.chart.options);\n      var i, ilen; // Update Line\n\n      if (showLine) {\n        // Compatibility: If the properties are defined with only the old name, use those values\n        if (dataset.tension !== undefined && dataset.lineTension === undefined) {\n          dataset.lineTension = dataset.tension;\n        } // Utility\n\n\n        line._scale = scale;\n        line._datasetIndex = me.index; // Data\n\n        line._children = points; // Model\n\n        line._model = me._resolveLineOptions(line);\n        line.pivot();\n      } // Update Points\n\n\n      for (i = 0, ilen = points.length; i < ilen; ++i) {\n        me.updateElement(points[i], i, reset);\n      }\n\n      if (showLine && line._model.tension !== 0) {\n        me.updateBezierControlPoints();\n      } // Now pivot the point for animation\n\n\n      for (i = 0, ilen = points.length; i < ilen; ++i) {\n        points[i].pivot();\n      }\n    },\n    updateElement: function updateElement(point, index, reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var custom = point.custom || {};\n      var dataset = me.getDataset();\n      var datasetIndex = me.index;\n      var value = dataset.data[index];\n      var yScale = me.getScaleForId(meta.yAxisID);\n      var xScale = me.getScaleForId(meta.xAxisID);\n      var lineModel = meta.dataset._model;\n      var x, y;\n\n      var options = me._resolvePointOptions(point, index);\n\n      x = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex);\n      y = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex); // Utility\n\n      point._xScale = xScale;\n      point._yScale = yScale;\n      point._options = options;\n      point._datasetIndex = datasetIndex;\n      point._index = index; // Desired view properties\n\n      point._model = {\n        x: x,\n        y: y,\n        skip: custom.skip || isNaN(x) || isNaN(y),\n        // Appearance\n        radius: options.radius,\n        pointStyle: options.pointStyle,\n        rotation: options.rotation,\n        backgroundColor: options.backgroundColor,\n        borderColor: options.borderColor,\n        borderWidth: options.borderWidth,\n        tension: valueOrDefault$5(custom.tension, lineModel ? lineModel.tension : 0),\n        steppedLine: lineModel ? lineModel.steppedLine : false,\n        // Tooltip\n        hitRadius: options.hitRadius\n      };\n    },\n\n    /**\n     * @private\n     */\n    _resolvePointOptions: function _resolvePointOptions(element, index) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = chart.data.datasets[me.index];\n      var custom = element.custom || {};\n      var options = chart.options.elements.point;\n      var values = {};\n      var i, ilen, key; // Scriptable options\n\n      var context = {\n        chart: chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      var ELEMENT_OPTIONS = {\n        backgroundColor: 'pointBackgroundColor',\n        borderColor: 'pointBorderColor',\n        borderWidth: 'pointBorderWidth',\n        hitRadius: 'pointHitRadius',\n        hoverBackgroundColor: 'pointHoverBackgroundColor',\n        hoverBorderColor: 'pointHoverBorderColor',\n        hoverBorderWidth: 'pointHoverBorderWidth',\n        hoverRadius: 'pointHoverRadius',\n        pointStyle: 'pointStyle',\n        radius: 'pointRadius',\n        rotation: 'pointRotation'\n      };\n      var keys = Object.keys(ELEMENT_OPTIONS);\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$4([custom[key], dataset[ELEMENT_OPTIONS[key]], dataset[key], options[key]], context, index);\n      }\n\n      return values;\n    },\n\n    /**\n     * @private\n     */\n    _resolveLineOptions: function _resolveLineOptions(element) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = chart.data.datasets[me.index];\n      var custom = element.custom || {};\n      var options = chart.options;\n      var elementOptions = options.elements.line;\n      var values = {};\n      var i, ilen, key;\n      var keys = ['backgroundColor', 'borderWidth', 'borderColor', 'borderCapStyle', 'borderDash', 'borderDashOffset', 'borderJoinStyle', 'fill', 'cubicInterpolationMode'];\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$4([custom[key], dataset[key], elementOptions[key]]);\n      } // The default behavior of lines is to break at null values, according\n      // to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158\n      // This option gives lines the ability to span gaps\n\n\n      values.spanGaps = valueOrDefault$5(dataset.spanGaps, options.spanGaps);\n      values.tension = valueOrDefault$5(dataset.lineTension, elementOptions.tension);\n      values.steppedLine = resolve$4([custom.steppedLine, dataset.steppedLine, elementOptions.stepped]);\n      return values;\n    },\n    calculatePointY: function calculatePointY(value, index, datasetIndex) {\n      var me = this;\n      var chart = me.chart;\n      var meta = me.getMeta();\n      var yScale = me.getScaleForId(meta.yAxisID);\n      var sumPos = 0;\n      var sumNeg = 0;\n      var i, ds, dsMeta;\n\n      if (yScale.options.stacked) {\n        for (i = 0; i < datasetIndex; i++) {\n          ds = chart.data.datasets[i];\n          dsMeta = chart.getDatasetMeta(i);\n\n          if (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i)) {\n            var stackedRightValue = Number(yScale.getRightValue(ds.data[index]));\n\n            if (stackedRightValue < 0) {\n              sumNeg += stackedRightValue || 0;\n            } else {\n              sumPos += stackedRightValue || 0;\n            }\n          }\n        }\n\n        var rightValue = Number(yScale.getRightValue(value));\n\n        if (rightValue < 0) {\n          return yScale.getPixelForValue(sumNeg + rightValue);\n        }\n\n        return yScale.getPixelForValue(sumPos + rightValue);\n      }\n\n      return yScale.getPixelForValue(value);\n    },\n    updateBezierControlPoints: function updateBezierControlPoints() {\n      var me = this;\n      var chart = me.chart;\n      var meta = me.getMeta();\n      var lineModel = meta.dataset._model;\n      var area = chart.chartArea;\n      var points = meta.data || [];\n      var i, ilen, model, controlPoints; // Only consider points that are drawn in case the spanGaps option is used\n\n      if (lineModel.spanGaps) {\n        points = points.filter(function (pt) {\n          return !pt._model.skip;\n        });\n      }\n\n      function capControlPoint(pt, min, max) {\n        return Math.max(Math.min(pt, max), min);\n      }\n\n      if (lineModel.cubicInterpolationMode === 'monotone') {\n        helpers$1.splineCurveMonotone(points);\n      } else {\n        for (i = 0, ilen = points.length; i < ilen; ++i) {\n          model = points[i]._model;\n          controlPoints = helpers$1.splineCurve(helpers$1.previousItem(points, i)._model, model, helpers$1.nextItem(points, i)._model, lineModel.tension);\n          model.controlPointPreviousX = controlPoints.previous.x;\n          model.controlPointPreviousY = controlPoints.previous.y;\n          model.controlPointNextX = controlPoints.next.x;\n          model.controlPointNextY = controlPoints.next.y;\n        }\n      }\n\n      if (chart.options.elements.line.capBezierPoints) {\n        for (i = 0, ilen = points.length; i < ilen; ++i) {\n          model = points[i]._model;\n\n          if (isPointInArea(model, area)) {\n            if (i > 0 && isPointInArea(points[i - 1]._model, area)) {\n              model.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);\n              model.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);\n            }\n\n            if (i < points.length - 1 && isPointInArea(points[i + 1]._model, area)) {\n              model.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);\n              model.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);\n            }\n          }\n        }\n      }\n    },\n    draw: function draw() {\n      var me = this;\n      var chart = me.chart;\n      var meta = me.getMeta();\n      var points = meta.data || [];\n      var area = chart.chartArea;\n      var ilen = points.length;\n      var halfBorderWidth;\n      var i = 0;\n\n      if (lineEnabled(me.getDataset(), chart.options)) {\n        halfBorderWidth = (meta.dataset._model.borderWidth || 0) / 2;\n        helpers$1.canvas.clipArea(chart.ctx, {\n          left: area.left,\n          right: area.right,\n          top: area.top - halfBorderWidth,\n          bottom: area.bottom + halfBorderWidth\n        });\n        meta.dataset.draw();\n        helpers$1.canvas.unclipArea(chart.ctx);\n      } // Draw the points\n\n\n      for (; i < ilen; ++i) {\n        points[i].draw(area);\n      }\n    },\n\n    /**\n     * @protected\n     */\n    setHoverStyle: function setHoverStyle(point) {\n      var model = point._model;\n      var options = point._options;\n      var getHoverColor = helpers$1.getHoverColor;\n      point.$previousStyle = {\n        backgroundColor: model.backgroundColor,\n        borderColor: model.borderColor,\n        borderWidth: model.borderWidth,\n        radius: model.radius\n      };\n      model.backgroundColor = valueOrDefault$5(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n      model.borderColor = valueOrDefault$5(options.hoverBorderColor, getHoverColor(options.borderColor));\n      model.borderWidth = valueOrDefault$5(options.hoverBorderWidth, options.borderWidth);\n      model.radius = valueOrDefault$5(options.hoverRadius, options.radius);\n    }\n  });\n  var resolve$5 = helpers$1.options.resolve;\n\n  core_defaults._set('polarArea', {\n    scale: {\n      type: 'radialLinear',\n      angleLines: {\n        display: false\n      },\n      gridLines: {\n        circular: true\n      },\n      pointLabels: {\n        display: false\n      },\n      ticks: {\n        beginAtZero: true\n      }\n    },\n    // Boolean - Whether to animate the rotation of the chart\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    startAngle: -0.5 * Math.PI,\n    legendCallback: function legendCallback(chart) {\n      var text = [];\n      text.push('<ul class=\"' + chart.id + '-legend\">');\n      var data = chart.data;\n      var datasets = data.datasets;\n      var labels = data.labels;\n\n      if (datasets.length) {\n        for (var i = 0; i < datasets[0].data.length; ++i) {\n          text.push('<li><span style=\"background-color:' + datasets[0].backgroundColor[i] + '\"></span>');\n\n          if (labels[i]) {\n            text.push(labels[i]);\n          }\n\n          text.push('</li>');\n        }\n      }\n\n      text.push('</ul>');\n      return text.join('');\n    },\n    legend: {\n      labels: {\n        generateLabels: function generateLabels(chart) {\n          var data = chart.data;\n\n          if (data.labels.length && data.datasets.length) {\n            return data.labels.map(function (label, i) {\n              var meta = chart.getDatasetMeta(0);\n              var ds = data.datasets[0];\n              var arc = meta.data[i];\n              var custom = arc.custom || {};\n              var arcOpts = chart.options.elements.arc;\n              var fill = resolve$5([custom.backgroundColor, ds.backgroundColor, arcOpts.backgroundColor], undefined, i);\n              var stroke = resolve$5([custom.borderColor, ds.borderColor, arcOpts.borderColor], undefined, i);\n              var bw = resolve$5([custom.borderWidth, ds.borderWidth, arcOpts.borderWidth], undefined, i);\n              return {\n                text: label,\n                fillStyle: fill,\n                strokeStyle: stroke,\n                lineWidth: bw,\n                hidden: isNaN(ds.data[i]) || meta.data[i].hidden,\n                // Extra data used for toggling the correct item\n                index: i\n              };\n            });\n          }\n\n          return [];\n        }\n      },\n      onClick: function onClick(e, legendItem) {\n        var index = legendItem.index;\n        var chart = this.chart;\n        var i, ilen, meta;\n\n        for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n          meta = chart.getDatasetMeta(i);\n          meta.data[index].hidden = !meta.data[index].hidden;\n        }\n\n        chart.update();\n      }\n    },\n    // Need to override these to give a nice default\n    tooltips: {\n      callbacks: {\n        title: function title() {\n          return '';\n        },\n        label: function label(item, data) {\n          return data.labels[item.index] + ': ' + item.yLabel;\n        }\n      }\n    }\n  });\n\n  var controller_polarArea = core_datasetController.extend({\n    dataElementType: elements.Arc,\n    linkScales: helpers$1.noop,\n    update: function update(reset) {\n      var me = this;\n      var dataset = me.getDataset();\n      var meta = me.getMeta();\n      var start = me.chart.options.startAngle || 0;\n      var starts = me._starts = [];\n      var angles = me._angles = [];\n      var arcs = meta.data;\n      var i, ilen, angle;\n\n      me._updateRadius();\n\n      meta.count = me.countVisibleElements();\n\n      for (i = 0, ilen = dataset.data.length; i < ilen; i++) {\n        starts[i] = start;\n        angle = me._computeAngle(i);\n        angles[i] = angle;\n        start += angle;\n      }\n\n      for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n        arcs[i]._options = me._resolveElementOptions(arcs[i], i);\n        me.updateElement(arcs[i], i, reset);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _updateRadius: function _updateRadius() {\n      var me = this;\n      var chart = me.chart;\n      var chartArea = chart.chartArea;\n      var opts = chart.options;\n      var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n      chart.outerRadius = Math.max(minSize / 2, 0);\n      chart.innerRadius = Math.max(opts.cutoutPercentage ? chart.outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n      chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();\n      me.outerRadius = chart.outerRadius - chart.radiusLength * me.index;\n      me.innerRadius = me.outerRadius - chart.radiusLength;\n    },\n    updateElement: function updateElement(arc, index, reset) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = me.getDataset();\n      var opts = chart.options;\n      var animationOpts = opts.animation;\n      var scale = chart.scale;\n      var labels = chart.data.labels;\n      var centerX = scale.xCenter;\n      var centerY = scale.yCenter; // var negHalfPI = -0.5 * Math.PI;\n\n      var datasetStartAngle = opts.startAngle;\n      var distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);\n      var startAngle = me._starts[index];\n      var endAngle = startAngle + (arc.hidden ? 0 : me._angles[index]);\n      var resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);\n      var options = arc._options || {};\n      helpers$1.extend(arc, {\n        // Utility\n        _datasetIndex: me.index,\n        _index: index,\n        _scale: scale,\n        // Desired view properties\n        _model: {\n          backgroundColor: options.backgroundColor,\n          borderColor: options.borderColor,\n          borderWidth: options.borderWidth,\n          borderAlign: options.borderAlign,\n          x: centerX,\n          y: centerY,\n          innerRadius: 0,\n          outerRadius: reset ? resetRadius : distance,\n          startAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,\n          endAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,\n          label: helpers$1.valueAtIndexOrDefault(labels, index, labels[index])\n        }\n      });\n      arc.pivot();\n    },\n    countVisibleElements: function countVisibleElements() {\n      var dataset = this.getDataset();\n      var meta = this.getMeta();\n      var count = 0;\n      helpers$1.each(meta.data, function (element, index) {\n        if (!isNaN(dataset.data[index]) && !element.hidden) {\n          count++;\n        }\n      });\n      return count;\n    },\n\n    /**\n     * @protected\n     */\n    setHoverStyle: function setHoverStyle(arc) {\n      var model = arc._model;\n      var options = arc._options;\n      var getHoverColor = helpers$1.getHoverColor;\n      var valueOrDefault = helpers$1.valueOrDefault;\n      arc.$previousStyle = {\n        backgroundColor: model.backgroundColor,\n        borderColor: model.borderColor,\n        borderWidth: model.borderWidth\n      };\n      model.backgroundColor = valueOrDefault(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n      model.borderColor = valueOrDefault(options.hoverBorderColor, getHoverColor(options.borderColor));\n      model.borderWidth = valueOrDefault(options.hoverBorderWidth, options.borderWidth);\n    },\n\n    /**\n     * @private\n     */\n    _resolveElementOptions: function _resolveElementOptions(arc, index) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = me.getDataset();\n      var custom = arc.custom || {};\n      var options = chart.options.elements.arc;\n      var values = {};\n      var i, ilen, key; // Scriptable options\n\n      var context = {\n        chart: chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      var keys = ['backgroundColor', 'borderColor', 'borderWidth', 'borderAlign', 'hoverBackgroundColor', 'hoverBorderColor', 'hoverBorderWidth'];\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$5([custom[key], dataset[key], options[key]], context, index);\n      }\n\n      return values;\n    },\n\n    /**\n     * @private\n     */\n    _computeAngle: function _computeAngle(index) {\n      var me = this;\n      var count = this.getMeta().count;\n      var dataset = me.getDataset();\n      var meta = me.getMeta();\n\n      if (isNaN(dataset.data[index]) || meta.data[index].hidden) {\n        return 0;\n      } // Scriptable options\n\n\n      var context = {\n        chart: me.chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      return resolve$5([me.chart.options.elements.arc.angle, 2 * Math.PI / count], context, index);\n    }\n  });\n\n  core_defaults._set('pie', helpers$1.clone(core_defaults.doughnut));\n\n  core_defaults._set('pie', {\n    cutoutPercentage: 0\n  }); // Pie charts are Doughnut chart with different defaults\n\n\n  var controller_pie = controller_doughnut;\n  var valueOrDefault$6 = helpers$1.valueOrDefault;\n  var resolve$6 = helpers$1.options.resolve;\n\n  core_defaults._set('radar', {\n    scale: {\n      type: 'radialLinear'\n    },\n    elements: {\n      line: {\n        tension: 0 // no bezier in radar\n\n      }\n    }\n  });\n\n  var controller_radar = core_datasetController.extend({\n    datasetElementType: elements.Line,\n    dataElementType: elements.Point,\n    linkScales: helpers$1.noop,\n    update: function update(reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var line = meta.dataset;\n      var points = meta.data || [];\n      var scale = me.chart.scale;\n      var dataset = me.getDataset();\n      var i, ilen; // Compatibility: If the properties are defined with only the old name, use those values\n\n      if (dataset.tension !== undefined && dataset.lineTension === undefined) {\n        dataset.lineTension = dataset.tension;\n      } // Utility\n\n\n      line._scale = scale;\n      line._datasetIndex = me.index; // Data\n\n      line._children = points;\n      line._loop = true; // Model\n\n      line._model = me._resolveLineOptions(line);\n      line.pivot(); // Update Points\n\n      for (i = 0, ilen = points.length; i < ilen; ++i) {\n        me.updateElement(points[i], i, reset);\n      } // Update bezier control points\n\n\n      me.updateBezierControlPoints(); // Now pivot the point for animation\n\n      for (i = 0, ilen = points.length; i < ilen; ++i) {\n        points[i].pivot();\n      }\n    },\n    updateElement: function updateElement(point, index, reset) {\n      var me = this;\n      var custom = point.custom || {};\n      var dataset = me.getDataset();\n      var scale = me.chart.scale;\n      var pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);\n\n      var options = me._resolvePointOptions(point, index);\n\n      var lineModel = me.getMeta().dataset._model;\n\n      var x = reset ? scale.xCenter : pointPosition.x;\n      var y = reset ? scale.yCenter : pointPosition.y; // Utility\n\n      point._scale = scale;\n      point._options = options;\n      point._datasetIndex = me.index;\n      point._index = index; // Desired view properties\n\n      point._model = {\n        x: x,\n        // value not used in dataset scale, but we want a consistent API between scales\n        y: y,\n        skip: custom.skip || isNaN(x) || isNaN(y),\n        // Appearance\n        radius: options.radius,\n        pointStyle: options.pointStyle,\n        rotation: options.rotation,\n        backgroundColor: options.backgroundColor,\n        borderColor: options.borderColor,\n        borderWidth: options.borderWidth,\n        tension: valueOrDefault$6(custom.tension, lineModel ? lineModel.tension : 0),\n        // Tooltip\n        hitRadius: options.hitRadius\n      };\n    },\n\n    /**\n     * @private\n     */\n    _resolvePointOptions: function _resolvePointOptions(element, index) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = chart.data.datasets[me.index];\n      var custom = element.custom || {};\n      var options = chart.options.elements.point;\n      var values = {};\n      var i, ilen, key; // Scriptable options\n\n      var context = {\n        chart: chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      var ELEMENT_OPTIONS = {\n        backgroundColor: 'pointBackgroundColor',\n        borderColor: 'pointBorderColor',\n        borderWidth: 'pointBorderWidth',\n        hitRadius: 'pointHitRadius',\n        hoverBackgroundColor: 'pointHoverBackgroundColor',\n        hoverBorderColor: 'pointHoverBorderColor',\n        hoverBorderWidth: 'pointHoverBorderWidth',\n        hoverRadius: 'pointHoverRadius',\n        pointStyle: 'pointStyle',\n        radius: 'pointRadius',\n        rotation: 'pointRotation'\n      };\n      var keys = Object.keys(ELEMENT_OPTIONS);\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$6([custom[key], dataset[ELEMENT_OPTIONS[key]], dataset[key], options[key]], context, index);\n      }\n\n      return values;\n    },\n\n    /**\n     * @private\n     */\n    _resolveLineOptions: function _resolveLineOptions(element) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = chart.data.datasets[me.index];\n      var custom = element.custom || {};\n      var options = chart.options.elements.line;\n      var values = {};\n      var i, ilen, key;\n      var keys = ['backgroundColor', 'borderWidth', 'borderColor', 'borderCapStyle', 'borderDash', 'borderDashOffset', 'borderJoinStyle', 'fill'];\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$6([custom[key], dataset[key], options[key]]);\n      }\n\n      values.tension = valueOrDefault$6(dataset.lineTension, options.tension);\n      return values;\n    },\n    updateBezierControlPoints: function updateBezierControlPoints() {\n      var me = this;\n      var meta = me.getMeta();\n      var area = me.chart.chartArea;\n      var points = meta.data || [];\n      var i, ilen, model, controlPoints;\n\n      function capControlPoint(pt, min, max) {\n        return Math.max(Math.min(pt, max), min);\n      }\n\n      for (i = 0, ilen = points.length; i < ilen; ++i) {\n        model = points[i]._model;\n        controlPoints = helpers$1.splineCurve(helpers$1.previousItem(points, i, true)._model, model, helpers$1.nextItem(points, i, true)._model, model.tension); // Prevent the bezier going outside of the bounds of the graph\n\n        model.controlPointPreviousX = capControlPoint(controlPoints.previous.x, area.left, area.right);\n        model.controlPointPreviousY = capControlPoint(controlPoints.previous.y, area.top, area.bottom);\n        model.controlPointNextX = capControlPoint(controlPoints.next.x, area.left, area.right);\n        model.controlPointNextY = capControlPoint(controlPoints.next.y, area.top, area.bottom);\n      }\n    },\n    setHoverStyle: function setHoverStyle(point) {\n      var model = point._model;\n      var options = point._options;\n      var getHoverColor = helpers$1.getHoverColor;\n      point.$previousStyle = {\n        backgroundColor: model.backgroundColor,\n        borderColor: model.borderColor,\n        borderWidth: model.borderWidth,\n        radius: model.radius\n      };\n      model.backgroundColor = valueOrDefault$6(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n      model.borderColor = valueOrDefault$6(options.hoverBorderColor, getHoverColor(options.borderColor));\n      model.borderWidth = valueOrDefault$6(options.hoverBorderWidth, options.borderWidth);\n      model.radius = valueOrDefault$6(options.hoverRadius, options.radius);\n    }\n  });\n\n  core_defaults._set('scatter', {\n    hover: {\n      mode: 'single'\n    },\n    scales: {\n      xAxes: [{\n        id: 'x-axis-1',\n        // need an ID so datasets can reference the scale\n        type: 'linear',\n        // scatter should not use a category axis\n        position: 'bottom'\n      }],\n      yAxes: [{\n        id: 'y-axis-1',\n        type: 'linear',\n        position: 'left'\n      }]\n    },\n    showLines: false,\n    tooltips: {\n      callbacks: {\n        title: function title() {\n          return ''; // doesn't make sense for scatter since data are formatted as a point\n        },\n        label: function label(item) {\n          return '(' + item.xLabel + ', ' + item.yLabel + ')';\n        }\n      }\n    }\n  }); // Scatter charts use line controllers\n\n\n  var controller_scatter = controller_line; // NOTE export a map in which the key represents the controller type, not\n  // the class, and so must be CamelCase in order to be correctly retrieved\n  // by the controller in core.controller.js (`controllers[meta.type]`).\n\n  var controllers = {\n    bar: controller_bar,\n    bubble: controller_bubble,\n    doughnut: controller_doughnut,\n    horizontalBar: controller_horizontalBar,\n    line: controller_line,\n    polarArea: controller_polarArea,\n    pie: controller_pie,\n    radar: controller_radar,\n    scatter: controller_scatter\n  };\n  /**\n   * Helper function to get relative position for an event\n   * @param {Event|IEvent} event - The event to get the position for\n   * @param {Chart} chart - The chart\n   * @returns {object} the event position\n   */\n\n  function getRelativePosition(e, chart) {\n    if (e.native) {\n      return {\n        x: e.x,\n        y: e.y\n      };\n    }\n\n    return helpers$1.getRelativePosition(e, chart);\n  }\n  /**\n   * Helper function to traverse all of the visible elements in the chart\n   * @param {Chart} chart - the chart\n   * @param {function} handler - the callback to execute for each visible item\n   */\n\n\n  function parseVisibleItems(chart, handler) {\n    var datasets = chart.data.datasets;\n    var meta, i, j, ilen, jlen;\n\n    for (i = 0, ilen = datasets.length; i < ilen; ++i) {\n      if (!chart.isDatasetVisible(i)) {\n        continue;\n      }\n\n      meta = chart.getDatasetMeta(i);\n\n      for (j = 0, jlen = meta.data.length; j < jlen; ++j) {\n        var element = meta.data[j];\n\n        if (!element._view.skip) {\n          handler(element);\n        }\n      }\n    }\n  }\n  /**\n   * Helper function to get the items that intersect the event position\n   * @param {ChartElement[]} items - elements to filter\n   * @param {object} position - the point to be nearest to\n   * @return {ChartElement[]} the nearest items\n   */\n\n\n  function getIntersectItems(chart, position) {\n    var elements = [];\n    parseVisibleItems(chart, function (element) {\n      if (element.inRange(position.x, position.y)) {\n        elements.push(element);\n      }\n    });\n    return elements;\n  }\n  /**\n   * Helper function to get the items nearest to the event position considering all visible items in teh chart\n   * @param {Chart} chart - the chart to look at elements from\n   * @param {object} position - the point to be nearest to\n   * @param {boolean} intersect - if true, only consider items that intersect the position\n   * @param {function} distanceMetric - function to provide the distance between points\n   * @return {ChartElement[]} the nearest items\n   */\n\n\n  function getNearestItems(chart, position, intersect, distanceMetric) {\n    var minDistance = Number.POSITIVE_INFINITY;\n    var nearestItems = [];\n    parseVisibleItems(chart, function (element) {\n      if (intersect && !element.inRange(position.x, position.y)) {\n        return;\n      }\n\n      var center = element.getCenterPoint();\n      var distance = distanceMetric(position, center);\n\n      if (distance < minDistance) {\n        nearestItems = [element];\n        minDistance = distance;\n      } else if (distance === minDistance) {\n        // Can have multiple items at the same distance in which case we sort by size\n        nearestItems.push(element);\n      }\n    });\n    return nearestItems;\n  }\n  /**\n   * Get a distance metric function for two points based on the\n   * axis mode setting\n   * @param {string} axis - the axis mode. x|y|xy\n   */\n\n\n  function getDistanceMetricForAxis(axis) {\n    var useX = axis.indexOf('x') !== -1;\n    var useY = axis.indexOf('y') !== -1;\n    return function (pt1, pt2) {\n      var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n      var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n      return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n  }\n\n  function indexMode(chart, e, options) {\n    var position = getRelativePosition(e, chart); // Default axis for index mode is 'x' to match old behaviour\n\n    options.axis = options.axis || 'x';\n    var distanceMetric = getDistanceMetricForAxis(options.axis);\n    var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);\n    var elements = [];\n\n    if (!items.length) {\n      return [];\n    }\n\n    chart.data.datasets.forEach(function (dataset, datasetIndex) {\n      if (chart.isDatasetVisible(datasetIndex)) {\n        var meta = chart.getDatasetMeta(datasetIndex);\n        var element = meta.data[items[0]._index]; // don't count items that are skipped (null data)\n\n        if (element && !element._view.skip) {\n          elements.push(element);\n        }\n      }\n    });\n    return elements;\n  }\n  /**\n   * @interface IInteractionOptions\n   */\n\n  /**\n   * If true, only consider items that intersect the point\n   * @name IInterfaceOptions#boolean\n   * @type Boolean\n   */\n\n  /**\n   * Contains interaction related functions\n   * @namespace Chart.Interaction\n   */\n\n\n  var core_interaction = {\n    // Helper function for different modes\n    modes: {\n      single: function single(chart, e) {\n        var position = getRelativePosition(e, chart);\n        var elements = [];\n        parseVisibleItems(chart, function (element) {\n          if (element.inRange(position.x, position.y)) {\n            elements.push(element);\n            return elements;\n          }\n        });\n        return elements.slice(0, 1);\n      },\n\n      /**\n       * @function Chart.Interaction.modes.label\n       * @deprecated since version 2.4.0\n       * @todo remove at version 3\n       * @private\n       */\n      label: indexMode,\n\n      /**\n       * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n       * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n       * @function Chart.Interaction.modes.index\n       * @since v2.4.0\n       * @param {Chart} chart - the chart we are returning items from\n       * @param {Event} e - the event we are find things at\n       * @param {IInteractionOptions} options - options to use during interaction\n       * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n       */\n      index: indexMode,\n\n      /**\n       * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n       * If the options.intersect is false, we find the nearest item and return the items in that dataset\n       * @function Chart.Interaction.modes.dataset\n       * @param {Chart} chart - the chart we are returning items from\n       * @param {Event} e - the event we are find things at\n       * @param {IInteractionOptions} options - options to use during interaction\n       * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n       */\n      dataset: function dataset(chart, e, options) {\n        var position = getRelativePosition(e, chart);\n        options.axis = options.axis || 'xy';\n        var distanceMetric = getDistanceMetricForAxis(options.axis);\n        var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);\n\n        if (items.length > 0) {\n          items = chart.getDatasetMeta(items[0]._datasetIndex).data;\n        }\n\n        return items;\n      },\n\n      /**\n       * @function Chart.Interaction.modes.x-axis\n       * @deprecated since version 2.4.0. Use index mode and intersect == true\n       * @todo remove at version 3\n       * @private\n       */\n      'x-axis': function xAxis(chart, e) {\n        return indexMode(chart, e, {\n          intersect: false\n        });\n      },\n\n      /**\n       * Point mode returns all elements that hit test based on the event position\n       * of the event\n       * @function Chart.Interaction.modes.intersect\n       * @param {Chart} chart - the chart we are returning items from\n       * @param {Event} e - the event we are find things at\n       * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n       */\n      point: function point(chart, e) {\n        var position = getRelativePosition(e, chart);\n        return getIntersectItems(chart, position);\n      },\n\n      /**\n       * nearest mode returns the element closest to the point\n       * @function Chart.Interaction.modes.intersect\n       * @param {Chart} chart - the chart we are returning items from\n       * @param {Event} e - the event we are find things at\n       * @param {IInteractionOptions} options - options to use\n       * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n       */\n      nearest: function nearest(chart, e, options) {\n        var position = getRelativePosition(e, chart);\n        options.axis = options.axis || 'xy';\n        var distanceMetric = getDistanceMetricForAxis(options.axis);\n        return getNearestItems(chart, position, options.intersect, distanceMetric);\n      },\n\n      /**\n       * x mode returns the elements that hit-test at the current x coordinate\n       * @function Chart.Interaction.modes.x\n       * @param {Chart} chart - the chart we are returning items from\n       * @param {Event} e - the event we are find things at\n       * @param {IInteractionOptions} options - options to use\n       * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n       */\n      x: function x(chart, e, options) {\n        var position = getRelativePosition(e, chart);\n        var items = [];\n        var intersectsItem = false;\n        parseVisibleItems(chart, function (element) {\n          if (element.inXRange(position.x)) {\n            items.push(element);\n          }\n\n          if (element.inRange(position.x, position.y)) {\n            intersectsItem = true;\n          }\n        }); // If we want to trigger on an intersect and we don't have any items\n        // that intersect the position, return nothing\n\n        if (options.intersect && !intersectsItem) {\n          items = [];\n        }\n\n        return items;\n      },\n\n      /**\n       * y mode returns the elements that hit-test at the current y coordinate\n       * @function Chart.Interaction.modes.y\n       * @param {Chart} chart - the chart we are returning items from\n       * @param {Event} e - the event we are find things at\n       * @param {IInteractionOptions} options - options to use\n       * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n       */\n      y: function y(chart, e, options) {\n        var position = getRelativePosition(e, chart);\n        var items = [];\n        var intersectsItem = false;\n        parseVisibleItems(chart, function (element) {\n          if (element.inYRange(position.y)) {\n            items.push(element);\n          }\n\n          if (element.inRange(position.x, position.y)) {\n            intersectsItem = true;\n          }\n        }); // If we want to trigger on an intersect and we don't have any items\n        // that intersect the position, return nothing\n\n        if (options.intersect && !intersectsItem) {\n          items = [];\n        }\n\n        return items;\n      }\n    }\n  };\n\n  function filterByPosition(array, position) {\n    return helpers$1.where(array, function (v) {\n      return v.position === position;\n    });\n  }\n\n  function sortByWeight(array, reverse) {\n    array.forEach(function (v, i) {\n      v._tmpIndex_ = i;\n      return v;\n    });\n    array.sort(function (a, b) {\n      var v0 = reverse ? b : a;\n      var v1 = reverse ? a : b;\n      return v0.weight === v1.weight ? v0._tmpIndex_ - v1._tmpIndex_ : v0.weight - v1.weight;\n    });\n    array.forEach(function (v) {\n      delete v._tmpIndex_;\n    });\n  }\n\n  function findMaxPadding(boxes) {\n    var top = 0;\n    var left = 0;\n    var bottom = 0;\n    var right = 0;\n    helpers$1.each(boxes, function (box) {\n      if (box.getPadding) {\n        var boxPadding = box.getPadding();\n        top = Math.max(top, boxPadding.top);\n        left = Math.max(left, boxPadding.left);\n        bottom = Math.max(bottom, boxPadding.bottom);\n        right = Math.max(right, boxPadding.right);\n      }\n    });\n    return {\n      top: top,\n      left: left,\n      bottom: bottom,\n      right: right\n    };\n  }\n\n  function addSizeByPosition(boxes, size) {\n    helpers$1.each(boxes, function (box) {\n      size[box.position] += box.isHorizontal() ? box.height : box.width;\n    });\n  }\n\n  core_defaults._set('global', {\n    layout: {\n      padding: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      }\n    }\n  });\n  /**\n   * @interface ILayoutItem\n   * @prop {string} position - The position of the item in the chart layout. Possible values are\n   * 'left', 'top', 'right', 'bottom', and 'chartArea'\n   * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n   * @prop {boolean} fullWidth - if true, and the item is horizontal, then push vertical boxes down\n   * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n   * @prop {function} update - Takes two parameters: width and height. Returns size of item\n   * @prop {function} getPadding -  Returns an object with padding on the edges\n   * @prop {number} width - Width of item. Must be valid after update()\n   * @prop {number} height - Height of item. Must be valid after update()\n   * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n   * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n   * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n   * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n   */\n  // The layout service is very self explanatory.  It's responsible for the layout within a chart.\n  // Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n  // It is this service's responsibility of carrying out that layout.\n\n\n  var core_layouts = {\n    defaults: {},\n\n    /**\n     * Register a box to a chart.\n     * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n     * @param {Chart} chart - the chart to use\n     * @param {ILayoutItem} item - the item to add to be layed out\n     */\n    addBox: function addBox(chart, item) {\n      if (!chart.boxes) {\n        chart.boxes = [];\n      } // initialize item with default values\n\n\n      item.fullWidth = item.fullWidth || false;\n      item.position = item.position || 'top';\n      item.weight = item.weight || 0;\n      chart.boxes.push(item);\n    },\n\n    /**\n     * Remove a layoutItem from a chart\n     * @param {Chart} chart - the chart to remove the box from\n     * @param {ILayoutItem} layoutItem - the item to remove from the layout\n     */\n    removeBox: function removeBox(chart, layoutItem) {\n      var index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n\n      if (index !== -1) {\n        chart.boxes.splice(index, 1);\n      }\n    },\n\n    /**\n     * Sets (or updates) options on the given `item`.\n     * @param {Chart} chart - the chart in which the item lives (or will be added to)\n     * @param {ILayoutItem} item - the item to configure with the given options\n     * @param {object} options - the new item options.\n     */\n    configure: function configure(chart, item, options) {\n      var props = ['fullWidth', 'position', 'weight'];\n      var ilen = props.length;\n      var i = 0;\n      var prop;\n\n      for (; i < ilen; ++i) {\n        prop = props[i];\n\n        if (options.hasOwnProperty(prop)) {\n          item[prop] = options[prop];\n        }\n      }\n    },\n\n    /**\n     * Fits boxes of the given chart into the given size by having each box measure itself\n     * then running a fitting algorithm\n     * @param {Chart} chart - the chart\n     * @param {number} width - the width to fit into\n     * @param {number} height - the height to fit into\n     */\n    update: function update(chart, width, height) {\n      if (!chart) {\n        return;\n      }\n\n      var layoutOptions = chart.options.layout || {};\n      var padding = helpers$1.options.toPadding(layoutOptions.padding);\n      var leftPadding = padding.left;\n      var rightPadding = padding.right;\n      var topPadding = padding.top;\n      var bottomPadding = padding.bottom;\n      var leftBoxes = filterByPosition(chart.boxes, 'left');\n      var rightBoxes = filterByPosition(chart.boxes, 'right');\n      var topBoxes = filterByPosition(chart.boxes, 'top');\n      var bottomBoxes = filterByPosition(chart.boxes, 'bottom');\n      var chartAreaBoxes = filterByPosition(chart.boxes, 'chartArea'); // Sort boxes by weight. A higher weight is further away from the chart area\n\n      sortByWeight(leftBoxes, true);\n      sortByWeight(rightBoxes, false);\n      sortByWeight(topBoxes, true);\n      sortByWeight(bottomBoxes, false);\n      var verticalBoxes = leftBoxes.concat(rightBoxes);\n      var horizontalBoxes = topBoxes.concat(bottomBoxes);\n      var outerBoxes = verticalBoxes.concat(horizontalBoxes); // Essentially we now have any number of boxes on each of the 4 sides.\n      // Our canvas looks like the following.\n      // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n      // B1 is the bottom axis\n      // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n      // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n      // an error will be thrown.\n      //\n      // |----------------------------------------------------|\n      // |                  T1 (Full Width)                   |\n      // |----------------------------------------------------|\n      // |    |    |                 T2                  |    |\n      // |    |----|-------------------------------------|----|\n      // |    |    | C1 |                           | C2 |    |\n      // |    |    |----|                           |----|    |\n      // |    |    |                                     |    |\n      // | L1 | L2 |           ChartArea (C0)            | R1 |\n      // |    |    |                                     |    |\n      // |    |    |----|                           |----|    |\n      // |    |    | C3 |                           | C4 |    |\n      // |    |----|-------------------------------------|----|\n      // |    |    |                 B1                  |    |\n      // |----------------------------------------------------|\n      // |                  B2 (Full Width)                   |\n      // |----------------------------------------------------|\n      //\n      // What we do to find the best sizing, we do the following\n      // 1. Determine the minimum size of the chart area.\n      // 2. Split the remaining width equally between each vertical axis\n      // 3. Split the remaining height equally between each horizontal axis\n      // 4. Give each layout the maximum size it can be. The layout will return it's minimum size\n      // 5. Adjust the sizes of each axis based on it's minimum reported size.\n      // 6. Refit each axis\n      // 7. Position each axis in the final location\n      // 8. Tell the chart the final location of the chart area\n      // 9. Tell any axes that overlay the chart area the positions of the chart area\n      // Step 1\n\n      var chartWidth = width - leftPadding - rightPadding;\n      var chartHeight = height - topPadding - bottomPadding;\n      var chartAreaWidth = chartWidth / 2; // min 50%\n      // Step 2\n\n      var verticalBoxWidth = (width - chartAreaWidth) / verticalBoxes.length; // Step 3\n      // TODO re-limit horizontal axis height (this limit has affected only padding calculation since PR 1837)\n      // var horizontalBoxHeight = (height - chartAreaHeight) / horizontalBoxes.length;\n      // Step 4\n\n      var maxChartAreaWidth = chartWidth;\n      var maxChartAreaHeight = chartHeight;\n      var outerBoxSizes = {\n        top: topPadding,\n        left: leftPadding,\n        bottom: bottomPadding,\n        right: rightPadding\n      };\n      var minBoxSizes = [];\n      var maxPadding;\n\n      function getMinimumBoxSize(box) {\n        var minSize;\n        var isHorizontal = box.isHorizontal();\n\n        if (isHorizontal) {\n          minSize = box.update(box.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2);\n          maxChartAreaHeight -= minSize.height;\n        } else {\n          minSize = box.update(verticalBoxWidth, maxChartAreaHeight);\n          maxChartAreaWidth -= minSize.width;\n        }\n\n        minBoxSizes.push({\n          horizontal: isHorizontal,\n          width: minSize.width,\n          box: box\n        });\n      }\n\n      helpers$1.each(outerBoxes, getMinimumBoxSize); // If a horizontal box has padding, we move the left boxes over to avoid ugly charts (see issue #2478)\n\n      maxPadding = findMaxPadding(outerBoxes); // At this point, maxChartAreaHeight and maxChartAreaWidth are the size the chart area could\n      // be if the axes are drawn at their minimum sizes.\n      // Steps 5 & 6\n      // Function to fit a box\n\n      function fitBox(box) {\n        var minBoxSize = helpers$1.findNextWhere(minBoxSizes, function (minBox) {\n          return minBox.box === box;\n        });\n\n        if (minBoxSize) {\n          if (minBoxSize.horizontal) {\n            var scaleMargin = {\n              left: Math.max(outerBoxSizes.left, maxPadding.left),\n              right: Math.max(outerBoxSizes.right, maxPadding.right),\n              top: 0,\n              bottom: 0\n            }; // Don't use min size here because of label rotation. When the labels are rotated, their rotation highly depends\n            // on the margin. Sometimes they need to increase in size slightly\n\n            box.update(box.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2, scaleMargin);\n          } else {\n            box.update(minBoxSize.width, maxChartAreaHeight);\n          }\n        }\n      } // Update, and calculate the left and right margins for the horizontal boxes\n\n\n      helpers$1.each(verticalBoxes, fitBox);\n      addSizeByPosition(verticalBoxes, outerBoxSizes); // Set the Left and Right margins for the horizontal boxes\n\n      helpers$1.each(horizontalBoxes, fitBox);\n      addSizeByPosition(horizontalBoxes, outerBoxSizes);\n\n      function finalFitVerticalBox(box) {\n        var minBoxSize = helpers$1.findNextWhere(minBoxSizes, function (minSize) {\n          return minSize.box === box;\n        });\n        var scaleMargin = {\n          left: 0,\n          right: 0,\n          top: outerBoxSizes.top,\n          bottom: outerBoxSizes.bottom\n        };\n\n        if (minBoxSize) {\n          box.update(minBoxSize.width, maxChartAreaHeight, scaleMargin);\n        }\n      } // Let the left layout know the final margin\n\n\n      helpers$1.each(verticalBoxes, finalFitVerticalBox); // Recalculate because the size of each layout might have changed slightly due to the margins (label rotation for instance)\n\n      outerBoxSizes = {\n        top: topPadding,\n        left: leftPadding,\n        bottom: bottomPadding,\n        right: rightPadding\n      };\n      addSizeByPosition(outerBoxes, outerBoxSizes); // We may be adding some padding to account for rotated x axis labels\n\n      var leftPaddingAddition = Math.max(maxPadding.left - outerBoxSizes.left, 0);\n      outerBoxSizes.left += leftPaddingAddition;\n      outerBoxSizes.right += Math.max(maxPadding.right - outerBoxSizes.right, 0);\n      var topPaddingAddition = Math.max(maxPadding.top - outerBoxSizes.top, 0);\n      outerBoxSizes.top += topPaddingAddition;\n      outerBoxSizes.bottom += Math.max(maxPadding.bottom - outerBoxSizes.bottom, 0); // Figure out if our chart area changed. This would occur if the dataset layout label rotation\n      // changed due to the application of the margins in step 6. Since we can only get bigger, this is safe to do\n      // without calling `fit` again\n\n      var newMaxChartAreaHeight = height - outerBoxSizes.top - outerBoxSizes.bottom;\n      var newMaxChartAreaWidth = width - outerBoxSizes.left - outerBoxSizes.right;\n\n      if (newMaxChartAreaWidth !== maxChartAreaWidth || newMaxChartAreaHeight !== maxChartAreaHeight) {\n        helpers$1.each(verticalBoxes, function (box) {\n          box.height = newMaxChartAreaHeight;\n        });\n        helpers$1.each(horizontalBoxes, function (box) {\n          if (!box.fullWidth) {\n            box.width = newMaxChartAreaWidth;\n          }\n        });\n        maxChartAreaHeight = newMaxChartAreaHeight;\n        maxChartAreaWidth = newMaxChartAreaWidth;\n      } // Step 7 - Position the boxes\n\n\n      var left = leftPadding + leftPaddingAddition;\n      var top = topPadding + topPaddingAddition;\n\n      function placeBox(box) {\n        if (box.isHorizontal()) {\n          box.left = box.fullWidth ? leftPadding : outerBoxSizes.left;\n          box.right = box.fullWidth ? width - rightPadding : outerBoxSizes.left + maxChartAreaWidth;\n          box.top = top;\n          box.bottom = top + box.height; // Move to next point\n\n          top = box.bottom;\n        } else {\n          box.left = left;\n          box.right = left + box.width;\n          box.top = outerBoxSizes.top;\n          box.bottom = outerBoxSizes.top + maxChartAreaHeight; // Move to next point\n\n          left = box.right;\n        }\n      }\n\n      helpers$1.each(leftBoxes.concat(topBoxes), placeBox); // Account for chart width and height\n\n      left += maxChartAreaWidth;\n      top += maxChartAreaHeight;\n      helpers$1.each(rightBoxes, placeBox);\n      helpers$1.each(bottomBoxes, placeBox); // Step 8\n\n      chart.chartArea = {\n        left: outerBoxSizes.left,\n        top: outerBoxSizes.top,\n        right: outerBoxSizes.left + maxChartAreaWidth,\n        bottom: outerBoxSizes.top + maxChartAreaHeight\n      }; // Step 9\n\n      helpers$1.each(chartAreaBoxes, function (box) {\n        box.left = chart.chartArea.left;\n        box.top = chart.chartArea.top;\n        box.right = chart.chartArea.right;\n        box.bottom = chart.chartArea.bottom;\n        box.update(maxChartAreaWidth, maxChartAreaHeight);\n      });\n    }\n  };\n  /**\n   * Platform fallback implementation (minimal).\n   * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n   */\n\n  var platform_basic = {\n    acquireContext: function acquireContext(item) {\n      if (item && item.canvas) {\n        // Support for any object associated to a canvas (including a context2d)\n        item = item.canvas;\n      }\n\n      return item && item.getContext('2d') || null;\n    }\n  };\n  var platform_dom = \"/*\\n * DOM element rendering detection\\n * https://davidwalsh.name/detect-node-insertion\\n */\\n@keyframes chartjs-render-animation {\\n\\tfrom { opacity: 0.99; }\\n\\tto { opacity: 1; }\\n}\\n\\n.chartjs-render-monitor {\\n\\tanimation: chartjs-render-animation 0.001s;\\n}\\n\\n/*\\n * DOM element resizing detection\\n * https://github.com/marcj/css-element-queries\\n */\\n.chartjs-size-monitor,\\n.chartjs-size-monitor-expand,\\n.chartjs-size-monitor-shrink {\\n\\tposition: absolute;\\n\\tdirection: ltr;\\n\\tleft: 0;\\n\\ttop: 0;\\n\\tright: 0;\\n\\tbottom: 0;\\n\\toverflow: hidden;\\n\\tpointer-events: none;\\n\\tvisibility: hidden;\\n\\tz-index: -1;\\n}\\n\\n.chartjs-size-monitor-expand > div {\\n\\tposition: absolute;\\n\\twidth: 1000000px;\\n\\theight: 1000000px;\\n\\tleft: 0;\\n\\ttop: 0;\\n}\\n\\n.chartjs-size-monitor-shrink > div {\\n\\tposition: absolute;\\n\\twidth: 200%;\\n\\theight: 200%;\\n\\tleft: 0;\\n\\ttop: 0;\\n}\\n\";\n  var platform_dom$1 =\n  /*#__PURE__*/\n  Object.freeze({\n    default: platform_dom\n  });\n\n  function getCjsExportFromNamespace(n) {\n    return n && n.default || n;\n  }\n\n  var stylesheet = getCjsExportFromNamespace(platform_dom$1);\n  var EXPANDO_KEY = '$chartjs';\n  var CSS_PREFIX = 'chartjs-';\n  var CSS_SIZE_MONITOR = CSS_PREFIX + 'size-monitor';\n  var CSS_RENDER_MONITOR = CSS_PREFIX + 'render-monitor';\n  var CSS_RENDER_ANIMATION = CSS_PREFIX + 'render-animation';\n  var ANIMATION_START_EVENTS = ['animationstart', 'webkitAnimationStart'];\n  /**\n   * DOM event types -> Chart.js event types.\n   * Note: only events with different types are mapped.\n   * @see https://developer.mozilla.org/en-US/docs/Web/Events\n   */\n\n  var EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n  };\n  /**\n   * The \"used\" size is the final value of a dimension property after all calculations have\n   * been performed. This method uses the computed style of `element` but returns undefined\n   * if the computed style is not expressed in pixels. That can happen in some cases where\n   * `element` has a size relative to its parent and this last one is not yet displayed,\n   * for example because of `display: none` on a parent node.\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n   * @returns {number} Size in pixels or undefined if unknown.\n   */\n\n  function readUsedSize(element, property) {\n    var value = helpers$1.getStyle(element, property);\n    var matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n    return matches ? Number(matches[1]) : undefined;\n  }\n  /**\n   * Initializes the canvas style and render size without modifying the canvas display size,\n   * since responsiveness is handled by the controller.resize() method. The config is used\n   * to determine the aspect ratio to apply in case no explicit height has been specified.\n   */\n\n\n  function initCanvas(canvas, config) {\n    var style = canvas.style; // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n    // returns null or '' if no explicit value has been set to the canvas attribute.\n\n    var renderHeight = canvas.getAttribute('height');\n    var renderWidth = canvas.getAttribute('width'); // Chart.js modifies some canvas values that we want to restore on destroy\n\n    canvas[EXPANDO_KEY] = {\n      initial: {\n        height: renderHeight,\n        width: renderWidth,\n        style: {\n          display: style.display,\n          height: style.height,\n          width: style.width\n        }\n      }\n    }; // Force canvas to display as block to avoid extra space caused by inline\n    // elements, which would interfere with the responsive resize process.\n    // https://github.com/chartjs/Chart.js/issues/2538\n\n    style.display = style.display || 'block';\n\n    if (renderWidth === null || renderWidth === '') {\n      var displayWidth = readUsedSize(canvas, 'width');\n\n      if (displayWidth !== undefined) {\n        canvas.width = displayWidth;\n      }\n    }\n\n    if (renderHeight === null || renderHeight === '') {\n      if (canvas.style.height === '') {\n        // If no explicit render height and style height, let's apply the aspect ratio,\n        // which one can be specified by the user but also by charts as default option\n        // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n        canvas.height = canvas.width / (config.options.aspectRatio || 2);\n      } else {\n        var displayHeight = readUsedSize(canvas, 'height');\n\n        if (displayWidth !== undefined) {\n          canvas.height = displayHeight;\n        }\n      }\n    }\n\n    return canvas;\n  }\n  /**\n   * Detects support for options object argument in addEventListener.\n   * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n   * @private\n   */\n\n\n  var supportsEventListenerOptions = function () {\n    var supports = false;\n\n    try {\n      var options = Object.defineProperty({}, 'passive', {\n        // eslint-disable-next-line getter-return\n        get: function get() {\n          supports = true;\n        }\n      });\n      window.addEventListener('e', null, options);\n    } catch (e) {// continue regardless of error\n    }\n\n    return supports;\n  }(); // Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n  // https://github.com/chartjs/Chart.js/issues/4287\n\n\n  var eventListenerOptions = supportsEventListenerOptions ? {\n    passive: true\n  } : false;\n\n  function addListener(node, type, listener) {\n    node.addEventListener(type, listener, eventListenerOptions);\n  }\n\n  function removeListener(node, type, listener) {\n    node.removeEventListener(type, listener, eventListenerOptions);\n  }\n\n  function createEvent(type, chart, x, y, nativeEvent) {\n    return {\n      type: type,\n      chart: chart,\n      native: nativeEvent || null,\n      x: x !== undefined ? x : null,\n      y: y !== undefined ? y : null\n    };\n  }\n\n  function fromNativeEvent(event, chart) {\n    var type = EVENT_TYPES[event.type] || event.type;\n    var pos = helpers$1.getRelativePosition(event, chart);\n    return createEvent(type, chart, pos.x, pos.y, event);\n  }\n\n  function throttled(fn, thisArg) {\n    var ticking = false;\n    var args = [];\n    return function () {\n      args = Array.prototype.slice.call(arguments);\n      thisArg = thisArg || this;\n\n      if (!ticking) {\n        ticking = true;\n        helpers$1.requestAnimFrame.call(window, function () {\n          ticking = false;\n          fn.apply(thisArg, args);\n        });\n      }\n    };\n  }\n\n  function createDiv(cls) {\n    var el = document.createElement('div');\n    el.className = cls || '';\n    return el;\n  } // Implementation based on https://github.com/marcj/css-element-queries\n\n\n  function createResizer(handler) {\n    var maxSize = 1000000; // NOTE(SB) Don't use innerHTML because it could be considered unsafe.\n    // https://github.com/chartjs/Chart.js/issues/5902\n\n    var resizer = createDiv(CSS_SIZE_MONITOR);\n    var expand = createDiv(CSS_SIZE_MONITOR + '-expand');\n    var shrink = createDiv(CSS_SIZE_MONITOR + '-shrink');\n    expand.appendChild(createDiv());\n    shrink.appendChild(createDiv());\n    resizer.appendChild(expand);\n    resizer.appendChild(shrink);\n\n    resizer._reset = function () {\n      expand.scrollLeft = maxSize;\n      expand.scrollTop = maxSize;\n      shrink.scrollLeft = maxSize;\n      shrink.scrollTop = maxSize;\n    };\n\n    var onScroll = function onScroll() {\n      resizer._reset();\n\n      handler();\n    };\n\n    addListener(expand, 'scroll', onScroll.bind(expand, 'expand'));\n    addListener(shrink, 'scroll', onScroll.bind(shrink, 'shrink'));\n    return resizer;\n  } // https://davidwalsh.name/detect-node-insertion\n\n\n  function watchForRender(node, handler) {\n    var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});\n\n    var proxy = expando.renderProxy = function (e) {\n      if (e.animationName === CSS_RENDER_ANIMATION) {\n        handler();\n      }\n    };\n\n    helpers$1.each(ANIMATION_START_EVENTS, function (type) {\n      addListener(node, type, proxy);\n    }); // #4737: Chrome might skip the CSS animation when the CSS_RENDER_MONITOR class\n    // is removed then added back immediately (same animation frame?). Accessing the\n    // `offsetParent` property will force a reflow and re-evaluate the CSS animation.\n    // https://gist.github.com/paulirish/5d52fb081b3570c81e3a#box-metrics\n    // https://github.com/chartjs/Chart.js/issues/4737\n\n    expando.reflow = !!node.offsetParent;\n    node.classList.add(CSS_RENDER_MONITOR);\n  }\n\n  function unwatchForRender(node) {\n    var expando = node[EXPANDO_KEY] || {};\n    var proxy = expando.renderProxy;\n\n    if (proxy) {\n      helpers$1.each(ANIMATION_START_EVENTS, function (type) {\n        removeListener(node, type, proxy);\n      });\n      delete expando.renderProxy;\n    }\n\n    node.classList.remove(CSS_RENDER_MONITOR);\n  }\n\n  function addResizeListener(node, listener, chart) {\n    var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {}); // Let's keep track of this added resizer and thus avoid DOM query when removing it.\n\n    var resizer = expando.resizer = createResizer(throttled(function () {\n      if (expando.resizer) {\n        var container = chart.options.maintainAspectRatio && node.parentNode;\n        var w = container ? container.clientWidth : 0;\n        listener(createEvent('resize', chart));\n\n        if (container && container.clientWidth < w && chart.canvas) {\n          // If the container size shrank during chart resize, let's assume\n          // scrollbar appeared. So we resize again with the scrollbar visible -\n          // effectively making chart smaller and the scrollbar hidden again.\n          // Because we are inside `throttled`, and currently `ticking`, scroll\n          // events are ignored during this whole 2 resize process.\n          // If we assumed wrong and something else happened, we are resizing\n          // twice in a frame (potential performance issue)\n          listener(createEvent('resize', chart));\n        }\n      }\n    })); // The resizer needs to be attached to the node parent, so we first need to be\n    // sure that `node` is attached to the DOM before injecting the resizer element.\n\n    watchForRender(node, function () {\n      if (expando.resizer) {\n        var container = node.parentNode;\n\n        if (container && container !== resizer.parentNode) {\n          container.insertBefore(resizer, container.firstChild);\n        } // The container size might have changed, let's reset the resizer state.\n\n\n        resizer._reset();\n      }\n    });\n  }\n\n  function removeResizeListener(node) {\n    var expando = node[EXPANDO_KEY] || {};\n    var resizer = expando.resizer;\n    delete expando.resizer;\n    unwatchForRender(node);\n\n    if (resizer && resizer.parentNode) {\n      resizer.parentNode.removeChild(resizer);\n    }\n  }\n\n  function injectCSS(platform, css) {\n    // https://stackoverflow.com/q/3922139\n    var style = platform._style || document.createElement('style');\n\n    if (!platform._style) {\n      platform._style = style;\n      css = '/* Chart.js */\\n' + css;\n      style.setAttribute('type', 'text/css');\n      document.getElementsByTagName('head')[0].appendChild(style);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n\n  var platform_dom$2 = {\n    /**\n     * When `true`, prevents the automatic injection of the stylesheet required to\n     * correctly detect when the chart is added to the DOM and then resized. This\n     * switch has been added to allow external stylesheet (`dist/Chart(.min)?.js`)\n     * to be manually imported to make this library compatible with any CSP.\n     * See https://github.com/chartjs/Chart.js/issues/5208\n     */\n    disableCSSInjection: false,\n\n    /**\n     * This property holds whether this platform is enabled for the current environment.\n     * Currently used by platform.js to select the proper implementation.\n     * @private\n     */\n    _enabled: typeof window !== 'undefined' && typeof document !== 'undefined',\n\n    /**\n     * @private\n     */\n    _ensureLoaded: function _ensureLoaded() {\n      if (this._loaded) {\n        return;\n      }\n\n      this._loaded = true; // https://github.com/chartjs/Chart.js/issues/5208\n\n      if (!this.disableCSSInjection) {\n        injectCSS(this, stylesheet);\n      }\n    },\n    acquireContext: function acquireContext(item, config) {\n      if (typeof item === 'string') {\n        item = document.getElementById(item);\n      } else if (item.length) {\n        // Support for array based queries (such as jQuery)\n        item = item[0];\n      }\n\n      if (item && item.canvas) {\n        // Support for any object associated to a canvas (including a context2d)\n        item = item.canvas;\n      } // To prevent canvas fingerprinting, some add-ons undefine the getContext\n      // method, for example: https://github.com/kkapsner/CanvasBlocker\n      // https://github.com/chartjs/Chart.js/issues/2807\n\n\n      var context = item && item.getContext && item.getContext('2d'); // Load platform resources on first chart creation, to make possible to change\n      // platform options after importing the library (e.g. `disableCSSInjection`).\n\n      this._ensureLoaded(); // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the item is\n      // inside an iframe or when running in a protected environment. We could guess the\n      // types from their toString() value but let's keep things flexible and assume it's\n      // a sufficient condition if the item has a context2D which has item as `canvas`.\n      // https://github.com/chartjs/Chart.js/issues/3887\n      // https://github.com/chartjs/Chart.js/issues/4102\n      // https://github.com/chartjs/Chart.js/issues/4152\n\n\n      if (context && context.canvas === item) {\n        initCanvas(item, config);\n        return context;\n      }\n\n      return null;\n    },\n    releaseContext: function releaseContext(context) {\n      var canvas = context.canvas;\n\n      if (!canvas[EXPANDO_KEY]) {\n        return;\n      }\n\n      var initial = canvas[EXPANDO_KEY].initial;\n      ['height', 'width'].forEach(function (prop) {\n        var value = initial[prop];\n\n        if (helpers$1.isNullOrUndef(value)) {\n          canvas.removeAttribute(prop);\n        } else {\n          canvas.setAttribute(prop, value);\n        }\n      });\n      helpers$1.each(initial.style || {}, function (value, key) {\n        canvas.style[key] = value;\n      }); // The canvas render size might have been changed (and thus the state stack discarded),\n      // we can't use save() and restore() to restore the initial state. So make sure that at\n      // least the canvas context is reset to the default state by setting the canvas width.\n      // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n      // eslint-disable-next-line no-self-assign\n\n      canvas.width = canvas.width;\n      delete canvas[EXPANDO_KEY];\n    },\n    addEventListener: function addEventListener(chart, type, listener) {\n      var canvas = chart.canvas;\n\n      if (type === 'resize') {\n        // Note: the resize event is not supported on all browsers.\n        addResizeListener(canvas, listener, chart);\n        return;\n      }\n\n      var expando = listener[EXPANDO_KEY] || (listener[EXPANDO_KEY] = {});\n      var proxies = expando.proxies || (expando.proxies = {});\n\n      var proxy = proxies[chart.id + '_' + type] = function (event) {\n        listener(fromNativeEvent(event, chart));\n      };\n\n      addListener(canvas, type, proxy);\n    },\n    removeEventListener: function removeEventListener(chart, type, listener) {\n      var canvas = chart.canvas;\n\n      if (type === 'resize') {\n        // Note: the resize event is not supported on all browsers.\n        removeResizeListener(canvas);\n        return;\n      }\n\n      var expando = listener[EXPANDO_KEY] || {};\n      var proxies = expando.proxies || {};\n      var proxy = proxies[chart.id + '_' + type];\n\n      if (!proxy) {\n        return;\n      }\n\n      removeListener(canvas, type, proxy);\n    }\n  }; // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, use EventTarget.addEventListener instead.\n   * EventTarget.addEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n   * @function Chart.helpers.addEvent\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers$1.addEvent = addListener;\n  /**\n   * Provided for backward compatibility, use EventTarget.removeEventListener instead.\n   * EventTarget.removeEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener\n   * @function Chart.helpers.removeEvent\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers$1.removeEvent = removeListener; // @TODO Make possible to select another platform at build time.\n\n  var implementation = platform_dom$2._enabled ? platform_dom$2 : platform_basic;\n  /**\n   * @namespace Chart.platform\n   * @see https://chartjs.gitbooks.io/proposals/content/Platform.html\n   * @since 2.4.0\n   */\n\n  var platform = helpers$1.extend({\n    /**\n     * @since 2.7.0\n     */\n    initialize: function initialize() {},\n\n    /**\n     * Called at chart construction time, returns a context2d instance implementing\n     * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n     * @param {*} item - The native item from which to acquire context (platform specific)\n     * @param {object} options - The chart options\n     * @returns {CanvasRenderingContext2D} context2d instance\n     */\n    acquireContext: function acquireContext() {},\n\n    /**\n     * Called at chart destruction time, releases any resources associated to the context\n     * previously returned by the acquireContext() method.\n     * @param {CanvasRenderingContext2D} context - The context2d instance\n     * @returns {boolean} true if the method succeeded, else false\n     */\n    releaseContext: function releaseContext() {},\n\n    /**\n     * Registers the specified listener on the given chart.\n     * @param {Chart} chart - Chart from which to listen for event\n     * @param {string} type - The ({@link IEvent}) type to listen for\n     * @param {function} listener - Receives a notification (an object that implements\n     * the {@link IEvent} interface) when an event of the specified type occurs.\n     */\n    addEventListener: function addEventListener() {},\n\n    /**\n     * Removes the specified listener previously registered with addEventListener.\n     * @param {Chart} chart - Chart from which to remove the listener\n     * @param {string} type - The ({@link IEvent}) type to remove\n     * @param {function} listener - The listener function to remove from the event target.\n     */\n    removeEventListener: function removeEventListener() {}\n  }, implementation);\n\n  core_defaults._set('global', {\n    plugins: {}\n  });\n  /**\n   * The plugin service singleton\n   * @namespace Chart.plugins\n   * @since 2.1.0\n   */\n\n\n  var core_plugins = {\n    /**\n     * Globally registered plugins.\n     * @private\n     */\n    _plugins: [],\n\n    /**\n     * This identifier is used to invalidate the descriptors cache attached to each chart\n     * when a global plugin is registered or unregistered. In this case, the cache ID is\n     * incremented and descriptors are regenerated during following API calls.\n     * @private\n     */\n    _cacheId: 0,\n\n    /**\n     * Registers the given plugin(s) if not already registered.\n     * @param {IPlugin[]|IPlugin} plugins plugin instance(s).\n     */\n    register: function register(plugins) {\n      var p = this._plugins;\n      [].concat(plugins).forEach(function (plugin) {\n        if (p.indexOf(plugin) === -1) {\n          p.push(plugin);\n        }\n      });\n      this._cacheId++;\n    },\n\n    /**\n     * Unregisters the given plugin(s) only if registered.\n     * @param {IPlugin[]|IPlugin} plugins plugin instance(s).\n     */\n    unregister: function unregister(plugins) {\n      var p = this._plugins;\n      [].concat(plugins).forEach(function (plugin) {\n        var idx = p.indexOf(plugin);\n\n        if (idx !== -1) {\n          p.splice(idx, 1);\n        }\n      });\n      this._cacheId++;\n    },\n\n    /**\n     * Remove all registered plugins.\n     * @since 2.1.5\n     */\n    clear: function clear() {\n      this._plugins = [];\n      this._cacheId++;\n    },\n\n    /**\n     * Returns the number of registered plugins?\n     * @returns {number}\n     * @since 2.1.5\n     */\n    count: function count() {\n      return this._plugins.length;\n    },\n\n    /**\n     * Returns all registered plugin instances.\n     * @returns {IPlugin[]} array of plugin objects.\n     * @since 2.1.5\n     */\n    getAll: function getAll() {\n      return this._plugins;\n    },\n\n    /**\n     * Calls enabled plugins for `chart` on the specified hook and with the given args.\n     * This method immediately returns as soon as a plugin explicitly returns false. The\n     * returned value can be used, for instance, to interrupt the current action.\n     * @param {Chart} chart - The chart instance for which plugins should be called.\n     * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n     * @param {Array} [args] - Extra arguments to apply to the hook call.\n     * @returns {boolean} false if any of the plugins return false, else returns true.\n     */\n    notify: function notify(chart, hook, args) {\n      var descriptors = this.descriptors(chart);\n      var ilen = descriptors.length;\n      var i, descriptor, plugin, params, method;\n\n      for (i = 0; i < ilen; ++i) {\n        descriptor = descriptors[i];\n        plugin = descriptor.plugin;\n        method = plugin[hook];\n\n        if (typeof method === 'function') {\n          params = [chart].concat(args || []);\n          params.push(descriptor.options);\n\n          if (method.apply(plugin, params) === false) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    },\n\n    /**\n     * Returns descriptors of enabled plugins for the given chart.\n     * @returns {object[]} [{ plugin, options }]\n     * @private\n     */\n    descriptors: function descriptors(chart) {\n      var cache = chart.$plugins || (chart.$plugins = {});\n\n      if (cache.id === this._cacheId) {\n        return cache.descriptors;\n      }\n\n      var plugins = [];\n      var descriptors = [];\n      var config = chart && chart.config || {};\n      var options = config.options && config.options.plugins || {};\n\n      this._plugins.concat(config.plugins || []).forEach(function (plugin) {\n        var idx = plugins.indexOf(plugin);\n\n        if (idx !== -1) {\n          return;\n        }\n\n        var id = plugin.id;\n        var opts = options[id];\n\n        if (opts === false) {\n          return;\n        }\n\n        if (opts === true) {\n          opts = helpers$1.clone(core_defaults.global.plugins[id]);\n        }\n\n        plugins.push(plugin);\n        descriptors.push({\n          plugin: plugin,\n          options: opts || {}\n        });\n      });\n\n      cache.descriptors = descriptors;\n      cache.id = this._cacheId;\n      return descriptors;\n    },\n\n    /**\n     * Invalidates cache for the given chart: descriptors hold a reference on plugin option,\n     * but in some cases, this reference can be changed by the user when updating options.\n     * https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n     * @private\n     */\n    _invalidate: function _invalidate(chart) {\n      delete chart.$plugins;\n    }\n  };\n  var core_scaleService = {\n    // Scale registration object. Extensions can register new scale types (such as log or DB scales) and then\n    // use the new chart options to grab the correct scale\n    constructors: {},\n    // Use a registration function so that we can move to an ES6 map when we no longer need to support\n    // old browsers\n    // Scale config defaults\n    defaults: {},\n    registerScaleType: function registerScaleType(type, scaleConstructor, scaleDefaults) {\n      this.constructors[type] = scaleConstructor;\n      this.defaults[type] = helpers$1.clone(scaleDefaults);\n    },\n    getScaleConstructor: function getScaleConstructor(type) {\n      return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;\n    },\n    getScaleDefaults: function getScaleDefaults(type) {\n      // Return the scale defaults merged with the global settings so that we always use the latest ones\n      return this.defaults.hasOwnProperty(type) ? helpers$1.merge({}, [core_defaults.scale, this.defaults[type]]) : {};\n    },\n    updateScaleDefaults: function updateScaleDefaults(type, additions) {\n      var me = this;\n\n      if (me.defaults.hasOwnProperty(type)) {\n        me.defaults[type] = helpers$1.extend(me.defaults[type], additions);\n      }\n    },\n    addScalesToLayout: function addScalesToLayout(chart) {\n      // Adds each scale to the chart.boxes array to be sized accordingly\n      helpers$1.each(chart.scales, function (scale) {\n        // Set ILayoutItem parameters for backwards compatibility\n        scale.fullWidth = scale.options.fullWidth;\n        scale.position = scale.options.position;\n        scale.weight = scale.options.weight;\n        core_layouts.addBox(chart, scale);\n      });\n    }\n  };\n  var valueOrDefault$7 = helpers$1.valueOrDefault;\n\n  core_defaults._set('global', {\n    tooltips: {\n      enabled: true,\n      custom: null,\n      mode: 'nearest',\n      position: 'average',\n      intersect: true,\n      backgroundColor: 'rgba(0,0,0,0.8)',\n      titleFontStyle: 'bold',\n      titleSpacing: 2,\n      titleMarginBottom: 6,\n      titleFontColor: '#fff',\n      titleAlign: 'left',\n      bodySpacing: 2,\n      bodyFontColor: '#fff',\n      bodyAlign: 'left',\n      footerFontStyle: 'bold',\n      footerSpacing: 2,\n      footerMarginTop: 6,\n      footerFontColor: '#fff',\n      footerAlign: 'left',\n      yPadding: 6,\n      xPadding: 6,\n      caretPadding: 2,\n      caretSize: 5,\n      cornerRadius: 6,\n      multiKeyBackground: '#fff',\n      displayColors: true,\n      borderColor: 'rgba(0,0,0,0)',\n      borderWidth: 0,\n      callbacks: {\n        // Args are: (tooltipItems, data)\n        beforeTitle: helpers$1.noop,\n        title: function title(tooltipItems, data) {\n          var title = '';\n          var labels = data.labels;\n          var labelCount = labels ? labels.length : 0;\n\n          if (tooltipItems.length > 0) {\n            var item = tooltipItems[0];\n\n            if (item.label) {\n              title = item.label;\n            } else if (item.xLabel) {\n              title = item.xLabel;\n            } else if (labelCount > 0 && item.index < labelCount) {\n              title = labels[item.index];\n            }\n          }\n\n          return title;\n        },\n        afterTitle: helpers$1.noop,\n        // Args are: (tooltipItems, data)\n        beforeBody: helpers$1.noop,\n        // Args are: (tooltipItem, data)\n        beforeLabel: helpers$1.noop,\n        label: function label(tooltipItem, data) {\n          var label = data.datasets[tooltipItem.datasetIndex].label || '';\n\n          if (label) {\n            label += ': ';\n          }\n\n          if (!helpers$1.isNullOrUndef(tooltipItem.value)) {\n            label += tooltipItem.value;\n          } else {\n            label += tooltipItem.yLabel;\n          }\n\n          return label;\n        },\n        labelColor: function labelColor(tooltipItem, chart) {\n          var meta = chart.getDatasetMeta(tooltipItem.datasetIndex);\n          var activeElement = meta.data[tooltipItem.index];\n          var view = activeElement._view;\n          return {\n            borderColor: view.borderColor,\n            backgroundColor: view.backgroundColor\n          };\n        },\n        labelTextColor: function labelTextColor() {\n          return this._options.bodyFontColor;\n        },\n        afterLabel: helpers$1.noop,\n        // Args are: (tooltipItems, data)\n        afterBody: helpers$1.noop,\n        // Args are: (tooltipItems, data)\n        beforeFooter: helpers$1.noop,\n        footer: helpers$1.noop,\n        afterFooter: helpers$1.noop\n      }\n    }\n  });\n\n  var positioners = {\n    /**\n     * Average mode places the tooltip at the average position of the elements shown\n     * @function Chart.Tooltip.positioners.average\n     * @param elements {ChartElement[]} the elements being displayed in the tooltip\n     * @returns {object} tooltip position\n     */\n    average: function average(elements) {\n      if (!elements.length) {\n        return false;\n      }\n\n      var i, len;\n      var x = 0;\n      var y = 0;\n      var count = 0;\n\n      for (i = 0, len = elements.length; i < len; ++i) {\n        var el = elements[i];\n\n        if (el && el.hasValue()) {\n          var pos = el.tooltipPosition();\n          x += pos.x;\n          y += pos.y;\n          ++count;\n        }\n      }\n\n      return {\n        x: x / count,\n        y: y / count\n      };\n    },\n\n    /**\n     * Gets the tooltip position nearest of the item nearest to the event position\n     * @function Chart.Tooltip.positioners.nearest\n     * @param elements {Chart.Element[]} the tooltip elements\n     * @param eventPosition {object} the position of the event in canvas coordinates\n     * @returns {object} the tooltip position\n     */\n    nearest: function nearest(elements, eventPosition) {\n      var x = eventPosition.x;\n      var y = eventPosition.y;\n      var minDistance = Number.POSITIVE_INFINITY;\n      var i, len, nearestElement;\n\n      for (i = 0, len = elements.length; i < len; ++i) {\n        var el = elements[i];\n\n        if (el && el.hasValue()) {\n          var center = el.getCenterPoint();\n          var d = helpers$1.distanceBetweenPoints(eventPosition, center);\n\n          if (d < minDistance) {\n            minDistance = d;\n            nearestElement = el;\n          }\n        }\n      }\n\n      if (nearestElement) {\n        var tp = nearestElement.tooltipPosition();\n        x = tp.x;\n        y = tp.y;\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    }\n  }; // Helper to push or concat based on if the 2nd parameter is an array or not\n\n  function pushOrConcat(base, toPush) {\n    if (toPush) {\n      if (helpers$1.isArray(toPush)) {\n        // base = base.concat(toPush);\n        Array.prototype.push.apply(base, toPush);\n      } else {\n        base.push(toPush);\n      }\n    }\n\n    return base;\n  }\n  /**\n   * Returns array of strings split by newline\n   * @param {string} value - The value to split by newline.\n   * @returns {string[]} value if newline present - Returned from String split() method\n   * @function\n   */\n\n\n  function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n      return str.split('\\n');\n    }\n\n    return str;\n  }\n  /**\n   * Private helper to create a tooltip item model\n   * @param element - the chart element (point, arc, bar) to create the tooltip item for\n   * @return new tooltip item\n   */\n\n\n  function createTooltipItem(element) {\n    var xScale = element._xScale;\n    var yScale = element._yScale || element._scale; // handle radar || polarArea charts\n\n    var index = element._index;\n    var datasetIndex = element._datasetIndex;\n\n    var controller = element._chart.getDatasetMeta(datasetIndex).controller;\n\n    var indexScale = controller._getIndexScale();\n\n    var valueScale = controller._getValueScale();\n\n    return {\n      xLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',\n      yLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',\n      label: indexScale ? '' + indexScale.getLabelForIndex(index, datasetIndex) : '',\n      value: valueScale ? '' + valueScale.getLabelForIndex(index, datasetIndex) : '',\n      index: index,\n      datasetIndex: datasetIndex,\n      x: element._model.x,\n      y: element._model.y\n    };\n  }\n  /**\n   * Helper to get the reset model for the tooltip\n   * @param tooltipOpts {object} the tooltip options\n   */\n\n\n  function getBaseModel(tooltipOpts) {\n    var globalDefaults = core_defaults.global;\n    return {\n      // Positioning\n      xPadding: tooltipOpts.xPadding,\n      yPadding: tooltipOpts.yPadding,\n      xAlign: tooltipOpts.xAlign,\n      yAlign: tooltipOpts.yAlign,\n      // Body\n      bodyFontColor: tooltipOpts.bodyFontColor,\n      _bodyFontFamily: valueOrDefault$7(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),\n      _bodyFontStyle: valueOrDefault$7(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),\n      _bodyAlign: tooltipOpts.bodyAlign,\n      bodyFontSize: valueOrDefault$7(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),\n      bodySpacing: tooltipOpts.bodySpacing,\n      // Title\n      titleFontColor: tooltipOpts.titleFontColor,\n      _titleFontFamily: valueOrDefault$7(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),\n      _titleFontStyle: valueOrDefault$7(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),\n      titleFontSize: valueOrDefault$7(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),\n      _titleAlign: tooltipOpts.titleAlign,\n      titleSpacing: tooltipOpts.titleSpacing,\n      titleMarginBottom: tooltipOpts.titleMarginBottom,\n      // Footer\n      footerFontColor: tooltipOpts.footerFontColor,\n      _footerFontFamily: valueOrDefault$7(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),\n      _footerFontStyle: valueOrDefault$7(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),\n      footerFontSize: valueOrDefault$7(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),\n      _footerAlign: tooltipOpts.footerAlign,\n      footerSpacing: tooltipOpts.footerSpacing,\n      footerMarginTop: tooltipOpts.footerMarginTop,\n      // Appearance\n      caretSize: tooltipOpts.caretSize,\n      cornerRadius: tooltipOpts.cornerRadius,\n      backgroundColor: tooltipOpts.backgroundColor,\n      opacity: 0,\n      legendColorBackground: tooltipOpts.multiKeyBackground,\n      displayColors: tooltipOpts.displayColors,\n      borderColor: tooltipOpts.borderColor,\n      borderWidth: tooltipOpts.borderWidth\n    };\n  }\n  /**\n   * Get the size of the tooltip\n   */\n\n\n  function getTooltipSize(tooltip, model) {\n    var ctx = tooltip._chart.ctx;\n    var height = model.yPadding * 2; // Tooltip Padding\n\n    var width = 0; // Count of all lines in the body\n\n    var body = model.body;\n    var combinedBodyLength = body.reduce(function (count, bodyItem) {\n      return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;\n    }, 0);\n    combinedBodyLength += model.beforeBody.length + model.afterBody.length;\n    var titleLineCount = model.title.length;\n    var footerLineCount = model.footer.length;\n    var titleFontSize = model.titleFontSize;\n    var bodyFontSize = model.bodyFontSize;\n    var footerFontSize = model.footerFontSize;\n    height += titleLineCount * titleFontSize; // Title Lines\n\n    height += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0; // Title Line Spacing\n\n    height += titleLineCount ? model.titleMarginBottom : 0; // Title's bottom Margin\n\n    height += combinedBodyLength * bodyFontSize; // Body Lines\n\n    height += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0; // Body Line Spacing\n\n    height += footerLineCount ? model.footerMarginTop : 0; // Footer Margin\n\n    height += footerLineCount * footerFontSize; // Footer Lines\n\n    height += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0; // Footer Line Spacing\n    // Title width\n\n    var widthPadding = 0;\n\n    var maxLineWidth = function maxLineWidth(line) {\n      width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n\n    ctx.font = helpers$1.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);\n    helpers$1.each(model.title, maxLineWidth); // Body width\n\n    ctx.font = helpers$1.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);\n    helpers$1.each(model.beforeBody.concat(model.afterBody), maxLineWidth); // Body lines may include some extra width due to the color box\n\n    widthPadding = model.displayColors ? bodyFontSize + 2 : 0;\n    helpers$1.each(body, function (bodyItem) {\n      helpers$1.each(bodyItem.before, maxLineWidth);\n      helpers$1.each(bodyItem.lines, maxLineWidth);\n      helpers$1.each(bodyItem.after, maxLineWidth);\n    }); // Reset back to 0\n\n    widthPadding = 0; // Footer width\n\n    ctx.font = helpers$1.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);\n    helpers$1.each(model.footer, maxLineWidth); // Add padding\n\n    width += 2 * model.xPadding;\n    return {\n      width: width,\n      height: height\n    };\n  }\n  /**\n   * Helper to get the alignment of a tooltip given the size\n   */\n\n\n  function determineAlignment(tooltip, size) {\n    var model = tooltip._model;\n    var chart = tooltip._chart;\n    var chartArea = tooltip._chart.chartArea;\n    var xAlign = 'center';\n    var yAlign = 'center';\n\n    if (model.y < size.height) {\n      yAlign = 'top';\n    } else if (model.y > chart.height - size.height) {\n      yAlign = 'bottom';\n    }\n\n    var lf, rf; // functions to determine left, right alignment\n\n    var olf, orf; // functions to determine if left/right alignment causes tooltip to go outside chart\n\n    var yf; // function to get the y alignment if the tooltip goes outside of the left or right edges\n\n    var midX = (chartArea.left + chartArea.right) / 2;\n    var midY = (chartArea.top + chartArea.bottom) / 2;\n\n    if (yAlign === 'center') {\n      lf = function lf(x) {\n        return x <= midX;\n      };\n\n      rf = function rf(x) {\n        return x > midX;\n      };\n    } else {\n      lf = function lf(x) {\n        return x <= size.width / 2;\n      };\n\n      rf = function rf(x) {\n        return x >= chart.width - size.width / 2;\n      };\n    }\n\n    olf = function olf(x) {\n      return x + size.width + model.caretSize + model.caretPadding > chart.width;\n    };\n\n    orf = function orf(x) {\n      return x - size.width - model.caretSize - model.caretPadding < 0;\n    };\n\n    yf = function yf(y) {\n      return y <= midY ? 'top' : 'bottom';\n    };\n\n    if (lf(model.x)) {\n      xAlign = 'left'; // Is tooltip too wide and goes over the right side of the chart.?\n\n      if (olf(model.x)) {\n        xAlign = 'center';\n        yAlign = yf(model.y);\n      }\n    } else if (rf(model.x)) {\n      xAlign = 'right'; // Is tooltip too wide and goes outside left edge of canvas?\n\n      if (orf(model.x)) {\n        xAlign = 'center';\n        yAlign = yf(model.y);\n      }\n    }\n\n    var opts = tooltip._options;\n    return {\n      xAlign: opts.xAlign ? opts.xAlign : xAlign,\n      yAlign: opts.yAlign ? opts.yAlign : yAlign\n    };\n  }\n  /**\n   * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n   */\n\n\n  function getBackgroundPoint(vm, size, alignment, chart) {\n    // Background Position\n    var x = vm.x;\n    var y = vm.y;\n    var caretSize = vm.caretSize;\n    var caretPadding = vm.caretPadding;\n    var cornerRadius = vm.cornerRadius;\n    var xAlign = alignment.xAlign;\n    var yAlign = alignment.yAlign;\n    var paddingAndSize = caretSize + caretPadding;\n    var radiusAndPadding = cornerRadius + caretPadding;\n\n    if (xAlign === 'right') {\n      x -= size.width;\n    } else if (xAlign === 'center') {\n      x -= size.width / 2;\n\n      if (x + size.width > chart.width) {\n        x = chart.width - size.width;\n      }\n\n      if (x < 0) {\n        x = 0;\n      }\n    }\n\n    if (yAlign === 'top') {\n      y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n      y -= size.height + paddingAndSize;\n    } else {\n      y -= size.height / 2;\n    }\n\n    if (yAlign === 'center') {\n      if (xAlign === 'left') {\n        x += paddingAndSize;\n      } else if (xAlign === 'right') {\n        x -= paddingAndSize;\n      }\n    } else if (xAlign === 'left') {\n      x -= radiusAndPadding;\n    } else if (xAlign === 'right') {\n      x += radiusAndPadding;\n    }\n\n    return {\n      x: x,\n      y: y\n    };\n  }\n\n  function getAlignedX(vm, align) {\n    return align === 'center' ? vm.x + vm.width / 2 : align === 'right' ? vm.x + vm.width - vm.xPadding : vm.x + vm.xPadding;\n  }\n  /**\n   * Helper to build before and after body lines\n   */\n\n\n  function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n  }\n\n  var exports$3 = core_element.extend({\n    initialize: function initialize() {\n      this._model = getBaseModel(this._options);\n      this._lastActive = [];\n    },\n    // Get the title\n    // Args are: (tooltipItem, data)\n    getTitle: function getTitle() {\n      var me = this;\n      var opts = me._options;\n      var callbacks = opts.callbacks;\n      var beforeTitle = callbacks.beforeTitle.apply(me, arguments);\n      var title = callbacks.title.apply(me, arguments);\n      var afterTitle = callbacks.afterTitle.apply(me, arguments);\n      var lines = [];\n      lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n      lines = pushOrConcat(lines, splitNewlines(title));\n      lines = pushOrConcat(lines, splitNewlines(afterTitle));\n      return lines;\n    },\n    // Args are: (tooltipItem, data)\n    getBeforeBody: function getBeforeBody() {\n      return getBeforeAfterBodyLines(this._options.callbacks.beforeBody.apply(this, arguments));\n    },\n    // Args are: (tooltipItem, data)\n    getBody: function getBody(tooltipItems, data) {\n      var me = this;\n      var callbacks = me._options.callbacks;\n      var bodyItems = [];\n      helpers$1.each(tooltipItems, function (tooltipItem) {\n        var bodyItem = {\n          before: [],\n          lines: [],\n          after: []\n        };\n        pushOrConcat(bodyItem.before, splitNewlines(callbacks.beforeLabel.call(me, tooltipItem, data)));\n        pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));\n        pushOrConcat(bodyItem.after, splitNewlines(callbacks.afterLabel.call(me, tooltipItem, data)));\n        bodyItems.push(bodyItem);\n      });\n      return bodyItems;\n    },\n    // Args are: (tooltipItem, data)\n    getAfterBody: function getAfterBody() {\n      return getBeforeAfterBodyLines(this._options.callbacks.afterBody.apply(this, arguments));\n    },\n    // Get the footer and beforeFooter and afterFooter lines\n    // Args are: (tooltipItem, data)\n    getFooter: function getFooter() {\n      var me = this;\n      var callbacks = me._options.callbacks;\n      var beforeFooter = callbacks.beforeFooter.apply(me, arguments);\n      var footer = callbacks.footer.apply(me, arguments);\n      var afterFooter = callbacks.afterFooter.apply(me, arguments);\n      var lines = [];\n      lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n      lines = pushOrConcat(lines, splitNewlines(footer));\n      lines = pushOrConcat(lines, splitNewlines(afterFooter));\n      return lines;\n    },\n    update: function update(changed) {\n      var me = this;\n      var opts = me._options; // Need to regenerate the model because its faster than using extend and it is necessary due to the optimization in Chart.Element.transition\n      // that does _view = _model if ease === 1. This causes the 2nd tooltip update to set properties in both the view and model at the same time\n      // which breaks any animations.\n\n      var existingModel = me._model;\n      var model = me._model = getBaseModel(opts);\n      var active = me._active;\n      var data = me._data; // In the case where active.length === 0 we need to keep these at existing values for good animations\n\n      var alignment = {\n        xAlign: existingModel.xAlign,\n        yAlign: existingModel.yAlign\n      };\n      var backgroundPoint = {\n        x: existingModel.x,\n        y: existingModel.y\n      };\n      var tooltipSize = {\n        width: existingModel.width,\n        height: existingModel.height\n      };\n      var tooltipPosition = {\n        x: existingModel.caretX,\n        y: existingModel.caretY\n      };\n      var i, len;\n\n      if (active.length) {\n        model.opacity = 1;\n        var labelColors = [];\n        var labelTextColors = [];\n        tooltipPosition = positioners[opts.position].call(me, active, me._eventPosition);\n        var tooltipItems = [];\n\n        for (i = 0, len = active.length; i < len; ++i) {\n          tooltipItems.push(createTooltipItem(active[i]));\n        } // If the user provided a filter function, use it to modify the tooltip items\n\n\n        if (opts.filter) {\n          tooltipItems = tooltipItems.filter(function (a) {\n            return opts.filter(a, data);\n          });\n        } // If the user provided a sorting function, use it to modify the tooltip items\n\n\n        if (opts.itemSort) {\n          tooltipItems = tooltipItems.sort(function (a, b) {\n            return opts.itemSort(a, b, data);\n          });\n        } // Determine colors for boxes\n\n\n        helpers$1.each(tooltipItems, function (tooltipItem) {\n          labelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, me._chart));\n          labelTextColors.push(opts.callbacks.labelTextColor.call(me, tooltipItem, me._chart));\n        }); // Build the Text Lines\n\n        model.title = me.getTitle(tooltipItems, data);\n        model.beforeBody = me.getBeforeBody(tooltipItems, data);\n        model.body = me.getBody(tooltipItems, data);\n        model.afterBody = me.getAfterBody(tooltipItems, data);\n        model.footer = me.getFooter(tooltipItems, data); // Initial positioning and colors\n\n        model.x = tooltipPosition.x;\n        model.y = tooltipPosition.y;\n        model.caretPadding = opts.caretPadding;\n        model.labelColors = labelColors;\n        model.labelTextColors = labelTextColors; // data points\n\n        model.dataPoints = tooltipItems; // We need to determine alignment of the tooltip\n\n        tooltipSize = getTooltipSize(this, model);\n        alignment = determineAlignment(this, tooltipSize); // Final Size and Position\n\n        backgroundPoint = getBackgroundPoint(model, tooltipSize, alignment, me._chart);\n      } else {\n        model.opacity = 0;\n      }\n\n      model.xAlign = alignment.xAlign;\n      model.yAlign = alignment.yAlign;\n      model.x = backgroundPoint.x;\n      model.y = backgroundPoint.y;\n      model.width = tooltipSize.width;\n      model.height = tooltipSize.height; // Point where the caret on the tooltip points to\n\n      model.caretX = tooltipPosition.x;\n      model.caretY = tooltipPosition.y;\n      me._model = model;\n\n      if (changed && opts.custom) {\n        opts.custom.call(me, model);\n      }\n\n      return me;\n    },\n    drawCaret: function drawCaret(tooltipPoint, size) {\n      var ctx = this._chart.ctx;\n      var vm = this._view;\n      var caretPosition = this.getCaretPosition(tooltipPoint, size, vm);\n      ctx.lineTo(caretPosition.x1, caretPosition.y1);\n      ctx.lineTo(caretPosition.x2, caretPosition.y2);\n      ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    },\n    getCaretPosition: function getCaretPosition(tooltipPoint, size, vm) {\n      var x1, x2, x3, y1, y2, y3;\n      var caretSize = vm.caretSize;\n      var cornerRadius = vm.cornerRadius;\n      var xAlign = vm.xAlign;\n      var yAlign = vm.yAlign;\n      var ptX = tooltipPoint.x;\n      var ptY = tooltipPoint.y;\n      var width = size.width;\n      var height = size.height;\n\n      if (yAlign === 'center') {\n        y2 = ptY + height / 2;\n\n        if (xAlign === 'left') {\n          x1 = ptX;\n          x2 = x1 - caretSize;\n          x3 = x1;\n          y1 = y2 + caretSize;\n          y3 = y2 - caretSize;\n        } else {\n          x1 = ptX + width;\n          x2 = x1 + caretSize;\n          x3 = x1;\n          y1 = y2 - caretSize;\n          y3 = y2 + caretSize;\n        }\n      } else {\n        if (xAlign === 'left') {\n          x2 = ptX + cornerRadius + caretSize;\n          x1 = x2 - caretSize;\n          x3 = x2 + caretSize;\n        } else if (xAlign === 'right') {\n          x2 = ptX + width - cornerRadius - caretSize;\n          x1 = x2 - caretSize;\n          x3 = x2 + caretSize;\n        } else {\n          x2 = vm.caretX;\n          x1 = x2 - caretSize;\n          x3 = x2 + caretSize;\n        }\n\n        if (yAlign === 'top') {\n          y1 = ptY;\n          y2 = y1 - caretSize;\n          y3 = y1;\n        } else {\n          y1 = ptY + height;\n          y2 = y1 + caretSize;\n          y3 = y1; // invert drawing order\n\n          var tmp = x3;\n          x3 = x1;\n          x1 = tmp;\n        }\n      }\n\n      return {\n        x1: x1,\n        x2: x2,\n        x3: x3,\n        y1: y1,\n        y2: y2,\n        y3: y3\n      };\n    },\n    drawTitle: function drawTitle(pt, vm, ctx) {\n      var title = vm.title;\n\n      if (title.length) {\n        pt.x = getAlignedX(vm, vm._titleAlign);\n        ctx.textAlign = vm._titleAlign;\n        ctx.textBaseline = 'top';\n        var titleFontSize = vm.titleFontSize;\n        var titleSpacing = vm.titleSpacing;\n        ctx.fillStyle = vm.titleFontColor;\n        ctx.font = helpers$1.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);\n        var i, len;\n\n        for (i = 0, len = title.length; i < len; ++i) {\n          ctx.fillText(title[i], pt.x, pt.y);\n          pt.y += titleFontSize + titleSpacing; // Line Height and spacing\n\n          if (i + 1 === title.length) {\n            pt.y += vm.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n          }\n        }\n      }\n    },\n    drawBody: function drawBody(pt, vm, ctx) {\n      var bodyFontSize = vm.bodyFontSize;\n      var bodySpacing = vm.bodySpacing;\n      var bodyAlign = vm._bodyAlign;\n      var body = vm.body;\n      var drawColorBoxes = vm.displayColors;\n      var labelColors = vm.labelColors;\n      var xLinePadding = 0;\n      var colorX = drawColorBoxes ? getAlignedX(vm, 'left') : 0;\n      var textColor;\n      ctx.textAlign = bodyAlign;\n      ctx.textBaseline = 'top';\n      ctx.font = helpers$1.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);\n      pt.x = getAlignedX(vm, bodyAlign); // Before Body\n\n      var fillLineOfText = function fillLineOfText(line) {\n        ctx.fillText(line, pt.x + xLinePadding, pt.y);\n        pt.y += bodyFontSize + bodySpacing;\n      }; // Before body lines\n\n\n      ctx.fillStyle = vm.bodyFontColor;\n      helpers$1.each(vm.beforeBody, fillLineOfText);\n      xLinePadding = drawColorBoxes && bodyAlign !== 'right' ? bodyAlign === 'center' ? bodyFontSize / 2 + 1 : bodyFontSize + 2 : 0; // Draw body lines now\n\n      helpers$1.each(body, function (bodyItem, i) {\n        textColor = vm.labelTextColors[i];\n        ctx.fillStyle = textColor;\n        helpers$1.each(bodyItem.before, fillLineOfText);\n        helpers$1.each(bodyItem.lines, function (line) {\n          // Draw Legend-like boxes if needed\n          if (drawColorBoxes) {\n            // Fill a white rect so that colours merge nicely if the opacity is < 1\n            ctx.fillStyle = vm.legendColorBackground;\n            ctx.fillRect(colorX, pt.y, bodyFontSize, bodyFontSize); // Border\n\n            ctx.lineWidth = 1;\n            ctx.strokeStyle = labelColors[i].borderColor;\n            ctx.strokeRect(colorX, pt.y, bodyFontSize, bodyFontSize); // Inner square\n\n            ctx.fillStyle = labelColors[i].backgroundColor;\n            ctx.fillRect(colorX + 1, pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);\n            ctx.fillStyle = textColor;\n          }\n\n          fillLineOfText(line);\n        });\n        helpers$1.each(bodyItem.after, fillLineOfText);\n      }); // Reset back to 0 for after body\n\n      xLinePadding = 0; // After body lines\n\n      helpers$1.each(vm.afterBody, fillLineOfText);\n      pt.y -= bodySpacing; // Remove last body spacing\n    },\n    drawFooter: function drawFooter(pt, vm, ctx) {\n      var footer = vm.footer;\n\n      if (footer.length) {\n        pt.x = getAlignedX(vm, vm._footerAlign);\n        pt.y += vm.footerMarginTop;\n        ctx.textAlign = vm._footerAlign;\n        ctx.textBaseline = 'top';\n        ctx.fillStyle = vm.footerFontColor;\n        ctx.font = helpers$1.fontString(vm.footerFontSize, vm._footerFontStyle, vm._footerFontFamily);\n        helpers$1.each(footer, function (line) {\n          ctx.fillText(line, pt.x, pt.y);\n          pt.y += vm.footerFontSize + vm.footerSpacing;\n        });\n      }\n    },\n    drawBackground: function drawBackground(pt, vm, ctx, tooltipSize) {\n      ctx.fillStyle = vm.backgroundColor;\n      ctx.strokeStyle = vm.borderColor;\n      ctx.lineWidth = vm.borderWidth;\n      var xAlign = vm.xAlign;\n      var yAlign = vm.yAlign;\n      var x = pt.x;\n      var y = pt.y;\n      var width = tooltipSize.width;\n      var height = tooltipSize.height;\n      var radius = vm.cornerRadius;\n      ctx.beginPath();\n      ctx.moveTo(x + radius, y);\n\n      if (yAlign === 'top') {\n        this.drawCaret(pt, tooltipSize);\n      }\n\n      ctx.lineTo(x + width - radius, y);\n      ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n\n      if (yAlign === 'center' && xAlign === 'right') {\n        this.drawCaret(pt, tooltipSize);\n      }\n\n      ctx.lineTo(x + width, y + height - radius);\n      ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n\n      if (yAlign === 'bottom') {\n        this.drawCaret(pt, tooltipSize);\n      }\n\n      ctx.lineTo(x + radius, y + height);\n      ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n\n      if (yAlign === 'center' && xAlign === 'left') {\n        this.drawCaret(pt, tooltipSize);\n      }\n\n      ctx.lineTo(x, y + radius);\n      ctx.quadraticCurveTo(x, y, x + radius, y);\n      ctx.closePath();\n      ctx.fill();\n\n      if (vm.borderWidth > 0) {\n        ctx.stroke();\n      }\n    },\n    draw: function draw() {\n      var ctx = this._chart.ctx;\n      var vm = this._view;\n\n      if (vm.opacity === 0) {\n        return;\n      }\n\n      var tooltipSize = {\n        width: vm.width,\n        height: vm.height\n      };\n      var pt = {\n        x: vm.x,\n        y: vm.y\n      }; // IE11/Edge does not like very small opacities, so snap to 0\n\n      var opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity; // Truthy/falsey value for empty tooltip\n\n      var hasTooltipContent = vm.title.length || vm.beforeBody.length || vm.body.length || vm.afterBody.length || vm.footer.length;\n\n      if (this._options.enabled && hasTooltipContent) {\n        ctx.save();\n        ctx.globalAlpha = opacity; // Draw Background\n\n        this.drawBackground(pt, vm, ctx, tooltipSize); // Draw Title, Body, and Footer\n\n        pt.y += vm.yPadding; // Titles\n\n        this.drawTitle(pt, vm, ctx); // Body\n\n        this.drawBody(pt, vm, ctx); // Footer\n\n        this.drawFooter(pt, vm, ctx);\n        ctx.restore();\n      }\n    },\n\n    /**\n     * Handle an event\n     * @private\n     * @param {IEvent} event - The event to handle\n     * @returns {boolean} true if the tooltip changed\n     */\n    handleEvent: function handleEvent(e) {\n      var me = this;\n      var options = me._options;\n      var changed = false;\n      me._lastActive = me._lastActive || []; // Find Active Elements for tooltips\n\n      if (e.type === 'mouseout') {\n        me._active = [];\n      } else {\n        me._active = me._chart.getElementsAtEventForMode(e, options.mode, options);\n      } // Remember Last Actives\n\n\n      changed = !helpers$1.arrayEquals(me._active, me._lastActive); // Only handle target event on tooltip change\n\n      if (changed) {\n        me._lastActive = me._active;\n\n        if (options.enabled || options.custom) {\n          me._eventPosition = {\n            x: e.x,\n            y: e.y\n          };\n          me.update(true);\n          me.pivot();\n        }\n      }\n\n      return changed;\n    }\n  });\n  /**\n   * @namespace Chart.Tooltip.positioners\n   */\n\n  var positioners_1 = positioners;\n  var core_tooltip = exports$3;\n  core_tooltip.positioners = positioners_1;\n  var valueOrDefault$8 = helpers$1.valueOrDefault;\n\n  core_defaults._set('global', {\n    elements: {},\n    events: ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'],\n    hover: {\n      onHover: null,\n      mode: 'nearest',\n      intersect: true,\n      animationDuration: 400\n    },\n    onClick: null,\n    maintainAspectRatio: true,\n    responsive: true,\n    responsiveAnimationDuration: 0\n  });\n  /**\n   * Recursively merge the given config objects representing the `scales` option\n   * by incorporating scale defaults in `xAxes` and `yAxes` array items, then\n   * returns a deep copy of the result, thus doesn't alter inputs.\n   */\n\n\n  function mergeScaleConfig()\n  /* config objects ... */\n  {\n    return helpers$1.merge({}, [].slice.call(arguments), {\n      merger: function merger(key, target, source, options) {\n        if (key === 'xAxes' || key === 'yAxes') {\n          var slen = source[key].length;\n          var i, type, scale;\n\n          if (!target[key]) {\n            target[key] = [];\n          }\n\n          for (i = 0; i < slen; ++i) {\n            scale = source[key][i];\n            type = valueOrDefault$8(scale.type, key === 'xAxes' ? 'category' : 'linear');\n\n            if (i >= target[key].length) {\n              target[key].push({});\n            }\n\n            if (!target[key][i].type || scale.type && scale.type !== target[key][i].type) {\n              // new/untyped scale or type changed: let's apply the new defaults\n              // then merge source scale to correctly overwrite the defaults.\n              helpers$1.merge(target[key][i], [core_scaleService.getScaleDefaults(type), scale]);\n            } else {\n              // scales type are the same\n              helpers$1.merge(target[key][i], scale);\n            }\n          }\n        } else {\n          helpers$1._merger(key, target, source, options);\n        }\n      }\n    });\n  }\n  /**\n   * Recursively merge the given config objects as the root options by handling\n   * default scale options for the `scales` and `scale` properties, then returns\n   * a deep copy of the result, thus doesn't alter inputs.\n   */\n\n\n  function mergeConfig()\n  /* config objects ... */\n  {\n    return helpers$1.merge({}, [].slice.call(arguments), {\n      merger: function merger(key, target, source, options) {\n        var tval = target[key] || {};\n        var sval = source[key];\n\n        if (key === 'scales') {\n          // scale config merging is complex. Add our own function here for that\n          target[key] = mergeScaleConfig(tval, sval);\n        } else if (key === 'scale') {\n          // used in polar area & radar charts since there is only one scale\n          target[key] = helpers$1.merge(tval, [core_scaleService.getScaleDefaults(sval.type), sval]);\n        } else {\n          helpers$1._merger(key, target, source, options);\n        }\n      }\n    });\n  }\n\n  function initConfig(config) {\n    config = config || {}; // Do NOT use mergeConfig for the data object because this method merges arrays\n    // and so would change references to labels and datasets, preventing data updates.\n\n    var data = config.data = config.data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    config.options = mergeConfig(core_defaults.global, core_defaults[config.type], config.options || {});\n    return config;\n  }\n\n  function updateConfig(chart) {\n    var newOptions = chart.options;\n    helpers$1.each(chart.scales, function (scale) {\n      core_layouts.removeBox(chart, scale);\n    });\n    newOptions = mergeConfig(core_defaults.global, core_defaults[chart.config.type], newOptions);\n    chart.options = chart.config.options = newOptions;\n    chart.ensureScalesHaveIDs();\n    chart.buildOrUpdateScales(); // Tooltip\n\n    chart.tooltip._options = newOptions.tooltips;\n    chart.tooltip.initialize();\n  }\n\n  function positionIsHorizontal(position) {\n    return position === 'top' || position === 'bottom';\n  }\n\n  var Chart = function Chart(item, config) {\n    this.construct(item, config);\n    return this;\n  };\n\n  helpers$1.extend(Chart.prototype,\n  /** @lends Chart */\n  {\n    /**\n     * @private\n     */\n    construct: function construct(item, config) {\n      var me = this;\n      config = initConfig(config);\n      var context = platform.acquireContext(item, config);\n      var canvas = context && context.canvas;\n      var height = canvas && canvas.height;\n      var width = canvas && canvas.width;\n      me.id = helpers$1.uid();\n      me.ctx = context;\n      me.canvas = canvas;\n      me.config = config;\n      me.width = width;\n      me.height = height;\n      me.aspectRatio = height ? width / height : null;\n      me.options = config.options;\n      me._bufferedRender = false;\n      /**\n       * Provided for backward compatibility, Chart and Chart.Controller have been merged,\n       * the \"instance\" still need to be defined since it might be called from plugins.\n       * @prop Chart#chart\n       * @deprecated since version 2.6.0\n       * @todo remove at version 3\n       * @private\n       */\n\n      me.chart = me;\n      me.controller = me; // chart.chart.controller #inception\n      // Add the chart instance to the global namespace\n\n      Chart.instances[me.id] = me; // Define alias to the config data: `chart.data === chart.config.data`\n\n      Object.defineProperty(me, 'data', {\n        get: function get() {\n          return me.config.data;\n        },\n        set: function set(value) {\n          me.config.data = value;\n        }\n      });\n\n      if (!context || !canvas) {\n        // The given item is not a compatible context2d element, let's return before finalizing\n        // the chart initialization but after setting basic chart / controller properties that\n        // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n        // https://github.com/chartjs/Chart.js/issues/2807\n        console.error(\"Failed to create chart: can't acquire context from the given item\");\n        return;\n      }\n\n      me.initialize();\n      me.update();\n    },\n\n    /**\n     * @private\n     */\n    initialize: function initialize() {\n      var me = this; // Before init plugin notification\n\n      core_plugins.notify(me, 'beforeInit');\n      helpers$1.retinaScale(me, me.options.devicePixelRatio);\n      me.bindEvents();\n\n      if (me.options.responsive) {\n        // Initial resize before chart draws (must be silent to preserve initial animations).\n        me.resize(true);\n      } // Make sure scales have IDs and are built before we build any controllers.\n\n\n      me.ensureScalesHaveIDs();\n      me.buildOrUpdateScales();\n      me.initToolTip(); // After init plugin notification\n\n      core_plugins.notify(me, 'afterInit');\n      return me;\n    },\n    clear: function clear() {\n      helpers$1.canvas.clear(this);\n      return this;\n    },\n    stop: function stop() {\n      // Stops any current animation loop occurring\n      core_animations.cancelAnimation(this);\n      return this;\n    },\n    resize: function resize(silent) {\n      var me = this;\n      var options = me.options;\n      var canvas = me.canvas;\n      var aspectRatio = options.maintainAspectRatio && me.aspectRatio || null; // the canvas render width and height will be casted to integers so make sure that\n      // the canvas display style uses the same integer values to avoid blurring effect.\n      // Set to 0 instead of canvas.size because the size defaults to 300x150 if the element is collapsed\n\n      var newWidth = Math.max(0, Math.floor(helpers$1.getMaximumWidth(canvas)));\n      var newHeight = Math.max(0, Math.floor(aspectRatio ? newWidth / aspectRatio : helpers$1.getMaximumHeight(canvas)));\n\n      if (me.width === newWidth && me.height === newHeight) {\n        return;\n      }\n\n      canvas.width = me.width = newWidth;\n      canvas.height = me.height = newHeight;\n      canvas.style.width = newWidth + 'px';\n      canvas.style.height = newHeight + 'px';\n      helpers$1.retinaScale(me, options.devicePixelRatio);\n\n      if (!silent) {\n        // Notify any plugins about the resize\n        var newSize = {\n          width: newWidth,\n          height: newHeight\n        };\n        core_plugins.notify(me, 'resize', [newSize]); // Notify of resize\n\n        if (options.onResize) {\n          options.onResize(me, newSize);\n        }\n\n        me.stop();\n        me.update({\n          duration: options.responsiveAnimationDuration\n        });\n      }\n    },\n    ensureScalesHaveIDs: function ensureScalesHaveIDs() {\n      var options = this.options;\n      var scalesOptions = options.scales || {};\n      var scaleOptions = options.scale;\n      helpers$1.each(scalesOptions.xAxes, function (xAxisOptions, index) {\n        xAxisOptions.id = xAxisOptions.id || 'x-axis-' + index;\n      });\n      helpers$1.each(scalesOptions.yAxes, function (yAxisOptions, index) {\n        yAxisOptions.id = yAxisOptions.id || 'y-axis-' + index;\n      });\n\n      if (scaleOptions) {\n        scaleOptions.id = scaleOptions.id || 'scale';\n      }\n    },\n\n    /**\n     * Builds a map of scale ID to scale object for future lookup.\n     */\n    buildOrUpdateScales: function buildOrUpdateScales() {\n      var me = this;\n      var options = me.options;\n      var scales = me.scales || {};\n      var items = [];\n      var updated = Object.keys(scales).reduce(function (obj, id) {\n        obj[id] = false;\n        return obj;\n      }, {});\n\n      if (options.scales) {\n        items = items.concat((options.scales.xAxes || []).map(function (xAxisOptions) {\n          return {\n            options: xAxisOptions,\n            dtype: 'category',\n            dposition: 'bottom'\n          };\n        }), (options.scales.yAxes || []).map(function (yAxisOptions) {\n          return {\n            options: yAxisOptions,\n            dtype: 'linear',\n            dposition: 'left'\n          };\n        }));\n      }\n\n      if (options.scale) {\n        items.push({\n          options: options.scale,\n          dtype: 'radialLinear',\n          isDefault: true,\n          dposition: 'chartArea'\n        });\n      }\n\n      helpers$1.each(items, function (item) {\n        var scaleOptions = item.options;\n        var id = scaleOptions.id;\n        var scaleType = valueOrDefault$8(scaleOptions.type, item.dtype);\n\n        if (positionIsHorizontal(scaleOptions.position) !== positionIsHorizontal(item.dposition)) {\n          scaleOptions.position = item.dposition;\n        }\n\n        updated[id] = true;\n        var scale = null;\n\n        if (id in scales && scales[id].type === scaleType) {\n          scale = scales[id];\n          scale.options = scaleOptions;\n          scale.ctx = me.ctx;\n          scale.chart = me;\n        } else {\n          var scaleClass = core_scaleService.getScaleConstructor(scaleType);\n\n          if (!scaleClass) {\n            return;\n          }\n\n          scale = new scaleClass({\n            id: id,\n            type: scaleType,\n            options: scaleOptions,\n            ctx: me.ctx,\n            chart: me\n          });\n          scales[scale.id] = scale;\n        }\n\n        scale.mergeTicksOptions(); // TODO(SB): I think we should be able to remove this custom case (options.scale)\n        // and consider it as a regular scale part of the \"scales\"\" map only! This would\n        // make the logic easier and remove some useless? custom code.\n\n        if (item.isDefault) {\n          me.scale = scale;\n        }\n      }); // clear up discarded scales\n\n      helpers$1.each(updated, function (hasUpdated, id) {\n        if (!hasUpdated) {\n          delete scales[id];\n        }\n      });\n      me.scales = scales;\n      core_scaleService.addScalesToLayout(this);\n    },\n    buildOrUpdateControllers: function buildOrUpdateControllers() {\n      var me = this;\n      var newControllers = [];\n      helpers$1.each(me.data.datasets, function (dataset, datasetIndex) {\n        var meta = me.getDatasetMeta(datasetIndex);\n        var type = dataset.type || me.config.type;\n\n        if (meta.type && meta.type !== type) {\n          me.destroyDatasetMeta(datasetIndex);\n          meta = me.getDatasetMeta(datasetIndex);\n        }\n\n        meta.type = type;\n\n        if (meta.controller) {\n          meta.controller.updateIndex(datasetIndex);\n          meta.controller.linkScales();\n        } else {\n          var ControllerClass = controllers[meta.type];\n\n          if (ControllerClass === undefined) {\n            throw new Error('\"' + meta.type + '\" is not a chart type.');\n          }\n\n          meta.controller = new ControllerClass(me, datasetIndex);\n          newControllers.push(meta.controller);\n        }\n      }, me);\n      return newControllers;\n    },\n\n    /**\n     * Reset the elements of all datasets\n     * @private\n     */\n    resetElements: function resetElements() {\n      var me = this;\n      helpers$1.each(me.data.datasets, function (dataset, datasetIndex) {\n        me.getDatasetMeta(datasetIndex).controller.reset();\n      }, me);\n    },\n\n    /**\n    * Resets the chart back to it's state before the initial animation\n    */\n    reset: function reset() {\n      this.resetElements();\n      this.tooltip.initialize();\n    },\n    update: function update(config) {\n      var me = this;\n\n      if (!config || typeof config !== 'object') {\n        // backwards compatibility\n        config = {\n          duration: config,\n          lazy: arguments[1]\n        };\n      }\n\n      updateConfig(me); // plugins options references might have change, let's invalidate the cache\n      // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n\n      core_plugins._invalidate(me);\n\n      if (core_plugins.notify(me, 'beforeUpdate') === false) {\n        return;\n      } // In case the entire data object changed\n\n\n      me.tooltip._data = me.data; // Make sure dataset controllers are updated and new controllers are reset\n\n      var newControllers = me.buildOrUpdateControllers(); // Make sure all dataset controllers have correct meta data counts\n\n      helpers$1.each(me.data.datasets, function (dataset, datasetIndex) {\n        me.getDatasetMeta(datasetIndex).controller.buildOrUpdateElements();\n      }, me);\n      me.updateLayout(); // Can only reset the new controllers after the scales have been updated\n\n      if (me.options.animation && me.options.animation.duration) {\n        helpers$1.each(newControllers, function (controller) {\n          controller.reset();\n        });\n      }\n\n      me.updateDatasets(); // Need to reset tooltip in case it is displayed with elements that are removed\n      // after update.\n\n      me.tooltip.initialize(); // Last active contains items that were previously in the tooltip.\n      // When we reset the tooltip, we need to clear it\n\n      me.lastActive = []; // Do this before render so that any plugins that need final scale updates can use it\n\n      core_plugins.notify(me, 'afterUpdate');\n\n      if (me._bufferedRender) {\n        me._bufferedRequest = {\n          duration: config.duration,\n          easing: config.easing,\n          lazy: config.lazy\n        };\n      } else {\n        me.render(config);\n      }\n    },\n\n    /**\n     * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n     * hook, in which case, plugins will not be called on `afterLayout`.\n     * @private\n     */\n    updateLayout: function updateLayout() {\n      var me = this;\n\n      if (core_plugins.notify(me, 'beforeLayout') === false) {\n        return;\n      }\n\n      core_layouts.update(this, this.width, this.height);\n      /**\n       * Provided for backward compatibility, use `afterLayout` instead.\n       * @method IPlugin#afterScaleUpdate\n       * @deprecated since version 2.5.0\n       * @todo remove at version 3\n       * @private\n       */\n\n      core_plugins.notify(me, 'afterScaleUpdate');\n      core_plugins.notify(me, 'afterLayout');\n    },\n\n    /**\n     * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n     * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n     * @private\n     */\n    updateDatasets: function updateDatasets() {\n      var me = this;\n\n      if (core_plugins.notify(me, 'beforeDatasetsUpdate') === false) {\n        return;\n      }\n\n      for (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {\n        me.updateDataset(i);\n      }\n\n      core_plugins.notify(me, 'afterDatasetsUpdate');\n    },\n\n    /**\n     * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n     * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n     * @private\n     */\n    updateDataset: function updateDataset(index) {\n      var me = this;\n      var meta = me.getDatasetMeta(index);\n      var args = {\n        meta: meta,\n        index: index\n      };\n\n      if (core_plugins.notify(me, 'beforeDatasetUpdate', [args]) === false) {\n        return;\n      }\n\n      meta.controller.update();\n      core_plugins.notify(me, 'afterDatasetUpdate', [args]);\n    },\n    render: function render(config) {\n      var me = this;\n\n      if (!config || typeof config !== 'object') {\n        // backwards compatibility\n        config = {\n          duration: config,\n          lazy: arguments[1]\n        };\n      }\n\n      var animationOptions = me.options.animation;\n      var duration = valueOrDefault$8(config.duration, animationOptions && animationOptions.duration);\n      var lazy = config.lazy;\n\n      if (core_plugins.notify(me, 'beforeRender') === false) {\n        return;\n      }\n\n      var onComplete = function onComplete(animation) {\n        core_plugins.notify(me, 'afterRender');\n        helpers$1.callback(animationOptions && animationOptions.onComplete, [animation], me);\n      };\n\n      if (animationOptions && duration) {\n        var animation = new core_animation({\n          numSteps: duration / 16.66,\n          // 60 fps\n          easing: config.easing || animationOptions.easing,\n          render: function render(chart, animationObject) {\n            var easingFunction = helpers$1.easing.effects[animationObject.easing];\n            var currentStep = animationObject.currentStep;\n            var stepDecimal = currentStep / animationObject.numSteps;\n            chart.draw(easingFunction(stepDecimal), stepDecimal, currentStep);\n          },\n          onAnimationProgress: animationOptions.onProgress,\n          onAnimationComplete: onComplete\n        });\n        core_animations.addAnimation(me, animation, duration, lazy);\n      } else {\n        me.draw(); // See https://github.com/chartjs/Chart.js/issues/3781\n\n        onComplete(new core_animation({\n          numSteps: 0,\n          chart: me\n        }));\n      }\n\n      return me;\n    },\n    draw: function draw(easingValue) {\n      var me = this;\n      me.clear();\n\n      if (helpers$1.isNullOrUndef(easingValue)) {\n        easingValue = 1;\n      }\n\n      me.transition(easingValue);\n\n      if (me.width <= 0 || me.height <= 0) {\n        return;\n      }\n\n      if (core_plugins.notify(me, 'beforeDraw', [easingValue]) === false) {\n        return;\n      } // Draw all the scales\n\n\n      helpers$1.each(me.boxes, function (box) {\n        box.draw(me.chartArea);\n      }, me);\n      me.drawDatasets(easingValue);\n\n      me._drawTooltip(easingValue);\n\n      core_plugins.notify(me, 'afterDraw', [easingValue]);\n    },\n\n    /**\n     * @private\n     */\n    transition: function transition(easingValue) {\n      var me = this;\n\n      for (var i = 0, ilen = (me.data.datasets || []).length; i < ilen; ++i) {\n        if (me.isDatasetVisible(i)) {\n          me.getDatasetMeta(i).controller.transition(easingValue);\n        }\n      }\n\n      me.tooltip.transition(easingValue);\n    },\n\n    /**\n     * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n     * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n     * @private\n     */\n    drawDatasets: function drawDatasets(easingValue) {\n      var me = this;\n\n      if (core_plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {\n        return;\n      } // Draw datasets reversed to support proper line stacking\n\n\n      for (var i = (me.data.datasets || []).length - 1; i >= 0; --i) {\n        if (me.isDatasetVisible(i)) {\n          me.drawDataset(i, easingValue);\n        }\n      }\n\n      core_plugins.notify(me, 'afterDatasetsDraw', [easingValue]);\n    },\n\n    /**\n     * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n     * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n     * @private\n     */\n    drawDataset: function drawDataset(index, easingValue) {\n      var me = this;\n      var meta = me.getDatasetMeta(index);\n      var args = {\n        meta: meta,\n        index: index,\n        easingValue: easingValue\n      };\n\n      if (core_plugins.notify(me, 'beforeDatasetDraw', [args]) === false) {\n        return;\n      }\n\n      meta.controller.draw(easingValue);\n      core_plugins.notify(me, 'afterDatasetDraw', [args]);\n    },\n\n    /**\n     * Draws tooltip unless a plugin returns `false` to the `beforeTooltipDraw`\n     * hook, in which case, plugins will not be called on `afterTooltipDraw`.\n     * @private\n     */\n    _drawTooltip: function _drawTooltip(easingValue) {\n      var me = this;\n      var tooltip = me.tooltip;\n      var args = {\n        tooltip: tooltip,\n        easingValue: easingValue\n      };\n\n      if (core_plugins.notify(me, 'beforeTooltipDraw', [args]) === false) {\n        return;\n      }\n\n      tooltip.draw();\n      core_plugins.notify(me, 'afterTooltipDraw', [args]);\n    },\n\n    /**\n     * Get the single element that was clicked on\n     * @return An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw\n     */\n    getElementAtEvent: function getElementAtEvent(e) {\n      return core_interaction.modes.single(this, e);\n    },\n    getElementsAtEvent: function getElementsAtEvent(e) {\n      return core_interaction.modes.label(this, e, {\n        intersect: true\n      });\n    },\n    getElementsAtXAxis: function getElementsAtXAxis(e) {\n      return core_interaction.modes['x-axis'](this, e, {\n        intersect: true\n      });\n    },\n    getElementsAtEventForMode: function getElementsAtEventForMode(e, mode, options) {\n      var method = core_interaction.modes[mode];\n\n      if (typeof method === 'function') {\n        return method(this, e, options);\n      }\n\n      return [];\n    },\n    getDatasetAtEvent: function getDatasetAtEvent(e) {\n      return core_interaction.modes.dataset(this, e, {\n        intersect: true\n      });\n    },\n    getDatasetMeta: function getDatasetMeta(datasetIndex) {\n      var me = this;\n      var dataset = me.data.datasets[datasetIndex];\n\n      if (!dataset._meta) {\n        dataset._meta = {};\n      }\n\n      var meta = dataset._meta[me.id];\n\n      if (!meta) {\n        meta = dataset._meta[me.id] = {\n          type: null,\n          data: [],\n          dataset: null,\n          controller: null,\n          hidden: null,\n          // See isDatasetVisible() comment\n          xAxisID: null,\n          yAxisID: null\n        };\n      }\n\n      return meta;\n    },\n    getVisibleDatasetCount: function getVisibleDatasetCount() {\n      var count = 0;\n\n      for (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n        if (this.isDatasetVisible(i)) {\n          count++;\n        }\n      }\n\n      return count;\n    },\n    isDatasetVisible: function isDatasetVisible(datasetIndex) {\n      var meta = this.getDatasetMeta(datasetIndex); // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n      // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n\n      return typeof meta.hidden === 'boolean' ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;\n    },\n    generateLegend: function generateLegend() {\n      return this.options.legendCallback(this);\n    },\n\n    /**\n     * @private\n     */\n    destroyDatasetMeta: function destroyDatasetMeta(datasetIndex) {\n      var id = this.id;\n      var dataset = this.data.datasets[datasetIndex];\n      var meta = dataset._meta && dataset._meta[id];\n\n      if (meta) {\n        meta.controller.destroy();\n        delete dataset._meta[id];\n      }\n    },\n    destroy: function destroy() {\n      var me = this;\n      var canvas = me.canvas;\n      var i, ilen;\n      me.stop(); // dataset controllers need to cleanup associated data\n\n      for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {\n        me.destroyDatasetMeta(i);\n      }\n\n      if (canvas) {\n        me.unbindEvents();\n        helpers$1.canvas.clear(me);\n        platform.releaseContext(me.ctx);\n        me.canvas = null;\n        me.ctx = null;\n      }\n\n      core_plugins.notify(me, 'destroy');\n      delete Chart.instances[me.id];\n    },\n    toBase64Image: function toBase64Image() {\n      return this.canvas.toDataURL.apply(this.canvas, arguments);\n    },\n    initToolTip: function initToolTip() {\n      var me = this;\n      me.tooltip = new core_tooltip({\n        _chart: me,\n        _chartInstance: me,\n        // deprecated, backward compatibility\n        _data: me.data,\n        _options: me.options.tooltips\n      }, me);\n    },\n\n    /**\n     * @private\n     */\n    bindEvents: function bindEvents() {\n      var me = this;\n      var listeners = me._listeners = {};\n\n      var listener = function listener() {\n        me.eventHandler.apply(me, arguments);\n      };\n\n      helpers$1.each(me.options.events, function (type) {\n        platform.addEventListener(me, type, listener);\n        listeners[type] = listener;\n      }); // Elements used to detect size change should not be injected for non responsive charts.\n      // See https://github.com/chartjs/Chart.js/issues/2210\n\n      if (me.options.responsive) {\n        listener = function listener() {\n          me.resize();\n        };\n\n        platform.addEventListener(me, 'resize', listener);\n        listeners.resize = listener;\n      }\n    },\n\n    /**\n     * @private\n     */\n    unbindEvents: function unbindEvents() {\n      var me = this;\n      var listeners = me._listeners;\n\n      if (!listeners) {\n        return;\n      }\n\n      delete me._listeners;\n      helpers$1.each(listeners, function (listener, type) {\n        platform.removeEventListener(me, type, listener);\n      });\n    },\n    updateHoverStyle: function updateHoverStyle(elements, mode, enabled) {\n      var method = enabled ? 'setHoverStyle' : 'removeHoverStyle';\n      var element, i, ilen;\n\n      for (i = 0, ilen = elements.length; i < ilen; ++i) {\n        element = elements[i];\n\n        if (element) {\n          this.getDatasetMeta(element._datasetIndex).controller[method](element);\n        }\n      }\n    },\n\n    /**\n     * @private\n     */\n    eventHandler: function eventHandler(e) {\n      var me = this;\n      var tooltip = me.tooltip;\n\n      if (core_plugins.notify(me, 'beforeEvent', [e]) === false) {\n        return;\n      } // Buffer any update calls so that renders do not occur\n\n\n      me._bufferedRender = true;\n      me._bufferedRequest = null;\n      var changed = me.handleEvent(e); // for smooth tooltip animations issue #4989\n      // the tooltip should be the source of change\n      // Animation check workaround:\n      // tooltip._start will be null when tooltip isn't animating\n\n      if (tooltip) {\n        changed = tooltip._start ? tooltip.handleEvent(e) : changed | tooltip.handleEvent(e);\n      }\n\n      core_plugins.notify(me, 'afterEvent', [e]);\n      var bufferedRequest = me._bufferedRequest;\n\n      if (bufferedRequest) {\n        // If we have an update that was triggered, we need to do a normal render\n        me.render(bufferedRequest);\n      } else if (changed && !me.animating) {\n        // If entering, leaving, or changing elements, animate the change via pivot\n        me.stop(); // We only need to render at this point. Updating will cause scales to be\n        // recomputed generating flicker & using more memory than necessary.\n\n        me.render({\n          duration: me.options.hover.animationDuration,\n          lazy: true\n        });\n      }\n\n      me._bufferedRender = false;\n      me._bufferedRequest = null;\n      return me;\n    },\n\n    /**\n     * Handle an event\n     * @private\n     * @param {IEvent} event the event to handle\n     * @return {boolean} true if the chart needs to re-render\n     */\n    handleEvent: function handleEvent(e) {\n      var me = this;\n      var options = me.options || {};\n      var hoverOptions = options.hover;\n      var changed = false;\n      me.lastActive = me.lastActive || []; // Find Active Elements for hover and tooltips\n\n      if (e.type === 'mouseout') {\n        me.active = [];\n      } else {\n        me.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);\n      } // Invoke onHover hook\n      // Need to call with native event here to not break backwards compatibility\n\n\n      helpers$1.callback(options.onHover || options.hover.onHover, [e.native, me.active], me);\n\n      if (e.type === 'mouseup' || e.type === 'click') {\n        if (options.onClick) {\n          // Use e.native here for backwards compatibility\n          options.onClick.call(me, e.native, me.active);\n        }\n      } // Remove styling for last active (even if it may still be active)\n\n\n      if (me.lastActive.length) {\n        me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);\n      } // Built in hover styling\n\n\n      if (me.active.length && hoverOptions.mode) {\n        me.updateHoverStyle(me.active, hoverOptions.mode, true);\n      }\n\n      changed = !helpers$1.arrayEquals(me.active, me.lastActive); // Remember Last Actives\n\n      me.lastActive = me.active;\n      return changed;\n    }\n  });\n  /**\n   * NOTE(SB) We actually don't use this container anymore but we need to keep it\n   * for backward compatibility. Though, it can still be useful for plugins that\n   * would need to work on multiple charts?!\n   */\n\n  Chart.instances = {};\n  var core_controller = Chart; // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, use Chart instead.\n   * @class Chart.Controller\n   * @deprecated since version 2.6\n   * @todo remove at version 3\n   * @private\n   */\n\n  Chart.Controller = Chart;\n  /**\n   * Provided for backward compatibility, not available anymore.\n   * @namespace Chart\n   * @deprecated since version 2.8\n   * @todo remove at version 3\n   * @private\n   */\n\n  Chart.types = {};\n  /**\n   * Provided for backward compatibility, not available anymore.\n   * @namespace Chart.helpers.configMerge\n   * @deprecated since version 2.8.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers$1.configMerge = mergeConfig;\n  /**\n   * Provided for backward compatibility, not available anymore.\n   * @namespace Chart.helpers.scaleMerge\n   * @deprecated since version 2.8.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers$1.scaleMerge = mergeScaleConfig;\n\n  var core_helpers = function core_helpers() {\n    // -- Basic js utility methods\n    helpers$1.where = function (collection, filterCallback) {\n      if (helpers$1.isArray(collection) && Array.prototype.filter) {\n        return collection.filter(filterCallback);\n      }\n\n      var filtered = [];\n      helpers$1.each(collection, function (item) {\n        if (filterCallback(item)) {\n          filtered.push(item);\n        }\n      });\n      return filtered;\n    };\n\n    helpers$1.findIndex = Array.prototype.findIndex ? function (array, callback, scope) {\n      return array.findIndex(callback, scope);\n    } : function (array, callback, scope) {\n      scope = scope === undefined ? array : scope;\n\n      for (var i = 0, ilen = array.length; i < ilen; ++i) {\n        if (callback.call(scope, array[i], i, array)) {\n          return i;\n        }\n      }\n\n      return -1;\n    };\n\n    helpers$1.findNextWhere = function (arrayToSearch, filterCallback, startIndex) {\n      // Default to start of the array\n      if (helpers$1.isNullOrUndef(startIndex)) {\n        startIndex = -1;\n      }\n\n      for (var i = startIndex + 1; i < arrayToSearch.length; i++) {\n        var currentItem = arrayToSearch[i];\n\n        if (filterCallback(currentItem)) {\n          return currentItem;\n        }\n      }\n    };\n\n    helpers$1.findPreviousWhere = function (arrayToSearch, filterCallback, startIndex) {\n      // Default to end of the array\n      if (helpers$1.isNullOrUndef(startIndex)) {\n        startIndex = arrayToSearch.length;\n      }\n\n      for (var i = startIndex - 1; i >= 0; i--) {\n        var currentItem = arrayToSearch[i];\n\n        if (filterCallback(currentItem)) {\n          return currentItem;\n        }\n      }\n    }; // -- Math methods\n\n\n    helpers$1.isNumber = function (n) {\n      return !isNaN(parseFloat(n)) && isFinite(n);\n    };\n\n    helpers$1.almostEquals = function (x, y, epsilon) {\n      return Math.abs(x - y) < epsilon;\n    };\n\n    helpers$1.almostWhole = function (x, epsilon) {\n      var rounded = Math.round(x);\n      return rounded - epsilon < x && rounded + epsilon > x;\n    };\n\n    helpers$1.max = function (array) {\n      return array.reduce(function (max, value) {\n        if (!isNaN(value)) {\n          return Math.max(max, value);\n        }\n\n        return max;\n      }, Number.NEGATIVE_INFINITY);\n    };\n\n    helpers$1.min = function (array) {\n      return array.reduce(function (min, value) {\n        if (!isNaN(value)) {\n          return Math.min(min, value);\n        }\n\n        return min;\n      }, Number.POSITIVE_INFINITY);\n    };\n\n    helpers$1.sign = Math.sign ? function (x) {\n      return Math.sign(x);\n    } : function (x) {\n      x = +x; // convert to a number\n\n      if (x === 0 || isNaN(x)) {\n        return x;\n      }\n\n      return x > 0 ? 1 : -1;\n    };\n    helpers$1.log10 = Math.log10 ? function (x) {\n      return Math.log10(x);\n    } : function (x) {\n      var exponent = Math.log(x) * Math.LOG10E; // Math.LOG10E = 1 / Math.LN10.\n      // Check for whole powers of 10,\n      // which due to floating point rounding error should be corrected.\n\n      var powerOf10 = Math.round(exponent);\n      var isPowerOf10 = x === Math.pow(10, powerOf10);\n      return isPowerOf10 ? powerOf10 : exponent;\n    };\n\n    helpers$1.toRadians = function (degrees) {\n      return degrees * (Math.PI / 180);\n    };\n\n    helpers$1.toDegrees = function (radians) {\n      return radians * (180 / Math.PI);\n    };\n    /**\n     * Returns the number of decimal places\n     * i.e. the number of digits after the decimal point, of the value of this Number.\n     * @param {number} x - A number.\n     * @returns {number} The number of decimal places.\n     * @private\n     */\n\n\n    helpers$1._decimalPlaces = function (x) {\n      if (!helpers$1.isFinite(x)) {\n        return;\n      }\n\n      var e = 1;\n      var p = 0;\n\n      while (Math.round(x * e) / e !== x) {\n        e *= 10;\n        p++;\n      }\n\n      return p;\n    }; // Gets the angle from vertical upright to the point about a centre.\n\n\n    helpers$1.getAngleFromPoint = function (centrePoint, anglePoint) {\n      var distanceFromXCenter = anglePoint.x - centrePoint.x;\n      var distanceFromYCenter = anglePoint.y - centrePoint.y;\n      var radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n      var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n\n      if (angle < -0.5 * Math.PI) {\n        angle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\n      }\n\n      return {\n        angle: angle,\n        distance: radialDistanceFromCenter\n      };\n    };\n\n    helpers$1.distanceBetweenPoints = function (pt1, pt2) {\n      return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n    };\n    /**\n     * Provided for backward compatibility, not available anymore\n     * @function Chart.helpers.aliasPixel\n     * @deprecated since version 2.8.0\n     * @todo remove at version 3\n     */\n\n\n    helpers$1.aliasPixel = function (pixelWidth) {\n      return pixelWidth % 2 === 0 ? 0 : 0.5;\n    };\n    /**\n     * Returns the aligned pixel value to avoid anti-aliasing blur\n     * @param {Chart} chart - The chart instance.\n     * @param {number} pixel - A pixel value.\n     * @param {number} width - The width of the element.\n     * @returns {number} The aligned pixel value.\n     * @private\n     */\n\n\n    helpers$1._alignPixel = function (chart, pixel, width) {\n      var devicePixelRatio = chart.currentDevicePixelRatio;\n      var halfWidth = width / 2;\n      return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n    };\n\n    helpers$1.splineCurve = function (firstPoint, middlePoint, afterPoint, t) {\n      // Props to Rob Spencer at scaled innovation for his post on splining between points\n      // http://scaledinnovation.com/analytics/splines/aboutSplines.html\n      // This function must also respect \"skipped\" points\n      var previous = firstPoint.skip ? middlePoint : firstPoint;\n      var current = middlePoint;\n      var next = afterPoint.skip ? middlePoint : afterPoint;\n      var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));\n      var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));\n      var s01 = d01 / (d01 + d12);\n      var s12 = d12 / (d01 + d12); // If all points are the same, s01 & s02 will be inf\n\n      s01 = isNaN(s01) ? 0 : s01;\n      s12 = isNaN(s12) ? 0 : s12;\n      var fa = t * s01; // scaling factor for triangle Ta\n\n      var fb = t * s12;\n      return {\n        previous: {\n          x: current.x - fa * (next.x - previous.x),\n          y: current.y - fa * (next.y - previous.y)\n        },\n        next: {\n          x: current.x + fb * (next.x - previous.x),\n          y: current.y + fb * (next.y - previous.y)\n        }\n      };\n    };\n\n    helpers$1.EPSILON = Number.EPSILON || 1e-14;\n\n    helpers$1.splineCurveMonotone = function (points) {\n      // This function calculates Bézier control points in a similar way than |splineCurve|,\n      // but preserves monotonicity of the provided data and ensures no local extremums are added\n      // between the dataset discrete points due to the interpolation.\n      // See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n      var pointsWithTangents = (points || []).map(function (point) {\n        return {\n          model: point._model,\n          deltaK: 0,\n          mK: 0\n        };\n      }); // Calculate slopes (deltaK) and initialize tangents (mK)\n\n      var pointsLen = pointsWithTangents.length;\n      var i, pointBefore, pointCurrent, pointAfter;\n\n      for (i = 0; i < pointsLen; ++i) {\n        pointCurrent = pointsWithTangents[i];\n\n        if (pointCurrent.model.skip) {\n          continue;\n        }\n\n        pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;\n        pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;\n\n        if (pointAfter && !pointAfter.model.skip) {\n          var slopeDeltaX = pointAfter.model.x - pointCurrent.model.x; // In the case of two points that appear at the same x pixel, slopeDeltaX is 0\n\n          pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;\n        }\n\n        if (!pointBefore || pointBefore.model.skip) {\n          pointCurrent.mK = pointCurrent.deltaK;\n        } else if (!pointAfter || pointAfter.model.skip) {\n          pointCurrent.mK = pointBefore.deltaK;\n        } else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {\n          pointCurrent.mK = 0;\n        } else {\n          pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;\n        }\n      } // Adjust tangents to ensure monotonic properties\n\n\n      var alphaK, betaK, tauK, squaredMagnitude;\n\n      for (i = 0; i < pointsLen - 1; ++i) {\n        pointCurrent = pointsWithTangents[i];\n        pointAfter = pointsWithTangents[i + 1];\n\n        if (pointCurrent.model.skip || pointAfter.model.skip) {\n          continue;\n        }\n\n        if (helpers$1.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {\n          pointCurrent.mK = pointAfter.mK = 0;\n          continue;\n        }\n\n        alphaK = pointCurrent.mK / pointCurrent.deltaK;\n        betaK = pointAfter.mK / pointCurrent.deltaK;\n        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n\n        if (squaredMagnitude <= 9) {\n          continue;\n        }\n\n        tauK = 3 / Math.sqrt(squaredMagnitude);\n        pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;\n        pointAfter.mK = betaK * tauK * pointCurrent.deltaK;\n      } // Compute control points\n\n\n      var deltaX;\n\n      for (i = 0; i < pointsLen; ++i) {\n        pointCurrent = pointsWithTangents[i];\n\n        if (pointCurrent.model.skip) {\n          continue;\n        }\n\n        pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;\n        pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;\n\n        if (pointBefore && !pointBefore.model.skip) {\n          deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;\n          pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;\n          pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;\n        }\n\n        if (pointAfter && !pointAfter.model.skip) {\n          deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;\n          pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;\n          pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;\n        }\n      }\n    };\n\n    helpers$1.nextItem = function (collection, index, loop) {\n      if (loop) {\n        return index >= collection.length - 1 ? collection[0] : collection[index + 1];\n      }\n\n      return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];\n    };\n\n    helpers$1.previousItem = function (collection, index, loop) {\n      if (loop) {\n        return index <= 0 ? collection[collection.length - 1] : collection[index - 1];\n      }\n\n      return index <= 0 ? collection[0] : collection[index - 1];\n    }; // Implementation of the nice number algorithm used in determining where axis labels will go\n\n\n    helpers$1.niceNum = function (range, round) {\n      var exponent = Math.floor(helpers$1.log10(range));\n      var fraction = range / Math.pow(10, exponent);\n      var niceFraction;\n\n      if (round) {\n        if (fraction < 1.5) {\n          niceFraction = 1;\n        } else if (fraction < 3) {\n          niceFraction = 2;\n        } else if (fraction < 7) {\n          niceFraction = 5;\n        } else {\n          niceFraction = 10;\n        }\n      } else if (fraction <= 1.0) {\n        niceFraction = 1;\n      } else if (fraction <= 2) {\n        niceFraction = 2;\n      } else if (fraction <= 5) {\n        niceFraction = 5;\n      } else {\n        niceFraction = 10;\n      }\n\n      return niceFraction * Math.pow(10, exponent);\n    }; // Request animation polyfill - https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/\n\n\n    helpers$1.requestAnimFrame = function () {\n      if (typeof window === 'undefined') {\n        return function (callback) {\n          callback();\n        };\n      }\n\n      return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n        return window.setTimeout(callback, 1000 / 60);\n      };\n    }(); // -- DOM methods\n\n\n    helpers$1.getRelativePosition = function (evt, chart) {\n      var mouseX, mouseY;\n      var e = evt.originalEvent || evt;\n      var canvas = evt.target || evt.srcElement;\n      var boundingRect = canvas.getBoundingClientRect();\n      var touches = e.touches;\n\n      if (touches && touches.length > 0) {\n        mouseX = touches[0].clientX;\n        mouseY = touches[0].clientY;\n      } else {\n        mouseX = e.clientX;\n        mouseY = e.clientY;\n      } // Scale mouse coordinates into canvas coordinates\n      // by following the pattern laid out by 'jerryj' in the comments of\n      // https://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/\n\n\n      var paddingLeft = parseFloat(helpers$1.getStyle(canvas, 'padding-left'));\n      var paddingTop = parseFloat(helpers$1.getStyle(canvas, 'padding-top'));\n      var paddingRight = parseFloat(helpers$1.getStyle(canvas, 'padding-right'));\n      var paddingBottom = parseFloat(helpers$1.getStyle(canvas, 'padding-bottom'));\n      var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;\n      var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom; // We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However\n      // the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here\n\n      mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / width * canvas.width / chart.currentDevicePixelRatio);\n      mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / height * canvas.height / chart.currentDevicePixelRatio);\n      return {\n        x: mouseX,\n        y: mouseY\n      };\n    }; // Private helper function to convert max-width/max-height values that may be percentages into a number\n\n\n    function parseMaxStyle(styleValue, node, parentProperty) {\n      var valueInPixels;\n\n      if (typeof styleValue === 'string') {\n        valueInPixels = parseInt(styleValue, 10);\n\n        if (styleValue.indexOf('%') !== -1) {\n          // percentage * size in dimension\n          valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n        }\n      } else {\n        valueInPixels = styleValue;\n      }\n\n      return valueInPixels;\n    }\n    /**\n     * Returns if the given value contains an effective constraint.\n     * @private\n     */\n\n\n    function isConstrainedValue(value) {\n      return value !== undefined && value !== null && value !== 'none';\n    }\n    /**\n     * Returns the max width or height of the given DOM node in a cross-browser compatible fashion\n     * @param {HTMLElement} domNode - the node to check the constraint on\n     * @param {string} maxStyle - the style that defines the maximum for the direction we are using ('max-width' / 'max-height')\n     * @param {string} percentageProperty - property of parent to use when calculating width as a percentage\n     * @see {@link https://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser}\n     */\n\n\n    function getConstraintDimension(domNode, maxStyle, percentageProperty) {\n      var view = document.defaultView;\n\n      var parentNode = helpers$1._getParentNode(domNode);\n\n      var constrainedNode = view.getComputedStyle(domNode)[maxStyle];\n      var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];\n      var hasCNode = isConstrainedValue(constrainedNode);\n      var hasCContainer = isConstrainedValue(constrainedContainer);\n      var infinity = Number.POSITIVE_INFINITY;\n\n      if (hasCNode || hasCContainer) {\n        return Math.min(hasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity, hasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);\n      }\n\n      return 'none';\n    } // returns Number or undefined if no constraint\n\n\n    helpers$1.getConstraintWidth = function (domNode) {\n      return getConstraintDimension(domNode, 'max-width', 'clientWidth');\n    }; // returns Number or undefined if no constraint\n\n\n    helpers$1.getConstraintHeight = function (domNode) {\n      return getConstraintDimension(domNode, 'max-height', 'clientHeight');\n    };\n    /**\n     * @private\n    \t */\n\n\n    helpers$1._calculatePadding = function (container, padding, parentDimension) {\n      padding = helpers$1.getStyle(container, padding);\n      return padding.indexOf('%') > -1 ? parentDimension * parseInt(padding, 10) / 100 : parseInt(padding, 10);\n    };\n    /**\n     * @private\n     */\n\n\n    helpers$1._getParentNode = function (domNode) {\n      var parent = domNode.parentNode;\n\n      if (parent && parent.toString() === '[object ShadowRoot]') {\n        parent = parent.host;\n      }\n\n      return parent;\n    };\n\n    helpers$1.getMaximumWidth = function (domNode) {\n      var container = helpers$1._getParentNode(domNode);\n\n      if (!container) {\n        return domNode.clientWidth;\n      }\n\n      var clientWidth = container.clientWidth;\n\n      var paddingLeft = helpers$1._calculatePadding(container, 'padding-left', clientWidth);\n\n      var paddingRight = helpers$1._calculatePadding(container, 'padding-right', clientWidth);\n\n      var w = clientWidth - paddingLeft - paddingRight;\n      var cw = helpers$1.getConstraintWidth(domNode);\n      return isNaN(cw) ? w : Math.min(w, cw);\n    };\n\n    helpers$1.getMaximumHeight = function (domNode) {\n      var container = helpers$1._getParentNode(domNode);\n\n      if (!container) {\n        return domNode.clientHeight;\n      }\n\n      var clientHeight = container.clientHeight;\n\n      var paddingTop = helpers$1._calculatePadding(container, 'padding-top', clientHeight);\n\n      var paddingBottom = helpers$1._calculatePadding(container, 'padding-bottom', clientHeight);\n\n      var h = clientHeight - paddingTop - paddingBottom;\n      var ch = helpers$1.getConstraintHeight(domNode);\n      return isNaN(ch) ? h : Math.min(h, ch);\n    };\n\n    helpers$1.getStyle = function (el, property) {\n      return el.currentStyle ? el.currentStyle[property] : document.defaultView.getComputedStyle(el, null).getPropertyValue(property);\n    };\n\n    helpers$1.retinaScale = function (chart, forceRatio) {\n      var pixelRatio = chart.currentDevicePixelRatio = forceRatio || typeof window !== 'undefined' && window.devicePixelRatio || 1;\n\n      if (pixelRatio === 1) {\n        return;\n      }\n\n      var canvas = chart.canvas;\n      var height = chart.height;\n      var width = chart.width;\n      canvas.height = height * pixelRatio;\n      canvas.width = width * pixelRatio;\n      chart.ctx.scale(pixelRatio, pixelRatio); // If no style has been set on the canvas, the render size is used as display size,\n      // making the chart visually bigger, so let's enforce it to the \"correct\" values.\n      // See https://github.com/chartjs/Chart.js/issues/3575\n\n      if (!canvas.style.height && !canvas.style.width) {\n        canvas.style.height = height + 'px';\n        canvas.style.width = width + 'px';\n      }\n    }; // -- Canvas methods\n\n\n    helpers$1.fontString = function (pixelSize, fontStyle, fontFamily) {\n      return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n    };\n\n    helpers$1.longestText = function (ctx, font, arrayOfThings, cache) {\n      cache = cache || {};\n      var data = cache.data = cache.data || {};\n      var gc = cache.garbageCollect = cache.garbageCollect || [];\n\n      if (cache.font !== font) {\n        data = cache.data = {};\n        gc = cache.garbageCollect = [];\n        cache.font = font;\n      }\n\n      ctx.font = font;\n      var longest = 0;\n      helpers$1.each(arrayOfThings, function (thing) {\n        // Undefined strings and arrays should not be measured\n        if (thing !== undefined && thing !== null && helpers$1.isArray(thing) !== true) {\n          longest = helpers$1.measureText(ctx, data, gc, longest, thing);\n        } else if (helpers$1.isArray(thing)) {\n          // if it is an array lets measure each element\n          // to do maybe simplify this function a bit so we can do this more recursively?\n          helpers$1.each(thing, function (nestedThing) {\n            // Undefined strings and arrays should not be measured\n            if (nestedThing !== undefined && nestedThing !== null && !helpers$1.isArray(nestedThing)) {\n              longest = helpers$1.measureText(ctx, data, gc, longest, nestedThing);\n            }\n          });\n        }\n      });\n      var gcLen = gc.length / 2;\n\n      if (gcLen > arrayOfThings.length) {\n        for (var i = 0; i < gcLen; i++) {\n          delete data[gc[i]];\n        }\n\n        gc.splice(0, gcLen);\n      }\n\n      return longest;\n    };\n\n    helpers$1.measureText = function (ctx, data, gc, longest, string) {\n      var textWidth = data[string];\n\n      if (!textWidth) {\n        textWidth = data[string] = ctx.measureText(string).width;\n        gc.push(string);\n      }\n\n      if (textWidth > longest) {\n        longest = textWidth;\n      }\n\n      return longest;\n    };\n\n    helpers$1.numberOfLabelLines = function (arrayOfThings) {\n      var numberOfLines = 1;\n      helpers$1.each(arrayOfThings, function (thing) {\n        if (helpers$1.isArray(thing)) {\n          if (thing.length > numberOfLines) {\n            numberOfLines = thing.length;\n          }\n        }\n      });\n      return numberOfLines;\n    };\n\n    helpers$1.color = !chartjsColor ? function (value) {\n      console.error('Color.js not found!');\n      return value;\n    } : function (value) {\n      /* global CanvasGradient */\n      if (value instanceof CanvasGradient) {\n        value = core_defaults.global.defaultColor;\n      }\n\n      return chartjsColor(value);\n    };\n\n    helpers$1.getHoverColor = function (colorValue) {\n      /* global CanvasPattern */\n      return colorValue instanceof CanvasPattern || colorValue instanceof CanvasGradient ? colorValue : helpers$1.color(colorValue).saturate(0.5).darken(0.1).rgbString();\n    };\n  };\n\n  function abstract() {\n    throw new Error('This method is not implemented: either no adapter can ' + 'be found or an incomplete integration was provided.');\n  }\n  /**\n   * Date adapter (current used by the time scale)\n   * @namespace Chart._adapters._date\n   * @memberof Chart._adapters\n   * @private\n   */\n\n  /**\n   * Currently supported unit string values.\n   * @typedef {('millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year')}\n   * @memberof Chart._adapters._date\n   * @name Unit\n   */\n\n  /**\n   * @class\n   */\n\n\n  function DateAdapter(options) {\n    this.options = options || {};\n  }\n\n  helpers$1.extend(DateAdapter.prototype,\n  /** @lends DateAdapter */\n  {\n    /**\n     * Returns a map of time formats for the supported formatting units defined\n     * in Unit as well as 'datetime' representing a detailed date/time string.\n     * @returns {{string: string}}\n     */\n    formats: abstract,\n\n    /**\n     * Parses the given `value` and return the associated timestamp.\n     * @param {any} value - the value to parse (usually comes from the data)\n     * @param {string} [format] - the expected data format\n     * @returns {(number|null)}\n     * @function\n     */\n    parse: abstract,\n\n    /**\n     * Returns the formatted date in the specified `format` for a given `timestamp`.\n     * @param {number} timestamp - the timestamp to format\n     * @param {string} format - the date/time token\n     * @return {string}\n     * @function\n     */\n    format: abstract,\n\n    /**\n     * Adds the specified `amount` of `unit` to the given `timestamp`.\n     * @param {number} timestamp - the input timestamp\n     * @param {number} amount - the amount to add\n     * @param {Unit} unit - the unit as string\n     * @return {number}\n     * @function\n     */\n    add: abstract,\n\n    /**\n     * Returns the number of `unit` between the given timestamps.\n     * @param {number} max - the input timestamp (reference)\n     * @param {number} min - the timestamp to substract\n     * @param {Unit} unit - the unit as string\n     * @return {number}\n     * @function\n     */\n    diff: abstract,\n\n    /**\n     * Returns start of `unit` for the given `timestamp`.\n     * @param {number} timestamp - the input timestamp\n     * @param {Unit} unit - the unit as string\n     * @param {number} [weekday] - the ISO day of the week with 1 being Monday\n     * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n     * @function\n     */\n    startOf: abstract,\n\n    /**\n     * Returns end of `unit` for the given `timestamp`.\n     * @param {number} timestamp - the input timestamp\n     * @param {Unit} unit - the unit as string\n     * @function\n     */\n    endOf: abstract,\n    // DEPRECATIONS\n\n    /**\n     * Provided for backward compatibility for scale.getValueForPixel(),\n     * this method should be overridden only by the moment adapter.\n     * @deprecated since version 2.8.0\n     * @todo remove at version 3\n     * @private\n     */\n    _create: function _create(value) {\n      return value;\n    }\n  });\n\n  DateAdapter.override = function (members) {\n    helpers$1.extend(DateAdapter.prototype, members);\n  };\n\n  var _date = DateAdapter;\n  var core_adapters = {\n    _date: _date\n  };\n  /**\n   * Namespace to hold static tick generation functions\n   * @namespace Chart.Ticks\n   */\n\n  var core_ticks = {\n    /**\n     * Namespace to hold formatters for different types of ticks\n     * @namespace Chart.Ticks.formatters\n     */\n    formatters: {\n      /**\n       * Formatter for value labels\n       * @method Chart.Ticks.formatters.values\n       * @param value the value to display\n       * @return {string|string[]} the label to display\n       */\n      values: function values(value) {\n        return helpers$1.isArray(value) ? value : '' + value;\n      },\n\n      /**\n       * Formatter for linear numeric ticks\n       * @method Chart.Ticks.formatters.linear\n       * @param tickValue {number} the value to be formatted\n       * @param index {number} the position of the tickValue parameter in the ticks array\n       * @param ticks {number[]} the list of ticks being converted\n       * @return {string} string representation of the tickValue parameter\n       */\n      linear: function linear(tickValue, index, ticks) {\n        // If we have lots of ticks, don't use the ones\n        var delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0]; // If we have a number like 2.5 as the delta, figure out how many decimal places we need\n\n        if (Math.abs(delta) > 1) {\n          if (tickValue !== Math.floor(tickValue)) {\n            // not an integer\n            delta = tickValue - Math.floor(tickValue);\n          }\n        }\n\n        var logDelta = helpers$1.log10(Math.abs(delta));\n        var tickString = '';\n\n        if (tickValue !== 0) {\n          var maxTick = Math.max(Math.abs(ticks[0]), Math.abs(ticks[ticks.length - 1]));\n\n          if (maxTick < 1e-4) {\n            // all ticks are small numbers; use scientific notation\n            var logTick = helpers$1.log10(Math.abs(tickValue));\n            tickString = tickValue.toExponential(Math.floor(logTick) - Math.floor(logDelta));\n          } else {\n            var numDecimal = -1 * Math.floor(logDelta);\n            numDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places\n\n            tickString = tickValue.toFixed(numDecimal);\n          }\n        } else {\n          tickString = '0'; // never show decimal places for 0\n        }\n\n        return tickString;\n      },\n      logarithmic: function logarithmic(tickValue, index, ticks) {\n        var remain = tickValue / Math.pow(10, Math.floor(helpers$1.log10(tickValue)));\n\n        if (tickValue === 0) {\n          return '0';\n        } else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {\n          return tickValue.toExponential();\n        }\n\n        return '';\n      }\n    }\n  };\n  var valueOrDefault$9 = helpers$1.valueOrDefault;\n  var valueAtIndexOrDefault = helpers$1.valueAtIndexOrDefault;\n\n  core_defaults._set('scale', {\n    display: true,\n    position: 'left',\n    offset: false,\n    // grid line settings\n    gridLines: {\n      display: true,\n      color: 'rgba(0, 0, 0, 0.1)',\n      lineWidth: 1,\n      drawBorder: true,\n      drawOnChartArea: true,\n      drawTicks: true,\n      tickMarkLength: 10,\n      zeroLineWidth: 1,\n      zeroLineColor: 'rgba(0,0,0,0.25)',\n      zeroLineBorderDash: [],\n      zeroLineBorderDashOffset: 0.0,\n      offsetGridLines: false,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n    // scale label\n    scaleLabel: {\n      // display property\n      display: false,\n      // actual label\n      labelString: '',\n      // top/bottom padding\n      padding: {\n        top: 4,\n        bottom: 4\n      }\n    },\n    // label settings\n    ticks: {\n      beginAtZero: false,\n      minRotation: 0,\n      maxRotation: 50,\n      mirror: false,\n      padding: 0,\n      reverse: false,\n      display: true,\n      autoSkip: true,\n      autoSkipPadding: 0,\n      labelOffset: 0,\n      // We pass through arrays to be rendered as multiline labels, we convert Others to strings here.\n      callback: core_ticks.formatters.values,\n      minor: {},\n      major: {}\n    }\n  });\n\n  function labelsFromTicks(ticks) {\n    var labels = [];\n    var i, ilen;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      labels.push(ticks[i].label);\n    }\n\n    return labels;\n  }\n\n  function getPixelForGridLine(scale, index, offsetGridLines) {\n    var lineValue = scale.getPixelForTick(index);\n\n    if (offsetGridLines) {\n      if (scale.getTicks().length === 1) {\n        lineValue -= scale.isHorizontal() ? Math.max(lineValue - scale.left, scale.right - lineValue) : Math.max(lineValue - scale.top, scale.bottom - lineValue);\n      } else if (index === 0) {\n        lineValue -= (scale.getPixelForTick(1) - lineValue) / 2;\n      } else {\n        lineValue -= (lineValue - scale.getPixelForTick(index - 1)) / 2;\n      }\n    }\n\n    return lineValue;\n  }\n\n  function computeTextSize(context, tick, font) {\n    return helpers$1.isArray(tick) ? helpers$1.longestText(context, font, tick) : context.measureText(tick).width;\n  }\n\n  var core_scale = core_element.extend({\n    /**\n     * Get the padding needed for the scale\n     * @method getPadding\n     * @private\n     * @returns {Padding} the necessary padding\n     */\n    getPadding: function getPadding() {\n      var me = this;\n      return {\n        left: me.paddingLeft || 0,\n        top: me.paddingTop || 0,\n        right: me.paddingRight || 0,\n        bottom: me.paddingBottom || 0\n      };\n    },\n\n    /**\n     * Returns the scale tick objects ({label, major})\n     * @since 2.7\n     */\n    getTicks: function getTicks() {\n      return this._ticks;\n    },\n    // These methods are ordered by lifecyle. Utilities then follow.\n    // Any function defined here is inherited by all scale types.\n    // Any function can be extended by the scale type\n    mergeTicksOptions: function mergeTicksOptions() {\n      var ticks = this.options.ticks;\n\n      if (ticks.minor === false) {\n        ticks.minor = {\n          display: false\n        };\n      }\n\n      if (ticks.major === false) {\n        ticks.major = {\n          display: false\n        };\n      }\n\n      for (var key in ticks) {\n        if (key !== 'major' && key !== 'minor') {\n          if (typeof ticks.minor[key] === 'undefined') {\n            ticks.minor[key] = ticks[key];\n          }\n\n          if (typeof ticks.major[key] === 'undefined') {\n            ticks.major[key] = ticks[key];\n          }\n        }\n      }\n    },\n    beforeUpdate: function beforeUpdate() {\n      helpers$1.callback(this.options.beforeUpdate, [this]);\n    },\n    update: function update(maxWidth, maxHeight, margins) {\n      var me = this;\n      var i, ilen, labels, label, ticks, tick; // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\n      me.beforeUpdate(); // Absorb the master measurements\n\n      me.maxWidth = maxWidth;\n      me.maxHeight = maxHeight;\n      me.margins = helpers$1.extend({\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0\n      }, margins);\n      me._maxLabelLines = 0;\n      me.longestLabelWidth = 0;\n      me.longestTextCache = me.longestTextCache || {}; // Dimensions\n\n      me.beforeSetDimensions();\n      me.setDimensions();\n      me.afterSetDimensions(); // Data min/max\n\n      me.beforeDataLimits();\n      me.determineDataLimits();\n      me.afterDataLimits(); // Ticks - `this.ticks` is now DEPRECATED!\n      // Internal ticks are now stored as objects in the PRIVATE `this._ticks` member\n      // and must not be accessed directly from outside this class. `this.ticks` being\n      // around for long time and not marked as private, we can't change its structure\n      // without unexpected breaking changes. If you need to access the scale ticks,\n      // use scale.getTicks() instead.\n\n      me.beforeBuildTicks(); // New implementations should return an array of objects but for BACKWARD COMPAT,\n      // we still support no return (`this.ticks` internally set by calling this method).\n\n      ticks = me.buildTicks() || []; // Allow modification of ticks in callback.\n\n      ticks = me.afterBuildTicks(ticks) || ticks;\n      me.beforeTickToLabelConversion(); // New implementations should return the formatted tick labels but for BACKWARD\n      // COMPAT, we still support no return (`this.ticks` internally changed by calling\n      // this method and supposed to contain only string values).\n\n      labels = me.convertTicksToLabels(ticks) || me.ticks;\n      me.afterTickToLabelConversion();\n      me.ticks = labels; // BACKWARD COMPATIBILITY\n      // IMPORTANT: from this point, we consider that `this.ticks` will NEVER change!\n      // BACKWARD COMPAT: synchronize `_ticks` with labels (so potentially `this.ticks`)\n\n      for (i = 0, ilen = labels.length; i < ilen; ++i) {\n        label = labels[i];\n        tick = ticks[i];\n\n        if (!tick) {\n          ticks.push(tick = {\n            label: label,\n            major: false\n          });\n        } else {\n          tick.label = label;\n        }\n      }\n\n      me._ticks = ticks; // Tick Rotation\n\n      me.beforeCalculateTickRotation();\n      me.calculateTickRotation();\n      me.afterCalculateTickRotation(); // Fit\n\n      me.beforeFit();\n      me.fit();\n      me.afterFit(); //\n\n      me.afterUpdate();\n      return me.minSize;\n    },\n    afterUpdate: function afterUpdate() {\n      helpers$1.callback(this.options.afterUpdate, [this]);\n    },\n    //\n    beforeSetDimensions: function beforeSetDimensions() {\n      helpers$1.callback(this.options.beforeSetDimensions, [this]);\n    },\n    setDimensions: function setDimensions() {\n      var me = this; // Set the unconstrained dimension before label rotation\n\n      if (me.isHorizontal()) {\n        // Reset position before calculating rotation\n        me.width = me.maxWidth;\n        me.left = 0;\n        me.right = me.width;\n      } else {\n        me.height = me.maxHeight; // Reset position before calculating rotation\n\n        me.top = 0;\n        me.bottom = me.height;\n      } // Reset padding\n\n\n      me.paddingLeft = 0;\n      me.paddingTop = 0;\n      me.paddingRight = 0;\n      me.paddingBottom = 0;\n    },\n    afterSetDimensions: function afterSetDimensions() {\n      helpers$1.callback(this.options.afterSetDimensions, [this]);\n    },\n    // Data limits\n    beforeDataLimits: function beforeDataLimits() {\n      helpers$1.callback(this.options.beforeDataLimits, [this]);\n    },\n    determineDataLimits: helpers$1.noop,\n    afterDataLimits: function afterDataLimits() {\n      helpers$1.callback(this.options.afterDataLimits, [this]);\n    },\n    //\n    beforeBuildTicks: function beforeBuildTicks() {\n      helpers$1.callback(this.options.beforeBuildTicks, [this]);\n    },\n    buildTicks: helpers$1.noop,\n    afterBuildTicks: function afterBuildTicks(ticks) {\n      var me = this; // ticks is empty for old axis implementations here\n\n      if (helpers$1.isArray(ticks) && ticks.length) {\n        return helpers$1.callback(me.options.afterBuildTicks, [me, ticks]);\n      } // Support old implementations (that modified `this.ticks` directly in buildTicks)\n\n\n      me.ticks = helpers$1.callback(me.options.afterBuildTicks, [me, me.ticks]) || me.ticks;\n      return ticks;\n    },\n    beforeTickToLabelConversion: function beforeTickToLabelConversion() {\n      helpers$1.callback(this.options.beforeTickToLabelConversion, [this]);\n    },\n    convertTicksToLabels: function convertTicksToLabels() {\n      var me = this; // Convert ticks to strings\n\n      var tickOpts = me.options.ticks;\n      me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback, this);\n    },\n    afterTickToLabelConversion: function afterTickToLabelConversion() {\n      helpers$1.callback(this.options.afterTickToLabelConversion, [this]);\n    },\n    //\n    beforeCalculateTickRotation: function beforeCalculateTickRotation() {\n      helpers$1.callback(this.options.beforeCalculateTickRotation, [this]);\n    },\n    calculateTickRotation: function calculateTickRotation() {\n      var me = this;\n      var context = me.ctx;\n      var tickOpts = me.options.ticks;\n      var labels = labelsFromTicks(me._ticks); // Get the width of each grid by calculating the difference\n      // between x offsets between 0 and 1.\n\n      var tickFont = helpers$1.options._parseFont(tickOpts);\n\n      context.font = tickFont.string;\n      var labelRotation = tickOpts.minRotation || 0;\n\n      if (labels.length && me.options.display && me.isHorizontal()) {\n        var originalLabelWidth = helpers$1.longestText(context, tickFont.string, labels, me.longestTextCache);\n        var labelWidth = originalLabelWidth;\n        var cosRotation, sinRotation; // Allow 3 pixels x2 padding either side for label readability\n\n        var tickWidth = me.getPixelForTick(1) - me.getPixelForTick(0) - 6; // Max label rotation can be set or default to 90 - also act as a loop counter\n\n        while (labelWidth > tickWidth && labelRotation < tickOpts.maxRotation) {\n          var angleRadians = helpers$1.toRadians(labelRotation);\n          cosRotation = Math.cos(angleRadians);\n          sinRotation = Math.sin(angleRadians);\n\n          if (sinRotation * originalLabelWidth > me.maxHeight) {\n            // go back one step\n            labelRotation--;\n            break;\n          }\n\n          labelRotation++;\n          labelWidth = cosRotation * originalLabelWidth;\n        }\n      }\n\n      me.labelRotation = labelRotation;\n    },\n    afterCalculateTickRotation: function afterCalculateTickRotation() {\n      helpers$1.callback(this.options.afterCalculateTickRotation, [this]);\n    },\n    //\n    beforeFit: function beforeFit() {\n      helpers$1.callback(this.options.beforeFit, [this]);\n    },\n    fit: function fit() {\n      var me = this; // Reset\n\n      var minSize = me.minSize = {\n        width: 0,\n        height: 0\n      };\n      var labels = labelsFromTicks(me._ticks);\n      var opts = me.options;\n      var tickOpts = opts.ticks;\n      var scaleLabelOpts = opts.scaleLabel;\n      var gridLineOpts = opts.gridLines;\n\n      var display = me._isVisible();\n\n      var position = opts.position;\n      var isHorizontal = me.isHorizontal();\n      var parseFont = helpers$1.options._parseFont;\n      var tickFont = parseFont(tickOpts);\n      var tickMarkLength = opts.gridLines.tickMarkLength; // Width\n\n      if (isHorizontal) {\n        // subtract the margins to line up with the chartArea if we are a full width scale\n        minSize.width = me.isFullWidth() ? me.maxWidth - me.margins.left - me.margins.right : me.maxWidth;\n      } else {\n        minSize.width = display && gridLineOpts.drawTicks ? tickMarkLength : 0;\n      } // height\n\n\n      if (isHorizontal) {\n        minSize.height = display && gridLineOpts.drawTicks ? tickMarkLength : 0;\n      } else {\n        minSize.height = me.maxHeight; // fill all the height\n      } // Are we showing a title for the scale?\n\n\n      if (scaleLabelOpts.display && display) {\n        var scaleLabelFont = parseFont(scaleLabelOpts);\n        var scaleLabelPadding = helpers$1.options.toPadding(scaleLabelOpts.padding);\n        var deltaHeight = scaleLabelFont.lineHeight + scaleLabelPadding.height;\n\n        if (isHorizontal) {\n          minSize.height += deltaHeight;\n        } else {\n          minSize.width += deltaHeight;\n        }\n      } // Don't bother fitting the ticks if we are not showing the labels\n\n\n      if (tickOpts.display && display) {\n        var largestTextWidth = helpers$1.longestText(me.ctx, tickFont.string, labels, me.longestTextCache);\n        var tallestLabelHeightInLines = helpers$1.numberOfLabelLines(labels);\n        var lineSpace = tickFont.size * 0.5;\n        var tickPadding = me.options.ticks.padding; // Store max number of lines and widest label for _autoSkip\n\n        me._maxLabelLines = tallestLabelHeightInLines;\n        me.longestLabelWidth = largestTextWidth;\n\n        if (isHorizontal) {\n          var angleRadians = helpers$1.toRadians(me.labelRotation);\n          var cosRotation = Math.cos(angleRadians);\n          var sinRotation = Math.sin(angleRadians); // TODO - improve this calculation\n\n          var labelHeight = sinRotation * largestTextWidth + tickFont.lineHeight * tallestLabelHeightInLines + lineSpace; // padding\n\n          minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);\n          me.ctx.font = tickFont.string;\n          var firstLabelWidth = computeTextSize(me.ctx, labels[0], tickFont.string);\n          var lastLabelWidth = computeTextSize(me.ctx, labels[labels.length - 1], tickFont.string);\n          var offsetLeft = me.getPixelForTick(0) - me.left;\n          var offsetRight = me.right - me.getPixelForTick(labels.length - 1);\n          var paddingLeft, paddingRight; // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n          // which means that the right padding is dominated by the font height\n\n          if (me.labelRotation !== 0) {\n            paddingLeft = position === 'bottom' ? cosRotation * firstLabelWidth : cosRotation * lineSpace;\n            paddingRight = position === 'bottom' ? cosRotation * lineSpace : cosRotation * lastLabelWidth;\n          } else {\n            paddingLeft = firstLabelWidth / 2;\n            paddingRight = lastLabelWidth / 2;\n          }\n\n          me.paddingLeft = Math.max(paddingLeft - offsetLeft, 0) + 3; // add 3 px to move away from canvas edges\n\n          me.paddingRight = Math.max(paddingRight - offsetRight, 0) + 3;\n        } else {\n          // A vertical axis is more constrained by the width. Labels are the\n          // dominant factor here, so get that length first and account for padding\n          if (tickOpts.mirror) {\n            largestTextWidth = 0;\n          } else {\n            // use lineSpace for consistency with horizontal axis\n            // tickPadding is not implemented for horizontal\n            largestTextWidth += tickPadding + lineSpace;\n          }\n\n          minSize.width = Math.min(me.maxWidth, minSize.width + largestTextWidth);\n          me.paddingTop = tickFont.size / 2;\n          me.paddingBottom = tickFont.size / 2;\n        }\n      }\n\n      me.handleMargins();\n      me.width = minSize.width;\n      me.height = minSize.height;\n    },\n\n    /**\n     * Handle margins and padding interactions\n     * @private\n     */\n    handleMargins: function handleMargins() {\n      var me = this;\n\n      if (me.margins) {\n        me.paddingLeft = Math.max(me.paddingLeft - me.margins.left, 0);\n        me.paddingTop = Math.max(me.paddingTop - me.margins.top, 0);\n        me.paddingRight = Math.max(me.paddingRight - me.margins.right, 0);\n        me.paddingBottom = Math.max(me.paddingBottom - me.margins.bottom, 0);\n      }\n    },\n    afterFit: function afterFit() {\n      helpers$1.callback(this.options.afterFit, [this]);\n    },\n    // Shared Methods\n    isHorizontal: function isHorizontal() {\n      return this.options.position === 'top' || this.options.position === 'bottom';\n    },\n    isFullWidth: function isFullWidth() {\n      return this.options.fullWidth;\n    },\n    // Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not\n    getRightValue: function getRightValue(rawValue) {\n      // Null and undefined values first\n      if (helpers$1.isNullOrUndef(rawValue)) {\n        return NaN;\n      } // isNaN(object) returns true, so make sure NaN is checking for a number; Discard Infinite values\n\n\n      if ((typeof rawValue === 'number' || rawValue instanceof Number) && !isFinite(rawValue)) {\n        return NaN;\n      } // If it is in fact an object, dive in one more level\n\n\n      if (rawValue) {\n        if (this.isHorizontal()) {\n          if (rawValue.x !== undefined) {\n            return this.getRightValue(rawValue.x);\n          }\n        } else if (rawValue.y !== undefined) {\n          return this.getRightValue(rawValue.y);\n        }\n      } // Value is good, return it\n\n\n      return rawValue;\n    },\n\n    /**\n     * Used to get the value to display in the tooltip for the data at the given index\n     * @param index\n     * @param datasetIndex\n     */\n    getLabelForIndex: helpers$1.noop,\n\n    /**\n     * Returns the location of the given data point. Value can either be an index or a numerical value\n     * The coordinate (0, 0) is at the upper-left corner of the canvas\n     * @param value\n     * @param index\n     * @param datasetIndex\n     */\n    getPixelForValue: helpers$1.noop,\n\n    /**\n     * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n     * The coordinate (0, 0) is at the upper-left corner of the canvas\n     * @param pixel\n     */\n    getValueForPixel: helpers$1.noop,\n\n    /**\n     * Returns the location of the tick at the given index\n     * The coordinate (0, 0) is at the upper-left corner of the canvas\n     */\n    getPixelForTick: function getPixelForTick(index) {\n      var me = this;\n      var offset = me.options.offset;\n\n      if (me.isHorizontal()) {\n        var innerWidth = me.width - (me.paddingLeft + me.paddingRight);\n        var tickWidth = innerWidth / Math.max(me._ticks.length - (offset ? 0 : 1), 1);\n        var pixel = tickWidth * index + me.paddingLeft;\n\n        if (offset) {\n          pixel += tickWidth / 2;\n        }\n\n        var finalVal = me.left + pixel;\n        finalVal += me.isFullWidth() ? me.margins.left : 0;\n        return finalVal;\n      }\n\n      var innerHeight = me.height - (me.paddingTop + me.paddingBottom);\n      return me.top + index * (innerHeight / (me._ticks.length - 1));\n    },\n\n    /**\n     * Utility for getting the pixel location of a percentage of scale\n     * The coordinate (0, 0) is at the upper-left corner of the canvas\n     */\n    getPixelForDecimal: function getPixelForDecimal(decimal) {\n      var me = this;\n\n      if (me.isHorizontal()) {\n        var innerWidth = me.width - (me.paddingLeft + me.paddingRight);\n        var valueOffset = innerWidth * decimal + me.paddingLeft;\n        var finalVal = me.left + valueOffset;\n        finalVal += me.isFullWidth() ? me.margins.left : 0;\n        return finalVal;\n      }\n\n      return me.top + decimal * me.height;\n    },\n\n    /**\n     * Returns the pixel for the minimum chart value\n     * The coordinate (0, 0) is at the upper-left corner of the canvas\n     */\n    getBasePixel: function getBasePixel() {\n      return this.getPixelForValue(this.getBaseValue());\n    },\n    getBaseValue: function getBaseValue() {\n      var me = this;\n      var min = me.min;\n      var max = me.max;\n      return me.beginAtZero ? 0 : min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    },\n\n    /**\n     * Returns a subset of ticks to be plotted to avoid overlapping labels.\n     * @private\n     */\n    _autoSkip: function _autoSkip(ticks) {\n      var me = this;\n      var isHorizontal = me.isHorizontal();\n      var optionTicks = me.options.ticks.minor;\n      var tickCount = ticks.length;\n      var skipRatio = false;\n      var maxTicks = optionTicks.maxTicksLimit; // Total space needed to display all ticks. First and last ticks are\n      // drawn as their center at end of axis, so tickCount-1\n\n      var ticksLength = me._tickSize() * (tickCount - 1); // Axis length\n\n      var axisLength = isHorizontal ? me.width - (me.paddingLeft + me.paddingRight) : me.height - (me.paddingTop + me.PaddingBottom);\n      var result = [];\n      var i, tick;\n\n      if (ticksLength > axisLength) {\n        skipRatio = 1 + Math.floor(ticksLength / axisLength);\n      } // if they defined a max number of optionTicks,\n      // increase skipRatio until that number is met\n\n\n      if (tickCount > maxTicks) {\n        skipRatio = Math.max(skipRatio, 1 + Math.floor(tickCount / maxTicks));\n      }\n\n      for (i = 0; i < tickCount; i++) {\n        tick = ticks[i];\n\n        if (skipRatio > 1 && i % skipRatio > 0) {\n          // leave tick in place but make sure it's not displayed (#4635)\n          delete tick.label;\n        }\n\n        result.push(tick);\n      }\n\n      return result;\n    },\n\n    /**\n     * @private\n     */\n    _tickSize: function _tickSize() {\n      var me = this;\n      var isHorizontal = me.isHorizontal();\n      var optionTicks = me.options.ticks.minor; // Calculate space needed by label in axis direction.\n\n      var rot = helpers$1.toRadians(me.labelRotation);\n      var cos = Math.abs(Math.cos(rot));\n      var sin = Math.abs(Math.sin(rot));\n      var padding = optionTicks.autoSkipPadding || 0;\n      var w = me.longestLabelWidth + padding || 0;\n\n      var tickFont = helpers$1.options._parseFont(optionTicks);\n\n      var h = me._maxLabelLines * tickFont.lineHeight + padding || 0; // Calculate space needed for 1 tick in axis direction.\n\n      return isHorizontal ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    },\n\n    /**\n     * @private\n     */\n    _isVisible: function _isVisible() {\n      var me = this;\n      var chart = me.chart;\n      var display = me.options.display;\n      var i, ilen, meta;\n\n      if (display !== 'auto') {\n        return !!display;\n      } // When 'auto', the scale is visible if at least one associated dataset is visible.\n\n\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n\n          if (meta.xAxisID === me.id || meta.yAxisID === me.id) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Actually draw the scale on the canvas\n     * @param {object} chartArea - the area of the chart to draw full grid lines on\n     */\n    draw: function draw(chartArea) {\n      var me = this;\n      var options = me.options;\n\n      if (!me._isVisible()) {\n        return;\n      }\n\n      var chart = me.chart;\n      var context = me.ctx;\n      var globalDefaults = core_defaults.global;\n      var defaultFontColor = globalDefaults.defaultFontColor;\n      var optionTicks = options.ticks.minor;\n      var optionMajorTicks = options.ticks.major || optionTicks;\n      var gridLines = options.gridLines;\n      var scaleLabel = options.scaleLabel;\n      var position = options.position;\n      var isRotated = me.labelRotation !== 0;\n      var isMirrored = optionTicks.mirror;\n      var isHorizontal = me.isHorizontal();\n      var parseFont = helpers$1.options._parseFont;\n      var ticks = optionTicks.display && optionTicks.autoSkip ? me._autoSkip(me.getTicks()) : me.getTicks();\n      var tickFontColor = valueOrDefault$9(optionTicks.fontColor, defaultFontColor);\n      var tickFont = parseFont(optionTicks);\n      var lineHeight = tickFont.lineHeight;\n      var majorTickFontColor = valueOrDefault$9(optionMajorTicks.fontColor, defaultFontColor);\n      var majorTickFont = parseFont(optionMajorTicks);\n      var tickPadding = optionTicks.padding;\n      var labelOffset = optionTicks.labelOffset;\n      var tl = gridLines.drawTicks ? gridLines.tickMarkLength : 0;\n      var scaleLabelFontColor = valueOrDefault$9(scaleLabel.fontColor, defaultFontColor);\n      var scaleLabelFont = parseFont(scaleLabel);\n      var scaleLabelPadding = helpers$1.options.toPadding(scaleLabel.padding);\n      var labelRotationRadians = helpers$1.toRadians(me.labelRotation);\n      var itemsToDraw = [];\n      var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;\n      var alignPixel = helpers$1._alignPixel;\n      var borderValue, tickStart, tickEnd;\n\n      if (position === 'top') {\n        borderValue = alignPixel(chart, me.bottom, axisWidth);\n        tickStart = me.bottom - tl;\n        tickEnd = borderValue - axisWidth / 2;\n      } else if (position === 'bottom') {\n        borderValue = alignPixel(chart, me.top, axisWidth);\n        tickStart = borderValue + axisWidth / 2;\n        tickEnd = me.top + tl;\n      } else if (position === 'left') {\n        borderValue = alignPixel(chart, me.right, axisWidth);\n        tickStart = me.right - tl;\n        tickEnd = borderValue - axisWidth / 2;\n      } else {\n        borderValue = alignPixel(chart, me.left, axisWidth);\n        tickStart = borderValue + axisWidth / 2;\n        tickEnd = me.left + tl;\n      }\n\n      var epsilon = 0.0000001; // 0.0000001 is margin in pixels for Accumulated error.\n\n      helpers$1.each(ticks, function (tick, index) {\n        // autoskipper skipped this tick (#4635)\n        if (helpers$1.isNullOrUndef(tick.label)) {\n          return;\n        }\n\n        var label = tick.label;\n        var lineWidth, lineColor, borderDash, borderDashOffset;\n\n        if (index === me.zeroLineIndex && options.offset === gridLines.offsetGridLines) {\n          // Draw the first index specially\n          lineWidth = gridLines.zeroLineWidth;\n          lineColor = gridLines.zeroLineColor;\n          borderDash = gridLines.zeroLineBorderDash || [];\n          borderDashOffset = gridLines.zeroLineBorderDashOffset || 0.0;\n        } else {\n          lineWidth = valueAtIndexOrDefault(gridLines.lineWidth, index);\n          lineColor = valueAtIndexOrDefault(gridLines.color, index);\n          borderDash = gridLines.borderDash || [];\n          borderDashOffset = gridLines.borderDashOffset || 0.0;\n        } // Common properties\n\n\n        var tx1, ty1, tx2, ty2, x1, y1, x2, y2, labelX, labelY, textOffset, textAlign;\n        var labelCount = helpers$1.isArray(label) ? label.length : 1;\n        var lineValue = getPixelForGridLine(me, index, gridLines.offsetGridLines);\n\n        if (isHorizontal) {\n          var labelYOffset = tl + tickPadding;\n\n          if (lineValue < me.left - epsilon) {\n            lineColor = 'rgba(0,0,0,0)';\n          }\n\n          tx1 = tx2 = x1 = x2 = alignPixel(chart, lineValue, lineWidth);\n          ty1 = tickStart;\n          ty2 = tickEnd;\n          labelX = me.getPixelForTick(index) + labelOffset; // x values for optionTicks (need to consider offsetLabel option)\n\n          if (position === 'top') {\n            y1 = alignPixel(chart, chartArea.top, axisWidth) + axisWidth / 2;\n            y2 = chartArea.bottom;\n            textOffset = ((!isRotated ? 0.5 : 1) - labelCount) * lineHeight;\n            textAlign = !isRotated ? 'center' : 'left';\n            labelY = me.bottom - labelYOffset;\n          } else {\n            y1 = chartArea.top;\n            y2 = alignPixel(chart, chartArea.bottom, axisWidth) - axisWidth / 2;\n            textOffset = (!isRotated ? 0.5 : 0) * lineHeight;\n            textAlign = !isRotated ? 'center' : 'right';\n            labelY = me.top + labelYOffset;\n          }\n        } else {\n          var labelXOffset = (isMirrored ? 0 : tl) + tickPadding;\n\n          if (lineValue < me.top - epsilon) {\n            lineColor = 'rgba(0,0,0,0)';\n          }\n\n          tx1 = tickStart;\n          tx2 = tickEnd;\n          ty1 = ty2 = y1 = y2 = alignPixel(chart, lineValue, lineWidth);\n          labelY = me.getPixelForTick(index) + labelOffset;\n          textOffset = (1 - labelCount) * lineHeight / 2;\n\n          if (position === 'left') {\n            x1 = alignPixel(chart, chartArea.left, axisWidth) + axisWidth / 2;\n            x2 = chartArea.right;\n            textAlign = isMirrored ? 'left' : 'right';\n            labelX = me.right - labelXOffset;\n          } else {\n            x1 = chartArea.left;\n            x2 = alignPixel(chart, chartArea.right, axisWidth) - axisWidth / 2;\n            textAlign = isMirrored ? 'right' : 'left';\n            labelX = me.left + labelXOffset;\n          }\n        }\n\n        itemsToDraw.push({\n          tx1: tx1,\n          ty1: ty1,\n          tx2: tx2,\n          ty2: ty2,\n          x1: x1,\n          y1: y1,\n          x2: x2,\n          y2: y2,\n          labelX: labelX,\n          labelY: labelY,\n          glWidth: lineWidth,\n          glColor: lineColor,\n          glBorderDash: borderDash,\n          glBorderDashOffset: borderDashOffset,\n          rotation: -1 * labelRotationRadians,\n          label: label,\n          major: tick.major,\n          textOffset: textOffset,\n          textAlign: textAlign\n        });\n      }); // Draw all of the tick labels, tick marks, and grid lines at the correct places\n\n      helpers$1.each(itemsToDraw, function (itemToDraw) {\n        var glWidth = itemToDraw.glWidth;\n        var glColor = itemToDraw.glColor;\n\n        if (gridLines.display && glWidth && glColor) {\n          context.save();\n          context.lineWidth = glWidth;\n          context.strokeStyle = glColor;\n\n          if (context.setLineDash) {\n            context.setLineDash(itemToDraw.glBorderDash);\n            context.lineDashOffset = itemToDraw.glBorderDashOffset;\n          }\n\n          context.beginPath();\n\n          if (gridLines.drawTicks) {\n            context.moveTo(itemToDraw.tx1, itemToDraw.ty1);\n            context.lineTo(itemToDraw.tx2, itemToDraw.ty2);\n          }\n\n          if (gridLines.drawOnChartArea) {\n            context.moveTo(itemToDraw.x1, itemToDraw.y1);\n            context.lineTo(itemToDraw.x2, itemToDraw.y2);\n          }\n\n          context.stroke();\n          context.restore();\n        }\n\n        if (optionTicks.display) {\n          // Make sure we draw text in the correct color and font\n          context.save();\n          context.translate(itemToDraw.labelX, itemToDraw.labelY);\n          context.rotate(itemToDraw.rotation);\n          context.font = itemToDraw.major ? majorTickFont.string : tickFont.string;\n          context.fillStyle = itemToDraw.major ? majorTickFontColor : tickFontColor;\n          context.textBaseline = 'middle';\n          context.textAlign = itemToDraw.textAlign;\n          var label = itemToDraw.label;\n          var y = itemToDraw.textOffset;\n\n          if (helpers$1.isArray(label)) {\n            for (var i = 0; i < label.length; ++i) {\n              // We just make sure the multiline element is a string here..\n              context.fillText('' + label[i], 0, y);\n              y += lineHeight;\n            }\n          } else {\n            context.fillText(label, 0, y);\n          }\n\n          context.restore();\n        }\n      });\n\n      if (scaleLabel.display) {\n        // Draw the scale label\n        var scaleLabelX;\n        var scaleLabelY;\n        var rotation = 0;\n        var halfLineHeight = scaleLabelFont.lineHeight / 2;\n\n        if (isHorizontal) {\n          scaleLabelX = me.left + (me.right - me.left) / 2; // midpoint of the width\n\n          scaleLabelY = position === 'bottom' ? me.bottom - halfLineHeight - scaleLabelPadding.bottom : me.top + halfLineHeight + scaleLabelPadding.top;\n        } else {\n          var isLeft = position === 'left';\n          scaleLabelX = isLeft ? me.left + halfLineHeight + scaleLabelPadding.top : me.right - halfLineHeight - scaleLabelPadding.top;\n          scaleLabelY = me.top + (me.bottom - me.top) / 2;\n          rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;\n        }\n\n        context.save();\n        context.translate(scaleLabelX, scaleLabelY);\n        context.rotate(rotation);\n        context.textAlign = 'center';\n        context.textBaseline = 'middle';\n        context.fillStyle = scaleLabelFontColor; // render in correct colour\n\n        context.font = scaleLabelFont.string;\n        context.fillText(scaleLabel.labelString, 0, 0);\n        context.restore();\n      }\n\n      if (axisWidth) {\n        // Draw the line at the edge of the axis\n        var firstLineWidth = axisWidth;\n        var lastLineWidth = valueAtIndexOrDefault(gridLines.lineWidth, ticks.length - 1, 0);\n        var x1, x2, y1, y2;\n\n        if (isHorizontal) {\n          x1 = alignPixel(chart, me.left, firstLineWidth) - firstLineWidth / 2;\n          x2 = alignPixel(chart, me.right, lastLineWidth) + lastLineWidth / 2;\n          y1 = y2 = borderValue;\n        } else {\n          y1 = alignPixel(chart, me.top, firstLineWidth) - firstLineWidth / 2;\n          y2 = alignPixel(chart, me.bottom, lastLineWidth) + lastLineWidth / 2;\n          x1 = x2 = borderValue;\n        }\n\n        context.lineWidth = axisWidth;\n        context.strokeStyle = valueAtIndexOrDefault(gridLines.color, 0);\n        context.beginPath();\n        context.moveTo(x1, y1);\n        context.lineTo(x2, y2);\n        context.stroke();\n      }\n    }\n  });\n  var defaultConfig = {\n    position: 'bottom'\n  };\n  var scale_category = core_scale.extend({\n    /**\n    * Internal function to get the correct labels. If data.xLabels or data.yLabels are defined, use those\n    * else fall back to data.labels\n    * @private\n    */\n    getLabels: function getLabels() {\n      var data = this.chart.data;\n      return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels;\n    },\n    determineDataLimits: function determineDataLimits() {\n      var me = this;\n      var labels = me.getLabels();\n      me.minIndex = 0;\n      me.maxIndex = labels.length - 1;\n      var findIndex;\n\n      if (me.options.ticks.min !== undefined) {\n        // user specified min value\n        findIndex = labels.indexOf(me.options.ticks.min);\n        me.minIndex = findIndex !== -1 ? findIndex : me.minIndex;\n      }\n\n      if (me.options.ticks.max !== undefined) {\n        // user specified max value\n        findIndex = labels.indexOf(me.options.ticks.max);\n        me.maxIndex = findIndex !== -1 ? findIndex : me.maxIndex;\n      }\n\n      me.min = labels[me.minIndex];\n      me.max = labels[me.maxIndex];\n    },\n    buildTicks: function buildTicks() {\n      var me = this;\n      var labels = me.getLabels(); // If we are viewing some subset of labels, slice the original array\n\n      me.ticks = me.minIndex === 0 && me.maxIndex === labels.length - 1 ? labels : labels.slice(me.minIndex, me.maxIndex + 1);\n    },\n    getLabelForIndex: function getLabelForIndex(index, datasetIndex) {\n      var me = this;\n      var chart = me.chart;\n\n      if (chart.getDatasetMeta(datasetIndex).controller._getValueScaleId() === me.id) {\n        return me.getRightValue(chart.data.datasets[datasetIndex].data[index]);\n      }\n\n      return me.ticks[index - me.minIndex];\n    },\n    // Used to get data value locations.  Value can either be an index or a numerical value\n    getPixelForValue: function getPixelForValue(value, index) {\n      var me = this;\n      var offset = me.options.offset; // 1 is added because we need the length but we have the indexes\n\n      var offsetAmt = Math.max(me.maxIndex + 1 - me.minIndex - (offset ? 0 : 1), 1); // If value is a data object, then index is the index in the data array,\n      // not the index of the scale. We need to change that.\n\n      var valueCategory;\n\n      if (value !== undefined && value !== null) {\n        valueCategory = me.isHorizontal() ? value.x : value.y;\n      }\n\n      if (valueCategory !== undefined || value !== undefined && isNaN(index)) {\n        var labels = me.getLabels();\n        value = valueCategory || value;\n        var idx = labels.indexOf(value);\n        index = idx !== -1 ? idx : index;\n      }\n\n      if (me.isHorizontal()) {\n        var valueWidth = me.width / offsetAmt;\n        var widthOffset = valueWidth * (index - me.minIndex);\n\n        if (offset) {\n          widthOffset += valueWidth / 2;\n        }\n\n        return me.left + widthOffset;\n      }\n\n      var valueHeight = me.height / offsetAmt;\n      var heightOffset = valueHeight * (index - me.minIndex);\n\n      if (offset) {\n        heightOffset += valueHeight / 2;\n      }\n\n      return me.top + heightOffset;\n    },\n    getPixelForTick: function getPixelForTick(index) {\n      return this.getPixelForValue(this.ticks[index], index + this.minIndex, null);\n    },\n    getValueForPixel: function getValueForPixel(pixel) {\n      var me = this;\n      var offset = me.options.offset;\n      var value;\n      var offsetAmt = Math.max(me._ticks.length - (offset ? 0 : 1), 1);\n      var horz = me.isHorizontal();\n      var valueDimension = (horz ? me.width : me.height) / offsetAmt;\n      pixel -= horz ? me.left : me.top;\n\n      if (offset) {\n        pixel -= valueDimension / 2;\n      }\n\n      if (pixel <= 0) {\n        value = 0;\n      } else {\n        value = Math.round(pixel / valueDimension);\n      }\n\n      return value + me.minIndex;\n    },\n    getBasePixel: function getBasePixel() {\n      return this.bottom;\n    }\n  }); // INTERNAL: static default options, registered in src/index.js\n\n  var _defaults = defaultConfig;\n  scale_category._defaults = _defaults;\n  var noop = helpers$1.noop;\n  var isNullOrUndef = helpers$1.isNullOrUndef;\n  /**\n   * Generate a set of linear ticks\n   * @param generationOptions the options used to generate the ticks\n   * @param dataRange the range of the data\n   * @returns {number[]} array of tick values\n   */\n\n  function generateTicks(generationOptions, dataRange) {\n    var ticks = []; // To get a \"nice\" value for the tick spacing, we will use the appropriately named\n    // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n    // for details.\n\n    var MIN_SPACING = 1e-14;\n    var stepSize = generationOptions.stepSize;\n    var unit = stepSize || 1;\n    var maxNumSpaces = generationOptions.maxTicks - 1;\n    var min = generationOptions.min;\n    var max = generationOptions.max;\n    var precision = generationOptions.precision;\n    var rmin = dataRange.min;\n    var rmax = dataRange.max;\n    var spacing = helpers$1.niceNum((rmax - rmin) / maxNumSpaces / unit) * unit;\n    var factor, niceMin, niceMax, numSpaces; // Beyond MIN_SPACING floating point numbers being to lose precision\n    // such that we can't do the math necessary to generate ticks\n\n    if (spacing < MIN_SPACING && isNullOrUndef(min) && isNullOrUndef(max)) {\n      return [rmin, rmax];\n    }\n\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n\n    if (numSpaces > maxNumSpaces) {\n      // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n      spacing = helpers$1.niceNum(numSpaces * spacing / maxNumSpaces / unit) * unit;\n    }\n\n    if (stepSize || isNullOrUndef(precision)) {\n      // If a precision is not specified, calculate factor based on spacing\n      factor = Math.pow(10, helpers$1._decimalPlaces(spacing));\n    } else {\n      // If the user specified a precision, round to that number of decimal places\n      factor = Math.pow(10, precision);\n      spacing = Math.ceil(spacing * factor) / factor;\n    }\n\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing; // If min, max and stepSize is set and they make an evenly spaced scale use it.\n\n    if (stepSize) {\n      // If very close to our whole number, use it.\n      if (!isNullOrUndef(min) && helpers$1.almostWhole(min / spacing, spacing / 1000)) {\n        niceMin = min;\n      }\n\n      if (!isNullOrUndef(max) && helpers$1.almostWhole(max / spacing, spacing / 1000)) {\n        niceMax = max;\n      }\n    }\n\n    numSpaces = (niceMax - niceMin) / spacing; // If very close to our rounded value, use it.\n\n    if (helpers$1.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    ticks.push(isNullOrUndef(min) ? niceMin : min);\n\n    for (var j = 1; j < numSpaces; ++j) {\n      ticks.push(Math.round((niceMin + j * spacing) * factor) / factor);\n    }\n\n    ticks.push(isNullOrUndef(max) ? niceMax : max);\n    return ticks;\n  }\n\n  var scale_linearbase = core_scale.extend({\n    getRightValue: function getRightValue(value) {\n      if (typeof value === 'string') {\n        return +value;\n      }\n\n      return core_scale.prototype.getRightValue.call(this, value);\n    },\n    handleTickRangeOptions: function handleTickRangeOptions() {\n      var me = this;\n      var opts = me.options;\n      var tickOpts = opts.ticks; // If we are forcing it to begin at 0, but 0 will already be rendered on the chart,\n      // do nothing since that would make the chart weird. If the user really wants a weird chart\n      // axis, they can manually override it\n\n      if (tickOpts.beginAtZero) {\n        var minSign = helpers$1.sign(me.min);\n        var maxSign = helpers$1.sign(me.max);\n\n        if (minSign < 0 && maxSign < 0) {\n          // move the top up to 0\n          me.max = 0;\n        } else if (minSign > 0 && maxSign > 0) {\n          // move the bottom down to 0\n          me.min = 0;\n        }\n      }\n\n      var setMin = tickOpts.min !== undefined || tickOpts.suggestedMin !== undefined;\n      var setMax = tickOpts.max !== undefined || tickOpts.suggestedMax !== undefined;\n\n      if (tickOpts.min !== undefined) {\n        me.min = tickOpts.min;\n      } else if (tickOpts.suggestedMin !== undefined) {\n        if (me.min === null) {\n          me.min = tickOpts.suggestedMin;\n        } else {\n          me.min = Math.min(me.min, tickOpts.suggestedMin);\n        }\n      }\n\n      if (tickOpts.max !== undefined) {\n        me.max = tickOpts.max;\n      } else if (tickOpts.suggestedMax !== undefined) {\n        if (me.max === null) {\n          me.max = tickOpts.suggestedMax;\n        } else {\n          me.max = Math.max(me.max, tickOpts.suggestedMax);\n        }\n      }\n\n      if (setMin !== setMax) {\n        // We set the min or the max but not both.\n        // So ensure that our range is good\n        // Inverted or 0 length range can happen when\n        // ticks.min is set, and no datasets are visible\n        if (me.min >= me.max) {\n          if (setMin) {\n            me.max = me.min + 1;\n          } else {\n            me.min = me.max - 1;\n          }\n        }\n      }\n\n      if (me.min === me.max) {\n        me.max++;\n\n        if (!tickOpts.beginAtZero) {\n          me.min--;\n        }\n      }\n    },\n    getTickLimit: function getTickLimit() {\n      var me = this;\n      var tickOpts = me.options.ticks;\n      var stepSize = tickOpts.stepSize;\n      var maxTicksLimit = tickOpts.maxTicksLimit;\n      var maxTicks;\n\n      if (stepSize) {\n        maxTicks = Math.ceil(me.max / stepSize) - Math.floor(me.min / stepSize) + 1;\n      } else {\n        maxTicks = me._computeTickLimit();\n        maxTicksLimit = maxTicksLimit || 11;\n      }\n\n      if (maxTicksLimit) {\n        maxTicks = Math.min(maxTicksLimit, maxTicks);\n      }\n\n      return maxTicks;\n    },\n    _computeTickLimit: function _computeTickLimit() {\n      return Number.POSITIVE_INFINITY;\n    },\n    handleDirectionalChanges: noop,\n    buildTicks: function buildTicks() {\n      var me = this;\n      var opts = me.options;\n      var tickOpts = opts.ticks; // Figure out what the max number of ticks we can support it is based on the size of\n      // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n      // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n      // the graph. Make sure we always have at least 2 ticks\n\n      var maxTicks = me.getTickLimit();\n      maxTicks = Math.max(2, maxTicks);\n      var numericGeneratorOptions = {\n        maxTicks: maxTicks,\n        min: tickOpts.min,\n        max: tickOpts.max,\n        precision: tickOpts.precision,\n        stepSize: helpers$1.valueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)\n      };\n      var ticks = me.ticks = generateTicks(numericGeneratorOptions, me);\n      me.handleDirectionalChanges(); // At this point, we need to update our max and min given the tick values since we have expanded the\n      // range of the scale\n\n      me.max = helpers$1.max(ticks);\n      me.min = helpers$1.min(ticks);\n\n      if (tickOpts.reverse) {\n        ticks.reverse();\n        me.start = me.max;\n        me.end = me.min;\n      } else {\n        me.start = me.min;\n        me.end = me.max;\n      }\n    },\n    convertTicksToLabels: function convertTicksToLabels() {\n      var me = this;\n      me.ticksAsNumbers = me.ticks.slice();\n      me.zeroLineIndex = me.ticks.indexOf(0);\n      core_scale.prototype.convertTicksToLabels.call(me);\n    }\n  });\n  var defaultConfig$1 = {\n    position: 'left',\n    ticks: {\n      callback: core_ticks.formatters.linear\n    }\n  };\n  var scale_linear = scale_linearbase.extend({\n    determineDataLimits: function determineDataLimits() {\n      var me = this;\n      var opts = me.options;\n      var chart = me.chart;\n      var data = chart.data;\n      var datasets = data.datasets;\n      var isHorizontal = me.isHorizontal();\n      var DEFAULT_MIN = 0;\n      var DEFAULT_MAX = 1;\n\n      function IDMatches(meta) {\n        return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;\n      } // First Calculate the range\n\n\n      me.min = null;\n      me.max = null;\n      var hasStacks = opts.stacked;\n\n      if (hasStacks === undefined) {\n        helpers$1.each(datasets, function (dataset, datasetIndex) {\n          if (hasStacks) {\n            return;\n          }\n\n          var meta = chart.getDatasetMeta(datasetIndex);\n\n          if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) && meta.stack !== undefined) {\n            hasStacks = true;\n          }\n        });\n      }\n\n      if (opts.stacked || hasStacks) {\n        var valuesPerStack = {};\n        helpers$1.each(datasets, function (dataset, datasetIndex) {\n          var meta = chart.getDatasetMeta(datasetIndex);\n          var key = [meta.type, // we have a separate stack for stack=undefined datasets when the opts.stacked is undefined\n          opts.stacked === undefined && meta.stack === undefined ? datasetIndex : '', meta.stack].join('.');\n\n          if (valuesPerStack[key] === undefined) {\n            valuesPerStack[key] = {\n              positiveValues: [],\n              negativeValues: []\n            };\n          } // Store these per type\n\n\n          var positiveValues = valuesPerStack[key].positiveValues;\n          var negativeValues = valuesPerStack[key].negativeValues;\n\n          if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n            helpers$1.each(dataset.data, function (rawValue, index) {\n              var value = +me.getRightValue(rawValue);\n\n              if (isNaN(value) || meta.data[index].hidden) {\n                return;\n              }\n\n              positiveValues[index] = positiveValues[index] || 0;\n              negativeValues[index] = negativeValues[index] || 0;\n\n              if (opts.relativePoints) {\n                positiveValues[index] = 100;\n              } else if (value < 0) {\n                negativeValues[index] += value;\n              } else {\n                positiveValues[index] += value;\n              }\n            });\n          }\n        });\n        helpers$1.each(valuesPerStack, function (valuesForType) {\n          var values = valuesForType.positiveValues.concat(valuesForType.negativeValues);\n          var minVal = helpers$1.min(values);\n          var maxVal = helpers$1.max(values);\n          me.min = me.min === null ? minVal : Math.min(me.min, minVal);\n          me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);\n        });\n      } else {\n        helpers$1.each(datasets, function (dataset, datasetIndex) {\n          var meta = chart.getDatasetMeta(datasetIndex);\n\n          if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n            helpers$1.each(dataset.data, function (rawValue, index) {\n              var value = +me.getRightValue(rawValue);\n\n              if (isNaN(value) || meta.data[index].hidden) {\n                return;\n              }\n\n              if (me.min === null) {\n                me.min = value;\n              } else if (value < me.min) {\n                me.min = value;\n              }\n\n              if (me.max === null) {\n                me.max = value;\n              } else if (value > me.max) {\n                me.max = value;\n              }\n            });\n          }\n        });\n      }\n\n      me.min = isFinite(me.min) && !isNaN(me.min) ? me.min : DEFAULT_MIN;\n      me.max = isFinite(me.max) && !isNaN(me.max) ? me.max : DEFAULT_MAX; // Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero\n\n      this.handleTickRangeOptions();\n    },\n    // Returns the maximum number of ticks based on the scale dimension\n    _computeTickLimit: function _computeTickLimit() {\n      var me = this;\n      var tickFont;\n\n      if (me.isHorizontal()) {\n        return Math.ceil(me.width / 40);\n      }\n\n      tickFont = helpers$1.options._parseFont(me.options.ticks);\n      return Math.ceil(me.height / tickFont.lineHeight);\n    },\n    // Called after the ticks are built. We need\n    handleDirectionalChanges: function handleDirectionalChanges() {\n      if (!this.isHorizontal()) {\n        // We are in a vertical orientation. The top value is the highest. So reverse the array\n        this.ticks.reverse();\n      }\n    },\n    getLabelForIndex: function getLabelForIndex(index, datasetIndex) {\n      return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);\n    },\n    // Utils\n    getPixelForValue: function getPixelForValue(value) {\n      // This must be called after fit has been run so that\n      // this.left, this.top, this.right, and this.bottom have been defined\n      var me = this;\n      var start = me.start;\n      var rightValue = +me.getRightValue(value);\n      var pixel;\n      var range = me.end - start;\n\n      if (me.isHorizontal()) {\n        pixel = me.left + me.width / range * (rightValue - start);\n      } else {\n        pixel = me.bottom - me.height / range * (rightValue - start);\n      }\n\n      return pixel;\n    },\n    getValueForPixel: function getValueForPixel(pixel) {\n      var me = this;\n      var isHorizontal = me.isHorizontal();\n      var innerDimension = isHorizontal ? me.width : me.height;\n      var offset = (isHorizontal ? pixel - me.left : me.bottom - pixel) / innerDimension;\n      return me.start + (me.end - me.start) * offset;\n    },\n    getPixelForTick: function getPixelForTick(index) {\n      return this.getPixelForValue(this.ticksAsNumbers[index]);\n    }\n  }); // INTERNAL: static default options, registered in src/index.js\n\n  var _defaults$1 = defaultConfig$1;\n  scale_linear._defaults = _defaults$1;\n  var valueOrDefault$a = helpers$1.valueOrDefault;\n  /**\n   * Generate a set of logarithmic ticks\n   * @param generationOptions the options used to generate the ticks\n   * @param dataRange the range of the data\n   * @returns {number[]} array of tick values\n   */\n\n  function generateTicks$1(generationOptions, dataRange) {\n    var ticks = [];\n    var tickVal = valueOrDefault$a(generationOptions.min, Math.pow(10, Math.floor(helpers$1.log10(dataRange.min))));\n    var endExp = Math.floor(helpers$1.log10(dataRange.max));\n    var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));\n    var exp, significand;\n\n    if (tickVal === 0) {\n      exp = Math.floor(helpers$1.log10(dataRange.minNotZero));\n      significand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));\n      ticks.push(tickVal);\n      tickVal = significand * Math.pow(10, exp);\n    } else {\n      exp = Math.floor(helpers$1.log10(tickVal));\n      significand = Math.floor(tickVal / Math.pow(10, exp));\n    }\n\n    var precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n\n    do {\n      ticks.push(tickVal);\n      ++significand;\n\n      if (significand === 10) {\n        significand = 1;\n        ++exp;\n        precision = exp >= 0 ? 1 : precision;\n      }\n\n      tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;\n    } while (exp < endExp || exp === endExp && significand < endSignificand);\n\n    var lastTick = valueOrDefault$a(generationOptions.max, tickVal);\n    ticks.push(lastTick);\n    return ticks;\n  }\n\n  var defaultConfig$2 = {\n    position: 'left',\n    // label settings\n    ticks: {\n      callback: core_ticks.formatters.logarithmic\n    }\n  }; // TODO(v3): change this to positiveOrDefault\n\n  function nonNegativeOrDefault(value, defaultValue) {\n    return helpers$1.isFinite(value) && value >= 0 ? value : defaultValue;\n  }\n\n  var scale_logarithmic = core_scale.extend({\n    determineDataLimits: function determineDataLimits() {\n      var me = this;\n      var opts = me.options;\n      var chart = me.chart;\n      var data = chart.data;\n      var datasets = data.datasets;\n      var isHorizontal = me.isHorizontal();\n\n      function IDMatches(meta) {\n        return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;\n      } // Calculate Range\n\n\n      me.min = null;\n      me.max = null;\n      me.minNotZero = null;\n      var hasStacks = opts.stacked;\n\n      if (hasStacks === undefined) {\n        helpers$1.each(datasets, function (dataset, datasetIndex) {\n          if (hasStacks) {\n            return;\n          }\n\n          var meta = chart.getDatasetMeta(datasetIndex);\n\n          if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) && meta.stack !== undefined) {\n            hasStacks = true;\n          }\n        });\n      }\n\n      if (opts.stacked || hasStacks) {\n        var valuesPerStack = {};\n        helpers$1.each(datasets, function (dataset, datasetIndex) {\n          var meta = chart.getDatasetMeta(datasetIndex);\n          var key = [meta.type, // we have a separate stack for stack=undefined datasets when the opts.stacked is undefined\n          opts.stacked === undefined && meta.stack === undefined ? datasetIndex : '', meta.stack].join('.');\n\n          if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n            if (valuesPerStack[key] === undefined) {\n              valuesPerStack[key] = [];\n            }\n\n            helpers$1.each(dataset.data, function (rawValue, index) {\n              var values = valuesPerStack[key];\n              var value = +me.getRightValue(rawValue); // invalid, hidden and negative values are ignored\n\n              if (isNaN(value) || meta.data[index].hidden || value < 0) {\n                return;\n              }\n\n              values[index] = values[index] || 0;\n              values[index] += value;\n            });\n          }\n        });\n        helpers$1.each(valuesPerStack, function (valuesForType) {\n          if (valuesForType.length > 0) {\n            var minVal = helpers$1.min(valuesForType);\n            var maxVal = helpers$1.max(valuesForType);\n            me.min = me.min === null ? minVal : Math.min(me.min, minVal);\n            me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);\n          }\n        });\n      } else {\n        helpers$1.each(datasets, function (dataset, datasetIndex) {\n          var meta = chart.getDatasetMeta(datasetIndex);\n\n          if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n            helpers$1.each(dataset.data, function (rawValue, index) {\n              var value = +me.getRightValue(rawValue); // invalid, hidden and negative values are ignored\n\n              if (isNaN(value) || meta.data[index].hidden || value < 0) {\n                return;\n              }\n\n              if (me.min === null) {\n                me.min = value;\n              } else if (value < me.min) {\n                me.min = value;\n              }\n\n              if (me.max === null) {\n                me.max = value;\n              } else if (value > me.max) {\n                me.max = value;\n              }\n\n              if (value !== 0 && (me.minNotZero === null || value < me.minNotZero)) {\n                me.minNotZero = value;\n              }\n            });\n          }\n        });\n      } // Common base implementation to handle ticks.min, ticks.max\n\n\n      this.handleTickRangeOptions();\n    },\n    handleTickRangeOptions: function handleTickRangeOptions() {\n      var me = this;\n      var tickOpts = me.options.ticks;\n      var DEFAULT_MIN = 1;\n      var DEFAULT_MAX = 10;\n      me.min = nonNegativeOrDefault(tickOpts.min, me.min);\n      me.max = nonNegativeOrDefault(tickOpts.max, me.max);\n\n      if (me.min === me.max) {\n        if (me.min !== 0 && me.min !== null) {\n          me.min = Math.pow(10, Math.floor(helpers$1.log10(me.min)) - 1);\n          me.max = Math.pow(10, Math.floor(helpers$1.log10(me.max)) + 1);\n        } else {\n          me.min = DEFAULT_MIN;\n          me.max = DEFAULT_MAX;\n        }\n      }\n\n      if (me.min === null) {\n        me.min = Math.pow(10, Math.floor(helpers$1.log10(me.max)) - 1);\n      }\n\n      if (me.max === null) {\n        me.max = me.min !== 0 ? Math.pow(10, Math.floor(helpers$1.log10(me.min)) + 1) : DEFAULT_MAX;\n      }\n\n      if (me.minNotZero === null) {\n        if (me.min > 0) {\n          me.minNotZero = me.min;\n        } else if (me.max < 1) {\n          me.minNotZero = Math.pow(10, Math.floor(helpers$1.log10(me.max)));\n        } else {\n          me.minNotZero = DEFAULT_MIN;\n        }\n      }\n    },\n    buildTicks: function buildTicks() {\n      var me = this;\n      var tickOpts = me.options.ticks;\n      var reverse = !me.isHorizontal();\n      var generationOptions = {\n        min: nonNegativeOrDefault(tickOpts.min),\n        max: nonNegativeOrDefault(tickOpts.max)\n      };\n      var ticks = me.ticks = generateTicks$1(generationOptions, me); // At this point, we need to update our max and min given the tick values since we have expanded the\n      // range of the scale\n\n      me.max = helpers$1.max(ticks);\n      me.min = helpers$1.min(ticks);\n\n      if (tickOpts.reverse) {\n        reverse = !reverse;\n        me.start = me.max;\n        me.end = me.min;\n      } else {\n        me.start = me.min;\n        me.end = me.max;\n      }\n\n      if (reverse) {\n        ticks.reverse();\n      }\n    },\n    convertTicksToLabels: function convertTicksToLabels() {\n      this.tickValues = this.ticks.slice();\n      core_scale.prototype.convertTicksToLabels.call(this);\n    },\n    // Get the correct tooltip label\n    getLabelForIndex: function getLabelForIndex(index, datasetIndex) {\n      return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);\n    },\n    getPixelForTick: function getPixelForTick(index) {\n      return this.getPixelForValue(this.tickValues[index]);\n    },\n\n    /**\n     * Returns the value of the first tick.\n     * @param {number} value - The minimum not zero value.\n     * @return {number} The first tick value.\n     * @private\n     */\n    _getFirstTickValue: function _getFirstTickValue(value) {\n      var exp = Math.floor(helpers$1.log10(value));\n      var significand = Math.floor(value / Math.pow(10, exp));\n      return significand * Math.pow(10, exp);\n    },\n    getPixelForValue: function getPixelForValue(value) {\n      var me = this;\n      var tickOpts = me.options.ticks;\n      var reverse = tickOpts.reverse;\n      var log10 = helpers$1.log10;\n\n      var firstTickValue = me._getFirstTickValue(me.minNotZero);\n\n      var offset = 0;\n      var innerDimension, pixel, start, end, sign;\n      value = +me.getRightValue(value);\n\n      if (reverse) {\n        start = me.end;\n        end = me.start;\n        sign = -1;\n      } else {\n        start = me.start;\n        end = me.end;\n        sign = 1;\n      }\n\n      if (me.isHorizontal()) {\n        innerDimension = me.width;\n        pixel = reverse ? me.right : me.left;\n      } else {\n        innerDimension = me.height;\n        sign *= -1; // invert, since the upper-left corner of the canvas is at pixel (0, 0)\n\n        pixel = reverse ? me.top : me.bottom;\n      }\n\n      if (value !== start) {\n        if (start === 0) {\n          // include zero tick\n          offset = valueOrDefault$a(tickOpts.fontSize, core_defaults.global.defaultFontSize);\n          innerDimension -= offset;\n          start = firstTickValue;\n        }\n\n        if (value !== 0) {\n          offset += innerDimension / (log10(end) - log10(start)) * (log10(value) - log10(start));\n        }\n\n        pixel += sign * offset;\n      }\n\n      return pixel;\n    },\n    getValueForPixel: function getValueForPixel(pixel) {\n      var me = this;\n      var tickOpts = me.options.ticks;\n      var reverse = tickOpts.reverse;\n      var log10 = helpers$1.log10;\n\n      var firstTickValue = me._getFirstTickValue(me.minNotZero);\n\n      var innerDimension, start, end, value;\n\n      if (reverse) {\n        start = me.end;\n        end = me.start;\n      } else {\n        start = me.start;\n        end = me.end;\n      }\n\n      if (me.isHorizontal()) {\n        innerDimension = me.width;\n        value = reverse ? me.right - pixel : pixel - me.left;\n      } else {\n        innerDimension = me.height;\n        value = reverse ? pixel - me.top : me.bottom - pixel;\n      }\n\n      if (value !== start) {\n        if (start === 0) {\n          // include zero tick\n          var offset = valueOrDefault$a(tickOpts.fontSize, core_defaults.global.defaultFontSize);\n          value -= offset;\n          innerDimension -= offset;\n          start = firstTickValue;\n        }\n\n        value *= log10(end) - log10(start);\n        value /= innerDimension;\n        value = Math.pow(10, log10(start) + value);\n      }\n\n      return value;\n    }\n  }); // INTERNAL: static default options, registered in src/index.js\n\n  var _defaults$2 = defaultConfig$2;\n  scale_logarithmic._defaults = _defaults$2;\n  var valueOrDefault$b = helpers$1.valueOrDefault;\n  var valueAtIndexOrDefault$1 = helpers$1.valueAtIndexOrDefault;\n  var resolve$7 = helpers$1.options.resolve;\n  var defaultConfig$3 = {\n    display: true,\n    // Boolean - Whether to animate scaling the chart from the centre\n    animate: true,\n    position: 'chartArea',\n    angleLines: {\n      display: true,\n      color: 'rgba(0, 0, 0, 0.1)',\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n    gridLines: {\n      circular: false\n    },\n    // label settings\n    ticks: {\n      // Boolean - Show a backdrop to the scale label\n      showLabelBackdrop: true,\n      // String - The colour of the label backdrop\n      backdropColor: 'rgba(255,255,255,0.75)',\n      // Number - The backdrop padding above & below the label in pixels\n      backdropPaddingY: 2,\n      // Number - The backdrop padding to the side of the label in pixels\n      backdropPaddingX: 2,\n      callback: core_ticks.formatters.linear\n    },\n    pointLabels: {\n      // Boolean - if true, show point labels\n      display: true,\n      // Number - Point label font size in pixels\n      fontSize: 10,\n      // Function - Used to convert point labels\n      callback: function callback(label) {\n        return label;\n      }\n    }\n  };\n\n  function getValueCount(scale) {\n    var opts = scale.options;\n    return opts.angleLines.display || opts.pointLabels.display ? scale.chart.data.labels.length : 0;\n  }\n\n  function getTickBackdropHeight(opts) {\n    var tickOpts = opts.ticks;\n\n    if (tickOpts.display && opts.display) {\n      return valueOrDefault$b(tickOpts.fontSize, core_defaults.global.defaultFontSize) + tickOpts.backdropPaddingY * 2;\n    }\n\n    return 0;\n  }\n\n  function measureLabelSize(ctx, lineHeight, label) {\n    if (helpers$1.isArray(label)) {\n      return {\n        w: helpers$1.longestText(ctx, ctx.font, label),\n        h: label.length * lineHeight\n      };\n    }\n\n    return {\n      w: ctx.measureText(label).width,\n      h: lineHeight\n    };\n  }\n\n  function determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n      return {\n        start: pos - size / 2,\n        end: pos + size / 2\n      };\n    } else if (angle < min || angle > max) {\n      return {\n        start: pos - size,\n        end: pos\n      };\n    }\n\n    return {\n      start: pos,\n      end: pos + size\n    };\n  }\n  /**\n   * Helper function to fit a radial linear scale with point labels\n   */\n\n\n  function fitWithPointLabels(scale) {\n    // Right, this is really confusing and there is a lot of maths going on here\n    // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n    //\n    // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n    //\n    // Solution:\n    //\n    // We assume the radius of the polygon is half the size of the canvas at first\n    // at each index we check if the text overlaps.\n    //\n    // Where it does, we store that angle and that index.\n    //\n    // After finding the largest index and angle we calculate how much we need to remove\n    // from the shape radius to move the point inwards by that x.\n    //\n    // We average the left and right distances to get the maximum shape radius that can fit in the box\n    // along with labels.\n    //\n    // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n    // on each side, removing that from the size, halving it and adding the left x protrusion width.\n    //\n    // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n    // and position it in the most space efficient manner\n    //\n    // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n    var plFont = helpers$1.options._parseFont(scale.options.pointLabels); // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n    // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n\n\n    var furthestLimits = {\n      l: 0,\n      r: scale.width,\n      t: 0,\n      b: scale.height - scale.paddingTop\n    };\n    var furthestAngles = {};\n    var i, textSize, pointPosition;\n    scale.ctx.font = plFont.string;\n    scale._pointLabelSizes = [];\n    var valueCount = getValueCount(scale);\n\n    for (i = 0; i < valueCount; i++) {\n      pointPosition = scale.getPointPosition(i, scale.drawingArea + 5);\n      textSize = measureLabelSize(scale.ctx, plFont.lineHeight, scale.pointLabels[i] || '');\n      scale._pointLabelSizes[i] = textSize; // Add quarter circle to make degree 0 mean top of circle\n\n      var angleRadians = scale.getIndexAngle(i);\n      var angle = helpers$1.toDegrees(angleRadians) % 360;\n      var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n      var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n\n      if (hLimits.start < furthestLimits.l) {\n        furthestLimits.l = hLimits.start;\n        furthestAngles.l = angleRadians;\n      }\n\n      if (hLimits.end > furthestLimits.r) {\n        furthestLimits.r = hLimits.end;\n        furthestAngles.r = angleRadians;\n      }\n\n      if (vLimits.start < furthestLimits.t) {\n        furthestLimits.t = vLimits.start;\n        furthestAngles.t = angleRadians;\n      }\n\n      if (vLimits.end > furthestLimits.b) {\n        furthestLimits.b = vLimits.end;\n        furthestAngles.b = angleRadians;\n      }\n    }\n\n    scale.setReductions(scale.drawingArea, furthestLimits, furthestAngles);\n  }\n\n  function getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n      return 'center';\n    } else if (angle < 180) {\n      return 'left';\n    }\n\n    return 'right';\n  }\n\n  function fillText(ctx, text, position, lineHeight) {\n    var y = position.y + lineHeight / 2;\n    var i, ilen;\n\n    if (helpers$1.isArray(text)) {\n      for (i = 0, ilen = text.length; i < ilen; ++i) {\n        ctx.fillText(text[i], position.x, y);\n        y += lineHeight;\n      }\n    } else {\n      ctx.fillText(text, position.x, y);\n    }\n  }\n\n  function adjustPointPositionForLabelHeight(angle, textSize, position) {\n    if (angle === 90 || angle === 270) {\n      position.y -= textSize.h / 2;\n    } else if (angle > 270 || angle < 90) {\n      position.y -= textSize.h;\n    }\n  }\n\n  function drawPointLabels(scale) {\n    var ctx = scale.ctx;\n    var opts = scale.options;\n    var angleLineOpts = opts.angleLines;\n    var gridLineOpts = opts.gridLines;\n    var pointLabelOpts = opts.pointLabels;\n    var lineWidth = valueOrDefault$b(angleLineOpts.lineWidth, gridLineOpts.lineWidth);\n    var lineColor = valueOrDefault$b(angleLineOpts.color, gridLineOpts.color);\n    var tickBackdropHeight = getTickBackdropHeight(opts);\n    ctx.save();\n    ctx.lineWidth = lineWidth;\n    ctx.strokeStyle = lineColor;\n\n    if (ctx.setLineDash) {\n      ctx.setLineDash(resolve$7([angleLineOpts.borderDash, gridLineOpts.borderDash, []]));\n      ctx.lineDashOffset = resolve$7([angleLineOpts.borderDashOffset, gridLineOpts.borderDashOffset, 0.0]);\n    }\n\n    var outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max); // Point Label Font\n\n    var plFont = helpers$1.options._parseFont(pointLabelOpts);\n\n    ctx.font = plFont.string;\n    ctx.textBaseline = 'middle';\n\n    for (var i = getValueCount(scale) - 1; i >= 0; i--) {\n      if (angleLineOpts.display && lineWidth && lineColor) {\n        var outerPosition = scale.getPointPosition(i, outerDistance);\n        ctx.beginPath();\n        ctx.moveTo(scale.xCenter, scale.yCenter);\n        ctx.lineTo(outerPosition.x, outerPosition.y);\n        ctx.stroke();\n      }\n\n      if (pointLabelOpts.display) {\n        // Extra pixels out for some label spacing\n        var extra = i === 0 ? tickBackdropHeight / 2 : 0;\n        var pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + 5); // Keep this in loop since we may support array properties here\n\n        var pointLabelFontColor = valueAtIndexOrDefault$1(pointLabelOpts.fontColor, i, core_defaults.global.defaultFontColor);\n        ctx.fillStyle = pointLabelFontColor;\n        var angleRadians = scale.getIndexAngle(i);\n        var angle = helpers$1.toDegrees(angleRadians);\n        ctx.textAlign = getTextAlignForAngle(angle);\n        adjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);\n        fillText(ctx, scale.pointLabels[i] || '', pointLabelPosition, plFont.lineHeight);\n      }\n    }\n\n    ctx.restore();\n  }\n\n  function drawRadiusLine(scale, gridLineOpts, radius, index) {\n    var ctx = scale.ctx;\n    var circular = gridLineOpts.circular;\n    var valueCount = getValueCount(scale);\n    var lineColor = valueAtIndexOrDefault$1(gridLineOpts.color, index - 1);\n    var lineWidth = valueAtIndexOrDefault$1(gridLineOpts.lineWidth, index - 1);\n    var pointPosition;\n\n    if (!circular && !valueCount || !lineColor || !lineWidth) {\n      return;\n    }\n\n    ctx.save();\n    ctx.strokeStyle = lineColor;\n    ctx.lineWidth = lineWidth;\n\n    if (ctx.setLineDash) {\n      ctx.setLineDash(gridLineOpts.borderDash || []);\n      ctx.lineDashOffset = gridLineOpts.borderDashOffset || 0.0;\n    }\n\n    ctx.beginPath();\n\n    if (circular) {\n      // Draw circular arcs between the points\n      ctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);\n    } else {\n      // Draw straight lines connecting each index\n      pointPosition = scale.getPointPosition(0, radius);\n      ctx.moveTo(pointPosition.x, pointPosition.y);\n\n      for (var i = 1; i < valueCount; i++) {\n        pointPosition = scale.getPointPosition(i, radius);\n        ctx.lineTo(pointPosition.x, pointPosition.y);\n      }\n    }\n\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  function numberOrZero(param) {\n    return helpers$1.isNumber(param) ? param : 0;\n  }\n\n  var scale_radialLinear = scale_linearbase.extend({\n    setDimensions: function setDimensions() {\n      var me = this; // Set the unconstrained dimension before label rotation\n\n      me.width = me.maxWidth;\n      me.height = me.maxHeight;\n      me.paddingTop = getTickBackdropHeight(me.options) / 2;\n      me.xCenter = Math.floor(me.width / 2);\n      me.yCenter = Math.floor((me.height - me.paddingTop) / 2);\n      me.drawingArea = Math.min(me.height - me.paddingTop, me.width) / 2;\n    },\n    determineDataLimits: function determineDataLimits() {\n      var me = this;\n      var chart = me.chart;\n      var min = Number.POSITIVE_INFINITY;\n      var max = Number.NEGATIVE_INFINITY;\n      helpers$1.each(chart.data.datasets, function (dataset, datasetIndex) {\n        if (chart.isDatasetVisible(datasetIndex)) {\n          var meta = chart.getDatasetMeta(datasetIndex);\n          helpers$1.each(dataset.data, function (rawValue, index) {\n            var value = +me.getRightValue(rawValue);\n\n            if (isNaN(value) || meta.data[index].hidden) {\n              return;\n            }\n\n            min = Math.min(value, min);\n            max = Math.max(value, max);\n          });\n        }\n      });\n      me.min = min === Number.POSITIVE_INFINITY ? 0 : min;\n      me.max = max === Number.NEGATIVE_INFINITY ? 0 : max; // Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero\n\n      me.handleTickRangeOptions();\n    },\n    // Returns the maximum number of ticks based on the scale dimension\n    _computeTickLimit: function _computeTickLimit() {\n      return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    },\n    convertTicksToLabels: function convertTicksToLabels() {\n      var me = this;\n      scale_linearbase.prototype.convertTicksToLabels.call(me); // Point labels\n\n      me.pointLabels = me.chart.data.labels.map(me.options.pointLabels.callback, me);\n    },\n    getLabelForIndex: function getLabelForIndex(index, datasetIndex) {\n      return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);\n    },\n    fit: function fit() {\n      var me = this;\n      var opts = me.options;\n\n      if (opts.display && opts.pointLabels.display) {\n        fitWithPointLabels(me);\n      } else {\n        me.setCenterPoint(0, 0, 0, 0);\n      }\n    },\n\n    /**\n     * Set radius reductions and determine new radius and center point\n     * @private\n     */\n    setReductions: function setReductions(largestPossibleRadius, furthestLimits, furthestAngles) {\n      var me = this;\n      var radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);\n      var radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);\n      var radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);\n      var radiusReductionBottom = -Math.max(furthestLimits.b - (me.height - me.paddingTop), 0) / Math.cos(furthestAngles.b);\n      radiusReductionLeft = numberOrZero(radiusReductionLeft);\n      radiusReductionRight = numberOrZero(radiusReductionRight);\n      radiusReductionTop = numberOrZero(radiusReductionTop);\n      radiusReductionBottom = numberOrZero(radiusReductionBottom);\n      me.drawingArea = Math.min(Math.floor(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2), Math.floor(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));\n      me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);\n    },\n    setCenterPoint: function setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n      var me = this;\n      var maxRight = me.width - rightMovement - me.drawingArea;\n      var maxLeft = leftMovement + me.drawingArea;\n      var maxTop = topMovement + me.drawingArea;\n      var maxBottom = me.height - me.paddingTop - bottomMovement - me.drawingArea;\n      me.xCenter = Math.floor((maxLeft + maxRight) / 2 + me.left);\n      me.yCenter = Math.floor((maxTop + maxBottom) / 2 + me.top + me.paddingTop);\n    },\n    getIndexAngle: function getIndexAngle(index) {\n      var angleMultiplier = Math.PI * 2 / getValueCount(this);\n      var startAngle = this.chart.options && this.chart.options.startAngle ? this.chart.options.startAngle : 0;\n      var startAngleRadians = startAngle * Math.PI * 2 / 360; // Start from the top instead of right, so remove a quarter of the circle\n\n      return index * angleMultiplier + startAngleRadians;\n    },\n    getDistanceFromCenterForValue: function getDistanceFromCenterForValue(value) {\n      var me = this;\n\n      if (value === null) {\n        return 0; // null always in center\n      } // Take into account half font size + the yPadding of the top value\n\n\n      var scalingFactor = me.drawingArea / (me.max - me.min);\n\n      if (me.options.ticks.reverse) {\n        return (me.max - value) * scalingFactor;\n      }\n\n      return (value - me.min) * scalingFactor;\n    },\n    getPointPosition: function getPointPosition(index, distanceFromCenter) {\n      var me = this;\n      var thisAngle = me.getIndexAngle(index) - Math.PI / 2;\n      return {\n        x: Math.cos(thisAngle) * distanceFromCenter + me.xCenter,\n        y: Math.sin(thisAngle) * distanceFromCenter + me.yCenter\n      };\n    },\n    getPointPositionForValue: function getPointPositionForValue(index, value) {\n      return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    },\n    getBasePosition: function getBasePosition() {\n      var me = this;\n      var min = me.min;\n      var max = me.max;\n      return me.getPointPositionForValue(0, me.beginAtZero ? 0 : min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0);\n    },\n    draw: function draw() {\n      var me = this;\n      var opts = me.options;\n      var gridLineOpts = opts.gridLines;\n      var tickOpts = opts.ticks;\n\n      if (opts.display) {\n        var ctx = me.ctx;\n        var startAngle = this.getIndexAngle(0);\n\n        var tickFont = helpers$1.options._parseFont(tickOpts);\n\n        if (opts.angleLines.display || opts.pointLabels.display) {\n          drawPointLabels(me);\n        }\n\n        helpers$1.each(me.ticks, function (label, index) {\n          // Don't draw a centre value (if it is minimum)\n          if (index > 0 || tickOpts.reverse) {\n            var yCenterOffset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]); // Draw circular lines around the scale\n\n            if (gridLineOpts.display && index !== 0) {\n              drawRadiusLine(me, gridLineOpts, yCenterOffset, index);\n            }\n\n            if (tickOpts.display) {\n              var tickFontColor = valueOrDefault$b(tickOpts.fontColor, core_defaults.global.defaultFontColor);\n              ctx.font = tickFont.string;\n              ctx.save();\n              ctx.translate(me.xCenter, me.yCenter);\n              ctx.rotate(startAngle);\n\n              if (tickOpts.showLabelBackdrop) {\n                var labelWidth = ctx.measureText(label).width;\n                ctx.fillStyle = tickOpts.backdropColor;\n                ctx.fillRect(-labelWidth / 2 - tickOpts.backdropPaddingX, -yCenterOffset - tickFont.size / 2 - tickOpts.backdropPaddingY, labelWidth + tickOpts.backdropPaddingX * 2, tickFont.size + tickOpts.backdropPaddingY * 2);\n              }\n\n              ctx.textAlign = 'center';\n              ctx.textBaseline = 'middle';\n              ctx.fillStyle = tickFontColor;\n              ctx.fillText(label, 0, -yCenterOffset);\n              ctx.restore();\n            }\n          }\n        });\n      }\n    }\n  }); // INTERNAL: static default options, registered in src/index.js\n\n  var _defaults$3 = defaultConfig$3;\n  scale_radialLinear._defaults = _defaults$3;\n  var valueOrDefault$c = helpers$1.valueOrDefault; // Integer constants are from the ES6 spec.\n\n  var MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;\n  var MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\n  var INTERVALS = {\n    millisecond: {\n      common: true,\n      size: 1,\n      steps: [1, 2, 5, 10, 20, 50, 100, 250, 500]\n    },\n    second: {\n      common: true,\n      size: 1000,\n      steps: [1, 2, 5, 10, 15, 30]\n    },\n    minute: {\n      common: true,\n      size: 60000,\n      steps: [1, 2, 5, 10, 15, 30]\n    },\n    hour: {\n      common: true,\n      size: 3600000,\n      steps: [1, 2, 3, 6, 12]\n    },\n    day: {\n      common: true,\n      size: 86400000,\n      steps: [1, 2, 5]\n    },\n    week: {\n      common: false,\n      size: 604800000,\n      steps: [1, 2, 3, 4]\n    },\n    month: {\n      common: true,\n      size: 2.628e9,\n      steps: [1, 2, 3]\n    },\n    quarter: {\n      common: false,\n      size: 7.884e9,\n      steps: [1, 2, 3, 4]\n    },\n    year: {\n      common: true,\n      size: 3.154e10\n    }\n  };\n  var UNITS = Object.keys(INTERVALS);\n\n  function sorter(a, b) {\n    return a - b;\n  }\n\n  function arrayUnique(items) {\n    var hash = {};\n    var out = [];\n    var i, ilen, item;\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n\n      if (!hash[item]) {\n        hash[item] = true;\n        out.push(item);\n      }\n    }\n\n    return out;\n  }\n  /**\n   * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n   * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n   * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n   * extremity (left + width or top + height). Note that it would be more optimized to directly\n   * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n   * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n   *\n   * @param {number[]} timestamps - timestamps sorted from lowest to highest.\n   * @param {string} distribution - If 'linear', timestamps will be spread linearly along the min\n   * and max range, so basically, the table will contains only two items: {min, 0} and {max, 1}.\n   * If 'series', timestamps will be positioned at the same distance from each other. In this\n   * case, only timestamps that break the time linearity are registered, meaning that in the\n   * best case, all timestamps are linear, the table contains only min and max.\n   */\n\n\n  function buildLookupTable(timestamps, min, max, distribution) {\n    if (distribution === 'linear' || !timestamps.length) {\n      return [{\n        time: min,\n        pos: 0\n      }, {\n        time: max,\n        pos: 1\n      }];\n    }\n\n    var table = [];\n    var items = [min];\n    var i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n\n      if (curr > min && curr < max) {\n        items.push(curr);\n      }\n    }\n\n    items.push(max);\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i]; // only add points that breaks the scale linearity\n\n      if (prev === undefined || next === undefined || Math.round((next + prev) / 2) !== curr) {\n        table.push({\n          time: curr,\n          pos: i / (ilen - 1)\n        });\n      }\n    }\n\n    return table;\n  } // @see adapted from https://www.anujgakhar.com/2014/03/01/binary-search-in-javascript/\n\n\n  function lookup(table, key, value) {\n    var lo = 0;\n    var hi = table.length - 1;\n    var mid, i0, i1;\n\n    while (lo >= 0 && lo <= hi) {\n      mid = lo + hi >> 1;\n      i0 = table[mid - 1] || null;\n      i1 = table[mid];\n\n      if (!i0) {\n        // given value is outside table (before first item)\n        return {\n          lo: null,\n          hi: i1\n        };\n      } else if (i1[key] < value) {\n        lo = mid + 1;\n      } else if (i0[key] > value) {\n        hi = mid - 1;\n      } else {\n        return {\n          lo: i0,\n          hi: i1\n        };\n      }\n    } // given value is outside table (after last item)\n\n\n    return {\n      lo: i1,\n      hi: null\n    };\n  }\n  /**\n   * Linearly interpolates the given source `value` using the table items `skey` values and\n   * returns the associated `tkey` value. For example, interpolate(table, 'time', 42, 'pos')\n   * returns the position for a timestamp equal to 42. If value is out of bounds, values at\n   * index [0, 1] or [n - 1, n] are used for the interpolation.\n   */\n\n\n  function interpolate$1(table, skey, sval, tkey) {\n    var range = lookup(table, skey, sval); // Note: the lookup table ALWAYS contains at least 2 items (min and max)\n\n    var prev = !range.lo ? table[0] : !range.hi ? table[table.length - 2] : range.lo;\n    var next = !range.lo ? table[1] : !range.hi ? table[table.length - 1] : range.hi;\n    var span = next[skey] - prev[skey];\n    var ratio = span ? (sval - prev[skey]) / span : 0;\n    var offset = (next[tkey] - prev[tkey]) * ratio;\n    return prev[tkey] + offset;\n  }\n\n  function toTimestamp(scale, input) {\n    var adapter = scale._adapter;\n    var options = scale.options.time;\n    var parser = options.parser;\n    var format = parser || options.format;\n    var value = input;\n\n    if (typeof parser === 'function') {\n      value = parser(value);\n    } // Only parse if its not a timestamp already\n\n\n    if (!helpers$1.isFinite(value)) {\n      value = typeof format === 'string' ? adapter.parse(value, format) : adapter.parse(value);\n    }\n\n    if (value !== null) {\n      return +value;\n    } // Labels are in an incompatible format and no `parser` has been provided.\n    // The user might still use the deprecated `format` option for parsing.\n\n\n    if (!parser && typeof format === 'function') {\n      value = format(input); // `format` could return something else than a timestamp, if so, parse it\n\n      if (!helpers$1.isFinite(value)) {\n        value = adapter.parse(value);\n      }\n    }\n\n    return value;\n  }\n\n  function parse(scale, input) {\n    if (helpers$1.isNullOrUndef(input)) {\n      return null;\n    }\n\n    var options = scale.options.time;\n    var value = toTimestamp(scale, scale.getRightValue(input));\n\n    if (value === null) {\n      return value;\n    }\n\n    if (options.round) {\n      value = +scale._adapter.startOf(value, options.round);\n    }\n\n    return value;\n  }\n  /**\n   * Returns the number of unit to skip to be able to display up to `capacity` number of ticks\n   * in `unit` for the given `min` / `max` range and respecting the interval steps constraints.\n   */\n\n\n  function determineStepSize(min, max, unit, capacity) {\n    var range = max - min;\n    var interval = INTERVALS[unit];\n    var milliseconds = interval.size;\n    var steps = interval.steps;\n    var i, ilen, factor;\n\n    if (!steps) {\n      return Math.ceil(range / (capacity * milliseconds));\n    }\n\n    for (i = 0, ilen = steps.length; i < ilen; ++i) {\n      factor = steps[i];\n\n      if (Math.ceil(range / (milliseconds * factor)) <= capacity) {\n        break;\n      }\n    }\n\n    return factor;\n  }\n  /**\n   * Figures out what unit results in an appropriate number of auto-generated ticks\n   */\n\n\n  function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    var ilen = UNITS.length;\n    var i, interval, factor;\n\n    for (i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n      interval = INTERVALS[UNITS[i]];\n      factor = interval.steps ? interval.steps[interval.steps.length - 1] : MAX_INTEGER;\n\n      if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n        return UNITS[i];\n      }\n    }\n\n    return UNITS[ilen - 1];\n  }\n  /**\n   * Figures out what unit to format a set of ticks with\n   */\n\n\n  function determineUnitForFormatting(scale, ticks, minUnit, min, max) {\n    var ilen = UNITS.length;\n    var i, unit;\n\n    for (i = ilen - 1; i >= UNITS.indexOf(minUnit); i--) {\n      unit = UNITS[i];\n\n      if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= ticks.length) {\n        return unit;\n      }\n    }\n\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n  }\n\n  function determineMajorUnit(unit) {\n    for (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n      if (INTERVALS[UNITS[i]].common) {\n        return UNITS[i];\n      }\n    }\n  }\n  /**\n   * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n   * `minor` unit, aligned on the `major` unit and using the given scale time `options`.\n   * Important: this method can return ticks outside the min and max range, it's the\n   * responsibility of the calling code to clamp values if needed.\n   */\n\n\n  function generate(scale, min, max, capacity) {\n    var adapter = scale._adapter;\n    var options = scale.options;\n    var timeOpts = options.time;\n    var minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, capacity);\n    var major = determineMajorUnit(minor);\n    var stepSize = valueOrDefault$c(timeOpts.stepSize, timeOpts.unitStepSize);\n    var weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    var majorTicksEnabled = options.ticks.major.enabled;\n    var interval = INTERVALS[minor];\n    var first = min;\n    var last = max;\n    var ticks = [];\n    var time;\n\n    if (!stepSize) {\n      stepSize = determineStepSize(min, max, minor, capacity);\n    } // For 'week' unit, handle the first day of week option\n\n\n    if (weekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n      last = +adapter.startOf(last, 'isoWeek', weekday);\n    } // Align first/last ticks on unit\n\n\n    first = +adapter.startOf(first, weekday ? 'day' : minor);\n    last = +adapter.startOf(last, weekday ? 'day' : minor); // Make sure that the last tick include max\n\n    if (last < max) {\n      last = +adapter.add(last, 1, minor);\n    }\n\n    time = first;\n\n    if (majorTicksEnabled && major && !weekday && !timeOpts.round) {\n      // Align the first tick on the previous `minor` unit aligned on the `major` unit:\n      // we first aligned time on the previous `major` unit then add the number of full\n      // stepSize there is between first and the previous major time.\n      time = +adapter.startOf(time, major);\n      time = +adapter.add(time, ~~((first - time) / (interval.size * stepSize)) * stepSize, minor);\n    }\n\n    for (; time < last; time = +adapter.add(time, stepSize, minor)) {\n      ticks.push(+time);\n    }\n\n    ticks.push(+time);\n    return ticks;\n  }\n  /**\n   * Returns the start and end offsets from edges in the form of {start, end}\n   * where each value is a relative width to the scale and ranges between 0 and 1.\n   * They add extra margins on the both sides by scaling down the original scale.\n   * Offsets are added when the `offset` option is true.\n   */\n\n\n  function computeOffsets(table, ticks, min, max, options) {\n    var start = 0;\n    var end = 0;\n    var first, last;\n\n    if (options.offset && ticks.length) {\n      if (!options.time.min) {\n        first = interpolate$1(table, 'time', ticks[0], 'pos');\n\n        if (ticks.length === 1) {\n          start = 1 - first;\n        } else {\n          start = (interpolate$1(table, 'time', ticks[1], 'pos') - first) / 2;\n        }\n      }\n\n      if (!options.time.max) {\n        last = interpolate$1(table, 'time', ticks[ticks.length - 1], 'pos');\n\n        if (ticks.length === 1) {\n          end = last;\n        } else {\n          end = (last - interpolate$1(table, 'time', ticks[ticks.length - 2], 'pos')) / 2;\n        }\n      }\n    }\n\n    return {\n      start: start,\n      end: end\n    };\n  }\n\n  function ticksFromTimestamps(scale, values, majorUnit) {\n    var ticks = [];\n    var i, ilen, value, major;\n\n    for (i = 0, ilen = values.length; i < ilen; ++i) {\n      value = values[i];\n      major = majorUnit ? value === +scale._adapter.startOf(value, majorUnit) : false;\n      ticks.push({\n        value: value,\n        major: major\n      });\n    }\n\n    return ticks;\n  }\n\n  var defaultConfig$4 = {\n    position: 'bottom',\n\n    /**\n     * Data distribution along the scale:\n     * - 'linear': data are spread according to their time (distances can vary),\n     * - 'series': data are spread at the same distance from each other.\n     * @see https://github.com/chartjs/Chart.js/pull/4507\n     * @since 2.7.0\n     */\n    distribution: 'linear',\n\n    /**\n     * Scale boundary strategy (bypassed by min/max time options)\n     * - `data`: make sure data are fully visible, ticks outside are removed\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\n     * @see https://github.com/chartjs/Chart.js/pull/4556\n     * @since 2.7.0\n     */\n    bounds: 'data',\n    adapters: {},\n    time: {\n      parser: false,\n      // false == a pattern string from https://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment\n      format: false,\n      // DEPRECATED false == date objects, moment object, callback or a pattern string from https://momentjs.com/docs/#/parsing/string-format/\n      unit: false,\n      // false == automatic or override with week, month, year, etc.\n      round: false,\n      // none, or override with week, month, year, etc.\n      displayFormat: false,\n      // DEPRECATED\n      isoWeekday: false,\n      // override week start day - see https://momentjs.com/docs/#/get-set/iso-weekday/\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      autoSkip: false,\n\n      /**\n       * Ticks generation input values:\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\n       * @see https://github.com/chartjs/Chart.js/pull/4507\n       * @since 2.7.0\n       */\n      source: 'auto',\n      major: {\n        enabled: false\n      }\n    }\n  };\n  var scale_time = core_scale.extend({\n    initialize: function initialize() {\n      this.mergeTicksOptions();\n      core_scale.prototype.initialize.call(this);\n    },\n    update: function update() {\n      var me = this;\n      var options = me.options;\n      var time = options.time || (options.time = {});\n      var adapter = me._adapter = new core_adapters._date(options.adapters.date); // DEPRECATIONS: output a message only one time per update\n\n      if (time.format) {\n        console.warn('options.time.format is deprecated and replaced by options.time.parser.');\n      } // Backward compatibility: before introducing adapter, `displayFormats` was\n      // supposed to contain *all* unit/string pairs but this can't be resolved\n      // when loading the scale (adapters are loaded afterward), so let's populate\n      // missing formats on update\n\n\n      helpers$1.mergeIf(time.displayFormats, adapter.formats());\n      return core_scale.prototype.update.apply(me, arguments);\n    },\n\n    /**\n     * Allows data to be referenced via 't' attribute\n     */\n    getRightValue: function getRightValue(rawValue) {\n      if (rawValue && rawValue.t !== undefined) {\n        rawValue = rawValue.t;\n      }\n\n      return core_scale.prototype.getRightValue.call(this, rawValue);\n    },\n    determineDataLimits: function determineDataLimits() {\n      var me = this;\n      var chart = me.chart;\n      var adapter = me._adapter;\n      var timeOpts = me.options.time;\n      var unit = timeOpts.unit || 'day';\n      var min = MAX_INTEGER;\n      var max = MIN_INTEGER;\n      var timestamps = [];\n      var datasets = [];\n      var labels = [];\n      var i, j, ilen, jlen, data, timestamp;\n      var dataLabels = chart.data.labels || []; // Convert labels to timestamps\n\n      for (i = 0, ilen = dataLabels.length; i < ilen; ++i) {\n        labels.push(parse(me, dataLabels[i]));\n      } // Convert data to timestamps\n\n\n      for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          data = chart.data.datasets[i].data; // Let's consider that all data have the same format.\n\n          if (helpers$1.isObject(data[0])) {\n            datasets[i] = [];\n\n            for (j = 0, jlen = data.length; j < jlen; ++j) {\n              timestamp = parse(me, data[j]);\n              timestamps.push(timestamp);\n              datasets[i][j] = timestamp;\n            }\n          } else {\n            for (j = 0, jlen = labels.length; j < jlen; ++j) {\n              timestamps.push(labels[j]);\n            }\n\n            datasets[i] = labels.slice(0);\n          }\n        } else {\n          datasets[i] = [];\n        }\n      }\n\n      if (labels.length) {\n        // Sort labels **after** data have been converted\n        labels = arrayUnique(labels).sort(sorter);\n        min = Math.min(min, labels[0]);\n        max = Math.max(max, labels[labels.length - 1]);\n      }\n\n      if (timestamps.length) {\n        timestamps = arrayUnique(timestamps).sort(sorter);\n        min = Math.min(min, timestamps[0]);\n        max = Math.max(max, timestamps[timestamps.length - 1]);\n      }\n\n      min = parse(me, timeOpts.min) || min;\n      max = parse(me, timeOpts.max) || max; // In case there is no valid min/max, set limits based on unit time option\n\n      min = min === MAX_INTEGER ? +adapter.startOf(Date.now(), unit) : min;\n      max = max === MIN_INTEGER ? +adapter.endOf(Date.now(), unit) + 1 : max; // Make sure that max is strictly higher than min (required by the lookup table)\n\n      me.min = Math.min(min, max);\n      me.max = Math.max(min + 1, max); // PRIVATE\n\n      me._horizontal = me.isHorizontal();\n      me._table = [];\n      me._timestamps = {\n        data: timestamps,\n        datasets: datasets,\n        labels: labels\n      };\n    },\n    buildTicks: function buildTicks() {\n      var me = this;\n      var min = me.min;\n      var max = me.max;\n      var options = me.options;\n      var timeOpts = options.time;\n      var timestamps = [];\n      var ticks = [];\n      var i, ilen, timestamp;\n\n      switch (options.ticks.source) {\n        case 'data':\n          timestamps = me._timestamps.data;\n          break;\n\n        case 'labels':\n          timestamps = me._timestamps.labels;\n          break;\n\n        case 'auto':\n        default:\n          timestamps = generate(me, min, max, me.getLabelCapacity(min), options);\n      }\n\n      if (options.bounds === 'ticks' && timestamps.length) {\n        min = timestamps[0];\n        max = timestamps[timestamps.length - 1];\n      } // Enforce limits with user min/max options\n\n\n      min = parse(me, timeOpts.min) || min;\n      max = parse(me, timeOpts.max) || max; // Remove ticks outside the min/max range\n\n      for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n        timestamp = timestamps[i];\n\n        if (timestamp >= min && timestamp <= max) {\n          ticks.push(timestamp);\n        }\n      }\n\n      me.min = min;\n      me.max = max; // PRIVATE\n\n      me._unit = timeOpts.unit || determineUnitForFormatting(me, ticks, timeOpts.minUnit, me.min, me.max);\n      me._majorUnit = determineMajorUnit(me._unit);\n      me._table = buildLookupTable(me._timestamps.data, min, max, options.distribution);\n      me._offsets = computeOffsets(me._table, ticks, min, max, options);\n\n      if (options.ticks.reverse) {\n        ticks.reverse();\n      }\n\n      return ticksFromTimestamps(me, ticks, me._majorUnit);\n    },\n    getLabelForIndex: function getLabelForIndex(index, datasetIndex) {\n      var me = this;\n      var adapter = me._adapter;\n      var data = me.chart.data;\n      var timeOpts = me.options.time;\n      var label = data.labels && index < data.labels.length ? data.labels[index] : '';\n      var value = data.datasets[datasetIndex].data[index];\n\n      if (helpers$1.isObject(value)) {\n        label = me.getRightValue(value);\n      }\n\n      if (timeOpts.tooltipFormat) {\n        return adapter.format(toTimestamp(me, label), timeOpts.tooltipFormat);\n      }\n\n      if (typeof label === 'string') {\n        return label;\n      }\n\n      return adapter.format(toTimestamp(me, label), timeOpts.displayFormats.datetime);\n    },\n\n    /**\n     * Function to format an individual tick mark\n     * @private\n     */\n    tickFormatFunction: function tickFormatFunction(time, index, ticks, format) {\n      var me = this;\n      var adapter = me._adapter;\n      var options = me.options;\n      var formats = options.time.displayFormats;\n      var minorFormat = formats[me._unit];\n      var majorUnit = me._majorUnit;\n      var majorFormat = formats[majorUnit];\n      var majorTime = +adapter.startOf(time, majorUnit);\n      var majorTickOpts = options.ticks.major;\n      var major = majorTickOpts.enabled && majorUnit && majorFormat && time === majorTime;\n      var label = adapter.format(time, format ? format : major ? majorFormat : minorFormat);\n      var tickOpts = major ? majorTickOpts : options.ticks.minor;\n      var formatter = valueOrDefault$c(tickOpts.callback, tickOpts.userCallback);\n      return formatter ? formatter(label, index, ticks) : label;\n    },\n    convertTicksToLabels: function convertTicksToLabels(ticks) {\n      var labels = [];\n      var i, ilen;\n\n      for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n        labels.push(this.tickFormatFunction(ticks[i].value, i, ticks));\n      }\n\n      return labels;\n    },\n\n    /**\n     * @private\n     */\n    getPixelForOffset: function getPixelForOffset(time) {\n      var me = this;\n      var isReverse = me.options.ticks.reverse;\n      var size = me._horizontal ? me.width : me.height;\n      var start = me._horizontal ? isReverse ? me.right : me.left : isReverse ? me.bottom : me.top;\n      var pos = interpolate$1(me._table, 'time', time, 'pos');\n      var offset = size * (me._offsets.start + pos) / (me._offsets.start + 1 + me._offsets.end);\n      return isReverse ? start - offset : start + offset;\n    },\n    getPixelForValue: function getPixelForValue(value, index, datasetIndex) {\n      var me = this;\n      var time = null;\n\n      if (index !== undefined && datasetIndex !== undefined) {\n        time = me._timestamps.datasets[datasetIndex][index];\n      }\n\n      if (time === null) {\n        time = parse(me, value);\n      }\n\n      if (time !== null) {\n        return me.getPixelForOffset(time);\n      }\n    },\n    getPixelForTick: function getPixelForTick(index) {\n      var ticks = this.getTicks();\n      return index >= 0 && index < ticks.length ? this.getPixelForOffset(ticks[index].value) : null;\n    },\n    getValueForPixel: function getValueForPixel(pixel) {\n      var me = this;\n      var size = me._horizontal ? me.width : me.height;\n      var start = me._horizontal ? me.left : me.top;\n      var pos = (size ? (pixel - start) / size : 0) * (me._offsets.start + 1 + me._offsets.start) - me._offsets.end;\n      var time = interpolate$1(me._table, 'pos', pos, 'time'); // DEPRECATION, we should return time directly\n\n      return me._adapter._create(time);\n    },\n\n    /**\n     * Crude approximation of what the label width might be\n     * @private\n     */\n    getLabelWidth: function getLabelWidth(label) {\n      var me = this;\n      var ticksOpts = me.options.ticks;\n      var tickLabelWidth = me.ctx.measureText(label).width;\n      var angle = helpers$1.toRadians(ticksOpts.maxRotation);\n      var cosRotation = Math.cos(angle);\n      var sinRotation = Math.sin(angle);\n      var tickFontSize = valueOrDefault$c(ticksOpts.fontSize, core_defaults.global.defaultFontSize);\n      return tickLabelWidth * cosRotation + tickFontSize * sinRotation;\n    },\n\n    /**\n     * @private\n     */\n    getLabelCapacity: function getLabelCapacity(exampleTime) {\n      var me = this; // pick the longest format (milliseconds) for guestimation\n\n      var format = me.options.time.displayFormats.millisecond;\n      var exampleLabel = me.tickFormatFunction(exampleTime, 0, [], format);\n      var tickLabelWidth = me.getLabelWidth(exampleLabel);\n      var innerWidth = me.isHorizontal() ? me.width : me.height;\n      var capacity = Math.floor(innerWidth / tickLabelWidth);\n      return capacity > 0 ? capacity : 1;\n    }\n  }); // INTERNAL: static default options, registered in src/index.js\n\n  var _defaults$4 = defaultConfig$4;\n  scale_time._defaults = _defaults$4;\n  var scales = {\n    category: scale_category,\n    linear: scale_linear,\n    logarithmic: scale_logarithmic,\n    radialLinear: scale_radialLinear,\n    time: scale_time\n  };\n  var FORMATS = {\n    datetime: 'MMM D, YYYY, h:mm:ss a',\n    millisecond: 'h:mm:ss.SSS a',\n    second: 'h:mm:ss a',\n    minute: 'h:mm a',\n    hour: 'hA',\n    day: 'MMM D',\n    week: 'll',\n    month: 'MMM YYYY',\n    quarter: '[Q]Q - YYYY',\n    year: 'YYYY'\n  };\n\n  core_adapters._date.override(typeof moment === 'function' ? {\n    _id: 'moment',\n    // DEBUG ONLY\n    formats: function formats() {\n      return FORMATS;\n    },\n    parse: function parse(value, format) {\n      if (typeof value === 'string' && typeof format === 'string') {\n        value = moment(value, format);\n      } else if (!(value instanceof moment)) {\n        value = moment(value);\n      }\n\n      return value.isValid() ? value.valueOf() : null;\n    },\n    format: function format(time, _format) {\n      return moment(time).format(_format);\n    },\n    add: function add(time, amount, unit) {\n      return moment(time).add(amount, unit).valueOf();\n    },\n    diff: function diff(max, min, unit) {\n      return moment.duration(moment(max).diff(moment(min))).as(unit);\n    },\n    startOf: function startOf(time, unit, weekday) {\n      time = moment(time);\n\n      if (unit === 'isoWeek') {\n        return time.isoWeekday(weekday).valueOf();\n      }\n\n      return time.startOf(unit).valueOf();\n    },\n    endOf: function endOf(time, unit) {\n      return moment(time).endOf(unit).valueOf();\n    },\n    // DEPRECATIONS\n\n    /**\n     * Provided for backward compatibility with scale.getValueForPixel().\n     * @deprecated since version 2.8.0\n     * @todo remove at version 3\n     * @private\n     */\n    _create: function _create(time) {\n      return moment(time);\n    }\n  } : {});\n\n  core_defaults._set('global', {\n    plugins: {\n      filler: {\n        propagate: true\n      }\n    }\n  });\n\n  var mappers = {\n    dataset: function dataset(source) {\n      var index = source.fill;\n      var chart = source.chart;\n      var meta = chart.getDatasetMeta(index);\n      var visible = meta && chart.isDatasetVisible(index);\n      var points = visible && meta.dataset._children || [];\n      var length = points.length || 0;\n      return !length ? null : function (point, i) {\n        return i < length && points[i]._view || null;\n      };\n    },\n    boundary: function boundary(source) {\n      var boundary = source.boundary;\n      var x = boundary ? boundary.x : null;\n      var y = boundary ? boundary.y : null;\n      return function (point) {\n        return {\n          x: x === null ? point.x : x,\n          y: y === null ? point.y : y\n        };\n      };\n    }\n  }; // @todo if (fill[0] === '#')\n\n  function decodeFill(el, index, count) {\n    var model = el._model || {};\n    var fill = model.fill;\n    var target;\n\n    if (fill === undefined) {\n      fill = !!model.backgroundColor;\n    }\n\n    if (fill === false || fill === null) {\n      return false;\n    }\n\n    if (fill === true) {\n      return 'origin';\n    }\n\n    target = parseFloat(fill, 10);\n\n    if (isFinite(target) && Math.floor(target) === target) {\n      if (fill[0] === '-' || fill[0] === '+') {\n        target = index + target;\n      }\n\n      if (target === index || target < 0 || target >= count) {\n        return false;\n      }\n\n      return target;\n    }\n\n    switch (fill) {\n      // compatibility\n      case 'bottom':\n        return 'start';\n\n      case 'top':\n        return 'end';\n\n      case 'zero':\n        return 'origin';\n      // supported boundaries\n\n      case 'origin':\n      case 'start':\n      case 'end':\n        return fill;\n      // invalid fill values\n\n      default:\n        return false;\n    }\n  }\n\n  function computeBoundary(source) {\n    var model = source.el._model || {};\n    var scale = source.el._scale || {};\n    var fill = source.fill;\n    var target = null;\n    var horizontal;\n\n    if (isFinite(fill)) {\n      return null;\n    } // Backward compatibility: until v3, we still need to support boundary values set on\n    // the model (scaleTop, scaleBottom and scaleZero) because some external plugins and\n    // controllers might still use it (e.g. the Smith chart).\n\n\n    if (fill === 'start') {\n      target = model.scaleBottom === undefined ? scale.bottom : model.scaleBottom;\n    } else if (fill === 'end') {\n      target = model.scaleTop === undefined ? scale.top : model.scaleTop;\n    } else if (model.scaleZero !== undefined) {\n      target = model.scaleZero;\n    } else if (scale.getBasePosition) {\n      target = scale.getBasePosition();\n    } else if (scale.getBasePixel) {\n      target = scale.getBasePixel();\n    }\n\n    if (target !== undefined && target !== null) {\n      if (target.x !== undefined && target.y !== undefined) {\n        return target;\n      }\n\n      if (helpers$1.isFinite(target)) {\n        horizontal = scale.isHorizontal();\n        return {\n          x: horizontal ? target : null,\n          y: horizontal ? null : target\n        };\n      }\n    }\n\n    return null;\n  }\n\n  function resolveTarget(sources, index, propagate) {\n    var source = sources[index];\n    var fill = source.fill;\n    var visited = [index];\n    var target;\n\n    if (!propagate) {\n      return fill;\n    }\n\n    while (fill !== false && visited.indexOf(fill) === -1) {\n      if (!isFinite(fill)) {\n        return fill;\n      }\n\n      target = sources[fill];\n\n      if (!target) {\n        return false;\n      }\n\n      if (target.visible) {\n        return fill;\n      }\n\n      visited.push(fill);\n      fill = target.fill;\n    }\n\n    return false;\n  }\n\n  function createMapper(source) {\n    var fill = source.fill;\n    var type = 'dataset';\n\n    if (fill === false) {\n      return null;\n    }\n\n    if (!isFinite(fill)) {\n      type = 'boundary';\n    }\n\n    return mappers[type](source);\n  }\n\n  function isDrawable(point) {\n    return point && !point.skip;\n  }\n\n  function drawArea(ctx, curve0, curve1, len0, len1) {\n    var i;\n\n    if (!len0 || !len1) {\n      return;\n    } // building first area curve (normal)\n\n\n    ctx.moveTo(curve0[0].x, curve0[0].y);\n\n    for (i = 1; i < len0; ++i) {\n      helpers$1.canvas.lineTo(ctx, curve0[i - 1], curve0[i]);\n    } // joining the two area curves\n\n\n    ctx.lineTo(curve1[len1 - 1].x, curve1[len1 - 1].y); // building opposite area curve (reverse)\n\n    for (i = len1 - 1; i > 0; --i) {\n      helpers$1.canvas.lineTo(ctx, curve1[i], curve1[i - 1], true);\n    }\n  }\n\n  function doFill(ctx, points, mapper, view, color, loop) {\n    var count = points.length;\n    var span = view.spanGaps;\n    var curve0 = [];\n    var curve1 = [];\n    var len0 = 0;\n    var len1 = 0;\n    var i, ilen, index, p0, p1, d0, d1;\n    ctx.beginPath();\n\n    for (i = 0, ilen = count + !!loop; i < ilen; ++i) {\n      index = i % count;\n      p0 = points[index]._view;\n      p1 = mapper(p0, index, view);\n      d0 = isDrawable(p0);\n      d1 = isDrawable(p1);\n\n      if (d0 && d1) {\n        len0 = curve0.push(p0);\n        len1 = curve1.push(p1);\n      } else if (len0 && len1) {\n        if (!span) {\n          drawArea(ctx, curve0, curve1, len0, len1);\n          len0 = len1 = 0;\n          curve0 = [];\n          curve1 = [];\n        } else {\n          if (d0) {\n            curve0.push(p0);\n          }\n\n          if (d1) {\n            curve1.push(p1);\n          }\n        }\n      }\n    }\n\n    drawArea(ctx, curve0, curve1, len0, len1);\n    ctx.closePath();\n    ctx.fillStyle = color;\n    ctx.fill();\n  }\n\n  var plugin_filler = {\n    id: 'filler',\n    afterDatasetsUpdate: function afterDatasetsUpdate(chart, options) {\n      var count = (chart.data.datasets || []).length;\n      var propagate = options.propagate;\n      var sources = [];\n      var meta, i, el, source;\n\n      for (i = 0; i < count; ++i) {\n        meta = chart.getDatasetMeta(i);\n        el = meta.dataset;\n        source = null;\n\n        if (el && el._model && el instanceof elements.Line) {\n          source = {\n            visible: chart.isDatasetVisible(i),\n            fill: decodeFill(el, i, count),\n            chart: chart,\n            el: el\n          };\n        }\n\n        meta.$filler = source;\n        sources.push(source);\n      }\n\n      for (i = 0; i < count; ++i) {\n        source = sources[i];\n\n        if (!source) {\n          continue;\n        }\n\n        source.fill = resolveTarget(sources, i, propagate);\n        source.boundary = computeBoundary(source);\n        source.mapper = createMapper(source);\n      }\n    },\n    beforeDatasetDraw: function beforeDatasetDraw(chart, args) {\n      var meta = args.meta.$filler;\n\n      if (!meta) {\n        return;\n      }\n\n      var ctx = chart.ctx;\n      var el = meta.el;\n      var view = el._view;\n      var points = el._children || [];\n      var mapper = meta.mapper;\n      var color = view.backgroundColor || core_defaults.global.defaultColor;\n\n      if (mapper && color && points.length) {\n        helpers$1.canvas.clipArea(ctx, chart.chartArea);\n        doFill(ctx, points, mapper, view, color, el._loop);\n        helpers$1.canvas.unclipArea(ctx);\n      }\n    }\n  };\n  var noop$1 = helpers$1.noop;\n  var valueOrDefault$d = helpers$1.valueOrDefault;\n\n  core_defaults._set('global', {\n    legend: {\n      display: true,\n      position: 'top',\n      fullWidth: true,\n      reverse: false,\n      weight: 1000,\n      // a callback that will handle\n      onClick: function onClick(e, legendItem) {\n        var index = legendItem.datasetIndex;\n        var ci = this.chart;\n        var meta = ci.getDatasetMeta(index); // See controller.isDatasetVisible comment\n\n        meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null; // We hid a dataset ... rerender the chart\n\n        ci.update();\n      },\n      onHover: null,\n      onLeave: null,\n      labels: {\n        boxWidth: 40,\n        padding: 10,\n        // Generates labels shown in the legend\n        // Valid properties to return:\n        // text : text to display\n        // fillStyle : fill of coloured box\n        // strokeStyle: stroke of coloured box\n        // hidden : if this legend item refers to a hidden item\n        // lineCap : cap style for line\n        // lineDash\n        // lineDashOffset :\n        // lineJoin :\n        // lineWidth :\n        generateLabels: function generateLabels(chart) {\n          var data = chart.data;\n          return helpers$1.isArray(data.datasets) ? data.datasets.map(function (dataset, i) {\n            return {\n              text: dataset.label,\n              fillStyle: !helpers$1.isArray(dataset.backgroundColor) ? dataset.backgroundColor : dataset.backgroundColor[0],\n              hidden: !chart.isDatasetVisible(i),\n              lineCap: dataset.borderCapStyle,\n              lineDash: dataset.borderDash,\n              lineDashOffset: dataset.borderDashOffset,\n              lineJoin: dataset.borderJoinStyle,\n              lineWidth: dataset.borderWidth,\n              strokeStyle: dataset.borderColor,\n              pointStyle: dataset.pointStyle,\n              // Below is extra data used for toggling the datasets\n              datasetIndex: i\n            };\n          }, this) : [];\n        }\n      }\n    },\n    legendCallback: function legendCallback(chart) {\n      var text = [];\n      text.push('<ul class=\"' + chart.id + '-legend\">');\n\n      for (var i = 0; i < chart.data.datasets.length; i++) {\n        text.push('<li><span style=\"background-color:' + chart.data.datasets[i].backgroundColor + '\"></span>');\n\n        if (chart.data.datasets[i].label) {\n          text.push(chart.data.datasets[i].label);\n        }\n\n        text.push('</li>');\n      }\n\n      text.push('</ul>');\n      return text.join('');\n    }\n  });\n  /**\n   * Helper function to get the box width based on the usePointStyle option\n   * @param {object} labelopts - the label options on the legend\n   * @param {number} fontSize - the label font size\n   * @return {number} width of the color box area\n   */\n\n\n  function getBoxWidth(labelOpts, fontSize) {\n    return labelOpts.usePointStyle && labelOpts.boxWidth > fontSize ? fontSize : labelOpts.boxWidth;\n  }\n  /**\n   * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!\n   */\n\n\n  var Legend = core_element.extend({\n    initialize: function initialize(config) {\n      helpers$1.extend(this, config); // Contains hit boxes for each dataset (in dataset order)\n\n      this.legendHitBoxes = [];\n      /**\n      \t * @private\n      \t */\n\n      this._hoveredItem = null; // Are we in doughnut mode which has a different data type\n\n      this.doughnutMode = false;\n    },\n    // These methods are ordered by lifecycle. Utilities then follow.\n    // Any function defined here is inherited by all legend types.\n    // Any function can be extended by the legend type\n    beforeUpdate: noop$1,\n    update: function update(maxWidth, maxHeight, margins) {\n      var me = this; // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\n      me.beforeUpdate(); // Absorb the master measurements\n\n      me.maxWidth = maxWidth;\n      me.maxHeight = maxHeight;\n      me.margins = margins; // Dimensions\n\n      me.beforeSetDimensions();\n      me.setDimensions();\n      me.afterSetDimensions(); // Labels\n\n      me.beforeBuildLabels();\n      me.buildLabels();\n      me.afterBuildLabels(); // Fit\n\n      me.beforeFit();\n      me.fit();\n      me.afterFit(); //\n\n      me.afterUpdate();\n      return me.minSize;\n    },\n    afterUpdate: noop$1,\n    //\n    beforeSetDimensions: noop$1,\n    setDimensions: function setDimensions() {\n      var me = this; // Set the unconstrained dimension before label rotation\n\n      if (me.isHorizontal()) {\n        // Reset position before calculating rotation\n        me.width = me.maxWidth;\n        me.left = 0;\n        me.right = me.width;\n      } else {\n        me.height = me.maxHeight; // Reset position before calculating rotation\n\n        me.top = 0;\n        me.bottom = me.height;\n      } // Reset padding\n\n\n      me.paddingLeft = 0;\n      me.paddingTop = 0;\n      me.paddingRight = 0;\n      me.paddingBottom = 0; // Reset minSize\n\n      me.minSize = {\n        width: 0,\n        height: 0\n      };\n    },\n    afterSetDimensions: noop$1,\n    //\n    beforeBuildLabels: noop$1,\n    buildLabels: function buildLabels() {\n      var me = this;\n      var labelOpts = me.options.labels || {};\n      var legendItems = helpers$1.callback(labelOpts.generateLabels, [me.chart], me) || [];\n\n      if (labelOpts.filter) {\n        legendItems = legendItems.filter(function (item) {\n          return labelOpts.filter(item, me.chart.data);\n        });\n      }\n\n      if (me.options.reverse) {\n        legendItems.reverse();\n      }\n\n      me.legendItems = legendItems;\n    },\n    afterBuildLabels: noop$1,\n    //\n    beforeFit: noop$1,\n    fit: function fit() {\n      var me = this;\n      var opts = me.options;\n      var labelOpts = opts.labels;\n      var display = opts.display;\n      var ctx = me.ctx;\n\n      var labelFont = helpers$1.options._parseFont(labelOpts);\n\n      var fontSize = labelFont.size; // Reset hit boxes\n\n      var hitboxes = me.legendHitBoxes = [];\n      var minSize = me.minSize;\n      var isHorizontal = me.isHorizontal();\n\n      if (isHorizontal) {\n        minSize.width = me.maxWidth; // fill all the width\n\n        minSize.height = display ? 10 : 0;\n      } else {\n        minSize.width = display ? 10 : 0;\n        minSize.height = me.maxHeight; // fill all the height\n      } // Increase sizes here\n\n\n      if (display) {\n        ctx.font = labelFont.string;\n\n        if (isHorizontal) {\n          // Labels\n          // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n          var lineWidths = me.lineWidths = [0];\n          var totalHeight = 0;\n          ctx.textAlign = 'left';\n          ctx.textBaseline = 'top';\n          helpers$1.each(me.legendItems, function (legendItem, i) {\n            var boxWidth = getBoxWidth(labelOpts, fontSize);\n            var width = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n\n            if (i === 0 || lineWidths[lineWidths.length - 1] + width + labelOpts.padding > minSize.width) {\n              totalHeight += fontSize + labelOpts.padding;\n              lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = labelOpts.padding;\n            } // Store the hitbox width and height here. Final position will be updated in `draw`\n\n\n            hitboxes[i] = {\n              left: 0,\n              top: 0,\n              width: width,\n              height: fontSize\n            };\n            lineWidths[lineWidths.length - 1] += width + labelOpts.padding;\n          });\n          minSize.height += totalHeight;\n        } else {\n          var vPadding = labelOpts.padding;\n          var columnWidths = me.columnWidths = [];\n          var totalWidth = labelOpts.padding;\n          var currentColWidth = 0;\n          var currentColHeight = 0;\n          var itemHeight = fontSize + vPadding;\n          helpers$1.each(me.legendItems, function (legendItem, i) {\n            var boxWidth = getBoxWidth(labelOpts, fontSize);\n            var itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width; // If too tall, go to new column\n\n            if (i > 0 && currentColHeight + itemHeight > minSize.height - vPadding) {\n              totalWidth += currentColWidth + labelOpts.padding;\n              columnWidths.push(currentColWidth); // previous column width\n\n              currentColWidth = 0;\n              currentColHeight = 0;\n            } // Get max width\n\n\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight; // Store the hitbox width and height here. Final position will be updated in `draw`\n\n            hitboxes[i] = {\n              left: 0,\n              top: 0,\n              width: itemWidth,\n              height: fontSize\n            };\n          });\n          totalWidth += currentColWidth;\n          columnWidths.push(currentColWidth);\n          minSize.width += totalWidth;\n        }\n      }\n\n      me.width = minSize.width;\n      me.height = minSize.height;\n    },\n    afterFit: noop$1,\n    // Shared Methods\n    isHorizontal: function isHorizontal() {\n      return this.options.position === 'top' || this.options.position === 'bottom';\n    },\n    // Actually draw the legend on the canvas\n    draw: function draw() {\n      var me = this;\n      var opts = me.options;\n      var labelOpts = opts.labels;\n      var globalDefaults = core_defaults.global;\n      var defaultColor = globalDefaults.defaultColor;\n      var lineDefault = globalDefaults.elements.line;\n      var legendWidth = me.width;\n      var lineWidths = me.lineWidths;\n\n      if (opts.display) {\n        var ctx = me.ctx;\n        var fontColor = valueOrDefault$d(labelOpts.fontColor, globalDefaults.defaultFontColor);\n\n        var labelFont = helpers$1.options._parseFont(labelOpts);\n\n        var fontSize = labelFont.size;\n        var cursor; // Canvas setup\n\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.strokeStyle = fontColor; // for strikethrough effect\n\n        ctx.fillStyle = fontColor; // render in correct colour\n\n        ctx.font = labelFont.string;\n        var boxWidth = getBoxWidth(labelOpts, fontSize);\n        var hitboxes = me.legendHitBoxes; // current position\n\n        var drawLegendBox = function drawLegendBox(x, y, legendItem) {\n          if (isNaN(boxWidth) || boxWidth <= 0) {\n            return;\n          } // Set the ctx for the box\n\n\n          ctx.save();\n          var lineWidth = valueOrDefault$d(legendItem.lineWidth, lineDefault.borderWidth);\n          ctx.fillStyle = valueOrDefault$d(legendItem.fillStyle, defaultColor);\n          ctx.lineCap = valueOrDefault$d(legendItem.lineCap, lineDefault.borderCapStyle);\n          ctx.lineDashOffset = valueOrDefault$d(legendItem.lineDashOffset, lineDefault.borderDashOffset);\n          ctx.lineJoin = valueOrDefault$d(legendItem.lineJoin, lineDefault.borderJoinStyle);\n          ctx.lineWidth = lineWidth;\n          ctx.strokeStyle = valueOrDefault$d(legendItem.strokeStyle, defaultColor);\n\n          if (ctx.setLineDash) {\n            // IE 9 and 10 do not support line dash\n            ctx.setLineDash(valueOrDefault$d(legendItem.lineDash, lineDefault.borderDash));\n          }\n\n          if (opts.labels && opts.labels.usePointStyle) {\n            // Recalculate x and y for drawPoint() because its expecting\n            // x and y to be center of figure (instead of top left)\n            var radius = boxWidth * Math.SQRT2 / 2;\n            var centerX = x + boxWidth / 2;\n            var centerY = y + fontSize / 2; // Draw pointStyle as legend symbol\n\n            helpers$1.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY);\n          } else {\n            // Draw box as legend symbol\n            if (lineWidth !== 0) {\n              ctx.strokeRect(x, y, boxWidth, fontSize);\n            }\n\n            ctx.fillRect(x, y, boxWidth, fontSize);\n          }\n\n          ctx.restore();\n        };\n\n        var fillText = function fillText(x, y, legendItem, textWidth) {\n          var halfFontSize = fontSize / 2;\n          var xLeft = boxWidth + halfFontSize + x;\n          var yMiddle = y + halfFontSize;\n          ctx.fillText(legendItem.text, xLeft, yMiddle);\n\n          if (legendItem.hidden) {\n            // Strikethrough the text if hidden\n            ctx.beginPath();\n            ctx.lineWidth = 2;\n            ctx.moveTo(xLeft, yMiddle);\n            ctx.lineTo(xLeft + textWidth, yMiddle);\n            ctx.stroke();\n          }\n        }; // Horizontal\n\n\n        var isHorizontal = me.isHorizontal();\n\n        if (isHorizontal) {\n          cursor = {\n            x: me.left + (legendWidth - lineWidths[0]) / 2 + labelOpts.padding,\n            y: me.top + labelOpts.padding,\n            line: 0\n          };\n        } else {\n          cursor = {\n            x: me.left + labelOpts.padding,\n            y: me.top + labelOpts.padding,\n            line: 0\n          };\n        }\n\n        var itemHeight = fontSize + labelOpts.padding;\n        helpers$1.each(me.legendItems, function (legendItem, i) {\n          var textWidth = ctx.measureText(legendItem.text).width;\n          var width = boxWidth + fontSize / 2 + textWidth;\n          var x = cursor.x;\n          var y = cursor.y; // Use (me.left + me.minSize.width) and (me.top + me.minSize.height)\n          // instead of me.right and me.bottom because me.width and me.height\n          // may have been changed since me.minSize was calculated\n\n          if (isHorizontal) {\n            if (i > 0 && x + width + labelOpts.padding > me.left + me.minSize.width) {\n              y = cursor.y += itemHeight;\n              cursor.line++;\n              x = cursor.x = me.left + (legendWidth - lineWidths[cursor.line]) / 2 + labelOpts.padding;\n            }\n          } else if (i > 0 && y + itemHeight > me.top + me.minSize.height) {\n            x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;\n            y = cursor.y = me.top + labelOpts.padding;\n            cursor.line++;\n          }\n\n          drawLegendBox(x, y, legendItem);\n          hitboxes[i].left = x;\n          hitboxes[i].top = y; // Fill the actual label\n\n          fillText(x, y, legendItem, textWidth);\n\n          if (isHorizontal) {\n            cursor.x += width + labelOpts.padding;\n          } else {\n            cursor.y += itemHeight;\n          }\n        });\n      }\n    },\n\n    /**\n     * @private\n     */\n    _getLegendItemAt: function _getLegendItemAt(x, y) {\n      var me = this;\n      var i, hitBox, lh;\n\n      if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {\n        // See if we are touching one of the dataset boxes\n        lh = me.legendHitBoxes;\n\n        for (i = 0; i < lh.length; ++i) {\n          hitBox = lh[i];\n\n          if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {\n            // Touching an element\n            return me.legendItems[i];\n          }\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Handle an event\n     * @private\n     * @param {IEvent} event - The event to handle\n     */\n    handleEvent: function handleEvent(e) {\n      var me = this;\n      var opts = me.options;\n      var type = e.type === 'mouseup' ? 'click' : e.type;\n      var hoveredItem;\n\n      if (type === 'mousemove') {\n        if (!opts.onHover && !opts.onLeave) {\n          return;\n        }\n      } else if (type === 'click') {\n        if (!opts.onClick) {\n          return;\n        }\n      } else {\n        return;\n      } // Chart event already has relative position in it\n\n\n      hoveredItem = me._getLegendItemAt(e.x, e.y);\n\n      if (type === 'click') {\n        if (hoveredItem && opts.onClick) {\n          // use e.native for backwards compatibility\n          opts.onClick.call(me, e.native, hoveredItem);\n        }\n      } else {\n        if (opts.onLeave && hoveredItem !== me._hoveredItem) {\n          if (me._hoveredItem) {\n            opts.onLeave.call(me, e.native, me._hoveredItem);\n          }\n\n          me._hoveredItem = hoveredItem;\n        }\n\n        if (opts.onHover && hoveredItem) {\n          // use e.native for backwards compatibility\n          opts.onHover.call(me, e.native, hoveredItem);\n        }\n      }\n    }\n  });\n\n  function createNewLegendAndAttach(chart, legendOpts) {\n    var legend = new Legend({\n      ctx: chart.ctx,\n      options: legendOpts,\n      chart: chart\n    });\n    core_layouts.configure(chart, legend, legendOpts);\n    core_layouts.addBox(chart, legend);\n    chart.legend = legend;\n  }\n\n  var plugin_legend = {\n    id: 'legend',\n\n    /**\n     * Backward compatibility: since 2.1.5, the legend is registered as a plugin, making\n     * Chart.Legend obsolete. To avoid a breaking change, we export the Legend as part of\n     * the plugin, which one will be re-exposed in the chart.js file.\n     * https://github.com/chartjs/Chart.js/pull/2640\n     * @private\n     */\n    _element: Legend,\n    beforeInit: function beforeInit(chart) {\n      var legendOpts = chart.options.legend;\n\n      if (legendOpts) {\n        createNewLegendAndAttach(chart, legendOpts);\n      }\n    },\n    beforeUpdate: function beforeUpdate(chart) {\n      var legendOpts = chart.options.legend;\n      var legend = chart.legend;\n\n      if (legendOpts) {\n        helpers$1.mergeIf(legendOpts, core_defaults.global.legend);\n\n        if (legend) {\n          core_layouts.configure(chart, legend, legendOpts);\n          legend.options = legendOpts;\n        } else {\n          createNewLegendAndAttach(chart, legendOpts);\n        }\n      } else if (legend) {\n        core_layouts.removeBox(chart, legend);\n        delete chart.legend;\n      }\n    },\n    afterEvent: function afterEvent(chart, e) {\n      var legend = chart.legend;\n\n      if (legend) {\n        legend.handleEvent(e);\n      }\n    }\n  };\n  var noop$2 = helpers$1.noop;\n\n  core_defaults._set('global', {\n    title: {\n      display: false,\n      fontStyle: 'bold',\n      fullWidth: true,\n      padding: 10,\n      position: 'top',\n      text: '',\n      weight: 2000 // by default greater than legend (1000) to be above\n\n    }\n  });\n  /**\n   * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!\n   */\n\n\n  var Title = core_element.extend({\n    initialize: function initialize(config) {\n      var me = this;\n      helpers$1.extend(me, config); // Contains hit boxes for each dataset (in dataset order)\n\n      me.legendHitBoxes = [];\n    },\n    // These methods are ordered by lifecycle. Utilities then follow.\n    beforeUpdate: noop$2,\n    update: function update(maxWidth, maxHeight, margins) {\n      var me = this; // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\n      me.beforeUpdate(); // Absorb the master measurements\n\n      me.maxWidth = maxWidth;\n      me.maxHeight = maxHeight;\n      me.margins = margins; // Dimensions\n\n      me.beforeSetDimensions();\n      me.setDimensions();\n      me.afterSetDimensions(); // Labels\n\n      me.beforeBuildLabels();\n      me.buildLabels();\n      me.afterBuildLabels(); // Fit\n\n      me.beforeFit();\n      me.fit();\n      me.afterFit(); //\n\n      me.afterUpdate();\n      return me.minSize;\n    },\n    afterUpdate: noop$2,\n    //\n    beforeSetDimensions: noop$2,\n    setDimensions: function setDimensions() {\n      var me = this; // Set the unconstrained dimension before label rotation\n\n      if (me.isHorizontal()) {\n        // Reset position before calculating rotation\n        me.width = me.maxWidth;\n        me.left = 0;\n        me.right = me.width;\n      } else {\n        me.height = me.maxHeight; // Reset position before calculating rotation\n\n        me.top = 0;\n        me.bottom = me.height;\n      } // Reset padding\n\n\n      me.paddingLeft = 0;\n      me.paddingTop = 0;\n      me.paddingRight = 0;\n      me.paddingBottom = 0; // Reset minSize\n\n      me.minSize = {\n        width: 0,\n        height: 0\n      };\n    },\n    afterSetDimensions: noop$2,\n    //\n    beforeBuildLabels: noop$2,\n    buildLabels: noop$2,\n    afterBuildLabels: noop$2,\n    //\n    beforeFit: noop$2,\n    fit: function fit() {\n      var me = this;\n      var opts = me.options;\n      var display = opts.display;\n      var minSize = me.minSize;\n      var lineCount = helpers$1.isArray(opts.text) ? opts.text.length : 1;\n\n      var fontOpts = helpers$1.options._parseFont(opts);\n\n      var textSize = display ? lineCount * fontOpts.lineHeight + opts.padding * 2 : 0;\n\n      if (me.isHorizontal()) {\n        minSize.width = me.maxWidth; // fill all the width\n\n        minSize.height = textSize;\n      } else {\n        minSize.width = textSize;\n        minSize.height = me.maxHeight; // fill all the height\n      }\n\n      me.width = minSize.width;\n      me.height = minSize.height;\n    },\n    afterFit: noop$2,\n    // Shared Methods\n    isHorizontal: function isHorizontal() {\n      var pos = this.options.position;\n      return pos === 'top' || pos === 'bottom';\n    },\n    // Actually draw the title block on the canvas\n    draw: function draw() {\n      var me = this;\n      var ctx = me.ctx;\n      var opts = me.options;\n\n      if (opts.display) {\n        var fontOpts = helpers$1.options._parseFont(opts);\n\n        var lineHeight = fontOpts.lineHeight;\n        var offset = lineHeight / 2 + opts.padding;\n        var rotation = 0;\n        var top = me.top;\n        var left = me.left;\n        var bottom = me.bottom;\n        var right = me.right;\n        var maxWidth, titleX, titleY;\n        ctx.fillStyle = helpers$1.valueOrDefault(opts.fontColor, core_defaults.global.defaultFontColor); // render in correct colour\n\n        ctx.font = fontOpts.string; // Horizontal\n\n        if (me.isHorizontal()) {\n          titleX = left + (right - left) / 2; // midpoint of the width\n\n          titleY = top + offset;\n          maxWidth = right - left;\n        } else {\n          titleX = opts.position === 'left' ? left + offset : right - offset;\n          titleY = top + (bottom - top) / 2;\n          maxWidth = bottom - top;\n          rotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);\n        }\n\n        ctx.save();\n        ctx.translate(titleX, titleY);\n        ctx.rotate(rotation);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        var text = opts.text;\n\n        if (helpers$1.isArray(text)) {\n          var y = 0;\n\n          for (var i = 0; i < text.length; ++i) {\n            ctx.fillText(text[i], 0, y, maxWidth);\n            y += lineHeight;\n          }\n        } else {\n          ctx.fillText(text, 0, 0, maxWidth);\n        }\n\n        ctx.restore();\n      }\n    }\n  });\n\n  function createNewTitleBlockAndAttach(chart, titleOpts) {\n    var title = new Title({\n      ctx: chart.ctx,\n      options: titleOpts,\n      chart: chart\n    });\n    core_layouts.configure(chart, title, titleOpts);\n    core_layouts.addBox(chart, title);\n    chart.titleBlock = title;\n  }\n\n  var plugin_title = {\n    id: 'title',\n\n    /**\n     * Backward compatibility: since 2.1.5, the title is registered as a plugin, making\n     * Chart.Title obsolete. To avoid a breaking change, we export the Title as part of\n     * the plugin, which one will be re-exposed in the chart.js file.\n     * https://github.com/chartjs/Chart.js/pull/2640\n     * @private\n     */\n    _element: Title,\n    beforeInit: function beforeInit(chart) {\n      var titleOpts = chart.options.title;\n\n      if (titleOpts) {\n        createNewTitleBlockAndAttach(chart, titleOpts);\n      }\n    },\n    beforeUpdate: function beforeUpdate(chart) {\n      var titleOpts = chart.options.title;\n      var titleBlock = chart.titleBlock;\n\n      if (titleOpts) {\n        helpers$1.mergeIf(titleOpts, core_defaults.global.title);\n\n        if (titleBlock) {\n          core_layouts.configure(chart, titleBlock, titleOpts);\n          titleBlock.options = titleOpts;\n        } else {\n          createNewTitleBlockAndAttach(chart, titleOpts);\n        }\n      } else if (titleBlock) {\n        core_layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n      }\n    }\n  };\n  var plugins = {};\n  var filler = plugin_filler;\n  var legend = plugin_legend;\n  var title = plugin_title;\n  plugins.filler = filler;\n  plugins.legend = legend;\n  plugins.title = title;\n  /**\n   * @namespace Chart\n   */\n\n  core_controller.helpers = helpers$1; // @todo dispatch these helpers into appropriated helpers/helpers.* file and write unit tests!\n\n  core_helpers(core_controller);\n  core_controller._adapters = core_adapters;\n  core_controller.Animation = core_animation;\n  core_controller.animationService = core_animations;\n  core_controller.controllers = controllers;\n  core_controller.DatasetController = core_datasetController;\n  core_controller.defaults = core_defaults;\n  core_controller.Element = core_element;\n  core_controller.elements = elements;\n  core_controller.Interaction = core_interaction;\n  core_controller.layouts = core_layouts;\n  core_controller.platform = platform;\n  core_controller.plugins = core_plugins;\n  core_controller.Scale = core_scale;\n  core_controller.scaleService = core_scaleService;\n  core_controller.Ticks = core_ticks;\n  core_controller.Tooltip = core_tooltip; // Register built-in scales\n\n  core_controller.helpers.each(scales, function (scale, type) {\n    core_controller.scaleService.registerScaleType(type, scale, scale._defaults);\n  }); // Load to register built-in adapters (as side effects)\n  // Loading built-in plugins\n\n  for (var k in plugins) {\n    if (plugins.hasOwnProperty(k)) {\n      core_controller.plugins.register(plugins[k]);\n    }\n  }\n\n  core_controller.platform.initialize();\n  var src = core_controller;\n\n  if (typeof window !== 'undefined') {\n    window.Chart = core_controller;\n  } // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, not available anymore\n   * @namespace Chart.Chart\n   * @deprecated since version 2.8.0\n   * @todo remove at version 3\n   * @private\n   */\n\n\n  core_controller.Chart = core_controller;\n  /**\n   * Provided for backward compatibility, not available anymore\n   * @namespace Chart.Legend\n   * @deprecated since version 2.1.5\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.Legend = plugins.legend._element;\n  /**\n   * Provided for backward compatibility, not available anymore\n   * @namespace Chart.Title\n   * @deprecated since version 2.1.5\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.Title = plugins.title._element;\n  /**\n   * Provided for backward compatibility, use Chart.plugins instead\n   * @namespace Chart.pluginService\n   * @deprecated since version 2.1.5\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.pluginService = core_controller.plugins;\n  /**\n   * Provided for backward compatibility, inheriting from Chart.PlugingBase has no\n   * effect, instead simply create/register plugins via plain JavaScript objects.\n   * @interface Chart.PluginBase\n   * @deprecated since version 2.5.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.PluginBase = core_controller.Element.extend({});\n  /**\n   * Provided for backward compatibility, use Chart.helpers.canvas instead.\n   * @namespace Chart.canvasHelpers\n   * @deprecated since version 2.6.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.canvasHelpers = core_controller.helpers.canvas;\n  /**\n   * Provided for backward compatibility, use Chart.layouts instead.\n   * @namespace Chart.layoutService\n   * @deprecated since version 2.7.3\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.layoutService = core_controller.layouts;\n  /**\n   * Provided for backward compatibility, not available anymore.\n   * @namespace Chart.LinearScaleBase\n   * @deprecated since version 2.8\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.LinearScaleBase = scale_linearbase;\n  /**\n   * Provided for backward compatibility, instead we should create a new Chart\n   * by setting the type in the config (`new Chart(id, {type: '{chart-type}'}`).\n   * @deprecated since version 2.8.0\n   * @todo remove at version 3\n   */\n\n  core_controller.helpers.each(['Bar', 'Bubble', 'Doughnut', 'Line', 'PolarArea', 'Radar', 'Scatter'], function (klass) {\n    core_controller[klass] = function (ctx, cfg) {\n      return new core_controller(ctx, core_controller.helpers.merge(cfg || {}, {\n        type: klass.charAt(0).toLowerCase() + klass.slice(1)\n      }));\n    };\n  });\n  return src;\n});","var baseAssignValue = require('./_baseAssignValue'),\n    createAggregator = require('./_createAggregator');\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The corresponding value of\n * each key is the last element responsible for generating the key. The\n * iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * var array = [\n *   { 'dir': 'left', 'code': 97 },\n *   { 'dir': 'right', 'code': 100 }\n * ];\n *\n * _.keyBy(array, function(o) {\n *   return String.fromCharCode(o.code);\n * });\n * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n *\n * _.keyBy(array, 'dir');\n * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n */\n\n\nvar keyBy = createAggregator(function (result, value, key) {\n  baseAssignValue(result, key, value);\n});\nmodule.exports = keyBy;","var arrayAggregator = require('./_arrayAggregator'),\n    baseAggregator = require('./_baseAggregator'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\n\n\nfunction createAggregator(setter, initializer) {\n  return function (collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nmodule.exports = createAggregator;","/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n\n  return accumulator;\n}\n\nmodule.exports = arrayAggregator;","var baseEach = require('./_baseEach');\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\n\n\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function (value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nmodule.exports = baseAggregator;","var baseForOwn = require('./_baseForOwn'),\n    createBaseEach = require('./_createBaseEach');\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\n\n\nvar baseEach = createBaseEach(baseForOwn);\nmodule.exports = baseEach;","var baseFor = require('./_baseFor'),\n    keys = require('./keys');\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\n\n\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\nmodule.exports = baseForOwn;","var createBaseFor = require('./_createBaseFor');\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\n\n\nvar baseFor = createBaseFor();\nmodule.exports = baseFor;","/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function (object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n\n    return object;\n  };\n}\n\nmodule.exports = createBaseFor;","var isArrayLike = require('./isArrayLike');\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\n\n\nfunction createBaseEach(eachFunc, fromRight) {\n  return function (collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while (fromRight ? index-- : ++index < length) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n\n    return collection;\n  };\n}\n\nmodule.exports = createBaseEach;"],"sourceRoot":""}