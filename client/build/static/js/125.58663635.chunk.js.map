{"version":3,"sources":["pages/uikit/General.js","components/PageTitle.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","reactstrap__WEBPACK_IMPORTED_MODULE_1__","reactstrap__WEBPACK_IMPORTED_MODULE_2__","reactstrap__WEBPACK_IMPORTED_MODULE_3__","reactstrap__WEBPACK_IMPORTED_MODULE_4__","reactstrap__WEBPACK_IMPORTED_MODULE_5__","reactstrap__WEBPACK_IMPORTED_MODULE_6__","reactstrap__WEBPACK_IMPORTED_MODULE_7__","reactstrap__WEBPACK_IMPORTED_MODULE_8__","reactstrap__WEBPACK_IMPORTED_MODULE_9__","reactstrap__WEBPACK_IMPORTED_MODULE_10__","reactstrap__WEBPACK_IMPORTED_MODULE_11__","reactstrap__WEBPACK_IMPORTED_MODULE_12__","reactstrap__WEBPACK_IMPORTED_MODULE_13__","reactstrap__WEBPACK_IMPORTED_MODULE_14__","reactstrap__WEBPACK_IMPORTED_MODULE_15__","reactstrap__WEBPACK_IMPORTED_MODULE_16__","reactstrap__WEBPACK_IMPORTED_MODULE_17__","_components_PageTitle__WEBPACK_IMPORTED_MODULE_18__","colors","name","color","Badges","a","createElement","className","map","index","key","PillBadges","pill","SingleButtonDropdown","Fragment","caret","header","disabled","divider","ColorVariantButtonDropdown","direction","VariantButtonDropdowns","size","right","DefaultPagination","aria-label","first","href","previous","active","next","last","RoundedPagination","Popovers","placement","text","trigger","popover","i","type","id","target","Tooltips","tooltip","DefaultProgressbars","value","multi","bar","striped","animated","ProgressbarsSizes","General","breadCrumbItems","label","path","title","md","react_router_dom__WEBPACK_IMPORTED_MODULE_1__","PageTitle","props","to","item"],"mappings":"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","file":"static/js/125.58663635.chunk.js","sourcesContent":["// @flow\r\nimport React from 'react';\r\nimport {\r\n    Row,\r\n    Col,\r\n    Card,\r\n    CardBody,\r\n    Badge,\r\n    Button,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    UncontrolledButtonDropdown,\r\n    Pagination,\r\n    PaginationItem,\r\n    PaginationLink,\r\n    UncontrolledPopover,\r\n    PopoverBody,\r\n    UncontrolledTooltip,\r\n    Progress,\r\n} from 'reactstrap';\r\n\r\nimport PageTitle from '../../components/PageTitle';\r\n\r\nconst colors = [\r\n    {\r\n        name: 'Primary',\r\n        color: 'primary',\r\n    },\r\n    {\r\n        name: 'Secondary',\r\n        color: 'secondary',\r\n    },\r\n    {\r\n        name: 'Success',\r\n        color: 'success',\r\n    },\r\n    {\r\n        name: 'Danger',\r\n        color: 'danger',\r\n    },\r\n    {\r\n        name: 'Warning',\r\n        color: 'warning',\r\n    },\r\n    {\r\n        name: 'Info',\r\n        color: 'info',\r\n    },\r\n    {\r\n        name: 'Dark',\r\n        color: 'dark',\r\n    },\r\n    {\r\n        name: 'Light',\r\n        color: 'light',\r\n    },\r\n];\r\n\r\nconst Badges = () => {\r\n    return (\r\n        <Card>\r\n            <CardBody>\r\n                <h4 className=\"header-title\">Badges</h4>\r\n                <p className=\"text-muted font-14 mb-3\">\r\n                    Badges scale to match the size of the immediate parent element by using relative font sizing and{' '}\r\n                    <code>em</code> units.\r\n                </p>\r\n\r\n                {colors.map((color, index) => {\r\n                    return (\r\n                        <Badge color={color.color} className=\"mr-1\" key={index}>\r\n                            {color.name}\r\n                        </Badge>\r\n                    );\r\n                })}\r\n\r\n                <h6 className=\"mt-4\">Lighten Badges</h6>\r\n                <p className=\"text-muted font-14 mb-3\">\r\n                    Use the <code>*-lighten</code> as value to color attribute to make badges lighten.\r\n                </p>\r\n\r\n                {colors.map((color, index) => {\r\n                    return (\r\n                        <Badge color={color.color + '-lighten'} className=\"mr-1\" key={index}>\r\n                            {color.name}\r\n                        </Badge>\r\n                    );\r\n                })}\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst PillBadges = () => {\r\n    return (\r\n        <Card>\r\n            <CardBody>\r\n                <h4 className=\"header-title\">Pill Badges</h4>\r\n                <p className=\"text-muted font-14 mb-2\">\r\n                    Use the <code>pill</code> modifier attribute to make badges more rounded.\r\n                </p>\r\n\r\n                {colors.map((color, index) => {\r\n                    return (\r\n                        <Badge color={color.color} pill className=\"mr-1\" key={index}>\r\n                            {color.name}\r\n                        </Badge>\r\n                    );\r\n                })}\r\n\r\n                <h6 className=\"mt-4\">Lighten Badges with Pill</h6>\r\n                <p className=\"text-muted font-14 mb-2\">\r\n                    Use the <code>*-lighten</code> as value to color attribute to make badges lighten and{' '}\r\n                    <code>pill</code> modifier attribute to make badges more rounded.\r\n                </p>\r\n\r\n                {colors.map((color, index) => {\r\n                    return (\r\n                        <Badge color={color.color + '-lighten'} pill className=\"mr-1\" key={index}>\r\n                            {color.name}\r\n                        </Badge>\r\n                    );\r\n                })}\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst SingleButtonDropdown = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <p className=\"mb-1 font-weight-bold\">Single button dropdowns</p>\r\n\r\n            {/* simple */}\r\n            <UncontrolledButtonDropdown>\r\n                <DropdownToggle color=\"light\" caret>\r\n                    Dropdown\r\n                </DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem header>Header</DropdownItem>\r\n                    <DropdownItem disabled>Action</DropdownItem>\r\n                    <DropdownItem>Another Action</DropdownItem>\r\n                    <DropdownItem divider />\r\n                    <DropdownItem>Another Action</DropdownItem>\r\n                </DropdownMenu>\r\n            </UncontrolledButtonDropdown>\r\n\r\n            {/* animated */}\r\n            <UncontrolledButtonDropdown className=\"ml-5\">\r\n                <DropdownToggle color=\"light\" caret>\r\n                    Animated Dropdown\r\n                </DropdownToggle>\r\n                <DropdownMenu className=\"dropdown-menu-animated\">\r\n                    <DropdownItem header>Header</DropdownItem>\r\n                    <DropdownItem disabled>Action</DropdownItem>\r\n                    <DropdownItem>Another Action</DropdownItem>\r\n                    <DropdownItem divider />\r\n                    <DropdownItem>Another Action</DropdownItem>\r\n                </DropdownMenu>\r\n            </UncontrolledButtonDropdown>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst ColorVariantButtonDropdown = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <p className=\"mb-1 mt-3 font-weight-bold\">Variant</p>\r\n            <p className=\"text-muted font-14 mb-3\">The best part is you can do this with any button variant, too:</p>\r\n\r\n            {colors.map((color, index) => {\r\n                return (\r\n                    <UncontrolledButtonDropdown key={index} className=\"mr-1\">\r\n                        <DropdownToggle caret color={color.color}>\r\n                            {color.name}\r\n                        </DropdownToggle>\r\n                        <DropdownMenu>\r\n                            <DropdownItem header>Header</DropdownItem>\r\n                            <DropdownItem disabled>Action</DropdownItem>\r\n                            <DropdownItem>Another Action</DropdownItem>\r\n                            <DropdownItem divider />\r\n                            <DropdownItem>Another Action</DropdownItem>\r\n                        </DropdownMenu>\r\n                    </UncontrolledButtonDropdown>\r\n                );\r\n            })}\r\n\r\n            <p className=\"mb-1 mt-4 font-weight-bold\">Split button dropdowns</p>\r\n            <p className=\"text-muted font-14 mb-3\"></p>\r\n\r\n            {colors.map((color, index) => {\r\n                return (\r\n                    <UncontrolledButtonDropdown direction=\"down\" key={index} className=\"mr-1 mb-1\">\r\n                        <Button color={color.color}>{color.name}</Button>\r\n                        <DropdownToggle caret color={color.color}></DropdownToggle>\r\n                        <DropdownMenu>\r\n                            <DropdownItem header>Header</DropdownItem>\r\n                            <DropdownItem disabled>Action</DropdownItem>\r\n                            <DropdownItem>Another Action</DropdownItem>\r\n                            <DropdownItem divider />\r\n                            <DropdownItem>Another Action</DropdownItem>\r\n                        </DropdownMenu>\r\n                    </UncontrolledButtonDropdown>\r\n                );\r\n            })}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst VariantButtonDropdowns = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <p className=\"mb-1 font-weight-bold\">Sizing</p>\r\n            <p className=\"text-muted font-14\">\r\n                Button dropdowns work with buttons of all sizes, including default and split dropdown buttons.\r\n            </p>\r\n\r\n            <UncontrolledButtonDropdown size=\"lg\" className=\"mr-2\">\r\n                <DropdownToggle color=\"light\" caret>\r\n                    Large\r\n                </DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem>Another Action</DropdownItem>\r\n                    <DropdownItem>Another Action</DropdownItem>\r\n                </DropdownMenu>\r\n            </UncontrolledButtonDropdown>\r\n\r\n            <UncontrolledButtonDropdown size=\"sm\">\r\n                <DropdownToggle color=\"light\" caret>\r\n                    Small\r\n                </DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem>Another Action</DropdownItem>\r\n                    <DropdownItem>Another Action</DropdownItem>\r\n                </DropdownMenu>\r\n            </UncontrolledButtonDropdown>\r\n            {/* Drop variations */}\r\n            <p className=\"mb-1 mt-4 font-weight-bold\">Drop direction variations</p>\r\n            <UncontrolledButtonDropdown direction=\"left\">\r\n                <DropdownToggle caret>Drop left</DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem>Another Action</DropdownItem>\r\n                    <DropdownItem>Another Action</DropdownItem>\r\n                </DropdownMenu>\r\n            </UncontrolledButtonDropdown>\r\n            {'  '}\r\n\r\n            <UncontrolledButtonDropdown direction=\"up\">\r\n                <DropdownToggle caret>Dropup</DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem>Another Action</DropdownItem>\r\n                    <DropdownItem>Another Action</DropdownItem>\r\n                </DropdownMenu>\r\n            </UncontrolledButtonDropdown>\r\n            {'  '}\r\n\r\n            <UncontrolledButtonDropdown direction=\"right\">\r\n                <DropdownToggle caret>Drop right</DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem>Another Action</DropdownItem>\r\n                    <DropdownItem>Another Action</DropdownItem>\r\n                </DropdownMenu>\r\n            </UncontrolledButtonDropdown>\r\n\r\n            {/* Menu alignment */}\r\n            <p className=\"mb-1 font-weight-bold mt-4\">Menu alignment</p>\r\n            <p className=\"text-muted font-14\">\r\n                Add <code>right</code> attribute to a <code>DropdownMenu</code>&nbsp; to right align the dropdown menu.\r\n            </p>\r\n\r\n            <UncontrolledButtonDropdown direction=\"up\">\r\n                <DropdownToggle color=\"light\" caret>\r\n                    This dropdown's menu is right-aligned\r\n                </DropdownToggle>\r\n                <DropdownMenu right>\r\n                    <DropdownItem>Another Action</DropdownItem>\r\n                    <DropdownItem>Another Action</DropdownItem>\r\n                </DropdownMenu>\r\n            </UncontrolledButtonDropdown>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst DefaultPagination = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <p className=\"mb-1 font-weight-bold\">Default Pagination</p>\r\n            <p className=\"text-muted font-14\">Simple pagination inspired by Rdio, great for apps and search results.</p>\r\n\r\n            <Pagination aria-label=\"Page navigation example\">\r\n                <PaginationItem>\r\n                    <PaginationLink first href=\"#\" />\r\n                </PaginationItem>\r\n                <PaginationItem>\r\n                    <PaginationLink previous href=\"#\" />\r\n                </PaginationItem>\r\n                <PaginationItem>\r\n                    <PaginationLink href=\"#\">1</PaginationLink>\r\n                </PaginationItem>\r\n                <PaginationItem active>\r\n                    <PaginationLink href=\"#\">2</PaginationLink>\r\n                </PaginationItem>\r\n                <PaginationItem>\r\n                    <PaginationLink href=\"#\">3</PaginationLink>\r\n                </PaginationItem>\r\n                <PaginationItem>\r\n                    <PaginationLink next href=\"#\" />\r\n                </PaginationItem>\r\n                <PaginationItem>\r\n                    <PaginationLink last href=\"#\" />\r\n                </PaginationItem>\r\n            </Pagination>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst RoundedPagination = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <p className=\"mb-1 font-weight-bold\">Rounded Pagination</p>\r\n            <p className=\"text-muted font-14\">\r\n                Add <code> .pagination-rounded</code> for rounded pagination.\r\n            </p>\r\n\r\n            <Pagination aria-label=\"Page navigation example\" className=\"pagination-rounded\">\r\n                <PaginationItem>\r\n                    <PaginationLink first href=\"#\" />\r\n                </PaginationItem>\r\n                <PaginationItem>\r\n                    <PaginationLink previous href=\"#\" />\r\n                </PaginationItem>\r\n                <PaginationItem>\r\n                    <PaginationLink href=\"#\">1</PaginationLink>\r\n                </PaginationItem>\r\n                <PaginationItem active>\r\n                    <PaginationLink href=\"#\">2</PaginationLink>\r\n                </PaginationItem>\r\n                <PaginationItem>\r\n                    <PaginationLink href=\"#\">3</PaginationLink>\r\n                </PaginationItem>\r\n                <PaginationItem>\r\n                    <PaginationLink next href=\"#\" />\r\n                </PaginationItem>\r\n                <PaginationItem>\r\n                    <PaginationLink last href=\"#\" />\r\n                </PaginationItem>\r\n            </Pagination>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst Popovers = () => {\r\n    const placements = [\r\n        {\r\n            placement: 'top',\r\n            text: 'Top',\r\n            trigger: 'click',\r\n            color: 'primary',\r\n        },\r\n        {\r\n            placement: 'bottom',\r\n            text: 'Bottom',\r\n            trigger: 'click',\r\n            color: 'primary',\r\n        },\r\n        {\r\n            placement: 'left',\r\n            text: 'Left',\r\n            trigger: 'click',\r\n            color: 'primary',\r\n        },\r\n        {\r\n            placement: 'right',\r\n            text: 'Right',\r\n            trigger: 'click',\r\n            color: 'primary',\r\n        },\r\n        {\r\n            placement: 'right',\r\n            text: 'Dismissible',\r\n            trigger: 'focus',\r\n            color: 'success',\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <Card>\r\n            <CardBody>\r\n                <h4 className=\"header-title\">Popovers</h4>\r\n                <p className=\"text-muted  font-14 mb-3\">\r\n                    Add small overlays of content, like those on the iPad, to any element for housing secondary\r\n                    information.\r\n                </p>\r\n\r\n                <div className=\"button-list\">\r\n                    {placements.map((popover, i) => {\r\n                        return (\r\n                            <React.Fragment key={i}>\r\n                                <Button className=\"mr-1\" color={popover.color} type=\"button\" id={'btn-' + i}>\r\n                                    {popover.text}\r\n                                </Button>\r\n                                <UncontrolledPopover\r\n                                    placement={popover.placement}\r\n                                    id={i}\r\n                                    target={'btn-' + i}\r\n                                    trigger={popover.trigger}>\r\n                                    <PopoverBody>\r\n                                        Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare\r\n                                        sem lacinia quam venenatis vestibulum.\r\n                                    </PopoverBody>\r\n                                </UncontrolledPopover>\r\n                            </React.Fragment>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst Tooltips = () => {\r\n    const placements = [\r\n        {\r\n            placement: 'top',\r\n            text: 'Top',\r\n        },\r\n        {\r\n            placement: 'bottom',\r\n            text: 'Bottom',\r\n        },\r\n        {\r\n            placement: 'left',\r\n            text: 'Left',\r\n        },\r\n        {\r\n            placement: 'right',\r\n            text: 'Right',\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <Card>\r\n            <CardBody>\r\n                <h4 className=\"header-title\">Tooltips</h4>\r\n                <p className=\"text-muted  font-14 mb-3\">\r\n                    Four options are available: top, right, bottom, and left aligned.\r\n                </p>\r\n\r\n                <div className=\"button-list\">\r\n                    {placements.map((tooltip, i) => {\r\n                        return (\r\n                            <React.Fragment key={i}>\r\n                                <Button className=\"mr-1\" color=\"info\" type=\"button\" id={'tbtn-' + i}>\r\n                                    {tooltip.text}\r\n                                </Button>\r\n                                <UncontrolledTooltip\r\n                                    placement={tooltip.placement}\r\n                                    id={'tooltip-' + i}\r\n                                    target={'tbtn-' + i}>\r\n                                    Tooltip Content!\r\n                                </UncontrolledTooltip>\r\n                            </React.Fragment>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst DefaultProgressbars = () => {\r\n    return (\r\n        <Card>\r\n            <CardBody>\r\n                <h4 className=\"header-title\">Progress Example</h4>\r\n                <p className=\"text-muted font-14 mb-3\">\r\n                    Progress bars use some of the same button and alert classes for consistent styles.\r\n                </p>\r\n\r\n                <Progress value={2 * 5} className=\"mb-2\" />\r\n                <Progress color=\"success\" value=\"25\" className=\"mb-2\" />\r\n                <Progress color=\"info\" value={50} className=\"mb-2\" />\r\n                <Progress color=\"warning\" value={75} className=\"mb-2\" />\r\n                <Progress color=\"danger\" value=\"100\" className=\"mb-2\" />\r\n\r\n                <Progress multi className=\"mb-2\">\r\n                    <Progress bar value=\"15\" />\r\n                    <Progress bar color=\"success\" value=\"30\" />\r\n                    <Progress bar color=\"info\" value=\"25\" />\r\n                    <Progress bar color=\"warning\" value=\"20\" />\r\n                    <Progress bar color=\"danger\" value=\"5\" />\r\n                </Progress>\r\n\r\n                <Progress striped color=\"success\" value=\"25\" className=\"mb-2\" />\r\n                <Progress animated striped color=\"danger\" value=\"90\" className=\"mb-2\" />\r\n\r\n                <Progress value={75} className=\"mb-2\">\r\n                    You're almost there!\r\n                </Progress>\r\n                <Progress color=\"success\" value=\"100\" className=\"mb-2\">\r\n                    You did it!\r\n                </Progress>\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst ProgressbarsSizes = () => {\r\n    return (\r\n        <Card>\r\n            <CardBody>\r\n                <h4 className=\"header-title\">Progress Example</h4>\r\n                <p className=\"text-muted font-14 mb-3\">\r\n                    Progress bars use some of the same button and alert classes for consistent styles.\r\n                </p>\r\n\r\n                <Progress value={2 * 5} className=\"mb-2 progress-sm\" />\r\n                <Progress color=\"success\" value=\"25\" className=\"mb-2 progress-md\" />\r\n                <Progress color=\"info\" value={50} className=\"mb-2 progress-lg\" />\r\n                <Progress color=\"warning\" value={75} className=\"mb-2 progress-xl\" />\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst General = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <PageTitle\r\n                breadCrumbItems={[\r\n                    { label: 'UI', path: '/ui/general' },\r\n                    { label: 'General', path: '/ui/general', active: true },\r\n                ]}\r\n                title={'General'}\r\n            />\r\n\r\n            <Row>\r\n                <Col md={6}>\r\n                    {/* Badges */}\r\n                    <Badges />\r\n                </Col>\r\n                <Col md={6}>\r\n                    <PillBadges />\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row>\r\n                <Col md={12}>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <h4 className=\"header-title\">Dropdowns</h4>\r\n                            <p className=\"text-muted font-14 mb-3\">\r\n                                Toggle contextual overlays for displaying lists of links and more with the Bootstrap\r\n                                dropdown plugin.\r\n                            </p>\r\n\r\n                            <Row>\r\n                                <Col md={6}>\r\n                                    <SingleButtonDropdown />\r\n                                    <ColorVariantButtonDropdown />\r\n                                </Col>\r\n                                <Col md={6}>\r\n                                    <VariantButtonDropdowns />\r\n                                </Col>\r\n                            </Row>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row>\r\n                <Col md={12}>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <h4 className=\"header-title\">Pagination</h4>\r\n                            <p className=\"text-muted font-14 mb-3\">\r\n                                Provide pagination links for your site or app with the multi-page pagination component.\r\n                            </p>\r\n\r\n                            <Row>\r\n                                <Col md={6}>\r\n                                    <DefaultPagination />\r\n                                </Col>\r\n                                <Col md={6}>\r\n                                    <RoundedPagination />\r\n                                </Col>\r\n                            </Row>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n\r\n            {/* pophover and alerts */}\r\n            <Row>\r\n                <Col md={6}>\r\n                    <Popovers />\r\n                </Col>\r\n\r\n                {/* tooltip */}\r\n                <Col md={6}>\r\n                    <Tooltips />\r\n                </Col>\r\n            </Row>\r\n\r\n            {/* progressbar */}\r\n            <Row>\r\n                <Col md={6}>\r\n                    <DefaultProgressbars />\r\n                </Col>\r\n                <Col md={6}>\r\n                    <ProgressbarsSizes />\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default General;\r\n","// @flow\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Row, Col, Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\ntype PageTitleProps = {\r\n    breadCrumbItems: PropTypes.object,\r\n    title: string,\r\n};\r\n\r\n/**\r\n * PageTitle\r\n */\r\nconst PageTitle = (props: PageTitleProps) => {\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                <div className=\"page-title-box\">\r\n                    <div className=\"page-title-right\">\r\n                        <Breadcrumb>\r\n                            <BreadcrumbItem>\r\n                                <Link to=\"/\">Hyper</Link>\r\n                            </BreadcrumbItem>\r\n                            {props.breadCrumbItems.map((item, index) => {\r\n                                return item.active ? (\r\n                                    <BreadcrumbItem active key={index}>\r\n                                        {item.label}\r\n                                    </BreadcrumbItem>\r\n                                ) : (\r\n                                    <BreadcrumbItem key={index}>\r\n                                        <Link to={item.path}>{item.label}</Link>\r\n                                    </BreadcrumbItem>\r\n                                );\r\n                            })}\r\n                        </Breadcrumb>\r\n                    </div>\r\n                    <h4 className=\"page-title\">{props.title}</h4>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default PageTitle;\r\n"],"sourceRoot":""}