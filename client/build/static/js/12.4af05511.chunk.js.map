{"version":3,"sources":["../node_modules/react-chartjs-2/es/index.js","../node_modules/chart.js/dist/Chart.js","../node_modules/lodash/keyBy.js","../node_modules/lodash/_createAggregator.js","../node_modules/lodash/_arrayAggregator.js","../node_modules/lodash/_baseAggregator.js","../node_modules/lodash/_baseEach.js","../node_modules/lodash/_baseForOwn.js","../node_modules/lodash/_baseFor.js","../node_modules/lodash/_createBaseFor.js","../node_modules/lodash/_createBaseEach.js"],"names":["process","__webpack_require__","d","__webpack_exports__","Doughnut","Line","Bar","Radar","Polar","Bubble","defaults","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","chart_js__WEBPACK_IMPORTED_MODULE_2__","chart_js__WEBPACK_IMPORTED_MODULE_2___default","a","lodash_isEqual__WEBPACK_IMPORTED_MODULE_3__","lodash_isEqual__WEBPACK_IMPORTED_MODULE_3___default","lodash_keyBy__WEBPACK_IMPORTED_MODULE_4__","lodash_keyBy__WEBPACK_IMPORTED_MODULE_4___default","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_objectWithoutProperties","obj","keys","indexOf","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","NODE_ENV","PUBLIC_URL","ChartComponent","_React$Component","_temp","_this","this","_len","args","Array","_key","apply","concat","handleOnClick","event","chartInstance","_this$props","props","getDatasetAtEvent","getElementAtEvent","getElementsAtEvent","onElementsClick","ref","element","componentWillMount","undefined","componentDidMount","renderChart","componentDidUpdate","redraw","destroyChart","updateChart","shouldComponentUpdate","nextProps","_props","type","options","plugins","legend","height","width","nextData","transformDataProp","shadowDataProp","componentWillUnmount","data","memoizeDataProps","datasets","map","set","saveCurrentDatasets","checkDatasets","isDev","usingCustomKeyProvider","datasetKeyProvider","getLabelAsKey","multipleDatasets","shouldWarn","forEach","dataset","label","console","error","getCurrentDatasets","config","_this2","_this3","helpers","configMerge","currentDatasets","nextDatasets","currentDatasetsIndexed","next","current","splice","point","pid","otherProps","rest","update","_props2","node","defaultProps","values","destroy","render","_props3","id","createElement","onClick","Component","propTypes","oneOfType","object","func","isRequired","number","arrayOf","bool","propName","componentName","controllers","Error","display","position","_React$Component2","_this5","_ref","_React$Component3","Pie","_this7","_ref2","_React$Component4","_this9","_ref3","_React$Component5","_this11","_ref4","_React$Component6","HorizontalBar","_this13","_ref5","_React$Component7","_this15","_ref6","_React$Component8","_this17","_ref7","_React$Component9","_this19","_ref8","_React$Component10","Scatter","_this21","_ref9","module","exports","moment","conversions","rgb2hsl","rgb2hsv","rgb2hwb","rgb2cmyk","rgb2keyword","rgb2xyz","rgb2lab","rgb2lch","lab2lch","hsl2rgb","hsl2hsv","hsl","h","s","l","hsl2hwb","hsl2cmyk","hsl2keyword","hsv2rgb","hsv2hsl","hsv","sl","v","hsv2hwb","hsv2cmyk","hsv2keyword","hwb2rgb","hwb2hsl","hwb2hsv","hwb2cmyk","hwb2keyword","cmyk2rgb","cmyk2hsl","cmyk2hsv","cmyk2hwb","cmyk2keyword","keyword2rgb","keyword2hsl","keyword2hsv","keyword2hwb","keyword2cmyk","keyword2lab","keyword2xyz","xyz2rgb","xyz2lab","xyz2lch","lab2xyz","lab2rgb","lch2lab","lch2xyz","lch2rgb","rgb","r","g","b","min","Math","max","delta","w","k","reverseKeywords","JSON","stringify","pow","x","y","z","xyz","t1","t2","t3","val","hi","floor","f","p","q","t","hwb","wh","bl","ratio","cmyk","c","m","lab","y2","hr","atan2","PI","sqrt","lch","cos","sin","keyword","cssKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","convert","Converter","arg","slice","pair","exec","from","to","round","convs","routeSpace","space","getValues","setValues","vals","fspace","colorConvert","colorName","colorString","getRgba","getHsla","getRgb","string","rgba","getHsl","hsla","getHwb","getAlpha","hexString","hexDouble","rgbString","alpha","rgbaString","percentString","percentaString","hslString","hslaString","hwbString","reverseNames","match","hexAlpha","parseInt","parseFloat","scale","isNaN","num","str","toString","toUpperCase","name","Color","valid","lightness","whiteness","isValid","setSpace","rgbArray","hslArray","hsvArray","hwbArray","cmykArray","rgbaArray","hslaArray","setChannel","hue","saturation","saturationv","blackness","rgbNumber","luminosity","lum","chan","contrast","color2","lum1","lum2","level","contrastRatio","dark","light","negate","lighten","darken","saturate","desaturate","whiten","blacken","greyscale","clearer","opaquer","rotate","degrees","mix","mixinColor","weight","w1","w2","toJSON","clone","result","prop","spaces","maxes","charAt","capped","chans","sname","index","svalues","window","chartjsColor","noop","uid","isNullOrUndef","isArray","substr","isObject","isFinite","_isFinite","_x","Number","valueOrDefault","defaultValue","valueAtIndexOrDefault","callback","fn","thisArg","each","loopable","reverse","len","arrayEquals","a0","a1","ilen","v0","v1","klen","_merger","tval","sval","merge","_mergerIf","mergeIf","sources","merger","extend","setFn","inherits","extensions","me","ChartElement","Surrogate","__super__","helpers_core","callCallback","array","item","fromIndex","getValueOrDefault","getValueAtIndexOrDefault","effects","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","asin","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","helpers_easing","easingEffects","RAD_PER_DEG","DOUBLE_PI","HALF_PI","QUARTER_PI","TWO_THIRDS_PI","exports$1","clear","chart","ctx","clearRect","roundedRect","radius","left","top","right","bottom","moveTo","arc","closePath","rect","drawPoint","style","rotation","xOffset","yOffset","size","cornerRadius","rad","beginPath","lineTo","SQRT1_2","fill","stroke","drawImage","_isPointInArea","area","clipArea","save","clip","unclipArea","restore","previous","flip","stepped","steppedLine","midpoint","tension","bezierCurveTo","controlPointPreviousX","controlPointNextX","controlPointPreviousY","controlPointNextY","helpers_canvas","drawRoundedRectangle","_set","scope","defaultColor","defaultFontColor","defaultFontFamily","defaultFontSize","defaultFontStyle","defaultLineHeight","showLines","core_defaults","helpers_options","toLineHeight","matches","toPadding","_parseFont","globalDefaults","global","fontSize","font","family","fontFamily","lineHeight","fontStyle","toFontString","resolve","inputs","context","helpers$1","easing","canvas","Element","configuration","initialize","hidden","pivot","_view","_model","_start","transition","ease","model","start","view","actual","origin","c0","c1","interpolate","tooltipPosition","hasValue","isNumber","core_element","exports$2","currentStep","numSteps","onAnimationProgress","onAnimationComplete","core_animation","defineProperty","get","animation","duration","onProgress","onComplete","core_animations","animations","request","addAnimation","lazy","startTime","Date","now","animating","push","requestAnimationFrame","cancelAnimation","findIndex","requestAnimFrame","startDigest","advance","nextStep","arrayEvents","unlistenArrayEvents","listener","stub","_chartjs","listeners","DatasetController","datasetIndex","datasetElementType","dataElementType","linkScales","addElements","updateIndex","meta","getMeta","getDataset","xAxisID","scales","xAxes","yAxisID","yAxes","getDatasetMeta","getScaleForId","scaleID","_getValueScaleId","_getIndexScaleId","_getValueScale","_getIndexScale","reset","_data","createMetaDataset","_chart","_datasetIndex","createMetaData","_index","metaData","addElementAndReset","updateElement","buildOrUpdateElements","isExtensible","method","base","res","resyncElements","easingValue","elements","draw","removeHoverStyle","$previousStyle","setHoverStyle","custom","getHoverColor","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth","numMeta","numData","insertElements","count","onDataPush","onDataPop","pop","onDataShift","shift","onDataSplice","onDataUnshift","core_datasetController","borderAlign","element_arc","inLabelRange","mouseX","vm","hoverRadius","inRange","chartX","chartY","pointRelativePosition","getAngleFromPoint","angle","distance","startAngle","endAngle","betweenAngles","withinRadius","innerRadius","outerRadius","getCenterPoint","halfAngle","halfRadius","getArea","centreAngle","rangeFromCentre","angleMargin","sA","eA","pixelMargin","fillStyle","lineWidth","lineJoin","strokeStyle","valueOrDefault$1","line","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","capBezierPoints","element_line","currentVM","spanGaps","points","_children","globalOptionLineElements","lastDrawnIndex","_loop","lineCap","setLineDash","lineDashOffset","previousItem","skip","valueOrDefault$2","defaultColor$1","xRange","abs","hitRadius","pointStyle","element_point","mouseY","inXRange","inYRange","padding","chartArea","defaultColor$2","isVertical","getBarBounds","x1","x2","y1","half","swap","orig","v2","parseBorderWidth","maxW","maxH","edge","borderSkipped","horizontal","parseBorderSkipped","_inRange","skipX","skipY","bounds","rectangle","element_rectangle","rects","border","outer","inner","boundingRects","fillRect","Arc","Point","Rectangle","resolve$1","hover","mode","categoryPercentage","barPercentage","offset","gridLines","offsetGridLines","controller_bar","stack","bar","_ruler","getRuler","_resolveElementOptions","_xScale","_yScale","datasetLabel","labels","_updateElementGeometry","vscale","getBasePixel","isHorizontal","ruler","vpixels","calculateBarValuePixels","ipixels","calculateBarIndexPixels","head","center","_getStacks","last","stacked","stacks","isDatasetVisible","getStackCount","getStackIndex","stackCount","end","pixels","getPixelForValue","barThickness","prev","curr","ticks","getTicks","getPixelForTick","computeMinSampleSize","imeta","ivalue","getRightValue","minBarLength","controller","range","percent","chunk","computeFlexCategoryTraits","thickness","computeFitCategoryTraits","stackIndex","maxBarThickness","Infinity","dataIndex","valueOrDefault$3","resolve$2","tooltips","callbacks","title","dataPoint","xLabel","yLabel","controller_bubble","xScale","yScale","dsIndex","getPixelForDecimal","NaN","_options","resolve$3","valueOrDefault$4","animateRotate","animateScale","legendCallback","text","join","generateLabels","ds","arcOpts","bw","e","legendItem","cutoutPercentage","circumference","tooltipItem","dataLabel","controller_doughnut","getRingIndex","ringIndex","j","opts","availableWidth","availableHeight","minSize","arcs","chartWeight","_getRingWeight","contains0","contains90","contains180","contains270","cutout","getMaxBorderWidth","radiusLength","_getVisibleDatasetWeightTotal","offsetX","offsetY","total","calculateTotal","_getRingWeightOffset","animationOpts","centerX","centerY","calculateCircumference","hoverWidth","ringWeightOffset","dataSetIndex","axis","controller_horizontalBar","valueOrDefault$5","resolve$4","isPointInArea","lineEnabled","showLine","controller_line","lineTension","_scale","_resolveLineOptions","updateBezierControlPoints","lineModel","_resolvePointOptions","calculatePointY","ELEMENT_OPTIONS","elementOptions","dsMeta","sumPos","sumNeg","stackedRightValue","rightValue","controlPoints","capControlPoint","pt","filter","cubicInterpolationMode","splineCurveMonotone","splineCurve","nextItem","halfBorderWidth","resolve$5","angleLines","circular","pointLabels","beginAtZero","controller_polarArea","starts","_starts","angles","_angles","_updateRadius","countVisibleElements","_computeAngle","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getDistanceFromCenterForValue","resetRadius","doughnut","controller_pie","valueOrDefault$6","resolve$6","controller_radar","pointPosition","getPointPositionForValue","bubble","horizontalBar","polarArea","pie","radar","scatter","getRelativePosition","native","parseVisibleItems","handler","jlen","getIntersectItems","getNearestItems","intersect","distanceMetric","minDistance","POSITIVE_INFINITY","nearestItems","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","indexMode","items","core_interaction","modes","single","x-axis","nearest","intersectsItem","filterByPosition","where","sortByWeight","_tmpIndex_","sort","addSizeByPosition","boxes","box","layout","core_layouts","addBox","fullWidth","removeBox","layoutItem","configure","layoutOptions","leftPadding","rightPadding","topPadding","bottomPadding","leftBoxes","rightBoxes","topBoxes","bottomBoxes","chartAreaBoxes","maxPadding","verticalBoxes","horizontalBoxes","outerBoxes","chartWidth","chartHeight","chartAreaWidth","verticalBoxWidth","maxChartAreaWidth","maxChartAreaHeight","outerBoxSizes","minBoxSizes","getPadding","boxPadding","findMaxPadding","fitBox","minBoxSize","findNextWhere","scaleMargin","leftPaddingAddition","topPaddingAddition","newMaxChartAreaHeight","newMaxChartAreaWidth","placeBox","minBox","stylesheet","freeze","default","EXPANDO_KEY","CSS_SIZE_MONITOR","CSS_PREFIX","CSS_RENDER_MONITOR","CSS_RENDER_ANIMATION","ANIMATION_START_EVENTS","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","readUsedSize","property","getStyle","eventListenerOptions","supports","addEventListener","passive","addListener","removeListener","removeEventListener","createEvent","nativeEvent","createDiv","cls","el","document","className","addResizeListener","expando","resizer","expand","shrink","appendChild","_reset","scrollLeft","scrollTop","onScroll","bind","createResizer","ticking","throttled","container","maintainAspectRatio","parentNode","clientWidth","proxy","renderProxy","animationName","reflow","offsetParent","classList","add","watchForRender","insertBefore","firstChild","removeResizeListener","remove","unwatchForRender","removeChild","platform_dom$2","disableCSSInjection","_enabled","_ensureLoaded","_loaded","platform","css","_style","setAttribute","getElementsByTagName","createTextNode","injectCSS","acquireContext","getElementById","getContext","renderHeight","getAttribute","renderWidth","initial","displayWidth","aspectRatio","displayHeight","initCanvas","releaseContext","removeAttribute","proxies","pos","fromNativeEvent","addEvent","removeEvent","implementation","core_plugins","_plugins","_cacheId","register","plugin","unregister","idx","getAll","notify","hook","descriptor","params","descriptors","cache","$plugins","_invalidate","core_scaleService","constructors","registerScaleType","scaleConstructor","scaleDefaults","getScaleConstructor","getScaleDefaults","updateScaleDefaults","additions","addScalesToLayout","valueOrDefault$7","enabled","titleFontStyle","titleSpacing","titleMarginBottom","titleFontColor","titleAlign","bodySpacing","bodyFontColor","bodyAlign","footerFontStyle","footerSpacing","footerMarginTop","footerFontColor","footerAlign","yPadding","xPadding","caretPadding","caretSize","multiKeyBackground","displayColors","beforeTitle","tooltipItems","labelCount","afterTitle","beforeBody","beforeLabel","labelColor","activeElement","labelTextColor","afterLabel","afterBody","beforeFooter","footer","afterFooter","positioners","average","eventPosition","nearestElement","distanceBetweenPoints","tp","pushOrConcat","toPush","splitNewlines","String","split","createTooltipItem","indexScale","valueScale","getLabelForIndex","getBaseModel","tooltipOpts","xAlign","yAlign","_bodyFontFamily","bodyFontFamily","_bodyFontStyle","bodyFontStyle","_bodyAlign","bodyFontSize","_titleFontFamily","titleFontFamily","_titleFontStyle","titleFontSize","_titleAlign","_footerFontFamily","footerFontFamily","_footerFontStyle","footerFontSize","_footerAlign","opacity","legendColorBackground","getAlignedX","align","getBeforeAfterBodyLines","exports$3","_lastActive","getTitle","lines","getBeforeBody","getBody","bodyItems","bodyItem","before","after","getAfterBody","getFooter","changed","existingModel","active","_active","alignment","backgroundPoint","tooltipSize","caretX","caretY","labelColors","labelTextColors","_eventPosition","itemSort","body","dataPoints","tooltip","combinedBodyLength","reduce","titleLineCount","footerLineCount","widthPadding","maxLineWidth","measureText","fontString","getTooltipSize","lf","rf","olf","orf","yf","midX","midY","determineAlignment","paddingAndSize","radiusAndPadding","getBackgroundPoint","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","tmp","drawTitle","textAlign","textBaseline","fillText","drawBody","textColor","drawColorBoxes","xLinePadding","colorX","fillLineOfText","strokeRect","drawFooter","drawBackground","quadraticCurveTo","hasTooltipContent","globalAlpha","handleEvent","getElementsAtEventForMode","positioners_1","core_tooltip","valueOrDefault$8","mergeScaleConfig","slen","mergeConfig","positionIsHorizontal","events","onHover","animationDuration","responsive","responsiveAnimationDuration","Chart","construct","initConfig","_bufferedRender","instances","retinaScale","devicePixelRatio","bindEvents","resize","ensureScalesHaveIDs","buildOrUpdateScales","initToolTip","stop","silent","newWidth","getMaximumWidth","newHeight","getMaximumHeight","newSize","onResize","scalesOptions","scaleOptions","xAxisOptions","yAxisOptions","updated","dtype","dposition","isDefault","scaleType","scaleClass","mergeTicksOptions","hasUpdated","buildOrUpdateControllers","newControllers","destroyDatasetMeta","ControllerClass","resetElements","newOptions","updateConfig","updateLayout","updateDatasets","lastActive","_bufferedRequest","updateDataset","animationOptions","animationObject","easingFunction","stepDecimal","drawDatasets","_drawTooltip","drawDataset","getElementsAtXAxis","_meta","generateLegend","unbindEvents","toBase64Image","toDataURL","_chartInstance","_listeners","eventHandler","updateHoverStyle","bufferedRequest","hoverOptions","core_controller","abstract","DateAdapter","Controller","types","scaleMerge","formats","parse","format","diff","startOf","endOf","_create","override","members","core_adapters","_date","core_ticks","formatters","tickValue","logDelta","log10","tickString","maxTick","logTick","toExponential","numDecimal","toFixed","logarithmic","remain","valueOrDefault$9","labelsFromTicks","computeTextSize","tick","longestText","color","drawBorder","drawOnChartArea","drawTicks","tickMarkLength","zeroLineWidth","zeroLineColor","zeroLineBorderDash","zeroLineBorderDashOffset","scaleLabel","labelString","minRotation","maxRotation","mirror","autoSkip","autoSkipPadding","labelOffset","minor","major","core_scale","paddingLeft","paddingTop","paddingRight","paddingBottom","_ticks","beforeUpdate","maxWidth","maxHeight","margins","_maxLabelLines","longestLabelWidth","longestTextCache","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","beforeBuildTicks","buildTicks","afterBuildTicks","beforeTickToLabelConversion","convertTicksToLabels","afterTickToLabelConversion","beforeCalculateTickRotation","calculateTickRotation","afterCalculateTickRotation","beforeFit","fit","afterFit","afterUpdate","tickOpts","userCallback","tickFont","labelRotation","cosRotation","originalLabelWidth","labelWidth","tickWidth","angleRadians","toRadians","scaleLabelOpts","gridLineOpts","_isVisible","parseFont","isFullWidth","scaleLabelFont","scaleLabelPadding","deltaHeight","largestTextWidth","tallestLabelHeightInLines","numberOfLabelLines","lineSpace","tickPadding","sinRotation","labelHeight","firstLabelWidth","lastLabelWidth","offsetLeft","offsetRight","handleMargins","rawValue","getValueForPixel","innerWidth","pixel","finalVal","innerHeight","decimal","valueOffset","getBaseValue","_autoSkip","optionTicks","tickCount","skipRatio","maxTicks","maxTicksLimit","ticksLength","_tickSize","axisLength","PaddingBottom","rot","borderValue","tickStart","tickEnd","optionMajorTicks","isRotated","isMirrored","tickFontColor","fontColor","majorTickFontColor","majorTickFont","tl","scaleLabelFontColor","labelRotationRadians","itemsToDraw","axisWidth","alignPixel","_alignPixel","lineColor","tx1","ty1","tx2","ty2","labelX","labelY","textOffset","zeroLineIndex","lineValue","getPixelForGridLine","labelYOffset","labelXOffset","glWidth","glColor","glBorderDash","glBorderDashOffset","itemToDraw","translate","scaleLabelX","scaleLabelY","halfLineHeight","isLeft","firstLineWidth","lastLineWidth","scale_category","getLabels","xLabels","yLabels","minIndex","maxIndex","valueCategory","offsetAmt","valueWidth","widthOffset","valueHeight","heightOffset","horz","valueDimension","_defaults","scale_linearbase","handleTickRangeOptions","minSign","sign","maxSign","setMin","suggestedMin","setMax","suggestedMax","getTickLimit","stepSize","ceil","_computeTickLimit","handleDirectionalChanges","numericGeneratorOptions","precision","fixedStepSize","generationOptions","dataRange","factor","niceMin","niceMax","numSpaces","unit","maxNumSpaces","rmin","rmax","spacing","niceNum","_decimalPlaces","almostWhole","almostEquals","generateTicks","ticksAsNumbers","defaultConfig$1","scale_linear","IDMatches","hasStacks","valuesPerStack","positiveValues","negativeValues","relativePoints","valuesForType","minVal","maxVal","innerDimension","_defaults$1","valueOrDefault$a","defaultConfig$2","nonNegativeOrDefault","scale_logarithmic","minNotZero","exp","significand","tickVal","endExp","endSignificand","lastTick","generateTicks$1","tickValues","_getFirstTickValue","firstTickValue","_defaults$2","valueOrDefault$b","valueAtIndexOrDefault$1","resolve$7","defaultConfig$3","animate","showLabelBackdrop","backdropColor","backdropPaddingY","backdropPaddingX","getValueCount","getTickBackdropHeight","determineLimits","getTextAlignForAngle","adjustPointPositionForLabelHeight","textSize","numberOrZero","param","scale_radialLinear","drawingArea","NEGATIVE_INFINITY","plFont","furthestLimits","furthestAngles","_pointLabelSizes","valueCount","getPointPosition","getIndexAngle","toDegrees","hLimits","vLimits","setReductions","fitWithPointLabels","setCenterPoint","largestPossibleRadius","radiusReductionLeft","radiusReductionRight","radiusReductionTop","radiusReductionBottom","leftMovement","rightMovement","topMovement","bottomMovement","maxRight","maxLeft","maxTop","maxBottom","angleMultiplier","startAngleRadians","scalingFactor","distanceFromCenter","thisAngle","getBasePosition","angleLineOpts","pointLabelOpts","tickBackdropHeight","outerDistance","outerPosition","extra","pointLabelPosition","pointLabelFontColor","drawPointLabels","yCenterOffset","drawRadiusLine","_defaults$3","valueOrDefault$c","MIN_INTEGER","MIN_SAFE_INTEGER","MAX_INTEGER","MAX_SAFE_INTEGER","INTERVALS","millisecond","common","steps","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","arrayUnique","hash","out","interpolate$1","table","skey","tkey","mid","i0","i1","lo","lookup","span","toTimestamp","input","adapter","_adapter","time","parser","determineMajorUnit","generate","capacity","timeOpts","minUnit","interval","determineUnitForAutoTicks","unitStepSize","weekday","isoWeekday","majorTicksEnabled","first","milliseconds","determineStepSize","scale_time","adapters","date","warn","displayFormats","timestamp","timestamps","dataLabels","_horizontal","_table","_timestamps","getLabelCapacity","_unit","determineUnitForFormatting","_majorUnit","distribution","buildLookupTable","_offsets","computeOffsets","majorUnit","ticksFromTimestamps","tooltipFormat","datetime","tickFormatFunction","minorFormat","majorFormat","majorTime","majorTickOpts","formatter","getPixelForOffset","isReverse","getLabelWidth","ticksOpts","tickLabelWidth","tickFontSize","exampleTime","exampleLabel","_defaults$4","displayFormat","category","radialLinear","FORMATS","_id","valueOf","_format","amount","as","filler","propagate","mappers","visible","boundary","decodeFill","computeBoundary","scaleBottom","scaleTop","scaleZero","resolveTarget","visited","createMapper","isDrawable","drawArea","curve0","curve1","len0","len1","plugin_filler","afterDatasetsUpdate","$filler","mapper","beforeDatasetDraw","loop","p0","p1","d0","d1","doFill","noop$1","valueOrDefault$d","getBoxWidth","labelOpts","usePointStyle","boxWidth","ci","onLeave","lineDash","Legend","legendHitBoxes","_hoveredItem","doughnutMode","beforeBuildLabels","buildLabels","afterBuildLabels","legendItems","labelFont","hitboxes","lineWidths","totalHeight","vPadding","columnWidths","totalWidth","currentColWidth","currentColHeight","itemHeight","itemWidth","lineDefault","legendWidth","cursor","textWidth","SQRT2","drawLegendBox","halfFontSize","xLeft","yMiddle","_getLegendItemAt","hitBox","lh","hoveredItem","createNewLegendAndAttach","legendOpts","plugin_legend","_element","beforeInit","afterEvent","noop$2","Title","lineCount","fontOpts","titleX","titleY","createNewTitleBlockAndAttach","titleOpts","titleBlock","parseMaxStyle","styleValue","parentProperty","valueInPixels","isConstrainedValue","getConstraintDimension","domNode","maxStyle","percentageProperty","defaultView","_getParentNode","constrainedNode","getComputedStyle","constrainedContainer","hasCNode","hasCContainer","infinity","collection","filterCallback","filtered","arrayToSearch","startIndex","currentItem","findPreviousWhere","epsilon","rounded","exponent","log","LOG10E","powerOf10","isPowerOf10","radians","centrePoint","anglePoint","distanceFromXCenter","distanceFromYCenter","radialDistanceFromCenter","aliasPixel","pixelWidth","currentDevicePixelRatio","halfWidth","firstPoint","middlePoint","afterPoint","d01","d12","s01","s12","fa","fb","EPSILON","pointBefore","pointCurrent","pointAfter","alphaK","betaK","tauK","squaredMagnitude","pointsWithTangents","deltaK","mK","pointsLen","slopeDeltaX","fraction","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","setTimeout","evt","originalEvent","srcElement","boundingRect","getBoundingClientRect","touches","clientX","clientY","getConstraintWidth","getConstraintHeight","_calculatePadding","parentDimension","parent","host","cw","clientHeight","ch","currentStyle","getPropertyValue","forceRatio","pixelRatio","pixelSize","arrayOfThings","gc","garbageCollect","longest","thing","nestedThing","gcLen","numberOfLines","CanvasGradient","colorValue","CanvasPattern","core_helpers","_adapters","Animation","animationService","Interaction","layouts","Scale","scaleService","Ticks","Tooltip","src","pluginService","PluginBase","canvasHelpers","layoutService","LinearScaleBase","klass","cfg","toLowerCase","factory","baseAssignValue","keyBy","createAggregator","arrayAggregator","baseAggregator","baseIteratee","setter","initializer","iteratee","accumulator","baseEach","baseForOwn","createBaseEach","baseFor","createBaseFor","fromRight","keysFunc","iterable","isArrayLike","eachFunc"],"mappings":"4FAAA,SAAAA,GAAAC,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAAC,EAAAC,EAAA,sBAAAE,IAAAJ,EAAAC,EAAAC,EAAA,sBAAAG,IAAAL,EAAAC,EAAAC,EAAA,sBAAAI,IAAAN,EAAAC,EAAAC,EAAA,sBAAAK,IAAAP,EAAAC,EAAAC,EAAA,sBAAAM,IAAAR,EAAAC,EAAAC,EAAA,sBAAAO,IAAA,IAAAC,EAAAV,EAAA,GAAAW,EAAAX,EAAAY,EAAAF,GAAAG,EAAAb,EAAA,IAAAc,EAAAd,EAAAY,EAAAC,GAAAE,EAAAf,EAAA,KAAAgB,EAAAhB,EAAAY,EAAAG,GAAAf,EAAAC,EAAAC,EAAA,sBAAAc,EAAAC,IAAA,IAAAC,EAAAlB,EAAA,KAAAmB,EAAAnB,EAAAY,EAAAM,GAAAE,EAAApB,EAAA,KAAAqB,EAAArB,EAAAY,EAAAQ,GAAAE,EAAAC,OAAAC,QAAA,SAAAC,GACA,QAAAC,EAAA,EAAiBA,EAAAC,UAAAC,OAAsBF,IAAA,CACvC,IAAAG,EAAAF,UAAAD,GAEA,QAAAI,KAAAD,EACAN,OAAAQ,UAAAC,eAAAC,KAAAJ,EAAAC,KACAL,EAAAK,GAAAD,EAAAC,IAKA,OAAAL,GAGA,SAAAS,EAAAC,EAAAC,GACA,IAAAX,EAAA,GAEA,QAAAC,KAAAS,EACAC,EAAAC,QAAAX,IAAA,GACAH,OAAAQ,UAAAC,eAAAC,KAAAE,EAAAT,KACAD,EAAAC,GAAAS,EAAAT,IAGA,OAAAD,EAGA,SAAAa,EAAAC,EAAAC,GACA,KAAAD,aAAAC,GACA,UAAAC,UAAA,qCAIA,SAAAC,EAAAC,EAAAV,GACA,IAAAU,EACA,UAAAC,eAAA,6DAGA,OAAAX,GAAA,kBAAAA,GAAA,oBAAAA,EAAAU,EAAAV,EAGA,SAAAY,EAAAC,EAAAC,GACA,uBAAAA,GAAA,OAAAA,EACA,UAAAN,UAAA,kEAAAM,GAGAD,EAAAf,UAAAR,OAAAyB,OAAAD,KAAAhB,UAAA,CACAkB,YAAA,CACAC,MAAAJ,EACAK,YAAA,EACAC,UAAA,EACAC,cAAA,KAGAN,IAAAxB,OAAA+B,eAAA/B,OAAA+B,eAAAR,EAAAC,GAAAD,EAAAS,UAAAR,GAQA,IAAAS,EAAA,qBAAAzD,GAAiDwB,OAAA,CAAAiC,SAAA,aAAAC,WAAA,MAAe,aAEhEC,EAAA,SAAAC,GAGA,SAAAD,IACA,IAAAE,EAAAC,EAEAvB,EAAAwB,KAAAJ,GAEA,QAAAK,EAAApC,UAAAC,OAAAoC,EAAAC,MAAAF,GAAAG,EAAA,EAAmEA,EAAAH,EAAaG,IAChFF,EAAAE,GAAAvC,UAAAuC,GAGA,OAAAN,EAAAC,EAAAnB,EAAAoB,KAAAH,EAAA1B,KAAAkC,MAAAR,EAAA,CAAAG,MAAAM,OAAAJ,KAAAH,EAAAQ,cAAA,SAAAC,GACA,IAAA/B,EAAAsB,EAAAU,cACAC,EAAAX,EAAAY,MACAC,EAAAF,EAAAE,kBACAC,EAAAH,EAAAG,kBACAC,EAAAJ,EAAAI,mBACAC,EAAAL,EAAAK,gBACAH,KAAAnC,EAAAmC,kBAAAJ,MACAK,KAAApC,EAAAoC,kBAAAL,MACAM,KAAArC,EAAAqC,mBAAAN,MACAO,KAAAtC,EAAAqC,mBAAAN,OACKT,EAAAiB,IAAA,SAAAC,GACLlB,EAAAkB,WACKrC,EAAAmB,EAAAD,GA+NL,OAvPAf,EAAAa,EAAAC,GA2BAD,EAAA3B,UAAAiD,mBAAA,WACAlB,KAAAS,mBAAAU,GAGAvB,EAAA3B,UAAAmD,kBAAA,WACApB,KAAAqB,eAGAzB,EAAA3B,UAAAqD,mBAAA,WACA,GAAAtB,KAAAW,MAAAY,OAGA,OAFAvB,KAAAwB,oBACAxB,KAAAqB,cAIArB,KAAAyB,eAGA7B,EAAA3B,UAAAyD,sBAAA,SAAAC,GACA,IAAAC,EAAA5B,KAAAW,MAEAkB,GADAD,EAAAL,OACAK,EAAAC,MACAC,EAAAF,EAAAE,QACAC,EAAAH,EAAAG,QACAC,EAAAJ,EAAAI,OACAC,EAAAL,EAAAK,OACAC,EAAAN,EAAAM,MAEA,QAAAP,EAAAJ,OACA,SAGA,GAAAU,IAAAN,EAAAM,QAAAC,IAAAP,EAAAO,MACA,SAGA,GAAAL,IAAAF,EAAAE,KACA,SAGA,IAASxE,IAAO2E,EAAAL,EAAAK,QAChB,SAGA,IAAS3E,IAAOyE,EAAAH,EAAAG,SAChB,SAGA,IAAAK,EAAAnC,KAAAoC,kBAAAT,GAEA,OAAStE,IAAO2C,KAAAqC,eAAAF,KAIJ9E,IAAO0E,EAAAJ,EAAAI,UAGnBnC,EAAA3B,UAAAqE,qBAAA,WACAtC,KAAAwB,gBAGA5B,EAAA3B,UAAAmE,kBAAA,SAAAzB,GACA,IAAA4B,EAAA5B,EAAA4B,KAEA,yBAAAA,EAEAA,EADAvC,KAAAiB,SAGAsB,GAQA3C,EAAA3B,UAAAuE,iBAAA,WACA,GAAAxC,KAAAW,MAAA4B,KAAA,CAIA,IAAAA,EAAAvC,KAAAoC,kBAAApC,KAAAW,OAQA,OAPAX,KAAAqC,eAAA7E,EAAA,GAAqC+E,EAAA,CACrCE,SAAAF,EAAAE,UAAAF,EAAAE,SAAAC,IAAA,SAAAC,GACA,OAAAnF,EAAA,GAA0BmF,OAG1B3C,KAAA4C,sBAEAL,IAGA3C,EAAA3B,UAAA4E,cAAA,SAAAJ,GACA,IAAAK,EAAA,eAAApD,GAAA,SAAAA,EACAqD,EAAA/C,KAAAW,MAAAqC,qBAAApD,EAAAqD,cACAC,EAAAT,EAAA3E,OAAA,EAEA,GAAAgF,GAAAI,IAAAH,EAAA,CACA,IAAAI,GAAA,EACAV,EAAAW,QAAA,SAAAC,GACAA,EAAAC,QACAH,GAAA,KAIAA,GACAI,QAAAC,MAAA,sNAKA5D,EAAA3B,UAAAwF,mBAAA,WACA,OAAAzD,KAAAS,eAAAT,KAAAS,cAAAiD,OAAAnB,MAAAvC,KAAAS,cAAAiD,OAAAnB,KAAAE,UAAA,IAGA7C,EAAA3B,UAAA2E,oBAAA,WACA,IAAAe,EAAA3D,KAEAA,KAAAyC,SAAAzC,KAAAyC,UAAA,GACAzC,KAAAyD,qBACAL,QAAA,SAAAjH,GACAwH,EAAAlB,SAAAkB,EAAAhD,MAAAqC,mBAAA7G,SAIAyD,EAAA3B,UAAAwD,YAAA,WACA,IAAAmC,EAAA5D,KAEA8B,EAAA9B,KAAAW,MAAAmB,QACAS,EAAAvC,KAAAwC,iBAAAxC,KAAAW,OACA,GAAAX,KAAAS,cAAA,CAEAqB,IACA9B,KAAAS,cAAAqB,QAAmC5E,EAAAC,EAAK0G,QAAAC,YAAA9D,KAAAS,cAAAqB,YAKxC,IAAAiC,EAAA/D,KAAAyD,qBACAO,EAAAzB,EAAAE,UAAA,GACAzC,KAAA6C,cAAAkB,GACA,IAAAE,EAAiC1G,IAAKwG,EAAA/D,KAAAW,MAAAqC,oBAGtChD,KAAAS,cAAAiD,OAAAnB,KAAAE,SAAAuB,EAAAtB,IAAA,SAAAwB,GACA,IAAAC,EAAAF,EAAAL,EAAAjD,MAAAqC,mBAAAkB,IAEA,GAAAC,KAAAtC,OAAAqC,EAAArC,KAAA,CAEAsC,EAAA5B,KAAA6B,OAAAF,EAAA3B,KAAAzE,QACAoG,EAAA3B,KAAAa,QAAA,SAAAiB,EAAAC,GACAH,EAAA5B,KAAA+B,GAAAJ,EAAA3B,KAAA+B,KAGAJ,EAAA3B,KAAA,IACAgC,EAAAnG,EAAA8F,EAAA,UAKA,OAAA1G,EAAA,GAA0B2G,EAAAI,GAE1B,OAAAL,IAIA3B,EAAAE,SAAA,IACA+B,EAAApG,EAAAmE,EAAA,cAEAvC,KAAAS,cAAAiD,OAAAnB,KAAA/E,EAAA,GAAgDwC,KAAAS,cAAAiD,OAAAnB,KAAAiC,GAChDxE,KAAAS,cAAAgE,WAGA7E,EAAA3B,UAAAoD,YAAA,WACA,IAAAqD,EAAA1E,KAAAW,MACAmB,EAAA4C,EAAA5C,QACAE,EAAA0C,EAAA1C,OACAH,EAAA6C,EAAA7C,KACAE,EAAA2C,EAAA3C,QACA4C,EAAA3E,KAAAiB,QACAsB,EAAAvC,KAAAwC,mBAEA,qBAAAR,GAA0C3E,IAAOuC,EAAAgF,aAAA5C,YACjDF,EAAAE,UAGAhC,KAAAS,cAAA,IAA6BvD,EAAAC,EAAKwH,EAAA,CAClC9C,OACAU,OACAT,UACAC,aAIAnC,EAAA3B,UAAAuD,aAAA,WAMAxB,KAAA4C,sBACA,IAAAH,EAAAhF,OAAAoH,OAAA7E,KAAAyC,UACAzC,KAAAS,cAAAiD,OAAAnB,KAAAE,WACAzC,KAAAS,cAAAqE,WAGAlF,EAAA3B,UAAA8G,OAAA,WACA,IAAAC,EAAAhF,KAAAW,MACAsB,EAAA+C,EAAA/C,OACAC,EAAA8C,EAAA9C,MACA+C,EAAAD,EAAAC,GACA,OAAWpI,EAAAM,EAAK+H,cAAA,UAChBlE,IAAAhB,KAAAgB,IACAiB,SACAC,QACA+C,KACAE,QAAAnF,KAAAO,iBAIAX,EAxPA,CAyPE/C,EAAAM,EAAKiI,WAEPxF,EAAAqD,cAAA,SAAA9G,GACA,OAAAA,EAAAmH,OAGA1D,EAAAyF,UAAA,CACA9C,KAAQvF,EAAAG,EAASmI,UAAA,CAAYtI,EAAAG,EAASoI,OAASvI,EAAAG,EAASqI,OAAAC,WACxD7E,kBAAqB5D,EAAAG,EAASqI,KAC9B3E,kBAAqB7D,EAAAG,EAASqI,KAC9B1E,mBAAsB9D,EAAAG,EAASqI,KAC/BvD,OAAUjF,EAAAG,EAASuI,OACnB1D,OAAUhF,EAAAG,EAASoI,OACnBxE,gBAAmB/D,EAAAG,EAASqI,KAC5B1D,QAAW9E,EAAAG,EAASoI,OACpBxD,QAAW/E,EAAAG,EAASwI,QAAS3I,EAAAG,EAASoI,QACtChE,OAAUvE,EAAAG,EAASyI,KACnB/D,KAAA,SAAAlB,EAAAkF,EAAAC,GACA,IAAS5I,EAAAC,EAAK4I,YAAApF,EAAAkF,IACd,WAAAG,MAAA,uBAAArF,EAAAkF,GAAA,kBAAAC,EAAA,OAGA5D,MAASlF,EAAAG,EAASuI,OAClB1C,mBAAsBhG,EAAAG,EAASqI,MAE/B5F,EAAAgF,aAAA,CACA5C,OAAA,CACAiE,SAAA,EACAC,SAAA,UAEArE,KAAA,WACAI,OAAA,IACAC,MAAA,IACAX,QAAA,EACAO,QAAA,GACAkB,mBAAApD,EAAAqD,eAEe,IACR5G,EAAA,SAAA8J,GAGP,SAAA9J,IAGA,OAFAmC,EAAAwB,KAAA3D,GAEAuC,EAAAoB,KAAAmG,EAAA9F,MAAAL,KAAAnC,YAcA,OAnBAkB,EAAA1C,EAAA8J,GAQA9J,EAAA4B,UAAA8G,OAAA,WACA,IAAAqB,EAAApG,KAEA,OAAWnD,EAAAM,EAAK+H,cAAAtF,EAAApC,EAAA,GAA0CwC,KAAAW,MAAA,CAC1DK,IAAA,SAAAqF,GACA,OAAAD,EAAA3F,cAAA4F,KAAA5F,eAEAoB,KAAA,eAIAxF,EApBO,CAqBLQ,EAAAM,EAAKiI,WAuBA9I,GAtBA,SAAAgK,GAGP,SAAAC,IAGA,OAFA/H,EAAAwB,KAAAuG,GAEA3H,EAAAoB,KAAAsG,EAAAjG,MAAAL,KAAAnC,YALAkB,EAAAwH,EAAAD,GAQAC,EAAAtI,UAAA8G,OAAA,WACA,IAAAyB,EAAAxG,KAEA,OAAWnD,EAAAM,EAAK+H,cAAAtF,EAAApC,EAAA,GAA0CwC,KAAAW,MAAA,CAC1DK,IAAA,SAAAyF,GACA,OAAAD,EAAA/F,cAAAgG,KAAAhG,eAEAoB,KAAA,UAhBO,CAqBLhF,EAAAM,EAAKiI,WACA,SAAAsB,GAGP,SAAApK,IAGA,OAFAkC,EAAAwB,KAAA1D,GAEAsC,EAAAoB,KAAA0G,EAAArG,MAAAL,KAAAnC,YAcA,OAnBAkB,EAAAzC,EAAAoK,GAQApK,EAAA2B,UAAA8G,OAAA,WACA,IAAA4B,EAAA3G,KAEA,OAAWnD,EAAAM,EAAK+H,cAAAtF,EAAApC,EAAA,GAA0CwC,KAAAW,MAAA,CAC1DK,IAAA,SAAA4F,GACA,OAAAD,EAAAlG,cAAAmG,KAAAnG,eAEAoB,KAAA,WAIAvF,EApBO,CAqBLO,EAAAM,EAAKiI,YACA7I,EAAA,SAAAsK,GAGP,SAAAtK,IAGA,OAFAiC,EAAAwB,KAAAzD,GAEAqC,EAAAoB,KAAA6G,EAAAxG,MAAAL,KAAAnC,YAcA,OAnBAkB,EAAAxC,EAAAsK,GAQAtK,EAAA0B,UAAA8G,OAAA,WACA,IAAA+B,EAAA9G,KAEA,OAAWnD,EAAAM,EAAK+H,cAAAtF,EAAApC,EAAA,GAA0CwC,KAAAW,MAAA,CAC1DK,IAAA,SAAA+F,GACA,OAAAD,EAAArG,cAAAsG,KAAAtG,eAEAoB,KAAA,UAIAtF,EApBO,CAqBLM,EAAAM,EAAKiI,WAuBA5I,GAtBA,SAAAwK,GAGP,SAAAC,IAGA,OAFAzI,EAAAwB,KAAAiH,GAEArI,EAAAoB,KAAAgH,EAAA3G,MAAAL,KAAAnC,YALAkB,EAAAkI,EAAAD,GAQAC,EAAAhJ,UAAA8G,OAAA,WACA,IAAAmC,EAAAlH,KAEA,OAAWnD,EAAAM,EAAK+H,cAAAtF,EAAApC,EAAA,GAA0CwC,KAAAW,MAAA,CAC1DK,IAAA,SAAAmG,GACA,OAAAD,EAAAzG,cAAA0G,KAAA1G,eAEAoB,KAAA,oBAhBO,CAqBLhF,EAAAM,EAAKiI,WACA,SAAAgC,GAGP,SAAA5K,IAGA,OAFAgC,EAAAwB,KAAAxD,GAEAoC,EAAAoB,KAAAoH,EAAA/G,MAAAL,KAAAnC,YAcA,OAnBAkB,EAAAvC,EAAA4K,GAQA5K,EAAAyB,UAAA8G,OAAA,WACA,IAAAsC,EAAArH,KAEA,OAAWnD,EAAAM,EAAK+H,cAAAtF,EAAApC,EAAA,GAA0CwC,KAAAW,MAAA,CAC1DK,IAAA,SAAAsG,GACA,OAAAD,EAAA5G,cAAA6G,KAAA7G,eAEAoB,KAAA,YAIArF,EApBO,CAqBLK,EAAAM,EAAKiI,YACA3I,EAAA,SAAA8K,GAGP,SAAA9K,IAGA,OAFA+B,EAAAwB,KAAAvD,GAEAmC,EAAAoB,KAAAuH,EAAAlH,MAAAL,KAAAnC,YAcA,OAnBAkB,EAAAtC,EAAA8K,GAQA9K,EAAAwB,UAAA8G,OAAA,WACA,IAAAyC,EAAAxH,KAEA,OAAWnD,EAAAM,EAAK+H,cAAAtF,EAAApC,EAAA,GAA0CwC,KAAAW,MAAA,CAC1DK,IAAA,SAAAyG,GACA,OAAAD,EAAA/G,cAAAgH,KAAAhH,eAEAoB,KAAA,gBAIApF,EApBO,CAqBLI,EAAAM,EAAKiI,WACA1I,EAAA,SAAAgL,GAGP,SAAAhL,IAGA,OAFA8B,EAAAwB,KAAAtD,GAEAkC,EAAAoB,KAAA0H,EAAArH,MAAAL,KAAAnC,YAcA,OAnBAkB,EAAArC,EAAAgL,GAQAhL,EAAAuB,UAAA8G,OAAA,WACA,IAAA4C,EAAA3H,KAEA,OAAWnD,EAAAM,EAAK+H,cAAAtF,EAAApC,EAAA,GAA0CwC,KAAAW,MAAA,CAC1DK,IAAA,SAAA4G,GACA,OAAAD,EAAAlH,cAAAmH,KAAAnH,eAEAoB,KAAA,aAIAnF,EApBO,CAqBLG,EAAAM,EAAKiI,WAuBAzI,GAtBA,SAAAkL,GAGP,SAAAC,IAGA,OAFAtJ,EAAAwB,KAAA8H,GAEAlJ,EAAAoB,KAAA6H,EAAAxH,MAAAL,KAAAnC,YALAkB,EAAA+I,EAAAD,GAQAC,EAAA7J,UAAA8G,OAAA,WACA,IAAAgD,EAAA/H,KAEA,OAAWnD,EAAAM,EAAK+H,cAAAtF,EAAApC,EAAA,GAA0CwC,KAAAW,MAAA,CAC1DK,IAAA,SAAAgH,GACA,OAAAD,EAAAtH,cAAAuH,KAAAvH,eAEAoB,KAAA,cAhBO,CAqBLhF,EAAAM,EAAKiI,WACelI,EAAAC,EAAKR,kDC7hBmCsL,EAAAC,QAW7D,SAAAC,GACD,aAEAA,OAAAjK,eAAA,WAAAiK,EAAA,QAAAA,EAGA,IAAAC,EAAA,CACAC,UACAC,UACAC,UACAC,WACAC,cACAC,UACAC,UACAC,QA0IA,SAAA1I,GACA,OAAA2I,EAAAF,EAAAzI,KA1IA4I,UACAC,QA0KA,SAAAC,GACA,IAAAC,EAAAD,EAAA,GACAE,EAAAF,EAAA,OACAG,EAAAH,EAAA,OAIA,WAAAG,EAGA,QAOA,CAAAF,EADA,GAFAC,IADAC,GAAA,IACA,EAAAA,EAAA,EAAAA,IAEAA,EAAAD,GACA,KAFAC,EAAAD,GAAA,EAEA,MA1LAE,QA6LA,SAAAlJ,GACA,OAAAqI,EAAAO,EAAA5I,KA7LAmJ,SAgMA,SAAAnJ,GACA,OAAAsI,EAAAM,EAAA5I,KAhMAoJ,YAmMA,SAAApJ,GACA,OAAAuI,EAAAK,EAAA5I,KAnMAqJ,UACAC,QAqOA,SAAAC,GACA,IAGAC,EACAP,EAJAF,EAAAQ,EAAA,GACAP,EAAAO,EAAA,OACAE,EAAAF,EAAA,OAQA,OAJAC,EAAAR,EAAAS,EAIA,CAAAV,EAAA,KAFAS,GADAA,IAFAP,GAAA,EAAAD,GAAAS,IAEA,EAAAR,EAAA,EAAAA,IACA,GAEA,KADAA,GAAA,KA9OAS,QAkPA,SAAA1J,GACA,OAAAqI,EAAAgB,EAAArJ,KAlPA2J,SAqPA,SAAA3J,GACA,OAAAsI,EAAAe,EAAArJ,KArPA4J,YAwPA,SAAA5J,GACA,OAAAuI,EAAAc,EAAArJ,KAxPA6J,UACAC,QA+TA,SAAA9J,GACA,OAAAmI,EAAA0B,EAAA7J,KA/TA+J,QAkUA,SAAA/J,GACA,OAAAoI,EAAAyB,EAAA7J,KAlUAgK,SAqUA,SAAAhK,GACA,OAAAsI,EAAAuB,EAAA7J,KArUAiK,YAwUA,SAAAjK,GACA,OAAAuI,EAAAsB,EAAA7J,KAxUAkK,WACAC,SAwVA,SAAAnK,GACA,OAAAmI,EAAA+B,EAAAlK,KAxVAoK,SA2VA,SAAApK,GACA,OAAAoI,EAAA8B,EAAAlK,KA3VAqK,SA8VA,SAAArK,GACA,OAAAqI,EAAA6B,EAAAlK,KA9VAsK,aAiWA,SAAAtK,GACA,OAAAuI,EAAA2B,EAAAlK,KAjWAuK,cACAC,YAmdA,SAAAxK,GACA,OAAAmI,EAAAoC,EAAAvK,KAndAyK,YAsdA,SAAAzK,GACA,OAAAoI,EAAAmC,EAAAvK,KAtdA0K,YAydA,SAAA1K,GACA,OAAAqI,EAAAkC,EAAAvK,KAzdA2K,aA4dA,SAAA3K,GACA,OAAAsI,EAAAiC,EAAAvK,KA5dA4K,YA+dA,SAAA5K,GACA,OAAAyI,EAAA8B,EAAAvK,KA/dA6K,YAkeA,SAAA7K,GACA,OAAAwI,EAAA+B,EAAAvK,KAleA8K,UACAC,UACAC,QAkYA,SAAAhL,GACA,OAAA2I,EAAAoC,EAAA/K,KAlYAiL,UACAC,UACAvC,UACAwC,UACAC,QA0bA,SAAApL,GACA,OAAAiL,EAAAE,EAAAnL,KA1bAqL,QA6bA,SAAArL,GACA,OAAAkL,EAAAC,EAAAnL,MA3bA,SAAAmI,EAAAmD,GACA,IAMAvC,EAEAE,EARAsC,EAAAD,EAAA,OACAE,EAAAF,EAAA,OACAG,EAAAH,EAAA,OACAI,EAAAC,KAAAD,IAAAH,EAAAC,EAAAC,GACAG,EAAAD,KAAAC,IAAAL,EAAAC,EAAAC,GACAI,EAAAD,EAAAF,EASA,OALAE,GAAAF,EAAA3C,EAAA,EAA0BwC,GAAAK,EAAA7C,GAAAyC,EAAAC,GAAAI,EAAuCL,GAAAI,EAAA7C,EAAA,GAAA0C,EAAAF,GAAAM,EAA2CJ,GAAAG,IAAA7C,EAAA,GAAAwC,EAAAC,GAAAK,IAC5G9C,EAAA4C,KAAAD,IAAA,GAAA3C,EAAA,MACA,IAAAA,GAAA,KACAE,GAAAyC,EAAAE,GAAA,EAEA,CAAA7C,EAAA,KADA6C,GAAAF,EAAA,EAA0BzC,GAAA,GAAA4C,GAAAD,EAAAF,GAA2CG,GAAA,EAAAD,EAAAF,IACrE,IAAAzC,GAGA,SAAAb,EAAAkD,GACA,IAMAvC,EACAC,EAPAuC,EAAAD,EAAA,GACAE,EAAAF,EAAA,GACAG,EAAAH,EAAA,GACAI,EAAAC,KAAAD,IAAAH,EAAAC,EAAAC,GACAG,EAAAD,KAAAC,IAAAL,EAAAC,EAAAC,GACAI,EAAAD,EAAAF,EASA,OALA1C,EAAA,GAAA4C,EAAA,EAAwBC,EAAAD,EAAA,OACxBA,GAAAF,EAAA3C,EAAA,EAA0BwC,GAAAK,EAAA7C,GAAAyC,EAAAC,GAAAI,EAAuCL,GAAAI,EAAA7C,EAAA,GAAA0C,EAAAF,GAAAM,EAA2CJ,GAAAG,IAAA7C,EAAA,GAAAwC,EAAAC,GAAAK,IAC5G9C,EAAA4C,KAAAD,IAAA,GAAA3C,EAAA,MACA,IAAAA,GAAA,KAEA,CAAAA,EAAAC,EADA4C,EAAA,YAIA,SAAAvD,EAAAiD,GACA,IAAAC,EAAAD,EAAA,GACAE,EAAAF,EAAA,GACAG,EAAAH,EAAA,GACAvC,EAAAZ,EAAAmD,GAAA,GACAQ,EAAA,MAAAH,KAAAD,IAAAH,EAAAI,KAAAD,IAAAF,EAAAC,IACAA,EAAA,QAAAE,KAAAC,IAAAL,EAAAI,KAAAC,IAAAJ,EAAAC,IACA,OAAA1C,EAAA,IAAA+C,EAAA,IAAAL,GAGA,SAAAnD,EAAAgD,GACA,IAMAS,EANAR,EAAAD,EAAA,OACAE,EAAAF,EAAA,OACAG,EAAAH,EAAA,OASA,OAJAS,EAAAJ,KAAAD,IAAA,EAAAH,EAAA,EAAAC,EAAA,EAAAC,GAIA,OAHA,EAAAF,EAAAQ,IAAA,EAAAA,IAAA,GAGA,MAFA,EAAAP,EAAAO,IAAA,EAAAA,IAAA,GAEA,MADA,EAAAN,EAAAM,IAAA,EAAAA,IAAA,GACA,IAAAA,GAGA,SAAAxD,EAAA+C,GACA,OAAAU,EAAAC,KAAAC,UAAAZ,IAGA,SAAA9C,EAAA8C,GACA,IAAAC,EAAAD,EAAA,OACAE,EAAAF,EAAA,OACAG,EAAAH,EAAA,OAEAC,IAAA,OAAAI,KAAAQ,KAAAZ,EAAA,iBAAAA,EAAA,MACAC,IAAA,OAAAG,KAAAQ,KAAAX,EAAA,iBAAAA,EAAA,MACAC,IAAA,OAAAE,KAAAQ,KAAAV,EAAA,iBAAAA,EAAA,MACA,IAAAW,EAAA,MAAAb,EAAA,MAAAC,EAAA,MAAAC,EACAY,EAAA,MAAAd,EAAA,MAAAC,EAAA,MAAAC,EACAa,EAAA,MAAAf,EAAA,MAAAC,EAAA,MAAAC,EACA,WAAAW,EAAA,IAAAC,EAAA,IAAAC,GAGA,SAAA7D,EAAA6C,GACA,IAAAiB,EAAA/D,EAAA8C,GACAc,EAAAG,EAAA,GACAF,EAAAE,EAAA,GACAD,EAAAC,EAAA,GAaA,OARAF,GAAA,IACAC,GAAA,QACAF,GAHAA,GAAA,QAGA,QAAAT,KAAAQ,IAAAC,EAAA,WAAAA,EAAA,OACAC,IAAA,QAAAV,KAAAQ,IAAAE,EAAA,WAAAA,EAAA,OACAC,IAAA,QAAAX,KAAAQ,IAAAG,EAAA,WAAAA,EAAA,OAIA,CAHA,IAAAD,EAAA,GACA,KAAAD,EAAAC,GACA,KAAAA,EAAAC,IAQA,SAAA1D,EAAAE,GACA,IAGA0D,EACAC,EACAC,EACApB,EACAqB,EAPA5D,EAAAD,EAAA,OACAE,EAAAF,EAAA,OACAG,EAAAH,EAAA,OAOA,MAAAE,EAEA,OADA2D,EAAA,IAAA1D,EACA0D,KAIAH,EAAA,EAAAvD,GADAwD,EAAAxD,EAAA,GAAAA,GAAA,EAAAD,GAAkCC,EAAAD,EAAAC,EAAAD,GAElCsC,EAAA,QAEA,QAAA5N,EAAA,EAAmBA,EAAA,EAAOA,KAC1BgP,EAAA3D,EAAA,MAAArL,EAAA,IACA,GAAAgP,IACAA,EAAA,GAAAA,IACAC,EAAA,EAAAD,EAAA,EAAAF,EAAA,GAAAC,EAAAD,GAAAE,EAAoD,EAAAA,EAAA,EAAAD,EAA8B,EAAAC,EAAA,EAAAF,GAAAC,EAAAD,IAAA,IAAAE,GAAA,EAA6DF,EAC/IlB,EAAA5N,GAAA,IAAAiP,EAGA,OAAArB,EAmCA,SAAAjC,EAAAE,GACA,IAAAR,EAAAQ,EAAA,MACAP,EAAAO,EAAA,OACAE,EAAAF,EAAA,OACAqD,EAAAjB,KAAAkB,MAAA9D,GAAA,EACA+D,EAAA/D,EAAA4C,KAAAkB,MAAA9D,GACAgE,EAAA,IAAAtD,GAAA,EAAAT,GACAgE,EAAA,IAAAvD,GAAA,EAAAT,EAAA8D,GACAG,EAAA,IAAAxD,GAAA,EAAAT,GAAA,EAAA8D,IACArD,EAAA,IAAAA,EAEA,OAAAmD,GACA,OACA,OAAAnD,EAAAwD,EAAAF,GAEA,OACA,OAAAC,EAAAvD,EAAAsD,GAEA,OACA,OAAAA,EAAAtD,EAAAwD,GAEA,OACA,OAAAF,EAAAC,EAAAvD,GAEA,OACA,OAAAwD,EAAAF,EAAAtD,GAEA,OACA,OAAAA,EAAAsD,EAAAC,IA+BA,SAAAnD,EAAAqD,GACA,IAIAxP,EACA+L,EACAqD,EACAlQ,EAPAmM,EAAAmE,EAAA,OACAC,EAAAD,EAAA,OACAE,EAAAF,EAAA,OACAG,EAAAF,EAAAC,EAqBA,OAfAC,EAAA,IACAF,GAAAE,EACAD,GAAAC,GAGA3P,EAAAiO,KAAAkB,MAAA,EAAA9D,GAEA+D,EAAA,EAAA/D,EAAArL,EAEA,MAAAA,KACAoP,EAAA,EAAAA,GAGAlQ,EAAAuQ,EAAAL,IAPArD,EAAA,EAAA2D,GAOAD,GAEAzP,GACA,QACA,OACA,OACA6N,EAAA9B,EACA+B,EAAA5O,EACA6O,EAAA0B,EACA,MAEA,OACA5B,EAAA3O,EACA4O,EAAA/B,EACAgC,EAAA0B,EACA,MAEA,OACA5B,EAAA4B,EACA3B,EAAA/B,EACAgC,EAAA7O,EACA,MAEA,OACA2O,EAAA4B,EACA3B,EAAA5O,EACA6O,EAAAhC,EACA,MAEA,OACA8B,EAAA3O,EACA4O,EAAA2B,EACA1B,EAAAhC,EACA,MAEA,OACA8B,EAAA9B,EACA+B,EAAA2B,EACA1B,EAAA7O,EAIA,WAAA2O,EAAA,IAAAC,EAAA,IAAAC,GAmBA,SAAAvB,EAAAoD,GACA,IAIA/B,EACAC,EACAC,EANA8B,EAAAD,EAAA,OACAE,EAAAF,EAAA,OACAjB,EAAAiB,EAAA,OACAvB,EAAAuB,EAAA,OAOA,OAHA/B,EAAA,EAAAI,KAAAD,IAAA,EAAA6B,GAAA,EAAAxB,MACAP,EAAA,EAAAG,KAAAD,IAAA,EAAA8B,GAAA,EAAAzB,MACAN,EAAA,EAAAE,KAAAD,IAAA,EAAAW,GAAA,EAAAN,MACA,KAAAR,EAAA,IAAAC,EAAA,IAAAC,GAmBA,SAAAX,EAAAyB,GACA,IAGAhB,EACAC,EACAC,EALAW,EAAAG,EAAA,OACAF,EAAAE,EAAA,OACAD,EAAAC,EAAA,OAcA,OATAf,GAAA,MAAAY,EAAA,OAAAC,EAAA,MAAAC,EACAb,EAAA,MAAAW,GAAA,KAAAC,EAAA,MAAAC,EAEAf,GAJAA,EAAA,OAAAa,GAAA,OAAAC,GAAA,MAAAC,GAIA,eAAAX,KAAAQ,IAAAZ,EAAA,YAAAA,GAAA,MACAC,IAAA,eAAAG,KAAAQ,IAAAX,EAAA,YAAAA,GAAA,MACAC,IAAA,eAAAE,KAAAQ,IAAAV,EAAA,YAAAA,GAAA,MACAF,EAAAI,KAAAD,IAAAC,KAAAC,IAAA,EAAAL,GAAA,GACAC,EAAAG,KAAAD,IAAAC,KAAAC,IAAA,EAAAJ,GAAA,GACAC,EAAAE,KAAAD,IAAAC,KAAAC,IAAA,EAAAH,GAAA,GACA,KAAAF,EAAA,IAAAC,EAAA,IAAAC,GAGA,SAAAV,EAAAwB,GACA,IAAAH,EAAAG,EAAA,GACAF,EAAAE,EAAA,GACAD,EAAAC,EAAA,GAaA,OARAF,GAAA,IACAC,GAAA,QACAF,GAHAA,GAAA,QAGA,QAAAT,KAAAQ,IAAAC,EAAA,WAAAA,EAAA,OACAC,IAAA,QAAAV,KAAAQ,IAAAE,EAAA,WAAAA,EAAA,OACAC,IAAA,QAAAX,KAAAQ,IAAAG,EAAA,WAAAA,EAAA,OAIA,CAHA,IAAAD,EAAA,GACA,KAAAD,EAAAC,GACA,KAAAA,EAAAC,IAQA,SAAArB,EAAAwC,GACA,IAGArB,EACAC,EACAC,EACAoB,EANAzE,EAAAwE,EAAA,GACAxQ,EAAAwQ,EAAA,GACAhC,EAAAgC,EAAA,GAgBA,OAVAxE,GAAA,EAEAyE,GADArB,EAAA,IAAApD,EAAA,OACA,kBAEAoD,EAAA,IAAAV,KAAAQ,KAAAlD,EAAA,WACAyE,EAAA/B,KAAAQ,IAAAE,EAAA,UAGAD,IAAA,gBAAAA,EAAA,QAAAnP,EAAA,IAAAyQ,EAAA,qBAAA/B,KAAAQ,IAAAlP,EAAA,IAAAyQ,EAAA,GACApB,IAAA,iBAAAA,EAAA,SAAAoB,EAAAjC,EAAA,0BAAAE,KAAAQ,IAAAuB,EAAAjC,EAAA,OACA,CAAAW,EAAAC,EAAAC,GAGA,SAAA3D,EAAA8E,GACA,IAGAE,EACA5E,EACAwE,EALAtE,EAAAwE,EAAA,GACAxQ,EAAAwQ,EAAA,GACAhC,EAAAgC,EAAA,GAYA,OARAE,EAAAhC,KAAAiC,MAAAnC,EAAAxO,IACA8L,EAAA,IAAA4E,EAAA,EAAAhC,KAAAkC,IAEA,IACA9E,GAAA,KAGAwE,EAAA5B,KAAAmC,KAAA7Q,IAAAwO,KACA,CAAAxC,EAAAsE,EAAAxE,GAGA,SAAAmC,EAAAlL,GACA,OAAA8K,EAAAG,EAAAjL,IAGA,SAAAmL,EAAA4C,GACA,IAGA9Q,EACAwO,EACAkC,EALA1E,EAAA8E,EAAA,GACAR,EAAAQ,EAAA,GACAhF,EAAAgF,EAAA,GAOA,OAHAJ,EAAA5E,EAAA,MAAA4C,KAAAkC,GACA5Q,EAAAsQ,EAAA5B,KAAAqC,IAAAL,GACAlC,EAAA8B,EAAA5B,KAAAsC,IAAAN,GACA,CAAA1E,EAAAhM,EAAAwO,GAWA,SAAAlB,EAAA2D,GACA,OAAAC,EAAAD,GA2BA,IAAAC,EAAA,CACAC,UAAA,cACAC,aAAA,cACAC,KAAA,YACAC,WAAA,cACAC,MAAA,cACAC,MAAA,cACAC,OAAA,cACAC,MAAA,QACAC,eAAA,cACAC,KAAA,UACAC,WAAA,aACAC,MAAA,YACAC,UAAA,cACAC,UAAA,aACAC,WAAA,YACAC,UAAA,aACAC,MAAA,aACAC,eAAA,cACAC,SAAA,cACAC,QAAA,YACAC,KAAA,YACAC,SAAA,UACAC,SAAA,YACAC,cAAA,aACAC,SAAA,cACAC,UAAA,UACAC,SAAA,cACAC,UAAA,cACAC,YAAA,YACAC,eAAA,YACAC,WAAA,YACAC,WAAA,aACAC,QAAA,UACAC,WAAA,cACAC,aAAA,cACAC,cAAA,YACAC,cAAA,WACAC,cAAA,WACAC,cAAA,YACAC,WAAA,YACAC,SAAA,aACAC,YAAA,YACAC,QAAA,cACAC,QAAA,cACAC,WAAA,aACAC,UAAA,YACAC,YAAA,cACAC,YAAA,YACAC,QAAA,YACAC,UAAA,cACAC,WAAA,cACAC,KAAA,YACAC,UAAA,aACAC,KAAA,cACAC,MAAA,UACAC,YAAA,aACAC,KAAA,cACAC,SAAA,cACAC,QAAA,cACAC,UAAA,YACAC,OAAA,WACAC,MAAA,cACAC,MAAA,cACAC,SAAA,cACAC,cAAA,cACAC,UAAA,YACAC,aAAA,cACAC,UAAA,cACAC,WAAA,cACAC,UAAA,cACAC,qBAAA,cACAC,UAAA,cACAC,WAAA,cACAC,UAAA,cACAC,UAAA,cACAC,YAAA,cACAC,cAAA,aACAC,aAAA,cACAC,eAAA,cACAC,eAAA,cACAC,eAAA,cACAC,YAAA,cACAC,KAAA,UACAC,UAAA,YACAC,MAAA,cACAC,QAAA,YACAC,OAAA,UACAC,iBAAA,cACAC,WAAA,UACAC,aAAA,aACAC,aAAA,cACAC,eAAA,aACAC,gBAAA,cACAC,kBAAA,YACAC,gBAAA,aACAC,gBAAA,aACAC,aAAA,YACAC,UAAA,cACAC,UAAA,cACAC,SAAA,cACAC,YAAA,cACAC,KAAA,UACAC,QAAA,cACAC,MAAA,YACAC,UAAA,aACAC,OAAA,YACAC,UAAA,WACAC,OAAA,cACAC,cAAA,cACAC,UAAA,cACAC,cAAA,cACAC,cAAA,cACAC,WAAA,cACAC,UAAA,cACAC,KAAA,aACAC,KAAA,cACAC,KAAA,cACAC,WAAA,cACAC,OAAA,YACAC,cAAA,aACAC,IAAA,UACAC,UAAA,cACAC,UAAA,aACAC,YAAA,YACAC,OAAA,cACAC,WAAA,aACAC,SAAA,YACAC,SAAA,cACAC,OAAA,YACAC,OAAA,cACAC,QAAA,cACAC,UAAA,aACAC,UAAA,cACAC,UAAA,cACAC,KAAA,cACAC,YAAA,YACAC,UAAA,aACAC,IAAA,cACAC,KAAA,YACAC,QAAA,cACAC,OAAA,YACAC,UAAA,aACAC,OAAA,cACAC,MAAA,cACAC,MAAA,cACAC,WAAA,cACAC,OAAA,YACAC,YAAA,cAEAvL,EAAA,GAEA,QAAAlO,KAAAqQ,EACAnC,EAAAC,KAAAC,UAAAiC,EAAArQ,OAGA,IAAA0Z,EAAA,WACA,WAAAC,GAGA,QAAAnS,KAAA4C,EAAA,CAEAsP,EAAAlS,EAAA,gBAAAA,GAEA,gBAAAoS,GAEA,MADA,iBAAAA,MAAAzX,MAAAlC,UAAA4Z,MAAA1Z,KAAAN,YACAuK,EAAA5C,GAAAoS,IAJA,CAMKpS,GAEL,IAAAsS,EAAA,cAAAC,KAAAvS,GACAwS,EAAAF,EAAA,GACAG,EAAAH,EAAA,IAEAJ,EAAAM,GAAAN,EAAAM,IAAA,IAEAC,GAAAP,EAAAlS,GAAA,SAAAA,GACA,gBAAAoS,GACA,iBAAAA,MAAAzX,MAAAlC,UAAA4Z,MAAA1Z,KAAAN,YACA,IAAAgP,EAAAzE,EAAA5C,GAAAoS,GACA,oBAAA/K,QAAA1L,IAAA0L,EAAA,OAAAA,EAEA,QAAAjP,EAAA,EAAuBA,EAAAiP,EAAA/O,OAAgBF,IACvCiP,EAAAjP,GAAAiO,KAAAqM,MAAArL,EAAAjP,IAGA,OAAAiP,GAVA,CAYKrH,GAKL,IAAAmS,EAAA,WACA3X,KAAAmY,MAAA,IAMAR,EAAA1Z,UAAAma,WAAA,SAAAC,EAAAnY,GACA,IAAA2E,EAAA3E,EAAA,GAEA,YAAAiB,IAAA0D,EAEA7E,KAAAsY,UAAAD,IAIA,iBAAAxT,IACAA,EAAA1E,MAAAlC,UAAA4Z,MAAA1Z,KAAA+B,IAGAF,KAAAuY,UAAAF,EAAAxT,KAKA8S,EAAA1Z,UAAAsa,UAAA,SAAAF,EAAAxT,GAIA,OAHA7E,KAAAqY,QACArY,KAAAmY,MAAA,GACAnY,KAAAmY,MAAAE,GAAAxT,EACA7E,MAOA2X,EAAA1Z,UAAAqa,UAAA,SAAAD,GACA,IAAAG,EAAAxY,KAAAmY,MAAAE,GAEA,IAAAG,EAAA,CACA,IAAAC,EAAAzY,KAAAqY,MACAL,EAAAhY,KAAAmY,MAAAM,GACAD,EAAAd,EAAAe,GAAAJ,GAAAL,GACAhY,KAAAmY,MAAAE,GAAAG,EAGA,OAAAA,GAGA,qCAAApV,QAAA,SAAAiV,GACAV,EAAA1Z,UAAAoa,GAAA,SAAAG,GACA,OAAAxY,KAAAoY,WAAAC,EAAAxa,cAGA,IAAA6a,EAAAhB,EACAiB,EAAA,CACArK,UAAA,cACAC,aAAA,cACAC,KAAA,YACAC,WAAA,cACAC,MAAA,cACAC,MAAA,cACAC,OAAA,cACAC,MAAA,QACAC,eAAA,cACAC,KAAA,UACAC,WAAA,aACAC,MAAA,YACAC,UAAA,cACAC,UAAA,aACAC,WAAA,YACAC,UAAA,aACAC,MAAA,aACAC,eAAA,cACAC,SAAA,cACAC,QAAA,YACAC,KAAA,YACAC,SAAA,UACAC,SAAA,YACAC,cAAA,aACAC,SAAA,cACAC,UAAA,UACAC,SAAA,cACAC,UAAA,cACAC,YAAA,YACAC,eAAA,YACAC,WAAA,YACAC,WAAA,aACAC,QAAA,UACAC,WAAA,cACAC,aAAA,cACAC,cAAA,YACAC,cAAA,WACAC,cAAA,WACAC,cAAA,YACAC,WAAA,YACAC,SAAA,aACAC,YAAA,YACAC,QAAA,cACAC,QAAA,cACAC,WAAA,aACAC,UAAA,YACAC,YAAA,cACAC,YAAA,YACAC,QAAA,YACAC,UAAA,cACAC,WAAA,cACAC,KAAA,YACAC,UAAA,aACAC,KAAA,cACAC,MAAA,UACAC,YAAA,aACAC,KAAA,cACAC,SAAA,cACAC,QAAA,cACAC,UAAA,YACAC,OAAA,WACAC,MAAA,cACAC,MAAA,cACAC,SAAA,cACAC,cAAA,cACAC,UAAA,YACAC,aAAA,cACAC,UAAA,cACAC,WAAA,cACAC,UAAA,cACAC,qBAAA,cACAC,UAAA,cACAC,WAAA,cACAC,UAAA,cACAC,UAAA,cACAC,YAAA,cACAC,cAAA,aACAC,aAAA,cACAC,eAAA,cACAC,eAAA,cACAC,eAAA,cACAC,YAAA,cACAC,KAAA,UACAC,UAAA,YACAC,MAAA,cACAC,QAAA,YACAC,OAAA,UACAC,iBAAA,cACAC,WAAA,UACAC,aAAA,aACAC,aAAA,cACAC,eAAA,aACAC,gBAAA,cACAC,kBAAA,YACAC,gBAAA,aACAC,gBAAA,aACAC,aAAA,YACAC,UAAA,cACAC,UAAA,cACAC,SAAA,cACAC,YAAA,cACAC,KAAA,UACAC,QAAA,cACAC,MAAA,YACAC,UAAA,aACAC,OAAA,YACAC,UAAA,WACAC,OAAA,cACAC,cAAA,cACAC,UAAA,cACAC,cAAA,cACAC,cAAA,cACAC,WAAA,cACAC,UAAA,cACAC,KAAA,aACAC,KAAA,cACAC,KAAA,cACAC,WAAA,cACAC,OAAA,YACAC,cAAA,aACAC,IAAA,UACAC,UAAA,cACAC,UAAA,aACAC,YAAA,YACAC,OAAA,cACAC,WAAA,aACAC,SAAA,YACAC,SAAA,cACAC,OAAA,YACAC,OAAA,cACAC,QAAA,cACAC,UAAA,aACAC,UAAA,cACAC,UAAA,cACAC,KAAA,cACAC,YAAA,YACAC,UAAA,aACAC,IAAA,cACAC,KAAA,YACAC,QAAA,cACAC,OAAA,YACAC,UAAA,aACAC,OAAA,cACAC,MAAA,cACAC,MAAA,cACAC,WAAA,cACAC,OAAA,YACAC,YAAA,cAIAmB,EAAA,CACAC,UACAC,UACAC,OA8HA,SAAAC,GACA,IAAAC,EAAAJ,EAAAG,GACA,OAAAC,KAAApB,MAAA,MA/HAqB,OAkIA,SAAAF,GACA,IAAAG,EAAAL,EAAAE,GACA,OAAAG,KAAAtB,MAAA,MAnIAuB,SACAC,SAqIA,SAAAL,GACA,IAAAR,EAAAK,EAAAG,GAEA,OAAAR,EACAA,EAAA,IACKA,EAAAM,EAAAE,IACLR,EAAA,IACKA,EAAAY,EAAAJ,IACLR,EAAA,QADK,GA3ILc,UAiJA,SAAAL,EAAA9b,GACA,IAAAA,OAAAgE,IAAAhE,GAAA,IAAA8b,EAAAnb,OAAAX,EAAA8b,EAAA,GACA,UAAAM,EAAAN,EAAA,IAAAM,EAAAN,EAAA,IAAAM,EAAAN,EAAA,KAAA9b,GAAA,GAAAA,EAAA,EAAAoc,EAAA1N,KAAAqM,MAAA,IAAA/a,IAAA,KAlJAqc,UAqJA,SAAAP,EAAAQ,GACA,OAAAA,EAAA,GAAAR,EAAA,IAAAA,EAAA,KACAS,EAAAT,EAAAQ,GAGA,OAAAR,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAzJAS,aACAC,cAmKA,SAAAV,EAAAQ,GACA,GAAAA,EAAA,GAAAR,EAAA,IAAAA,EAAA,KACA,OAAAW,EAAAX,EAAAQ,GAGA,IAAAhO,EAAAI,KAAAqM,MAAAe,EAAA,YACAvN,EAAAG,KAAAqM,MAAAe,EAAA,YACAtN,EAAAE,KAAAqM,MAAAe,EAAA,YACA,aAAAxN,EAAA,MAAAC,EAAA,MAAAC,EAAA,MA1KAiO,iBACAC,UAmLA,SAAAV,EAAAM,GACA,OAAAA,EAAA,GAAAN,EAAA,IAAAA,EAAA,KACAW,EAAAX,EAAAM,GAGA,OAAAN,EAAA,QAAAA,EAAA,SAAAA,EAAA,SAvLAW,aACAC,UAmMA,SAAA3M,EAAAqM,GAKA,YAJAtY,IAAAsY,IACAA,OAAAtY,IAAAiM,EAAA,GAAAA,EAAA,MAGA,OAAAA,EAAA,QAAAA,EAAA,SAAAA,EAAA,aAAAjM,IAAAsY,GAAA,IAAAA,EAAA,KAAAA,EAAA,SAvMArL,QA0MA,SAAA5C,GACA,OAAAwO,EAAAxO,EAAAqM,MAAA,QAxMA,SAAAgB,EAAAG,GACA,GAAAA,EAAA,CAIA,IAKAxN,EAAA,QACArO,EAAA,EACA8c,EAAAjB,EAAAiB,MAPA,0BAQAC,EAAA,GAEA,GAAAD,EAAA,CACAA,IAAA,GACAC,EAAAD,EAAA,GAEA,QAAArc,EAAA,EAAqBA,EAAA4N,EAAA1N,OAAgBF,IACrC4N,EAAA5N,GAAAuc,SAAAF,EAAArc,GAAAqc,EAAArc,GAAA,IAGAsc,IACA/c,EAAA0O,KAAAqM,MAAAiC,SAAAD,IAAA,uBAEK,GAAAD,EAAAjB,EAAAiB,MApBL,yCAoBK,CACLC,EAAAD,EAAA,GACAA,IAAA,GAEA,QAAArc,EAAA,EAAqBA,EAAA4N,EAAA1N,OAAgBF,IACrC4N,EAAA5N,GAAAuc,SAAAF,EAAApC,MAAA,EAAAja,EAAA,EAAAA,EAAA,OAGAsc,IACA/c,EAAA0O,KAAAqM,MAAAiC,SAAAD,EAAA,uBAEK,GAAAD,EAAAjB,EAAAiB,MA9BL,4FA8BK,CACL,QAAArc,EAAA,EAAqBA,EAAA4N,EAAA1N,OAAgBF,IACrC4N,EAAA5N,GAAAuc,SAAAF,EAAArc,EAAA,IAGAT,EAAAid,WAAAH,EAAA,SACK,GAAAA,EAAAjB,EAAAiB,MAnCL,8GAmCK,CACL,QAAArc,EAAA,EAAqBA,EAAA4N,EAAA1N,OAAgBF,IACrC4N,EAAA5N,GAAAiO,KAAAqM,MAAA,KAAAkC,WAAAH,EAAArc,EAAA,KAGAT,EAAAid,WAAAH,EAAA,SACK,GAAAA,EAAAjB,EAAAiB,MAxCL,SAwCK,CACL,kBAAAA,EAAA,GACA,gBAKA,KAFAzO,EAAAmN,EAAAsB,EAAA,KAGA,OAIA,QAAArc,EAAA,EAAmBA,EAAA4N,EAAA1N,OAAgBF,IACnC4N,EAAA5N,GAAAyc,EAAA7O,EAAA5N,GAAA,OAUA,OAJAT,EAHAA,GAAA,GAAAA,EAGAkd,EAAAld,EAAA,KAFA,EAKAqO,EAAA,GAAArO,EACAqO,GAGA,SAAAsN,EAAAE,GACA,GAAAA,EAAA,CAIA,IACAiB,EAAAjB,EAAAiB,MADA,4GAGA,GAAAA,EAAA,CACA,IAAAR,EAAAW,WAAAH,EAAA,IACAhR,EAAAoR,EAAAF,SAAAF,EAAA,WACA/Q,EAAAmR,EAAAD,WAAAH,EAAA,WACA9Q,EAAAkR,EAAAD,WAAAH,EAAA,WACA9c,EAAAkd,EAAAC,MAAAb,GAAA,EAAAA,EAAA,KACA,OAAAxQ,EAAAC,EAAAC,EAAAhM,KAIA,SAAAic,EAAAJ,GACA,GAAAA,EAAA,CAIA,IACAiB,EAAAjB,EAAAiB,MADA,0GAGA,GAAAA,EAAA,CACA,IAAAR,EAAAW,WAAAH,EAAA,IACAhR,EAAAoR,EAAAF,SAAAF,EAAA,WACAjO,EAAAqO,EAAAD,WAAAH,EAAA,WACAtO,EAAA0O,EAAAD,WAAAH,EAAA,WACA9c,EAAAkd,EAAAC,MAAAb,GAAA,EAAAA,EAAA,KACA,OAAAxQ,EAAA+C,EAAAL,EAAAxO,KAwCA,SAAAuc,EAAAT,EAAAQ,GAKA,YAJAtY,IAAAsY,IACAA,OAAAtY,IAAA8X,EAAA,GAAAA,EAAA,MAGA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAQ,EAAA,IAcA,SAAAG,EAAAX,EAAAQ,GACA,IAAAhO,EAAAI,KAAAqM,MAAAe,EAAA,YACAvN,EAAAG,KAAAqM,MAAAe,EAAA,YACAtN,EAAAE,KAAAqM,MAAAe,EAAA,YACA,cAAAxN,EAAA,MAAAC,EAAA,MAAAC,EAAA,OAAA8N,GAAAR,EAAA,WAWA,SAAAa,EAAAX,EAAAM,GAKA,YAJAtY,IAAAsY,IACAA,OAAAtY,IAAAgY,EAAA,GAAAA,EAAA,MAGA,QAAAA,EAAA,QAAAA,EAAA,SAAAA,EAAA,SAAAM,EAAA,IAkBA,SAAAY,EAAAE,EAAA3O,EAAAE,GACA,OAAAD,KAAAD,IAAAC,KAAAC,IAAAF,EAAA2O,GAAAzO,GAGA,SAAAyN,EAAAgB,GACA,IAAAC,EAAAD,EAAAE,SAAA,IAAAC,cACA,OAAAF,EAAA1c,OAAA,MAAA0c,IAIA,IAAAR,EAAA,GAEA,QAAAW,KAAAhC,EACAqB,EAAArB,EAAAgC,MAKA,IAAAC,EAAA,SAAAA,EAAAvc,GACA,OAAAA,aAAAuc,EACAvc,EAGA2B,gBAAA4a,GAIA5a,KAAA6a,OAAA,EACA7a,KAAA6E,OAAA,CACA2G,IAAA,QACAxC,IAAA,QACAS,IAAA,QACA2D,IAAA,QACAI,KAAA,UACAiM,MAAA,QAKA,kBAAApb,GACAma,EAAAI,EAAAC,QAAAxa,IAGA2B,KAAAuY,UAAA,MAAAC,IACOA,EAAAI,EAAAE,QAAAza,IACP2B,KAAAuY,UAAA,MAAAC,IACOA,EAAAI,EAAAQ,OAAA/a,KACP2B,KAAAuY,UAAA,MAAAC,GAEK,kBAAAna,SAGL8C,KAFAqX,EAAAna,GAEAoN,QAAAtK,IAAAqX,EAAA1C,IACA9V,KAAAuY,UAAA,MAAAC,QACOrX,IAAAqX,EAAArP,QAAAhI,IAAAqX,EAAAsC,UACP9a,KAAAuY,UAAA,MAAAC,QACOrX,IAAAqX,EAAA7O,QAAAxI,IAAAqX,EAAApZ,MACPY,KAAAuY,UAAA,MAAAC,QACOrX,IAAAqX,EAAAxM,QAAA7K,IAAAqX,EAAAuC,UACP/a,KAAAuY,UAAA,MAAAC,QACOrX,IAAAqX,EAAA/K,QAAAtM,IAAAqX,EAAA9I,MACP1P,KAAAuY,UAAA,OAAAC,MArCA,IAAAoC,EAAAvc,GAaA,IAAAma,IA6BAoC,EAAA3c,UAAA,CACA+c,QAAA,WACA,OAAAhb,KAAA6a,OAEArP,IAAA,WACA,OAAAxL,KAAAib,SAAA,MAAApd,YAEAmL,IAAA,WACA,OAAAhJ,KAAAib,SAAA,MAAApd,YAEA4L,IAAA,WACA,OAAAzJ,KAAAib,SAAA,MAAApd,YAEAuP,IAAA,WACA,OAAApN,KAAAib,SAAA,MAAApd,YAEA2P,KAAA,WACA,OAAAxN,KAAAib,SAAA,OAAApd,YAEAqd,SAAA,WACA,OAAAlb,KAAA6E,OAAA2G,KAEA2P,SAAA,WACA,OAAAnb,KAAA6E,OAAAmE,KAEAoS,SAAA,WACA,OAAApb,KAAA6E,OAAA4E,KAEA4R,SAAA,WACA,IAAAxW,EAAA7E,KAAA6E,OAEA,WAAAA,EAAA4U,MACA5U,EAAAuI,IAAA9M,OAAA,CAAAuE,EAAA4U,QAGA5U,EAAAuI,KAEAkO,UAAA,WACA,OAAAtb,KAAA6E,OAAA2I,MAEA+N,UAAA,WACA,IAAA1W,EAAA7E,KAAA6E,OACA,OAAAA,EAAA2G,IAAAlL,OAAA,CAAAuE,EAAA4U,SAEA+B,UAAA,WACA,IAAA3W,EAAA7E,KAAA6E,OACA,OAAAA,EAAAmE,IAAA1I,OAAA,CAAAuE,EAAA4U,SAEAA,MAAA,SAAA5M,GACA,YAAA1L,IAAA0L,EACA7M,KAAA6E,OAAA4U,OAGAzZ,KAAAuY,UAAA,QAAA1L,GACA7M,OAEA8V,IAAA,SAAAjJ,GACA,OAAA7M,KAAAyb,WAAA,QAAA5O,IAEA+E,MAAA,SAAA/E,GACA,OAAA7M,KAAAyb,WAAA,QAAA5O,IAEAkC,KAAA,SAAAlC,GACA,OAAA7M,KAAAyb,WAAA,QAAA5O,IAEA6O,IAAA,SAAA7O,GAMA,OALAA,IAEAA,GADAA,GAAA,KACA,MAAAA,KAGA7M,KAAAyb,WAAA,QAAA5O,IAEA8O,WAAA,SAAA9O,GACA,OAAA7M,KAAAyb,WAAA,QAAA5O,IAEAiO,UAAA,SAAAjO,GACA,OAAA7M,KAAAyb,WAAA,QAAA5O,IAEA+O,YAAA,SAAA/O,GACA,OAAA7M,KAAAyb,WAAA,QAAA5O,IAEAkO,UAAA,SAAAlO,GACA,OAAA7M,KAAAyb,WAAA,QAAA5O,IAEAgP,UAAA,SAAAhP,GACA,OAAA7M,KAAAyb,WAAA,QAAA5O,IAEAzN,MAAA,SAAAyN,GACA,OAAA7M,KAAAyb,WAAA,QAAA5O,IAEA6C,KAAA,SAAA7C,GACA,OAAA7M,KAAAyb,WAAA,SAAA5O,IAEA8G,QAAA,SAAA9G,GACA,OAAA7M,KAAAyb,WAAA,SAAA5O,IAEA2K,OAAA,SAAA3K,GACA,OAAA7M,KAAAyb,WAAA,SAAA5O,IAEAgC,MAAA,SAAAhC,GACA,OAAA7M,KAAAyb,WAAA,SAAA5O,IAEAyM,UAAA,WACA,OAAAV,EAAAU,UAAAtZ,KAAA6E,OAAA2G,MAEAgO,UAAA,WACA,OAAAZ,EAAAY,UAAAxZ,KAAA6E,OAAA2G,IAAAxL,KAAA6E,OAAA4U,QAEAC,WAAA,WACA,OAAAd,EAAAc,WAAA1Z,KAAA6E,OAAA2G,IAAAxL,KAAA6E,OAAA4U,QAEAE,cAAA,WACA,OAAAf,EAAAe,cAAA3Z,KAAA6E,OAAA2G,IAAAxL,KAAA6E,OAAA4U,QAEAI,UAAA,WACA,OAAAjB,EAAAiB,UAAA7Z,KAAA6E,OAAAmE,IAAAhJ,KAAA6E,OAAA4U,QAEAK,WAAA,WACA,OAAAlB,EAAAkB,WAAA9Z,KAAA6E,OAAAmE,IAAAhJ,KAAA6E,OAAA4U,QAEAM,UAAA,WACA,OAAAnB,EAAAmB,UAAA/Z,KAAA6E,OAAAuI,IAAApN,KAAA6E,OAAA4U,QAEArL,QAAA,WACA,OAAAwK,EAAAxK,QAAApO,KAAA6E,OAAA2G,IAAAxL,KAAA6E,OAAA4U,QAEAqC,UAAA,WACA,IAAAtQ,EAAAxL,KAAA6E,OAAA2G,IACA,OAAAA,EAAA,OAAAA,EAAA,MAAAA,EAAA,IAEAuQ,WAAA,WAKA,IAHA,IAAAvQ,EAAAxL,KAAA6E,OAAA2G,IACAwQ,EAAA,GAEApe,EAAA,EAAqBA,EAAA4N,EAAA1N,OAAgBF,IAAA,CACrC,IAAAqe,EAAAzQ,EAAA5N,GAAA,IACAoe,EAAApe,GAAAqe,GAAA,OAAAA,EAAA,MAAApQ,KAAAQ,KAAA4P,EAAA,iBAGA,YAAAD,EAAA,SAAAA,EAAA,SAAAA,EAAA,IAEAE,SAAA,SAAAC,GAEA,IAAAC,EAAApc,KAAA+b,aACAM,EAAAF,EAAAJ,aAEA,OAAAK,EAAAC,GACAD,EAAA,MAAAC,EAAA,MAGAA,EAAA,MAAAD,EAAA,MAEAE,MAAA,SAAAH,GACA,IAAAI,EAAAvc,KAAAkc,SAAAC,GAEA,OAAAI,GAAA,IACA,MAGAA,GAAA,aAEAC,KAAA,WAEA,IAAAhR,EAAAxL,KAAA6E,OAAA2G,IAEA,OADA,IAAAA,EAAA,OAAAA,EAAA,OAAAA,EAAA,QACA,KAEAiR,MAAA,WACA,OAAAzc,KAAAwc,QAEAE,OAAA,WAGA,IAFA,IAAAlR,EAAA,GAEA5N,EAAA,EAAqBA,EAAA,EAAOA,IAC5B4N,EAAA5N,GAAA,IAAAoC,KAAA6E,OAAA2G,IAAA5N,GAIA,OADAoC,KAAAuY,UAAA,MAAA/M,GACAxL,MAEA2c,QAAA,SAAApP,GACA,IAAAvE,EAAAhJ,KAAA6E,OAAAmE,IAGA,OAFAA,EAAA,IAAAA,EAAA,GAAAuE,EACAvN,KAAAuY,UAAA,MAAAvP,GACAhJ,MAEA4c,OAAA,SAAArP,GACA,IAAAvE,EAAAhJ,KAAA6E,OAAAmE,IAGA,OAFAA,EAAA,IAAAA,EAAA,GAAAuE,EACAvN,KAAAuY,UAAA,MAAAvP,GACAhJ,MAEA6c,SAAA,SAAAtP,GACA,IAAAvE,EAAAhJ,KAAA6E,OAAAmE,IAGA,OAFAA,EAAA,IAAAA,EAAA,GAAAuE,EACAvN,KAAAuY,UAAA,MAAAvP,GACAhJ,MAEA8c,WAAA,SAAAvP,GACA,IAAAvE,EAAAhJ,KAAA6E,OAAAmE,IAGA,OAFAA,EAAA,IAAAA,EAAA,GAAAuE,EACAvN,KAAAuY,UAAA,MAAAvP,GACAhJ,MAEA+c,OAAA,SAAAxP,GACA,IAAAH,EAAApN,KAAA6E,OAAAuI,IAGA,OAFAA,EAAA,IAAAA,EAAA,GAAAG,EACAvN,KAAAuY,UAAA,MAAAnL,GACApN,MAEAgd,QAAA,SAAAzP,GACA,IAAAH,EAAApN,KAAA6E,OAAAuI,IAGA,OAFAA,EAAA,IAAAA,EAAA,GAAAG,EACAvN,KAAAuY,UAAA,MAAAnL,GACApN,MAEAid,UAAA,WACA,IAAAzR,EAAAxL,KAAA6E,OAAA2G,IAEAqB,EAAA,GAAArB,EAAA,OAAAA,EAAA,OAAAA,EAAA,GAEA,OADAxL,KAAAuY,UAAA,OAAA1L,QACA7M,MAEAkd,QAAA,SAAA3P,GACA,IAAAkM,EAAAzZ,KAAA6E,OAAA4U,MAEA,OADAzZ,KAAAuY,UAAA,QAAAkB,IAAAlM,GACAvN,MAEAmd,QAAA,SAAA5P,GACA,IAAAkM,EAAAzZ,KAAA6E,OAAA4U,MAEA,OADAzZ,KAAAuY,UAAA,QAAAkB,IAAAlM,GACAvN,MAEAod,OAAA,SAAAC,GACA,IAAArU,EAAAhJ,KAAA6E,OAAAmE,IACA0S,GAAA1S,EAAA,GAAAqU,GAAA,IAGA,OAFArU,EAAA,GAAA0S,EAAA,MAAAA,IACA1b,KAAAuY,UAAA,MAAAvP,GACAhJ,MAOAsd,IAAA,SAAAC,EAAAC,GACA,IACArB,EAAAoB,EACAtQ,OAAA9L,IAAAqc,EAAA,GAAAA,EACAxR,EAAA,EAAAiB,EAAA,EACA9P,EAJA6C,KAIAyZ,QAAA0C,EAAA1C,QACAgE,IAAAzR,EAAA7O,KAAA,EAAA6O,KAAA7O,IAAA,EAAA6O,EAAA7O,IAAA,KACAugB,EAAA,EAAAD,EACA,OAAAzd,KAAAwL,IAAAiS,EAPAzd,KAOA8V,MAAA4H,EAAAvB,EAAArG,MAAA2H,EAPAzd,KAOA4R,QAAA8L,EAAAvB,EAAAvK,QAAA6L,EAPAzd,KAOA+O,OAAA2O,EAAAvB,EAAApN,QAAA0K,MAPAzZ,KAOAyZ,QAAAxM,EAAAkP,EAAA1C,SAAA,EAAAxM,KAEA0Q,OAAA,WACA,OAAA3d,KAAAwL,OAEAoS,MAAA,WAKA,IAGAxe,EAAAyC,EAHAgc,EAAA,IAAAjD,EACA7c,EAAAiC,KAAA6E,OACAlH,EAAAkgB,EAAAhZ,OAGA,QAAAiZ,KAAA/f,EACAA,EAAAG,eAAA4f,KACA1e,EAAArB,EAAA+f,GAGA,oBAFAjc,EAAA,GAAmB4Y,SAAAtc,KAAAiB,IAGnBzB,EAAAmgB,GAAA1e,EAAAyY,MAAA,GACW,oBAAAhW,EACXlE,EAAAmgB,GAAA1e,EAEAmE,QAAAC,MAAA,0BAAApE,IAKA,OAAAye,KAGAE,OAAA,CACAvS,IAAA,uBACAxC,IAAA,iCACAS,IAAA,6BACA2D,IAAA,gCACAI,KAAA,qCAEAoN,EAAA3c,UAAA+f,MAAA,CACAxS,IAAA,cACAxC,IAAA,cACAS,IAAA,cACA2D,IAAA,cACAI,KAAA,mBAGAoN,EAAA3c,UAAAqa,UAAA,SAAAD,GAIA,IAHA,IAAAxT,EAAA7E,KAAA6E,OACA2T,EAAA,GAEA5a,EAAA,EAAmBA,EAAAya,EAAAva,OAAkBF,IACrC4a,EAAAH,EAAA4F,OAAArgB,IAAAiH,EAAAwT,GAAAza,GAQA,OALA,IAAAiH,EAAA4U,QACAjB,EAAArb,EAAA0H,EAAA4U,OAIAjB,GAGAoC,EAAA3c,UAAAsa,UAAA,SAAAF,EAAAG,GACA,IAIA5a,EAiCAsgB,EArCArZ,EAAA7E,KAAA6E,OACAkZ,EAAA/d,KAAA+d,OACAC,EAAAhe,KAAAge,MACAvE,EAAA,EAIA,GAFAzZ,KAAA6a,OAAA,EAEA,UAAAxC,EACAoB,EAAAjB,OACK,GAAAA,EAAA1a,OAEL+G,EAAAwT,GAAAG,EAAAX,MAAA,EAAAQ,EAAAva,QACA2b,EAAAjB,EAAAH,EAAAva,aACK,QAAAqD,IAAAqX,EAAAH,EAAA4F,OAAA,KAEL,IAAArgB,EAAA,EAAiBA,EAAAya,EAAAva,OAAkBF,IACnCiH,EAAAwT,GAAAza,GAAA4a,EAAAH,EAAA4F,OAAArgB,IAGA6b,EAAAjB,EAAArb,OACK,QAAAgE,IAAAqX,EAAAuF,EAAA1F,GAAA,KAEL,IAAA8F,EAAAJ,EAAA1F,GAEA,IAAAza,EAAA,EAAiBA,EAAAya,EAAAva,OAAkBF,IACnCiH,EAAAwT,GAAAza,GAAA4a,EAAA2F,EAAAvgB,IAGA6b,EAAAjB,EAAAiB,MAKA,GAFA5U,EAAA4U,MAAA5N,KAAAC,IAAA,EAAAD,KAAAD,IAAA,OAAAzK,IAAAsY,EAAA5U,EAAA4U,UAEA,UAAApB,EACA,SAKA,IAAAza,EAAA,EAAeA,EAAAya,EAAAva,OAAkBF,IACjCsgB,EAAArS,KAAAC,IAAA,EAAAD,KAAAD,IAAAoS,EAAA3F,GAAAza,GAAAiH,EAAAwT,GAAAza,KACAiH,EAAAwT,GAAAza,GAAAiO,KAAAqM,MAAAgG,GAIA,QAAAE,KAAAL,EACAK,IAAA/F,IACAxT,EAAAuZ,GAAA1F,EAAAL,GAAA+F,GAAAvZ,EAAAwT,KAIA,UAGAuC,EAAA3c,UAAAgd,SAAA,SAAA5C,EAAAnY,GACA,IAAAsY,EAAAtY,EAAA,GAEA,YAAAiB,IAAAqX,EAEAxY,KAAAsY,UAAAD,IAIA,kBAAAG,IACAA,EAAArY,MAAAlC,UAAA4Z,MAAA1Z,KAAA+B,IAGAF,KAAAuY,UAAAF,EAAAG,GACAxY,OAGA4a,EAAA3c,UAAAwd,WAAA,SAAApD,EAAAgG,EAAAxR,GACA,IAAAyR,EAAAte,KAAA6E,OAAAwT,GAEA,YAAAlX,IAAA0L,EAEAyR,EAAAD,GACKxR,IAAAyR,EAAAD,GAELre,MAIAse,EAAAD,GAAAxR,EACA7M,KAAAuY,UAAAF,EAAAiG,GACAte,OAGA,qBAAAue,SACAA,OAAA3D,SAGA,IAAA4D,EAAA5D,EAKA/W,EAAA,CAIA4a,KAAA,aAOAC,IAAA,WACA,IAAAzZ,EAAA,EACA,kBACA,OAAAA,KAHA,GAaA0Z,cAAA,SAAAvf,GACA,cAAAA,GAAA,qBAAAA,GASAwf,QAAA,SAAAxf,GACA,GAAAe,MAAAye,SAAAze,MAAAye,QAAAxf,GACA,SAGA,IAAAyC,EAAApE,OAAAQ,UAAAwc,SAAAtc,KAAAiB,GAEA,kBAAAyC,EAAAgd,OAAA,iBAAAhd,EAAAgd,QAAA,IAaAC,SAAA,SAAA1f,GACA,cAAAA,GAAA,oBAAA3B,OAAAQ,UAAAwc,SAAAtc,KAAAiB,IAQA2f,SAAA,SAAAC,GACA,SAAAD,EAAAE,GACA,OAAAD,EAAA3e,MAAAL,KAAAnC,WAOA,OAJAkhB,EAAAtE,SAAA,WACA,OAAAuE,EAAAvE,YAGAsE,EATA,CAUK,SAAA3f,GACL,yBAAAA,gBAAA8f,SAAAH,SAAA3f,KASA+f,eAAA,SAAA/f,EAAAggB,GACA,2BAAAhgB,EAAAggB,EAAAhgB,GAUAigB,sBAAA,SAAAjgB,EAAAif,EAAAe,GACA,OAAAvb,EAAAsb,eAAAtb,EAAA+a,QAAAxf,KAAAif,GAAAjf,EAAAggB,IAWAE,SAAA,SAAAC,EAAArf,EAAAsf,GACA,GAAAD,GAAA,oBAAAA,EAAAphB,KACA,OAAAohB,EAAAlf,MAAAmf,EAAAtf,IAaAuf,KAAA,SAAAC,EAAAH,EAAAC,EAAAG,GACA,IAAA/hB,EAAAgiB,EAAAthB,EAEA,GAAAuF,EAAA+a,QAAAc,GAGA,GAFAE,EAAAF,EAAA5hB,OAEA6hB,EACA,IAAA/hB,EAAAgiB,EAAA,EAA2BhiB,GAAA,EAAQA,IACnC2hB,EAAAphB,KAAAqhB,EAAAE,EAAA9hB,WAGA,IAAAA,EAAA,EAAqBA,EAAAgiB,EAAShiB,IAC9B2hB,EAAAphB,KAAAqhB,EAAAE,EAAA9hB,WAGO,GAAAiG,EAAAib,SAAAY,GAIP,IAHAphB,EAAAb,OAAAa,KAAAohB,GACAE,EAAAthB,EAAAR,OAEAF,EAAA,EAAmBA,EAAAgiB,EAAShiB,IAC5B2hB,EAAAphB,KAAAqhB,EAAAE,EAAAphB,EAAAV,IAAAU,EAAAV,KAYAiiB,YAAA,SAAAC,EAAAC,GACA,IAAAniB,EAAAoiB,EAAAC,EAAAC,EAEA,IAAAJ,IAAAC,GAAAD,EAAAhiB,SAAAiiB,EAAAjiB,OACA,SAGA,IAAAF,EAAA,EAAAoiB,EAAAF,EAAAhiB,OAAmCF,EAAAoiB,IAAUpiB,EAI7C,GAHAqiB,EAAAH,EAAAliB,GACAsiB,EAAAH,EAAAniB,GAEAqiB,aAAA9f,OAAA+f,aAAA/f,OACA,IAAA0D,EAAAgc,YAAAI,EAAAC,GACA,cAES,GAAAD,IAAAC,EAET,SAIA,UAQAtC,MAAA,SAAA7f,GACA,GAAA8F,EAAA+a,QAAA7gB,GACA,OAAAA,EAAA2E,IAAAmB,EAAA+Z,OAGA,GAAA/Z,EAAAib,SAAA/gB,GAAA,CAMA,IALA,IAAAJ,EAAA,GACAW,EAAAb,OAAAa,KAAAP,GACAoiB,EAAA7hB,EAAAR,OACAmO,EAAA,EAEcA,EAAAkU,IAAUlU,EACxBtO,EAAAW,EAAA2N,IAAApI,EAAA+Z,MAAA7f,EAAAO,EAAA2N,KAGA,OAAAtO,EAGA,OAAAI,GAQAqiB,QAAA,SAAApiB,EAAAL,EAAAI,EAAA+D,GACA,IAAAue,EAAA1iB,EAAAK,GACAsiB,EAAAviB,EAAAC,GAEA6F,EAAAib,SAAAuB,IAAAxc,EAAAib,SAAAwB,GACAzc,EAAA0c,MAAAF,EAAAC,EAAAxe,GAEAnE,EAAAK,GAAA6F,EAAA+Z,MAAA0C,IAQAE,UAAA,SAAAxiB,EAAAL,EAAAI,GACA,IAAAsiB,EAAA1iB,EAAAK,GACAsiB,EAAAviB,EAAAC,GAEA6F,EAAAib,SAAAuB,IAAAxc,EAAAib,SAAAwB,GACAzc,EAAA4c,QAAAJ,EAAAC,GACO3iB,EAAAO,eAAAF,KACPL,EAAAK,GAAA6F,EAAA+Z,MAAA0C,KAaAC,MAAA,SAAA5iB,EAAAI,EAAA+D,GACA,IAEAye,EAAA3iB,EAAAU,EAAA6hB,EAAAlU,EAFAyU,EAAA7c,EAAA+a,QAAA7gB,KAAA,CAAAA,GACAiiB,EAAAU,EAAA5iB,OAGA,IAAA+F,EAAAib,SAAAnhB,GACA,OAAAA,EAMA,IAFA4iB,GADAze,KAAA,IACA6e,QAAA9c,EAAAuc,QAEAxiB,EAAA,EAAiBA,EAAAoiB,IAAUpiB,EAG3B,GAFAG,EAAA2iB,EAAA9iB,GAEAiG,EAAAib,SAAA/gB,GAMA,IAFAO,EAAAb,OAAAa,KAAAP,GAEAkO,EAAA,EAAAkU,EAAA7hB,EAAAR,OAAuCmO,EAAAkU,IAAUlU,EACjDsU,EAAAjiB,EAAA2N,GAAAtO,EAAAI,EAAA+D,GAIA,OAAAnE,GAUA8iB,QAAA,SAAA9iB,EAAAI,GACA,OAAA8F,EAAA0c,MAAA5iB,EAAAI,EAAA,CACA4iB,OAAA9c,EAAA2c,aAWAI,OAAA,SAAAjjB,GAKA,IAJA,IAAAkjB,EAAA,SAAAzhB,EAAApB,GACAL,EAAAK,GAAAoB,GAGAxB,EAAA,EAAAoiB,EAAAniB,UAAAC,OAA8CF,EAAAoiB,IAAUpiB,EACxDiG,EAAA4b,KAAA5hB,UAAAD,GAAAijB,GAGA,OAAAljB,GAMAmjB,SAAA,SAAAC,GACA,IAAAC,EAAAhhB,KACAihB,EAAAF,KAAA7iB,eAAA,eAAA6iB,EAAA5hB,YAAA,WACA,OAAA6hB,EAAA3gB,MAAAL,KAAAnC,YAGAqjB,EAAA,WACAlhB,KAAAb,YAAA8hB,GAYA,OATAC,EAAAjjB,UAAA+iB,EAAA/iB,UACAgjB,EAAAhjB,UAAA,IAAAijB,EACAD,EAAAL,OAAA/c,EAAAid,SAEAC,GACAld,EAAA+c,OAAAK,EAAAhjB,UAAA8iB,GAGAE,EAAAE,UAAAH,EAAA/iB,UACAgjB,IAGAG,EAAAvd,EAUAA,EAAAwd,aAAAxd,EAAAyb,SAUAzb,EAAAtF,QAAA,SAAA+iB,EAAAC,EAAAC,GACA,OAAArhB,MAAAlC,UAAAM,QAAAJ,KAAAmjB,EAAAC,EAAAC,IAWA3d,EAAA4d,kBAAA5d,EAAAsb,eASAtb,EAAA6d,yBAAA7d,EAAAwb,sBAOA,IAAAsC,EAAA,CACAC,OAAA,SAAAzU,GACA,OAAAA,GAEA0U,WAAA,SAAA1U,GACA,OAAAA,KAEA2U,YAAA,SAAA3U,GACA,OAAAA,KAAA,IAEA4U,cAAA,SAAA5U,GACA,OAAAA,GAAA,MACA,GAAAA,KAGA,MAAAA,KAAA,OAEA6U,YAAA,SAAA7U,GACA,OAAAA,OAEA8U,aAAA,SAAA9U,GACA,OAAAA,GAAA,GAAAA,IAAA,GAEA+U,eAAA,SAAA/U,GACA,OAAAA,GAAA,MACA,GAAAA,MAGA,KAAAA,GAAA,GAAAA,IAAA,IAEAgV,YAAA,SAAAhV,GACA,OAAAA,SAEAiV,aAAA,SAAAjV,GACA,SAAAA,GAAA,GAAAA,MAAA,IAEAkV,eAAA,SAAAlV,GACA,OAAAA,GAAA,MACA,GAAAA,SAGA,KAAAA,GAAA,GAAAA,MAAA,IAEAmV,YAAA,SAAAnV,GACA,OAAAA,WAEAoV,aAAA,SAAApV,GACA,OAAAA,GAAA,GAAAA,QAAA,GAEAqV,eAAA,SAAArV,GACA,OAAAA,GAAA,MACA,GAAAA,UAGA,KAAAA,GAAA,GAAAA,QAAA,IAEAsV,WAAA,SAAAtV,GACA,SAAAtB,KAAAqC,IAAAf,GAAAtB,KAAAkC,GAAA,KAEA2U,YAAA,SAAAvV,GACA,OAAAtB,KAAAsC,IAAAhB,GAAAtB,KAAAkC,GAAA,KAEA4U,cAAA,SAAAxV,GACA,WAAAtB,KAAAqC,IAAArC,KAAAkC,GAAAZ,GAAA,IAEAyV,WAAA,SAAAzV,GACA,WAAAA,EAAA,EAAAtB,KAAAQ,IAAA,MAAAc,EAAA,KAEA0V,YAAA,SAAA1V,GACA,WAAAA,EAAA,IAAAtB,KAAAQ,IAAA,MAAAc,IAEA2V,cAAA,SAAA3V,GACA,WAAAA,EACA,EAGA,IAAAA,EACA,GAGAA,GAAA,MACA,GAAAtB,KAAAQ,IAAA,MAAAc,EAAA,IAGA,MAAAtB,KAAAQ,IAAA,QAAAc,KAEA4V,WAAA,SAAA5V,GACA,OAAAA,GAAA,EACAA,IAGAtB,KAAAmC,KAAA,EAAAb,KAAA,IAEA6V,YAAA,SAAA7V,GACA,OAAAtB,KAAAmC,KAAA,GAAAb,GAAA,GAAAA,IAEA8V,cAAA,SAAA9V,GACA,OAAAA,GAAA,OACA,IAAAtB,KAAAmC,KAAA,EAAAb,KAAA,GAGA,IAAAtB,KAAAmC,KAAA,GAAAb,GAAA,GAAAA,GAAA,IAEA+V,cAAA,SAAA/V,GACA,IAAAjE,EAAA,QACA+D,EAAA,EACA9P,EAAA,EAEA,WAAAgQ,EACA,EAGA,IAAAA,EACA,GAGAF,IACAA,EAAA,IAGA9P,EAAA,GACAA,EAAA,EACA+L,EAAA+D,EAAA,GAEA/D,EAAA+D,GAAA,EAAApB,KAAAkC,IAAAlC,KAAAsX,KAAA,EAAAhmB,IAGAA,EAAA0O,KAAAQ,IAAA,MAAAc,GAAA,IAAAtB,KAAAsC,KAAAhB,EAAAjE,IAAA,EAAA2C,KAAAkC,IAAAd,KAEAmW,eAAA,SAAAjW,GACA,IAAAjE,EAAA,QACA+D,EAAA,EACA9P,EAAA,EAEA,WAAAgQ,EACA,EAGA,IAAAA,EACA,GAGAF,IACAA,EAAA,IAGA9P,EAAA,GACAA,EAAA,EACA+L,EAAA+D,EAAA,GAEA/D,EAAA+D,GAAA,EAAApB,KAAAkC,IAAAlC,KAAAsX,KAAA,EAAAhmB,GAGAA,EAAA0O,KAAAQ,IAAA,MAAAc,GAAAtB,KAAAsC,KAAAhB,EAAAjE,IAAA,EAAA2C,KAAAkC,IAAAd,GAAA,IAEAoW,iBAAA,SAAAlW,GACA,IAAAjE,EAAA,QACA+D,EAAA,EACA9P,EAAA,EAEA,WAAAgQ,EACA,EAGA,KAAAA,GAAA,IACA,GAGAF,IACAA,EAAA,KAGA9P,EAAA,GACAA,EAAA,EACA+L,EAAA+D,EAAA,GAEA/D,EAAA+D,GAAA,EAAApB,KAAAkC,IAAAlC,KAAAsX,KAAA,EAAAhmB,GAGAgQ,EAAA,EACAhQ,EAAA0O,KAAAQ,IAAA,MAAAc,GAAA,IAAAtB,KAAAsC,KAAAhB,EAAAjE,IAAA,EAAA2C,KAAAkC,IAAAd,IAAA,GAGA9P,EAAA0O,KAAAQ,IAAA,OAAAc,GAAA,IAAAtB,KAAAsC,KAAAhB,EAAAjE,IAAA,EAAA2C,KAAAkC,IAAAd,GAAA,OAEAqW,WAAA,SAAAnW,GACA,IAAAjE,EAAA,QACA,OAAAiE,MAAAjE,EAAA,GAAAiE,EAAAjE,IAEAqa,YAAA,SAAApW,GACA,IAAAjE,EAAA,QACA,OAAAiE,GAAA,GAAAA,IAAAjE,EAAA,GAAAiE,EAAAjE,GAAA,GAEAsa,cAAA,SAAArW,GACA,IAAAjE,EAAA,QAEA,OAAAiE,GAAA,MACAA,MAAA,GAAAjE,GAAA,QAAAiE,EAAAjE,GAAA,GAGA,KAAAiE,GAAA,GAAAA,IAAA,GAAAjE,GAAA,QAAAiE,EAAAjE,GAAA,IAEAua,aAAA,SAAAtW,GACA,SAAAwU,EAAA+B,cAAA,EAAAvW,IAEAuW,cAAA,SAAAvW,GACA,OAAAA,EAAA,OACA,OAAAA,IAGAA,EAAA,OACA,QAAAA,GAAA,UAAAA,EAAA,IAGAA,EAAA,SACA,QAAAA,GAAA,WAAAA,EAAA,MAGA,QAAAA,GAAA,YAAAA,EAAA,SAEAwW,gBAAA,SAAAxW,GACA,OAAAA,EAAA,GACA,GAAAwU,EAAA8B,aAAA,EAAAtW,GAGA,GAAAwU,EAAA+B,cAAA,EAAAvW,EAAA,QAGAyW,EAAA,CACAjC,WAWAP,EAAAyC,cAAAlC,EACA,IAAA5T,EAAAlC,KAAAkC,GACA+V,EAAA/V,EAAA,IACAgW,EAAA,EAAAhW,EACAiW,GAAAjW,EAAA,EACAkW,GAAAlW,EAAA,EACAmW,GAAA,EAAAnW,EAAA,EAKAoW,GAAA,CAKAC,MAAA,SAAAC,GACAA,EAAAC,IAAAC,UAAA,IAAAF,EAAAniB,MAAAmiB,EAAApiB,SAcAuiB,YAAA,SAAAF,EAAAhY,EAAAC,EAAArK,EAAAD,EAAAwiB,GACA,GAAAA,EAAA,CACA,IAAAhZ,EAAAI,KAAAD,IAAA6Y,EAAAxiB,EAAA,EAAAC,EAAA,GACAwiB,EAAApY,EAAAb,EACAkZ,EAAApY,EAAAd,EACAmZ,EAAAtY,EAAApK,EAAAuJ,EACAoZ,EAAAtY,EAAAtK,EAAAwJ,EACA6Y,EAAAQ,OAAAxY,EAAAqY,GAEAD,EAAAE,GAAAD,EAAAE,GACAP,EAAAS,IAAAL,EAAAC,EAAAlZ,GAAAsC,GAAAiW,IACAM,EAAAS,IAAAH,EAAAD,EAAAlZ,GAAAuY,GAAA,GACAM,EAAAS,IAAAH,EAAAC,EAAApZ,EAAA,EAAAuY,IACAM,EAAAS,IAAAL,EAAAG,EAAApZ,EAAAuY,GAAAjW,IACS2W,EAAAE,GACTN,EAAAQ,OAAAJ,EAAAnY,GACA+X,EAAAS,IAAAH,EAAAD,EAAAlZ,GAAAuY,OACAM,EAAAS,IAAAL,EAAAC,EAAAlZ,EAAAuY,GAAAjW,EAAAiW,KACSW,EAAAE,GACTP,EAAAS,IAAAL,EAAAC,EAAAlZ,GAAAsC,EAAA,GACAuW,EAAAS,IAAAL,EAAAG,EAAApZ,EAAA,EAAAsC,IAEAuW,EAAAS,IAAAL,EAAAC,EAAAlZ,GAAAsC,KAGAuW,EAAAU,YACAV,EAAAQ,OAAAxY,EAAAC,QAEA+X,EAAAW,KAAA3Y,EAAAC,EAAArK,EAAAD,IAGAijB,UAAA,SAAAZ,EAAAa,EAAAV,EAAAnY,EAAAC,EAAA6Y,GACA,IAAAvjB,EAAAwjB,EAAAC,EAAAC,EAAAC,EACAC,GAAAL,GAAA,GAAAtB,EAEA,IAAAqB,GAAA,kBAAAA,GAGA,+BAFAtjB,EAAAsjB,EAAA1K,aAEA,+BAAA5Y,GAMA,KAAAyY,MAAAmK,OAAA,IAMA,OAFAH,EAAAoB,YAEAP,GAEA,QACAb,EAAAS,IAAAzY,EAAAC,EAAAkY,EAAA,EAAAV,GACAO,EAAAU,YACA,MAEA,eACAV,EAAAQ,OAAAxY,EAAAT,KAAAsC,IAAAsX,GAAAhB,EAAAlY,EAAAV,KAAAqC,IAAAuX,GAAAhB,GACAgB,GAAAvB,GACAI,EAAAqB,OAAArZ,EAAAT,KAAAsC,IAAAsX,GAAAhB,EAAAlY,EAAAV,KAAAqC,IAAAuX,GAAAhB,GACAgB,GAAAvB,GACAI,EAAAqB,OAAArZ,EAAAT,KAAAsC,IAAAsX,GAAAhB,EAAAlY,EAAAV,KAAAqC,IAAAuX,GAAAhB,GACAH,EAAAU,YACA,MAEA,kBASAO,EAAAd,GADAe,EAAA,KAAAf,GAEAY,EAAAxZ,KAAAqC,IAAAuX,EAAAxB,IAAAsB,EACAD,EAAAzZ,KAAAsC,IAAAsX,EAAAxB,IAAAsB,EACAjB,EAAAS,IAAAzY,EAAA+Y,EAAA9Y,EAAA+Y,EAAAE,EAAAC,EAAA1X,EAAA0X,EAAAzB,IACAM,EAAAS,IAAAzY,EAAAgZ,EAAA/Y,EAAA8Y,EAAAG,EAAAC,EAAAzB,GAAAyB,GACAnB,EAAAS,IAAAzY,EAAA+Y,EAAA9Y,EAAA+Y,EAAAE,EAAAC,IAAAzB,IACAM,EAAAS,IAAAzY,EAAAgZ,EAAA/Y,EAAA8Y,EAAAG,EAAAC,EAAAzB,GAAAyB,EAAA1X,GACAuW,EAAAU,YACA,MAEA,WACA,IAAAI,EAAA,CACAG,EAAA1Z,KAAA+Z,QAAAnB,EACAH,EAAAW,KAAA3Y,EAAAiZ,EAAAhZ,EAAAgZ,EAAA,EAAAA,EAAA,EAAAA,GACA,MAGAE,GAAAxB,GAIA,cACAoB,EAAAxZ,KAAAqC,IAAAuX,GAAAhB,EACAa,EAAAzZ,KAAAsC,IAAAsX,GAAAhB,EACAH,EAAAQ,OAAAxY,EAAA+Y,EAAA9Y,EAAA+Y,GACAhB,EAAAqB,OAAArZ,EAAAgZ,EAAA/Y,EAAA8Y,GACAf,EAAAqB,OAAArZ,EAAA+Y,EAAA9Y,EAAA+Y,GACAhB,EAAAqB,OAAArZ,EAAAgZ,EAAA/Y,EAAA8Y,GACAf,EAAAU,YACA,MAEA,eACAS,GAAAxB,GAIA,YACAoB,EAAAxZ,KAAAqC,IAAAuX,GAAAhB,EACAa,EAAAzZ,KAAAsC,IAAAsX,GAAAhB,EACAH,EAAAQ,OAAAxY,EAAA+Y,EAAA9Y,EAAA+Y,GACAhB,EAAAqB,OAAArZ,EAAA+Y,EAAA9Y,EAAA+Y,GACAhB,EAAAQ,OAAAxY,EAAAgZ,EAAA/Y,EAAA8Y,GACAf,EAAAqB,OAAArZ,EAAAgZ,EAAA/Y,EAAA8Y,GACA,MAEA,WACAA,EAAAxZ,KAAAqC,IAAAuX,GAAAhB,EACAa,EAAAzZ,KAAAsC,IAAAsX,GAAAhB,EACAH,EAAAQ,OAAAxY,EAAA+Y,EAAA9Y,EAAA+Y,GACAhB,EAAAqB,OAAArZ,EAAA+Y,EAAA9Y,EAAA+Y,GACAhB,EAAAQ,OAAAxY,EAAAgZ,EAAA/Y,EAAA8Y,GACAf,EAAAqB,OAAArZ,EAAAgZ,EAAA/Y,EAAA8Y,GACAI,GAAAxB,GACAoB,EAAAxZ,KAAAqC,IAAAuX,GAAAhB,EACAa,EAAAzZ,KAAAsC,IAAAsX,GAAAhB,EACAH,EAAAQ,OAAAxY,EAAA+Y,EAAA9Y,EAAA+Y,GACAhB,EAAAqB,OAAArZ,EAAA+Y,EAAA9Y,EAAA+Y,GACAhB,EAAAQ,OAAAxY,EAAAgZ,EAAA/Y,EAAA8Y,GACAf,EAAAqB,OAAArZ,EAAAgZ,EAAA/Y,EAAA8Y,GACA,MAEA,WACAA,EAAAxZ,KAAAqC,IAAAuX,GAAAhB,EACAa,EAAAzZ,KAAAsC,IAAAsX,GAAAhB,EACAH,EAAAQ,OAAAxY,EAAA+Y,EAAA9Y,EAAA+Y,GACAhB,EAAAqB,OAAArZ,EAAA+Y,EAAA9Y,EAAA+Y,GACA,MAEA,WACAhB,EAAAQ,OAAAxY,EAAAC,GACA+X,EAAAqB,OAAArZ,EAAAT,KAAAqC,IAAAuX,GAAAhB,EAAAlY,EAAAV,KAAAsC,IAAAsX,GAAAhB,GAIAH,EAAAuB,OACAvB,EAAAwB,eA/GAxB,EAAAyB,UAAAZ,EAAA7Y,EAAA6Y,EAAAjjB,MAAA,EAAAqK,EAAA4Y,EAAAljB,OAAA,EAAAkjB,EAAAjjB,MAAAijB,EAAAljB,SAyHA+jB,eAAA,SAAA3hB,EAAA4hB,GAGA,OAAA5hB,EAAAiI,EAAA2Z,EAAAvB,KAFA,MAEArgB,EAAAiI,EAAA2Z,EAAArB,MAFA,MAEAvgB,EAAAkI,EAAA0Z,EAAAtB,IAFA,MAEAtgB,EAAAkI,EAAA0Z,EAAApB,OAFA,MAIAqB,SAAA,SAAA5B,EAAA2B,GACA3B,EAAA6B,OACA7B,EAAAoB,YACApB,EAAAW,KAAAgB,EAAAvB,KAAAuB,EAAAtB,IAAAsB,EAAArB,MAAAqB,EAAAvB,KAAAuB,EAAApB,OAAAoB,EAAAtB,KACAL,EAAA8B,QAEAC,WAAA,SAAA/B,GACAA,EAAAgC,WAEAX,OAAA,SAAArB,EAAAiC,EAAA5oB,EAAA6oB,GACA,IAAAC,EAAA9oB,EAAA+oB,YAEA,GAAAD,EAAA,CACA,cAAAA,EAAA,CACA,IAAAE,GAAAJ,EAAAja,EAAA3O,EAAA2O,GAAA,EACAgY,EAAAqB,OAAAgB,EAAAH,EAAA7oB,EAAA4O,EAAAga,EAAAha,GACA+X,EAAAqB,OAAAgB,EAAAH,EAAAD,EAAAha,EAAA5O,EAAA4O,OACS,UAAAka,IAAAD,GAAA,UAAAC,GAAAD,EACTlC,EAAAqB,OAAAY,EAAAja,EAAA3O,EAAA4O,GAEA+X,EAAAqB,OAAAhoB,EAAA2O,EAAAia,EAAAha,GAGA+X,EAAAqB,OAAAhoB,EAAA2O,EAAA3O,EAAA4O,QAIA5O,EAAAipB,QAKAtC,EAAAuC,cAAAL,EAAAD,EAAAO,sBAAAP,EAAAQ,kBAAAP,EAAAD,EAAAS,sBAAAT,EAAAU,kBAAAT,EAAA7oB,EAAAopB,kBAAAppB,EAAAmpB,sBAAAN,EAAA7oB,EAAAspB,kBAAAtpB,EAAAqpB,sBAAArpB,EAAA2O,EAAA3O,EAAA4O,GAJA+X,EAAAqB,OAAAhoB,EAAA2O,EAAA3O,EAAA4O,KAOA2a,GAAA/C,GAUA/C,EAAAgD,MAAAD,GAAAC,MASAhD,EAAA+F,qBAAA,SAAA7C,GACAA,EAAAoB,YACAvB,GAAAK,YAAAnkB,MAAA8jB,GAAAtmB,YAGA,IAAAlB,GAAA,CAIAyqB,KAAA,SAAAC,EAAAxiB,GACA,OAAAuc,EAAAb,MAAAvgB,KAAAqnB,KAAArnB,KAAAqnB,GAAA,IAAgExiB,KAIhElI,GAAAyqB,KAAA,UACAE,aAAA,kBACAC,iBAAA,OACAC,kBAAA,qDACAC,gBAAA,GACAC,iBAAA,SACAC,kBAAA,IACAC,WAAA,IAGA,IAAAC,GAAAlrB,GACAwiB,GAAAiC,EAAAjC,eAqBA2I,GAAA,CASAC,aAAA,SAAA3oB,EAAAmmB,GACA,IAAAyC,GAAA,GAAA5oB,GAAA6a,MAAA,wCAEA,IAAA+N,GAAA,WAAAA,EAAA,GACA,WAAAzC,EAKA,OAFAnmB,GAAA4oB,EAAA,GAEAA,EAAA,IACA,SACA,OAAA5oB,EAEA,QACAA,GAAA,IAOA,OAAAmmB,EAAAnmB,GAUA6oB,UAAA,SAAA7oB,GACA,IAAA+N,EAAA1B,EAAAE,EAAAxC,EAWA,OATAiY,EAAAtC,SAAA1f,IACA+N,GAAA/N,EAAAulB,KAAA,EACAlZ,GAAArM,EAAAwlB,OAAA,EACAjZ,GAAAvM,EAAAylB,QAAA,EACA1b,GAAA/J,EAAAslB,MAAA,GAEAvX,EAAA1B,EAAAE,EAAAxC,GAAA/J,GAAA,EAGA,CACAulB,IAAAxX,EACAyX,MAAAnZ,EACAoZ,OAAAlZ,EACA+Y,KAAAvb,EACAlH,OAAAkL,EAAAxB,EACAzJ,MAAAiH,EAAAsC,IAWAyc,WAAA,SAAApmB,GACA,IAAAqmB,EAAAN,GAAAO,OACA7C,EAAApG,GAAArd,EAAAumB,SAAAF,EAAAV,iBACAa,EAAA,CACAC,OAAApJ,GAAArd,EAAA0mB,WAAAL,EAAAX,mBACAiB,WAAArH,EAAAtf,QAAAimB,aAAA5I,GAAArd,EAAA2mB,WAAAN,EAAAR,mBAAApC,GACAA,OACAJ,MAAAhG,GAAArd,EAAA4mB,UAAAP,EAAAT,kBACAlK,OAAA,KACAxE,OAAA,IAGA,OADAsP,EAAAtP,OA7FA,SAAAsP,GACA,OAAAA,GAAAlH,EAAAzC,cAAA2J,EAAA/C,OAAAnE,EAAAzC,cAAA2J,EAAAC,QACA,MAGAD,EAAAnD,MAAAmD,EAAAnD,MAAA,SAAAmD,EAAA9K,OAAA8K,EAAA9K,OAAA,QAAA8K,EAAA/C,KAAA,MAAA+C,EAAAC,OAwFAI,CAAAL,GACAA,GAYAM,QAAA,SAAAC,EAAAC,EAAAzK,GACA,IAAAzgB,EAAAoiB,EAAA5gB,EAEA,IAAAxB,EAAA,EAAAoiB,EAAA6I,EAAA/qB,OAAuCF,EAAAoiB,IAAUpiB,EAGjD,QAAAuD,KAFA/B,EAAAypB,EAAAjrB,WAMAuD,IAAA2nB,GAAA,oBAAA1pB,IACAA,IAAA0pB,SAGA3nB,IAAAkd,GAAA+C,EAAAxC,QAAAxf,KACAA,IAAAif,SAGAld,IAAA/B,GACA,OAAAA,IAKA2pB,GAAA3H,EACA4H,GAAApF,EACAqF,GAAA/B,GACAplB,GAAAgmB,GACAiB,GAAAC,UACAD,GAAAE,UACAF,GAAAjnB,WAkDA,IAAAonB,GAAA,SAAAC,GACAJ,GAAAnI,OAAA5gB,KAAAmpB,GACAnpB,KAAAopB,WAAA/oB,MAAAL,KAAAnC,YAGAkrB,GAAAnI,OAAAsI,GAAAjrB,UAAA,CACAmrB,WAAA,WACAppB,KAAAqpB,QAAA,GAEAC,MAAA,WACA,IAAAtI,EAAAhhB,KAOA,OALAghB,EAAAuI,QACAvI,EAAAuI,MAAAR,GAAAnL,MAAAoD,EAAAwI,SAGAxI,EAAAyI,OAAA,GACAzI,GAEA0I,WAAA,SAAAC,GACA,IAAA3I,EAAAhhB,KACA4pB,EAAA5I,EAAAwI,OACAK,EAAA7I,EAAAyI,OACAK,EAAA9I,EAAAuI,MAEA,OAAAK,GAAA,IAAAD,GAMAG,IACAA,EAAA9I,EAAAuI,MAAA,IAGAM,IACAA,EAAA7I,EAAAyI,OAAA,IApFA,SAAAI,EAAAC,EAAAF,EAAAD,GACA,IACA/rB,EAAAoiB,EAAAhiB,EAAA+rB,EAAAC,EAAArsB,EAAAkE,EAAAooB,EAAAC,EADA5rB,EAAAb,OAAAa,KAAAsrB,GAGA,IAAAhsB,EAAA,EAAAoiB,EAAA1hB,EAAAR,OAAmCF,EAAAoiB,IAAUpiB,EAW7C,GAVAI,EAAAM,EAAAV,GACAD,EAAAisB,EAAA5rB,GAGA8rB,EAAA5rB,eAAAF,KACA8rB,EAAA9rB,GAAAL,IAGAosB,EAAAD,EAAA9rB,MAEAL,GAAA,MAAAK,EAAA,IAWA,GAPA6rB,EAAA3rB,eAAAF,KACA6rB,EAAA7rB,GAAA+rB,GAGAC,EAAAH,EAAA7rB,IACA6D,SAAAlE,YAEAqsB,EACA,cAAAnoB,GAGA,IAFAooB,EAAAzL,EAAAwL,IAEAnP,QACAqP,EAAA1L,EAAA7gB,IAEAkd,MAAA,CACAiP,EAAA9rB,GAAAksB,EAAA5M,IAAA2M,EAAAN,GAAAnQ,YACA,eAGS,GAAAuP,GAAAhK,SAAAiL,IAAAjB,GAAAhK,SAAAphB,GAAA,CACTmsB,EAAA9rB,GAAAgsB,GAAArsB,EAAAqsB,GAAAL,EACA,SAIAG,EAAA9rB,GAAAL,GA2CAwsB,CAAAN,EAAAC,EAAAF,EAAAD,GACA3I,IAdAA,EAAAuI,MAAAK,EACA5I,EAAAyI,OAAA,KACAzI,IAcAoJ,gBAAA,WACA,OACA9d,EAAAtM,KAAAwpB,OAAAld,EACAC,EAAAvM,KAAAwpB,OAAAjd,IAGA8d,SAAA,WACA,OAAAtB,GAAAuB,SAAAtqB,KAAAwpB,OAAAld,IAAAyc,GAAAuB,SAAAtqB,KAAAwpB,OAAAjd,MAGA2c,GAAAtI,OAAAmI,GAAAjI,SACA,IAAAyJ,GAAArB,GACAsB,GAAAD,GAAA3J,OAAA,CACAyD,MAAA,KAEAoG,YAAA,EAEAC,SAAA,GAEA1B,OAAA,GAEAjkB,OAAA,KAEA4lB,oBAAA,KAEAC,oBAAA,OAGAC,GAAAL,GASA/sB,OAAAqtB,eAAAN,GAAAvsB,UAAA,mBACA8sB,IAAA,WACA,OAAA/qB,QAUAvC,OAAAqtB,eAAAN,GAAAvsB,UAAA,iBACA8sB,IAAA,WACA,OAAA/qB,KAAAqkB,OAEA1hB,IAAA,SAAAvD,GACAY,KAAAqkB,MAAAjlB,KAIAyoB,GAAAT,KAAA,UACA4D,UAAA,CACAC,SAAA,IACAjC,OAAA,eACAkC,WAAAnC,GAAAtK,KACA0M,WAAApC,GAAAtK,QAIA,IAAA2M,GAAA,CACAC,WAAA,GACAC,QAAA,KAQAC,aAAA,SAAAlH,EAAA2G,EAAAC,EAAAO,GACA,IACA5tB,EAAAoiB,EADAqL,EAAArrB,KAAAqrB,WAUA,IARAL,EAAA3G,QACA2G,EAAAS,UAAAC,KAAAC,MACAX,EAAAC,WAEAO,IACAnH,EAAAuH,WAAA,GAGAhuB,EAAA,EAAAoiB,EAAAqL,EAAAvtB,OAA2CF,EAAAoiB,IAAUpiB,EACrD,GAAAytB,EAAAztB,GAAAymB,UAEA,YADAgH,EAAAztB,GAAAotB,GAKAK,EAAAQ,KAAAb,GAEA,IAAAK,EAAAvtB,QACAkC,KAAA8rB,yBAGAC,gBAAA,SAAA1H,GACA,IAAAhG,EAAA0K,GAAAiD,UAAAhsB,KAAAqrB,WAAA,SAAAL,GACA,OAAAA,EAAA3G,aAGA,IAAAhG,IACAre,KAAAqrB,WAAAjnB,OAAAia,EAAA,GACAgG,EAAAuH,WAAA,IAGAE,sBAAA,WACA,IAAA9K,EAAAhhB,KAEA,OAAAghB,EAAAsK,UAIAtK,EAAAsK,QAAAvC,GAAAkD,iBAAA9tB,KAAAogB,OAAA,WACAyC,EAAAsK,QAAA,KACAtK,EAAAkL,kBAQAA,YAAA,WACAlsB,KACAmsB,UADAnsB,KAGAqrB,WAAAvtB,OAAA,GAHAkC,KAIA8rB,yBAOAK,QAAA,WAKA,IAJA,IACAnB,EAAA3G,EAAAqG,EAAA0B,EADAf,EAAArrB,KAAAqrB,WAEAztB,EAAA,EAEAA,EAAAytB,EAAAvtB,QACAktB,EAAAK,EAAAztB,GACAymB,EAAA2G,EAAA3G,MACAqG,EAAAM,EAAAN,SAGA0B,EAAAvgB,KAAAkB,OAAA2e,KAAAC,MAAAX,EAAAS,WAAAT,EAAAC,SAAAP,GAAA,EACAM,EAAAP,YAAA5e,KAAAD,IAAAwgB,EAAA1B,GACA3B,GAAAzJ,SAAA0L,EAAAjmB,OAAA,CAAAsf,EAAA2G,GAAA3G,GACA0E,GAAAzJ,SAAA0L,EAAAL,oBAAA,CAAAK,GAAA3G,GAEA2G,EAAAP,aAAAC,GACA3B,GAAAzJ,SAAA0L,EAAAJ,oBAAA,CAAAI,GAAA3G,GACAA,EAAAuH,WAAA,EACAP,EAAAjnB,OAAAxG,EAAA,MAEAA,IAKAgrB,GAAAG,GAAAjnB,QAAA8mB,QACAyD,GAAA,0CA8CA,SAAAC,GAAAhL,EAAAiL,GACA,IAAAC,EAAAlL,EAAAmL,SAEA,GAAAD,EAAA,CAIA,IAAAE,EAAAF,EAAAE,UACArO,EAAAqO,EAAAnuB,QAAAguB,IAEA,IAAAlO,GACAqO,EAAAtoB,OAAAia,EAAA,GAGAqO,EAAA5uB,OAAA,IAIAuuB,GAAAjpB,QAAA,SAAApF,UACAsjB,EAAAtjB,YAEAsjB,EAAAmL,WAIA,IAAAE,GAAA,SAAAtI,EAAAuI,GACA5sB,KAAAopB,WAAA/E,EAAAuI,IAGA7D,GAAAnI,OAAA+L,GAAA1uB,UAAA,CAKA4uB,mBAAA,KAMAC,gBAAA,KACA1D,WAAA,SAAA/E,EAAAuI,GACA5sB,KACAqkB,QADArkB,KAEAqe,MAAAuO,EAFA5sB,KAGA+sB,aAHA/sB,KAIAgtB,eAEAC,YAAA,SAAAL,GACA5sB,KAAAqe,MAAAuO,GAEAG,WAAA,WACA,IAAA/L,EAAAhhB,KACAktB,EAAAlM,EAAAmM,UACA9pB,EAAA2d,EAAAoM,aAEA,OAAAF,EAAAG,SAAAH,EAAAG,WAAArM,EAAAqD,MAAAiJ,SACAJ,EAAAG,QAAAhqB,EAAAgqB,SAAArM,EAAAqD,MAAAviB,QAAAwrB,OAAAC,MAAA,GAAAtoB,IAGA,OAAAioB,EAAAM,SAAAN,EAAAM,WAAAxM,EAAAqD,MAAAiJ,SACAJ,EAAAM,QAAAnqB,EAAAmqB,SAAAxM,EAAAqD,MAAAviB,QAAAwrB,OAAAG,MAAA,GAAAxoB,KAGAmoB,WAAA,WACA,OAAAptB,KAAAqkB,MAAA9hB,KAAAE,SAAAzC,KAAAqe,QAEA8O,QAAA,WACA,OAAAntB,KAAAqkB,MAAAqJ,eAAA1tB,KAAAqe,QAEAsP,cAAA,SAAAC,GACA,OAAA5tB,KAAAqkB,MAAAiJ,OAAAM,IAMAC,iBAAA,WACA,OAAA7tB,KAAAmtB,UAAAK,SAMAM,iBAAA,WACA,OAAA9tB,KAAAmtB,UAAAE,SAMAU,eAAA,WACA,OAAA/tB,KAAA2tB,cAAA3tB,KAAA6tB,qBAMAG,eAAA,WACA,OAAAhuB,KAAA2tB,cAAA3tB,KAAA8tB,qBAEAG,MAAA,WACAjuB,KAAAyE,QAAA,IAMAK,QAAA,WACA9E,KAAAkuB,OACA5B,GAAAtsB,KAAAkuB,MAAAluB,OAGAmuB,kBAAA,WACA,IACAtsB,EADA7B,KACA6sB,mBACA,OAAAhrB,GAAA,IAAAA,EAAA,CACAusB,OAHApuB,KAGAqkB,MACAgK,cAJAruB,KAIAqe,SAGAiQ,eAAA,SAAAjQ,GACA,IACAxc,EADA7B,KACA8sB,gBACA,OAAAjrB,GAAA,IAAAA,EAAA,CACAusB,OAHApuB,KAGAqkB,MACAgK,cAJAruB,KAIAqe,MACAkQ,OAAAlQ,KAGA2O,YAAA,WACA,IAIApvB,EAAAoiB,EAHAkN,EADAltB,KACAmtB,UACA5qB,EAFAvC,KAEAotB,aAAA7qB,MAAA,GACAisB,EAAAtB,EAAA3qB,KAGA,IAAA3E,EAAA,EAAAoiB,EAAAzd,EAAAzE,OAAqCF,EAAAoiB,IAAUpiB,EAC/C4wB,EAAA5wB,GAAA4wB,EAAA5wB,IAPAoC,KAOAsuB,eAAA1wB,GAGAsvB,EAAA7pB,QAAA6pB,EAAA7pB,SAVArD,KAUAmuB,qBAEAM,mBAAA,SAAApQ,GACA,IAAApd,EAAAjB,KAAAsuB,eAAAjQ,GACAre,KAAAmtB,UAAA5qB,KAAA6B,OAAAia,EAAA,EAAApd,GACAjB,KAAA0uB,cAAAztB,EAAAod,GAAA,IAEAsQ,sBAAA,WACA,IA5LArN,EAAAiL,EA4LAvL,EAAAhhB,KACAqD,EAAA2d,EAAAoM,aACA7qB,EAAAc,EAAAd,OAAAc,EAAAd,KAAA,IAIAye,EAAAkN,QAAA3rB,IACAye,EAAAkN,OAEA5B,GAAAtL,EAAAkN,MAAAlN,GAGAze,GAAA9E,OAAAmxB,aAAArsB,KAxMAgqB,EAyMAvL,GAzMAM,EAyMA/e,GAxMAkqB,SACAnL,EAAAmL,SAAAC,UAAAb,KAAAU,IAKA9uB,OAAAqtB,eAAAxJ,EAAA,YACA/hB,cAAA,EACAF,YAAA,EACAD,MAAA,CACAstB,UAAA,CAAAH,MAGAF,GAAAjpB,QAAA,SAAApF,GACA,IAAA6wB,EAAA,SAAA7wB,EAAAigB,OAAA,GAAAvD,cAAA1c,EAAA6Z,MAAA,GACAiX,EAAAxN,EAAAtjB,GACAP,OAAAqtB,eAAAxJ,EAAAtjB,EAAA,CACAuB,cAAA,EACAF,YAAA,EACAD,MAAA,WACA,IAAAc,EAAAC,MAAAlC,UAAA4Z,MAAA1Z,KAAAN,WACAkxB,EAAAD,EAAAzuB,MAAAL,KAAAE,GAMA,OALA6oB,GAAAtJ,KAAA6B,EAAAmL,SAAAC,UAAA,SAAAnnB,GACA,oBAAAA,EAAAspB,IACAtpB,EAAAspB,GAAAxuB,MAAAkF,EAAArF,KAGA6uB,SAgLA/N,EAAAkN,MAAA3rB,GAKAye,EAAAgO,kBAEAvqB,OAAAskB,GAAAtK,KACAiL,WAAA,SAAAuF,GAMA,IALA,IAAA/B,EAAAltB,KAAAmtB,UACA+B,EAAAhC,EAAA3qB,MAAA,GACAyd,EAAAkP,EAAApxB,OACAF,EAAA,EAEYA,EAAAoiB,IAAUpiB,EACtBsxB,EAAAtxB,GAAA8rB,WAAAuF,GAGA/B,EAAA7pB,SACA6pB,EAAA7pB,QAAAqmB,WAAAuF,IAGAE,KAAA,WACA,IAAAjC,EAAAltB,KAAAmtB,UACA+B,EAAAhC,EAAA3qB,MAAA,GACAyd,EAAAkP,EAAApxB,OACAF,EAAA,EAMA,IAJAsvB,EAAA7pB,SACA6pB,EAAA7pB,QAAA8rB,OAGYvxB,EAAAoiB,IAAUpiB,EACtBsxB,EAAAtxB,GAAAuxB,QAGAC,iBAAA,SAAAnuB,GACA8nB,GAAAxI,MAAAtf,EAAAuoB,OAAAvoB,EAAAouB,gBAAA,WACApuB,EAAAouB,gBAEAC,cAAA,SAAAruB,GACA,IAAAoC,EAAArD,KAAAqkB,MAAA9hB,KAAAE,SAAAxB,EAAAotB,eACAhQ,EAAApd,EAAAstB,OACAgB,EAAAtuB,EAAAsuB,QAAA,GACA3F,EAAA3oB,EAAAuoB,OACAgG,EAAAzG,GAAAyG,cACAvuB,EAAAouB,eAAA,CACAI,gBAAA7F,EAAA6F,gBACAC,YAAA9F,EAAA8F,YACAC,YAAA/F,EAAA+F,aAEA/F,EAAA6F,gBAAA7G,GAAA,CAAA2G,EAAAK,qBAAAvsB,EAAAusB,qBAAAJ,EAAA5F,EAAA6F,uBAAAtuB,EAAAkd,GACAuL,EAAA8F,YAAA9G,GAAA,CAAA2G,EAAAM,iBAAAxsB,EAAAwsB,iBAAAL,EAAA5F,EAAA8F,mBAAAvuB,EAAAkd,GACAuL,EAAA+F,YAAA/G,GAAA,CAAA2G,EAAAO,iBAAAzsB,EAAAysB,iBAAAlG,EAAA+F,kBAAAxuB,EAAAkd,IAMA2Q,eAAA,WACA,IACA9B,EADAltB,KACAmtB,UACA5qB,EAFAvC,KAEAotB,aAAA7qB,KACAwtB,EAAA7C,EAAA3qB,KAAAzE,OACAkyB,EAAAztB,EAAAzE,OAEAkyB,EAAAD,EACA7C,EAAA3qB,KAAA6B,OAAA4rB,EAAAD,EAAAC,GACOA,EAAAD,GARP/vB,KASAiwB,eAAAF,EAAAC,EAAAD,IAOAE,eAAA,SAAApG,EAAAqG,GACA,QAAAtyB,EAAA,EAAqBA,EAAAsyB,IAAWtyB,EAChCoC,KAAAyuB,mBAAA5E,EAAAjsB,IAOAuyB,WAAA,WACA,IAAAD,EAAAryB,UAAAC,OACAkC,KAAAiwB,eAAAjwB,KAAAotB,aAAA7qB,KAAAzE,OAAAoyB,MAMAE,UAAA,WACApwB,KAAAmtB,UAAA5qB,KAAA8tB,OAMAC,YAAA,WACAtwB,KAAAmtB,UAAA5qB,KAAAguB,SAMAC,aAAA,SAAA3G,EAAAqG,GACAlwB,KAAAmtB,UAAA5qB,KAAA6B,OAAAylB,EAAAqG,GACAlwB,KAAAiwB,eAAApG,EAAAhsB,UAAAC,OAAA,IAMA2yB,cAAA,WACAzwB,KAAAiwB,eAAA,EAAApyB,UAAAC,WAGA6uB,GAAA/L,OAAAmI,GAAAjI,SACA,IAAA4P,GAAA/D,GAEA9E,GAAAT,KAAA,UACA8H,SAAA,CACAnK,IAAA,CACA0K,gBAAA5H,GAAAO,OAAAd,aACAoI,YAAA,OACAC,YAAA,EACAgB,YAAA,aAKA,IAAAC,GAAArG,GAAA3J,OAAA,CACAiQ,aAAA,SAAAC,GACA,IAAAC,EAAA/wB,KAAAupB,MAEA,QAAAwH,GACAllB,KAAAQ,IAAAykB,EAAAC,EAAAzkB,EAAA,GAAAT,KAAAQ,IAAA0kB,EAAAtM,OAAAsM,EAAAC,YAAA,IAKAC,QAAA,SAAAC,EAAAC,GACA,IAAAJ,EAAA/wB,KAAAupB,MAEA,GAAAwH,EAAA,CAWA,IAVA,IAAAK,EAAArI,GAAAsI,kBAAAN,EAAA,CACAzkB,EAAA4kB,EACA3kB,EAAA4kB,IAEAG,EAAAF,EAAAE,MACAC,EAAAH,EAAAG,SAEAC,EAAAT,EAAAS,WACAC,EAAAV,EAAAU,SAEAA,EAAAD,GACAC,GAAA,EAAA5lB,KAAAkC,GAGA,KAAAujB,EAAAG,GACAH,GAAA,EAAAzlB,KAAAkC,GAGA,KAAAujB,EAAAE,GACAF,GAAA,EAAAzlB,KAAAkC,GAIA,IAAA2jB,EAAAJ,GAAAE,GAAAF,GAAAG,EACAE,EAAAJ,GAAAR,EAAAa,aAAAL,GAAAR,EAAAc,YACA,OAAAH,GAAAC,EAGA,UAEAG,eAAA,WACA,IAAAf,EAAA/wB,KAAAupB,MACAwI,GAAAhB,EAAAS,WAAAT,EAAAU,UAAA,EACAO,GAAAjB,EAAAa,YAAAb,EAAAc,aAAA,EACA,OACAvlB,EAAAykB,EAAAzkB,EAAAT,KAAAqC,IAAA6jB,GAAAC,EACAzlB,EAAAwkB,EAAAxkB,EAAAV,KAAAsC,IAAA4jB,GAAAC,IAGAC,QAAA,WACA,IAAAlB,EAAA/wB,KAAAupB,MACA,OAAA1d,KAAAkC,KAAAgjB,EAAAU,SAAAV,EAAAS,aAAA,EAAA3lB,KAAAkC,MAAAlC,KAAAQ,IAAA0kB,EAAAc,YAAA,GAAAhmB,KAAAQ,IAAA0kB,EAAAa,YAAA,KAEAxH,gBAAA,WACA,IAAA2G,EAAA/wB,KAAAupB,MACA2I,EAAAnB,EAAAS,YAAAT,EAAAU,SAAAV,EAAAS,YAAA,EACAW,GAAApB,EAAAc,YAAAd,EAAAa,aAAA,EAAAb,EAAAa,YACA,OACAtlB,EAAAykB,EAAAzkB,EAAAT,KAAAqC,IAAAgkB,GAAAC,EACA5lB,EAAAwkB,EAAAxkB,EAAAV,KAAAsC,IAAA+jB,GAAAC,IAGAhD,KAAA,WACA,IAKAiD,EALA9N,EAAAtkB,KAAAouB,OAAA9J,IACAyM,EAAA/wB,KAAAupB,MACA8I,EAAAtB,EAAAS,WACAc,EAAAvB,EAAAU,SACAc,EAAA,UAAAxB,EAAAJ,YAAA,MAEArM,EAAA6B,OACA7B,EAAAoB,YACApB,EAAAS,IAAAgM,EAAAzkB,EAAAykB,EAAAxkB,EAAAV,KAAAC,IAAAilB,EAAAc,YAAAU,EAAA,GAAAF,EAAAC,GACAhO,EAAAS,IAAAgM,EAAAzkB,EAAAykB,EAAAxkB,EAAAwkB,EAAAa,YAAAU,EAAAD,GAAA,GACA/N,EAAAU,YACAV,EAAAkO,UAAAzB,EAAAtB,gBACAnL,EAAAuB,OAEAkL,EAAApB,cACA,UAAAoB,EAAAJ,aAGArM,EAAAoB,YACA0M,EAAAG,EAAAxB,EAAAc,YACAvN,EAAAS,IAAAgM,EAAAzkB,EAAAykB,EAAAxkB,EAAAwkB,EAAAc,YAAAQ,EAAAD,EAAAE,EAAAF,GAEArB,EAAAa,YAAAW,GACAH,EAAAG,EAAAxB,EAAAa,YACAtN,EAAAS,IAAAgM,EAAAzkB,EAAAykB,EAAAxkB,EAAAwkB,EAAAa,YAAAW,EAAAD,EAAAF,EAAAC,EAAAD,GAAA,IAEA9N,EAAAS,IAAAgM,EAAAzkB,EAAAykB,EAAAxkB,EAAAgmB,EAAAD,EAAAzmB,KAAAkC,GAAA,EAAAskB,EAAAxmB,KAAAkC,GAAA,GAGAuW,EAAAU,YACAV,EAAA8B,OACA9B,EAAAoB,YACApB,EAAAS,IAAAgM,EAAAzkB,EAAAykB,EAAAxkB,EAAAwkB,EAAAc,YAAAQ,EAAAC,GACAhO,EAAAS,IAAAgM,EAAAzkB,EAAAykB,EAAAxkB,EAAAwkB,EAAAa,YAAAU,EAAAD,GAAA,GACA/N,EAAAU,YACAV,EAAAmO,UAAA,EAAA1B,EAAApB,YACArL,EAAAoO,SAAA,UAEApO,EAAAmO,UAAA1B,EAAApB,YACArL,EAAAoO,SAAA,SAGApO,EAAAqO,YAAA5B,EAAArB,YACApL,EAAAwB,UAGAxB,EAAAgC,aAGAsM,GAAA7J,GAAA5J,eACAmI,GAAAO,GAAAO,OAAAd,aAEAO,GAAAT,KAAA,UACA8H,SAAA,CACA2D,KAAA,CACAjM,QAAA,GACA6I,gBAAAnI,GACAqI,YAAA,EACAD,YAAApI,GACAwL,eAAA,OACAC,WAAA,GACAC,iBAAA,EACAC,gBAAA,QACAC,iBAAA,EACArN,MAAA,MAMA,IAAAsN,GAAA5I,GAAA3J,OAAA,CACAuO,KAAA,WACA,IAWA9Q,EAAAla,EAAAoiB,EAAA6M,EAVArC,EADA/wB,KACAupB,MACAjF,EAFAtkB,KAEAouB,OAAA9J,IACA+O,EAAAtC,EAAAsC,SAEAC,EALAtzB,KAKAuzB,UAAA1b,QAGAsQ,EAAAN,GAAAO,OACAoL,EAAArL,EAAA+G,SAAA2D,KACAY,GAAA,EAuBA,IAjCAzzB,KAaA0zB,OAAAJ,EAAAx1B,QACAw1B,EAAAzH,KAAAyH,EAAA,IAGAhP,EAAA6B,OAEA7B,EAAAqP,QAAA5C,EAAA+B,gBAAAU,EAAAV,eAEAxO,EAAAsP,aACAtP,EAAAsP,YAAA7C,EAAAgC,YAAAS,EAAAT,YAGAzO,EAAAuP,eAAAjB,GAAA7B,EAAAiC,iBAAAQ,EAAAR,kBACA1O,EAAAoO,SAAA3B,EAAAkC,iBAAAO,EAAAP,gBACA3O,EAAAmO,UAAAG,GAAA7B,EAAApB,YAAA6D,EAAA7D,aACArL,EAAAqO,YAAA5B,EAAArB,aAAAvH,EAAAb,aAEAhD,EAAAoB,YACA+N,GAAA,EAEApV,EAAA,EAAqBA,EAAAiV,EAAAx1B,SAAuBugB,EAC5Cla,EAAAmvB,EAAAjV,GACAkI,EAAAwC,GAAA+K,aAAAR,EAAAjV,GACA+U,EAAAjvB,EAAAolB,MAEA,IAAAlL,EACA+U,EAAAW,OACAzP,EAAAQ,OAAAsO,EAAA9mB,EAAA8mB,EAAA7mB,GACAknB,EAAApV,IAGAkI,GAAA,IAAAkN,EAAAlN,EAAA+M,EAAAG,GAEAL,EAAAW,OACAN,IAAApV,EAAA,IAAAgV,IAAA,IAAAI,EAEAnP,EAAAQ,OAAAsO,EAAA9mB,EAAA8mB,EAAA7mB,GAGAwc,GAAAE,OAAAtD,OAAArB,EAAAiC,EAAAgD,MAAAplB,EAAAolB,OAGAkK,EAAApV,IAKAiG,EAAAwB,SACAxB,EAAAgC,aAGA0N,GAAAjL,GAAA5J,eACA8U,GAAApM,GAAAO,OAAAd,aAkBA,SAAA4M,GAAApD,GACA,IAAAC,EAAA/wB,KAAAupB,MACA,QAAAwH,GAAAllB,KAAAsoB,IAAArD,EAAAC,EAAAzkB,GAAAykB,EAAAtM,OAAAsM,EAAAqD,UAlBAvM,GAAAT,KAAA,UACA8H,SAAA,CACA7qB,MAAA,CACAogB,OAAA,EACA4P,WAAA,SACA5E,gBAAAwE,GACAvE,YAAAuE,GACAtE,YAAA,EAEAyE,UAAA,EACApD,YAAA,EACAlB,iBAAA,MAeA,IAAAwE,GAAA/J,GAAA3J,OAAA,CACAqQ,QAAA,SAAAH,EAAAyD,GACA,IAAAxD,EAAA/wB,KAAAupB,MACA,QAAAwH,GAAAllB,KAAAQ,IAAAykB,EAAAC,EAAAzkB,EAAA,GAAAT,KAAAQ,IAAAkoB,EAAAxD,EAAAxkB,EAAA,GAAAV,KAAAQ,IAAA0kB,EAAAqD,UAAArD,EAAAtM,OAAA,IAEAoM,aAAAqD,GACAM,SAAAN,GACAO,SAZA,SAAAF,GACA,IAAAxD,EAAA/wB,KAAAupB,MACA,QAAAwH,GAAAllB,KAAAsoB,IAAAI,EAAAxD,EAAAxkB,GAAAwkB,EAAAtM,OAAAsM,EAAAqD,WAWAtC,eAAA,WACA,IAAAf,EAAA/wB,KAAAupB,MACA,OACAjd,EAAAykB,EAAAzkB,EACAC,EAAAwkB,EAAAxkB,IAGA0lB,QAAA,WACA,OAAApmB,KAAAkC,GAAAlC,KAAAQ,IAAArM,KAAAupB,MAAA9E,OAAA,IAEA2F,gBAAA,WACA,IAAA2G,EAAA/wB,KAAAupB,MACA,OACAjd,EAAAykB,EAAAzkB,EACAC,EAAAwkB,EAAAxkB,EACAmoB,QAAA3D,EAAAtM,OAAAsM,EAAApB,cAGAR,KAAA,SAAAwF,GACA,IAAA5D,EAAA/wB,KAAAupB,MACAjF,EAAAtkB,KAAAouB,OAAA9J,IACA+P,EAAAtD,EAAAsD,WACAjP,EAAA2L,EAAA3L,SACAX,EAAAsM,EAAAtM,OACAnY,EAAAykB,EAAAzkB,EACAC,EAAAwkB,EAAAxkB,EACA4b,EAAAN,GAAAO,OACAd,EAAAa,EAAAb,aAEAyJ,EAAAgD,YAKA5yB,IAAAwzB,GAAA5L,GAAAE,OAAAjD,eAAA+K,EAAA4D,MACArQ,EAAAqO,YAAA5B,EAAArB,aAAApI,EACAhD,EAAAmO,UAAAuB,GAAAjD,EAAApB,YAAAxH,EAAA+G,SAAA7qB,MAAAsrB,aACArL,EAAAkO,UAAAzB,EAAAtB,iBAAAnI,EACAyB,GAAAE,OAAA/D,UAAAZ,EAAA+P,EAAA5P,EAAAnY,EAAAC,EAAA6Y,OAIAwP,GAAA/M,GAAAO,OAAAd,aAaA,SAAAuN,GAAA9D,GACA,OAAAA,QAAA5vB,IAAA4vB,EAAA7uB,MAUA,SAAA4yB,GAAA/D,GACA,IAAAgE,EAAAC,EAAAC,EAAArnB,EAAAsnB,EAgBA,OAdAL,GAAA9D,IACAmE,EAAAnE,EAAA7uB,MAAA,EACA6yB,EAAAhE,EAAAzkB,EAAA4oB,EACAF,EAAAjE,EAAAzkB,EAAA4oB,EACAD,EAAAppB,KAAAD,IAAAmlB,EAAAxkB,EAAAwkB,EAAAjC,MACAlhB,EAAA/B,KAAAC,IAAAilB,EAAAxkB,EAAAwkB,EAAAjC,QAEAoG,EAAAnE,EAAA9uB,OAAA,EACA8yB,EAAAlpB,KAAAD,IAAAmlB,EAAAzkB,EAAAykB,EAAAjC,MACAkG,EAAAnpB,KAAAC,IAAAilB,EAAAzkB,EAAAykB,EAAAjC,MACAmG,EAAAlE,EAAAxkB,EAAA2oB,EACAtnB,EAAAmjB,EAAAxkB,EAAA2oB,GAGA,CACAxQ,KAAAqQ,EACApQ,IAAAsQ,EACArQ,MAAAoQ,EACAnQ,OAAAjX,GAIA,SAAAunB,GAAAC,EAAAlV,EAAAmV,GACA,OAAAD,IAAAlV,EAAAmV,EAAAD,IAAAC,EAAAnV,EAAAkV,EAuBA,SAAAE,GAAAvE,EAAAwE,EAAAC,GACA,IAEAroB,EAAA1B,EAAAE,EAAAxC,EAFA/J,EAAA2xB,EAAApB,YACAoE,EAtBA,SAAAhD,GACA,IAAA0E,EAAA1E,EAAA2E,cACA3G,EAAA,GAEA,OAAA0G,GAIA1E,EAAA4E,WACA5E,EAAAjC,KAAAiC,EAAAzkB,IACAmpB,EAAAN,GAAAM,EAAA,iBAEK1E,EAAAjC,KAAAiC,EAAAxkB,IACLkpB,EAAAN,GAAAM,EAAA,iBAGA1G,EAAA0G,IAAA,EACA1G,GAZAA,EAiBA6G,CAAA7E,GAYA,OATAhI,GAAAjK,SAAA1f,IACA+N,GAAA/N,EAAAulB,KAAA,EACAlZ,GAAArM,EAAAwlB,OAAA,EACAjZ,GAAAvM,EAAAylB,QAAA,EACA1b,GAAA/J,EAAAslB,MAAA,GAEAvX,EAAA1B,EAAAE,EAAAxC,GAAA/J,GAAA,EAGA,CACA+N,EAAA4mB,EAAApP,KAAAxX,EAAA,IAAAA,EAAAqoB,IAAAroB,EACA1B,EAAAsoB,EAAAnP,OAAAnZ,EAAA,IAAAA,EAAA8pB,IAAA9pB,EACAE,EAAAooB,EAAAlP,QAAAlZ,EAAA,IAAAA,EAAA6pB,IAAA7pB,EACAxC,EAAA4qB,EAAArP,MAAAvb,EAAA,IAAAA,EAAAosB,IAAApsB,GAyBA,SAAA0sB,GAAA9E,EAAAzkB,EAAAC,GACA,IAAAupB,EAAA,OAAAxpB,EACAypB,EAAA,OAAAxpB,EACAypB,KAAAjF,GAAA+E,GAAAC,IAAAjB,GAAA/D,GACA,OAAAiF,IAAAF,GAAAxpB,GAAA0pB,EAAAtR,MAAApY,GAAA0pB,EAAApR,SAAAmR,GAAAxpB,GAAAypB,EAAArR,KAAApY,GAAAypB,EAAAnR,QAtHAgD,GAAAT,KAAA,UACA8H,SAAA,CACA+G,UAAA,CACAxG,gBAAAmF,GACAlF,YAAAkF,GACAc,cAAA,SACA/F,YAAA,MAmHA,IAAAuG,GAAA3L,GAAA3J,OAAA,CACAuO,KAAA,WACA,IAAA7K,EAAAtkB,KAAAouB,OAAA9J,IACAyM,EAAA/wB,KAAAupB,MACA4M,EAhCA,SAAApF,GACA,IAAAiF,EAAAlB,GAAA/D,GACA7uB,EAAA8zB,EAAApR,MAAAoR,EAAAtR,KACAziB,EAAA+zB,EAAAnR,OAAAmR,EAAArR,IACAyR,EAAAd,GAAAvE,EAAA7uB,EAAA,EAAAD,EAAA,GACA,OACAo0B,MAAA,CACA/pB,EAAA0pB,EAAAtR,KACAnY,EAAAypB,EAAArR,IACA3Y,EAAA9J,EACA+G,EAAAhH,GAEAq0B,MAAA,CACAhqB,EAAA0pB,EAAAtR,KAAA0R,EAAAjtB,EACAoD,EAAAypB,EAAArR,IAAAyR,EAAAjpB,EACAnB,EAAA9J,EAAAk0B,EAAAjtB,EAAAitB,EAAA3qB,EACAxC,EAAAhH,EAAAm0B,EAAAjpB,EAAAipB,EAAAzqB,IAgBA4qB,CAAAxF,GACAsF,EAAAF,EAAAE,MACAC,EAAAH,EAAAG,MACAhS,EAAAkO,UAAAzB,EAAAtB,gBACAnL,EAAAkS,SAAAH,EAAA/pB,EAAA+pB,EAAA9pB,EAAA8pB,EAAArqB,EAAAqqB,EAAAptB,GAEAotB,EAAArqB,IAAAsqB,EAAAtqB,GAAAqqB,EAAAptB,IAAAqtB,EAAArtB,IAIAqb,EAAA6B,OACA7B,EAAAoB,YACApB,EAAAW,KAAAoR,EAAA/pB,EAAA+pB,EAAA9pB,EAAA8pB,EAAArqB,EAAAqqB,EAAAptB,GACAqb,EAAA8B,OACA9B,EAAAkO,UAAAzB,EAAArB,YACApL,EAAAW,KAAAqR,EAAAhqB,EAAAgqB,EAAA/pB,EAAA+pB,EAAAtqB,EAAAsqB,EAAArtB,GACAqb,EAAAuB,KAAA,WACAvB,EAAAgC,YAEArkB,OAAA,WACA,IAAA8uB,EAAA/wB,KAAAupB,MACA,OAAAwH,EAAAjC,KAAAiC,EAAAxkB,GAEA0kB,QAAA,SAAAH,EAAAyD,GACA,OAAAsB,GAAA71B,KAAAupB,MAAAuH,EAAAyD,IAEA1D,aAAA,SAAAC,EAAAyD,GACA,IAAAxD,EAAA/wB,KAAAupB,MACA,OAAAsL,GAAA9D,GAAA8E,GAAA9E,EAAAD,EAAA,MAAA+E,GAAA9E,EAAA,KAAAwD,IAEAC,SAAA,SAAA1D,GACA,OAAA+E,GAAA71B,KAAAupB,MAAAuH,EAAA,OAEA2D,SAAA,SAAAF,GACA,OAAAsB,GAAA71B,KAAAupB,MAAA,KAAAgL,IAEAzC,eAAA,WACA,IACAxlB,EAAAC,EADAwkB,EAAA/wB,KAAAupB,MAWA,OARAsL,GAAA9D,IACAzkB,EAAAykB,EAAAzkB,EACAC,GAAAwkB,EAAAxkB,EAAAwkB,EAAAjC,MAAA,IAEAxiB,GAAAykB,EAAAzkB,EAAAykB,EAAAjC,MAAA,EACAviB,EAAAwkB,EAAAxkB,GAGA,CACAD,IACAC,MAGA0lB,QAAA,WACA,IAAAlB,EAAA/wB,KAAAupB,MACA,OAAAsL,GAAA9D,KAAA7uB,MAAA2J,KAAAsoB,IAAApD,EAAAxkB,EAAAwkB,EAAAjC,MAAAiC,EAAA9uB,OAAA4J,KAAAsoB,IAAApD,EAAAzkB,EAAAykB,EAAAjC,OAEA1E,gBAAA,WACA,IAAA2G,EAAA/wB,KAAAupB,MACA,OACAjd,EAAAykB,EAAAzkB,EACAC,EAAAwkB,EAAAxkB,MAIA2iB,GAAA,GACAuH,GAAA7F,GACAt0B,GAAA62B,GACAuD,GAAApC,GACAqC,GAAAT,GACAhH,GAAAuH,OACAvH,GAAA5yB,QACA4yB,GAAAwH,SACAxH,GAAAyH,aACA,IAAAC,GAAA7N,GAAAjnB,QAAA8mB,QAEAf,GAAAT,KAAA,OACAyP,MAAA,CACAC,KAAA,SAEAxJ,OAAA,CACAC,MAAA,EACA1rB,KAAA,WACAk1B,mBAAA,GACAC,cAAA,GACAC,QAAA,EACAC,UAAA,CACAC,iBAAA,KAGA1J,MAAA,EACA5rB,KAAA,cA8FA,IAAAu1B,GAAA1G,GAAA9P,OAAA,CACAkM,gBAAAoC,GAAAyH,UACAvN,WAAA,WACA,IACA8D,EACAwD,GAAAzyB,UAAAmrB,WAAA/oB,MAFAL,KAEAnC,YACAqvB,EAHAltB,KAGAmtB,WACAkK,MAJAr3B,KAIAotB,aAAAiK,MACAnK,EAAAoK,KAAA,GAEA7yB,OAAA,SAAAwpB,GACA,IAEArwB,EAAAoiB,EADAmW,EADAn2B,KACAmtB,UAAA5qB,KAIA,IALAvC,KAGAu3B,OAHAv3B,KAGAw3B,WAEA55B,EAAA,EAAAoiB,EAAAmW,EAAAr4B,OAAsCF,EAAAoiB,IAAUpiB,EALhDoC,KAMA0uB,cAAAyH,EAAAv4B,KAAAqwB,IAGAS,cAAA,SAAAuH,EAAA5X,EAAA4P,GACA,IAAAjN,EAAAhhB,KACAktB,EAAAlM,EAAAmM,UACA9pB,EAAA2d,EAAAoM,aAEAtrB,EAAAkf,EAAAyW,uBAAAxB,EAAA5X,GAEA4X,EAAAyB,QAAA1W,EAAA2M,cAAAT,EAAAG,SACA4I,EAAA0B,QAAA3W,EAAA2M,cAAAT,EAAAM,SACAyI,EAAA5H,cAAArN,EAAA3C,MACA4X,EAAA1H,OAAAlQ,EACA4X,EAAAzM,OAAA,CACAiG,gBAAA3tB,EAAA2tB,gBACAC,YAAA5tB,EAAA4tB,YACAgG,cAAA5zB,EAAA4zB,cACA/F,YAAA7tB,EAAA6tB,YACAiI,aAAAv0B,EAAAC,MACAA,MAAA0d,EAAAqD,MAAA9hB,KAAAs1B,OAAAxZ,IAGA2C,EAAA8W,uBAAA7B,EAAA5X,EAAA4P,GAEAgI,EAAA3M,SAMAwO,uBAAA,SAAA7B,EAAA5X,EAAA4P,GACA,IAAAjN,EAAAhhB,KACA4pB,EAAAqM,EAAAzM,OAEAuO,EAAA/W,EAAA+M,iBAEAe,EAAAiJ,EAAAC,eACArC,EAAAoC,EAAAE,eACAC,EAAAlX,EAAAuW,QAAAvW,EAAAwW,WACAW,EAAAnX,EAAAoX,wBAAApX,EAAA3C,SACAga,EAAArX,EAAAsX,wBAAAtX,EAAA3C,QAAA6Z,GACAtO,EAAA+L,aACA/L,EAAAkF,KAAAb,EAAAa,EAAAqJ,EAAArJ,KACAlF,EAAAtd,EAAAqpB,EAAA1H,EAAAa,EAAAqJ,EAAAI,KAAAF,EAAAG,OACA5O,EAAArd,EAAAopB,EAAA0C,EAAAG,OAAAvK,EAAAa,EAAAqJ,EAAAI,KACA3O,EAAA3nB,OAAA0zB,EAAA0C,EAAA9S,UAAApkB,EACAyoB,EAAA1nB,MAAAyzB,OAAAx0B,EAAAk3B,EAAA9S,MASAkT,WAAA,SAAAC,GACA,IAQA96B,EAAAsvB,EAPA7I,EADArkB,KACAqkB,MAEAhK,EAHAra,KAGAguB,iBAEA2K,EAAAte,EAAAvY,QAAA62B,QACA3Y,OAAA7e,IAAAu3B,EAAArU,EAAA9hB,KAAAE,SAAA3E,OAAA46B,EAAA,EACAE,EAAA,GAGA,IAAAh7B,EAAA,EAAiBA,EAAAoiB,IAAUpiB,GAC3BsvB,EAAA7I,EAAAqJ,eAAA9vB,IAEA05B,KAAAjT,EAAAwU,iBAAAj7B,MAAA,IAAA+6B,IAAA,IAAAA,IAAA,IAAAC,EAAAr6B,QAAA2uB,EAAAmK,aAAAl2B,IAAAw3B,SAAAx3B,IAAA+rB,EAAAmK,QAAA,IAAAuB,EAAAr6B,QAAA2uB,EAAAmK,UACAuB,EAAA/M,KAAAqB,EAAAmK,OAIA,OAAAuB,GAOAE,cAAA,WACA,OAAA94B,KAAAy4B,aAAA36B,QAUAi7B,cAAA,SAAAnM,EAAAjS,GACA,IAAAie,EAAA54B,KAAAy4B,WAAA7L,GAEAvO,OAAAld,IAAAwZ,EAAAie,EAAAr6B,QAAAoc,IAAA,EAEA,WAAA0D,EAAAua,EAAA96B,OAAA,EAAAugB,GAMAmZ,SAAA,WACA,IAUA55B,EAAAoiB,EARA3F,EAFAra,KAEAguB,iBAEAgL,EAJAh5B,KAIA84B,gBACAlM,EALA5sB,KAKAqe,MACA4Z,EAAA5d,EAAA4d,eACApO,EAAAoO,EAAA5d,EAAAqK,KAAArK,EAAAsK,IACAsU,EAAApP,GAAAoO,EAAA5d,EAAAnY,MAAAmY,EAAApY,QACAi3B,EAAA,GAGA,IAAAt7B,EAAA,EAAAoiB,EAZAhgB,KAYAmtB,UAAA5qB,KAAAzE,OAAkDF,EAAAoiB,IAAUpiB,EAC5Ds7B,EAAArN,KAAAxR,EAAA8e,iBAAA,KAAAv7B,EAAAgvB,IAIA,OACAhhB,IAFAmd,GAAApK,cAAAtE,EAAAvY,QAAAs3B,cA9NA,SAAA/e,EAAA6e,GACA,IAEAG,EAAAC,EAAA17B,EAAAoiB,EAFApU,EAAAyO,EAAA4d,eAAA5d,EAAAnY,MAAAmY,EAAApY,OACAs3B,EAAAlf,EAAAmf,WAGA,IAAA57B,EAAA,EAAAoiB,EAAAkZ,EAAAp7B,OAAqCF,EAAAoiB,IAAUpiB,EAC/CgO,EAAAC,KAAAD,MAAAC,KAAAsoB,IAAA+E,EAAAt7B,GAAAs7B,EAAAt7B,EAAA,KAGA,IAAAA,EAAA,EAAAoiB,EAAAuZ,EAAAz7B,OAAoCF,EAAAoiB,IAAUpiB,EAC9C07B,EAAAjf,EAAAof,gBAAA77B,GACAgO,EAAAhO,EAAA,EAAAiO,KAAAD,MAAA0tB,EAAAD,GAAAztB,EACAytB,EAAAC,EAGA,OAAA1tB,EA+MA8tB,CAAArf,EAAA6e,IAAA,EAGAA,SACArP,QACAoP,MACAD,aACA3e,UAQA+d,wBAAA,SAAAxL,EAAAvO,GACA,IAaAzgB,EAAA+7B,EAAAC,EAAA9K,EAAAyJ,EAAAhT,EAZAlB,EADArkB,KACAqkB,MACA6I,EAFAltB,KAEAmtB,UAEA9S,EAJAra,KAIA+tB,iBAEAkK,EAAA5d,EAAA4d,eACAx1B,EAAA4hB,EAAA9hB,KAAAE,SACArD,GAAAib,EAAAwf,cAAAp3B,EAAAmqB,GAAArqB,KAAA8b,IACAyb,EAAAzf,EAAAvY,QAAAg4B,aACAnB,EAAAte,EAAAvY,QAAA62B,QACAtB,EAAAnK,EAAAmK,MACAxN,EAAA,EAGA,GAAA8O,QAAAx3B,IAAAw3B,QAAAx3B,IAAAk2B,EACA,IAAAz5B,EAAA,EAAmBA,EAAAgvB,IAAkBhvB,GACrC+7B,EAAAtV,EAAAqJ,eAAA9vB,IAEA05B,KAAAqC,EAAAtC,WAAAsC,EAAAI,WAAAlM,qBAAAxT,EAAApV,IAAAof,EAAAwU,iBAAAj7B,KACAg8B,GAAAvf,EAAAwf,cAAAp3B,EAAA7E,GAAA2E,KAAA8b,KAEAjf,EAAA,GAAAw6B,EAAA,GAAAx6B,GAAA,GAAAw6B,EAAA,KACA/P,GAAA+P,IAoBA,OAdA9K,EAAAzU,EAAA8e,iBAAAtP,GACA0O,EAAAle,EAAA8e,iBAAAtP,EAAAzqB,GACAmmB,EAAAgT,EAAAzJ,OAEA3tB,IAAA24B,GAAAjuB,KAAAsoB,IAAA5O,GAAAuU,IACAvU,EAAAuU,EAGAvB,EADAn5B,GAAA,IAAA64B,GAAA74B,EAAA,GAAA64B,EACAnJ,EAAAgL,EAEAhL,EAAAgL,GAIA,CACAvU,OACAuJ,OACAyJ,OACAC,OAAAD,EAAAhT,EAAA,IAOA+S,wBAAA,SAAA1L,EAAAvO,EAAA6Z,GACA,IACAp2B,EAAAo2B,EAAA7d,MAAAvY,QACAk4B,EAAA,SAAAl4B,EAAAs3B,aA/OA,SAAA/a,EAAA6Z,EAAAp2B,GACA,IAKA+nB,EALAqP,EAAAhB,EAAAgB,OACAI,EAAAJ,EAAA7a,GACAgb,EAAAhb,EAAA,EAAA6a,EAAA7a,EAAA,QACAna,EAAAma,EAAA6a,EAAAp7B,OAAA,EAAAo7B,EAAA7a,EAAA,QACA4b,EAAAn4B,EAAAi1B,mBAgBA,OAbA,OAAAsC,IAGAA,EAAAC,GAAA,OAAAp1B,EAAAg0B,EAAAe,IAAAf,EAAArO,MAAA3lB,EAAAo1B,IAGA,OAAAp1B,IAEAA,EAAAo1B,IAAAD,GAGAxP,EAAAyP,KAAAztB,KAAAD,IAAAytB,EAAAn1B,IAAA,EAAA+1B,EAEA,CACAC,MAFAruB,KAAAsoB,IAAAjwB,EAAAm1B,GAAA,EAAAY,EAEA/B,EAAAc,WACAzrB,MAAAzL,EAAAk1B,cACAnN,SAuNAsQ,CAAA9b,EAAA6Z,EAAAp2B,GA9QA,SAAAuc,EAAA6Z,EAAAp2B,GACA,IAGAyjB,EAAAhY,EAHA6sB,EAAAt4B,EAAAs3B,aACAlJ,EAAAgI,EAAAc,WACAM,EAAApB,EAAAgB,OAAA7a,GAcA,OAXA0K,GAAApK,cAAAyb,IACA7U,EAAA2S,EAAAtsB,IAAA9J,EAAAi1B,mBACAxpB,EAAAzL,EAAAk1B,gBAKAzR,EAAA6U,EAAAlK,EACA3iB,EAAA,GAGA,CACA2sB,MAAA3U,EAAA2K,EACA3iB,QACAsc,MAAAyP,EAAA/T,EAAA,GA0PA8U,CAAAhc,EAAA6Z,EAAAp2B,GACAw4B,EAHAt6B,KAGA+4B,cAAAnM,EAHA5sB,KAGAmtB,UAAAkK,OACAmB,EAAAwB,EAAAnQ,MAAAmQ,EAAAE,MAAAI,EAAAN,EAAAE,MAAA,EACA3U,EAAA1Z,KAAAD,IAAAmd,GAAA5J,eAAArd,EAAAy4B,gBAAAC,KAAAR,EAAAE,MAAAF,EAAAzsB,OACA,OACAuhB,KAAA0J,EAAAjT,EAAA,EACAgT,KAAAC,EAAAjT,EAAA,EACAiT,SACAjT,SAGA4J,KAAA,WACA,IACA9K,EADArkB,KACAqkB,MAEAhK,EAHAra,KAGA+tB,iBAEAoI,EALAn2B,KAKAmtB,UAAA5qB,KACAc,EANArD,KAMAotB,aACApN,EAAAmW,EAAAr4B,OACAF,EAAA,EAGA,IAFAmrB,GAAAE,OAAA/C,SAAA7B,EAAAC,IAAAD,EAAAsQ,WAEY/2B,EAAAoiB,IAAUpiB,EACtB0c,MAAAD,EAAAwf,cAAAx2B,EAAAd,KAAA3E,MACAu4B,EAAAv4B,GAAAuxB,OAIApG,GAAAE,OAAA5C,WAAAhC,EAAAC,MAMAmT,uBAAA,SAAAxB,EAAA5X,GACA,IAOAzgB,EAAAoiB,EAAAhiB,EANAqmB,EADArkB,KACAqkB,MACA5hB,EAAA4hB,EAAA9hB,KAAAE,SACAY,EAAAZ,EAHAzC,KAGAqe,OACAkR,EAAA0G,EAAA1G,QAAA,GACAztB,EAAAuiB,EAAAviB,QAAAotB,SAAA+G,UACApxB,EAAA,GAGAikB,EAAA,CACAzE,QACAoW,UAAApc,EACAhb,UACAupB,aAbA5sB,KAaAqe,OAEA/f,EAAA,gEAEA,IAAAV,EAAA,EAAAoiB,EAAA1hB,EAAAR,OAAqCF,EAAAoiB,IAAUpiB,EAE/CiH,EADA7G,EAAAM,EAAAV,IACAg5B,GAAA,CAAArH,EAAAvxB,GAAAqF,EAAArF,GAAA8D,EAAA9D,IAAA8qB,EAAAzK,GAGA,OAAAxZ,KAGA61B,GAAA3R,GAAA5J,eACAwb,GAAA5R,GAAAjnB,QAAA8mB,QAEAf,GAAAT,KAAA,UACAyP,MAAA,CACAC,KAAA,UAEAxJ,OAAA,CACAC,MAAA,EACA1rB,KAAA,SAEAqE,SAAA,SACAjB,GAAA,aAGAwoB,MAAA,EACA5rB,KAAA,SACAqE,SAAA,OACAjB,GAAA,cAGA21B,SAAA,CACAC,UAAA,CACAC,MAAA,WAEA,UAEAx3B,MAAA,SAAAie,EAAAhf,GACA,IAAAq1B,EAAAr1B,EAAAE,SAAA8e,EAAAqL,cAAAtpB,OAAA,GACAy3B,EAAAx4B,EAAAE,SAAA8e,EAAAqL,cAAArqB,KAAAgf,EAAAlD,OACA,OAAAuZ,EAAA,MAAArW,EAAAyZ,OAAA,KAAAzZ,EAAA0Z,OAAA,KAAAF,EAAAtvB,EAAA,SAMA,IAAAyvB,GAAAxK,GAAA9P,OAAA,CAIAkM,gBAAAoC,GAAAwH,MAKAjyB,OAAA,SAAAwpB,GACA,IAAAjN,EAAAhhB,KACAktB,EAAAlM,EAAAmM,UACAmG,EAAApG,EAAA3qB,KAEAwmB,GAAAtJ,KAAA6T,EAAA,SAAAjvB,EAAAga,GACA2C,EAAA0N,cAAArqB,EAAAga,EAAA4P,MAOAS,cAAA,SAAArqB,EAAAga,EAAA4P,GACA,IAAAjN,EAAAhhB,KACAktB,EAAAlM,EAAAmM,UACAoC,EAAAlrB,EAAAkrB,QAAA,GACA4L,EAAAna,EAAA2M,cAAAT,EAAAG,SACA+N,EAAApa,EAAA2M,cAAAT,EAAAM,SAEA1rB,EAAAkf,EAAAyW,uBAAApzB,EAAAga,GAEA9b,EAAAye,EAAAoM,aAAA7qB,KAAA8b,GACAgd,EAAAra,EAAA3C,MACA/R,EAAA2hB,EAAAkN,EAAAG,mBAAA,IAAAH,EAAAhC,iBAAA,kBAAA52B,IAAAg5B,IAAAld,EAAAgd,GACA9uB,EAAA0hB,EAAAmN,EAAApD,eAAAoD,EAAAjC,iBAAA52B,EAAA8b,EAAAgd,GACAh3B,EAAAqzB,QAAAyD,EACA92B,EAAAszB,QAAAyD,EACA/2B,EAAAm3B,SAAA15B,EACAuC,EAAAgqB,cAAAgN,EACAh3B,EAAAkqB,OAAAlQ,EACAha,EAAAmlB,OAAA,CACAiG,gBAAA3tB,EAAA2tB,gBACAC,YAAA5tB,EAAA4tB,YACAC,YAAA7tB,EAAA6tB,YACAyE,UAAAtyB,EAAAsyB,UACAC,WAAAvyB,EAAAuyB,WACAjP,SAAAtjB,EAAAsjB,SACAX,OAAAwJ,EAAA,EAAAnsB,EAAA2iB,OACAsP,KAAAxE,EAAAwE,MAAAzZ,MAAAhO,IAAAgO,MAAA/N,GACAD,IACAC,KAEAlI,EAAAilB,SAMAgG,cAAA,SAAAjrB,GACA,IAAAulB,EAAAvlB,EAAAmlB,OACA1nB,EAAAuC,EAAAm3B,SACAhM,EAAAzG,GAAAyG,cACAnrB,EAAAgrB,eAAA,CACAI,gBAAA7F,EAAA6F,gBACAC,YAAA9F,EAAA8F,YACAC,YAAA/F,EAAA+F,YACAlL,OAAAmF,EAAAnF,QAEAmF,EAAA6F,gBAAAiL,GAAA54B,EAAA8tB,qBAAAJ,EAAA1tB,EAAA2tB,kBACA7F,EAAA8F,YAAAgL,GAAA54B,EAAA+tB,iBAAAL,EAAA1tB,EAAA4tB,cACA9F,EAAA+F,YAAA+K,GAAA54B,EAAAguB,iBAAAhuB,EAAA6tB,aACA/F,EAAAnF,OAAA3iB,EAAA2iB,OAAA3iB,EAAAkvB,aAMAyG,uBAAA,SAAApzB,EAAAga,GACA,IAQAzgB,EAAAoiB,EAAAhiB,EAPAqmB,EADArkB,KACAqkB,MACA5hB,EAAA4hB,EAAA9hB,KAAAE,SACAY,EAAAZ,EAHAzC,KAGAqe,OACAkR,EAAAlrB,EAAAkrB,QAAA,GACAztB,EAAAuiB,EAAAviB,QAAAotB,SAAA7qB,MACA9B,EAAAc,EAAAd,KAAA8b,GACAxZ,EAAA,GAGAikB,EAAA,CACAzE,QACAoW,UAAApc,EACAhb,UACAupB,aAdA5sB,KAcAqe,OAEA/f,EAAA,+JAEA,IAAAV,EAAA,EAAAoiB,EAAA1hB,EAAAR,OAAqCF,EAAAoiB,IAAUpiB,EAE/CiH,EADA7G,EAAAM,EAAAV,IACA+8B,GAAA,CAAApL,EAAAvxB,GAAAqF,EAAArF,GAAA8D,EAAA9D,IAAA8qB,EAAAzK,GAKA,OADAxZ,EAAA4f,OAAAkW,GAAA,CAAApL,EAAA9K,OAAAliB,IAAAkJ,OAAAtK,EAAAkC,EAAAohB,OAAA3iB,EAAA2iB,QAAAqE,EAAAzK,GACAxZ,KAGA42B,GAAA1S,GAAAjnB,QAAA8mB,QACA8S,GAAA3S,GAAA5J,eAEA0I,GAAAT,KAAA,YACA4D,UAAA,CAEA2Q,eAAA,EAEAC,cAAA,GAEA/E,MAAA,CACAC,KAAA,UAEA+E,eAAA,SAAAxX,GACA,IAAAyX,EAAA,GACAA,EAAAjQ,KAAA,cAAAxH,EAAApf,GAAA,aACA,IAAA1C,EAAA8hB,EAAA9hB,KACAE,EAAAF,EAAAE,SACAo1B,EAAAt1B,EAAAs1B,OAEA,GAAAp1B,EAAA3E,OACA,QAAAF,EAAA,EAAuBA,EAAA6E,EAAA,GAAAF,KAAAzE,SAA6BF,EACpDk+B,EAAAjQ,KAAA,qCAAAppB,EAAA,GAAAgtB,gBAAA7xB,GAAA,aAEAi6B,EAAAj6B,IACAk+B,EAAAjQ,KAAAgM,EAAAj6B,IAGAk+B,EAAAjQ,KAAA,SAKA,OADAiQ,EAAAjQ,KAAA,SACAiQ,EAAAC,KAAA,KAEA/5B,OAAA,CACA61B,OAAA,CACAmE,eAAA,SAAA3X,GACA,IAAA9hB,EAAA8hB,EAAA9hB,KAEA,OAAAA,EAAAs1B,OAAA/5B,QAAAyE,EAAAE,SAAA3E,OACAyE,EAAAs1B,OAAAn1B,IAAA,SAAAY,EAAA1F,GACA,IAAAsvB,EAAA7I,EAAAqJ,eAAA,GACAuO,EAAA15B,EAAAE,SAAA,GACAsiB,EAAAmI,EAAA3qB,KAAA3E,GACA2xB,EAAAxK,KAAAwK,QAAA,GACA2M,EAAA7X,EAAAviB,QAAAotB,SAAAnK,IACAc,EAAA4V,GAAA,CAAAlM,EAAAE,gBAAAwM,EAAAxM,gBAAAyM,EAAAzM,sBAAAtuB,EAAAvD,GACAkoB,EAAA2V,GAAA,CAAAlM,EAAAG,YAAAuM,EAAAvM,YAAAwM,EAAAxM,kBAAAvuB,EAAAvD,GACAu+B,EAAAV,GAAA,CAAAlM,EAAAI,YAAAsM,EAAAtM,YAAAuM,EAAAvM,kBAAAxuB,EAAAvD,GACA,OACAk+B,KAAAx4B,EACAkvB,UAAA3M,EACA8M,YAAA7M,EACA2M,UAAA0J,EACA9S,OAAA/O,MAAA2hB,EAAA15B,KAAA3E,KAAAsvB,EAAA3qB,KAAA3E,GAAAyrB,OAEAhL,MAAAzgB,KAKA,KAGAuH,QAAA,SAAAi3B,EAAAC,GACA,IAEAz+B,EAAAoiB,EAAAkN,EAFA7O,EAAAge,EAAAhe,MACAgG,EAAArkB,KAAAqkB,MAGA,IAAAzmB,EAAA,EAAAoiB,GAAAqE,EAAA9hB,KAAAE,UAAA,IAAA3E,OAA8DF,EAAAoiB,IAAUpiB,GACxEsvB,EAAA7I,EAAAqJ,eAAA9vB,IAEA2E,KAAA8b,KACA6O,EAAA3qB,KAAA8b,GAAAgL,QAAA6D,EAAA3qB,KAAA8b,GAAAgL,QAIAhF,EAAA5f,WAIA63B,iBAAA,GAEAlX,UAAA,GAAAvZ,KAAAkC,GAEAwuB,cAAA,EAAA1wB,KAAAkC,GAEA6sB,SAAA,CACAC,UAAA,CACAC,MAAA,WACA,UAEAx3B,MAAA,SAAAk5B,EAAAj6B,GACA,IAAAk6B,EAAAl6B,EAAAs1B,OAAA2E,EAAAne,OACAjf,EAAA,KAAAmD,EAAAE,SAAA+5B,EAAA5P,cAAArqB,KAAAi6B,EAAAne,OAWA,OATA0K,GAAAnK,QAAA6d,IAGAA,IAAA5kB,SACA,IAAAzY,EAEAq9B,GAAAr9B,EAGAq9B,OAMA,IAAAC,GAAAhM,GAAA9P,OAAA,CACAkM,gBAAAoC,GAAAuH,IACA1J,WAAAhE,GAAAtK,KAEAke,aAAA,SAAA/P,GAGA,IAFA,IAAAgQ,EAAA,EAEAC,EAAA,EAAqBA,EAAAjQ,IAAkBiQ,EACvC78B,KAAAqkB,MAAAwU,iBAAAgE,MACAD,EAIA,OAAAA,GAEAn4B,OAAA,SAAAwpB,GACA,IAkBArwB,EAAAoiB,EAlBAgB,EAAAhhB,KACAqkB,EAAArD,EAAAqD,MACAsQ,EAAAtQ,EAAAsQ,UACAmI,EAAAzY,EAAAviB,QACAi7B,EAAApI,EAAA/P,MAAA+P,EAAAjQ,KACAsY,EAAArI,EAAA9P,OAAA8P,EAAAhQ,IACAsY,EAAApxB,KAAAD,IAAAmxB,EAAAC,GACA/F,EAAA,CACA3qB,EAAA,EACAC,EAAA,GAEA2gB,EAAAlM,EAAAmM,UACA+P,EAAAhQ,EAAA3qB,KACA+5B,EAAAQ,EAAAR,iBACAC,EAAAO,EAAAP,cAEAY,EAAAnc,EAAAoc,eAAApc,EAAA3C,OAIA,GAAAke,EAAA,EAAA1wB,KAAAkC,GAAA,CACA,IAAAyjB,EAAAsL,EAAA1X,UAAA,EAAAvZ,KAAAkC,IAEA0jB,GADAD,GAAA,EAAA3lB,KAAAkC,IAAAyjB,GAAA3lB,KAAAkC,IAAA,EAAAyjB,GAAA3lB,KAAAkC,GAAA,MACAwuB,EACA1S,EAAA,CACAvd,EAAAT,KAAAqC,IAAAsjB,GACAjlB,EAAAV,KAAAsC,IAAAqjB,IAEAyH,EAAA,CACA3sB,EAAAT,KAAAqC,IAAAujB,GACAllB,EAAAV,KAAAsC,IAAAsjB,IAEA4L,EAAA7L,GAAA,GAAAC,GAAA,GAAAD,GAAA,EAAA3lB,KAAAkC,IAAA,EAAAlC,KAAAkC,IAAA0jB,EACA6L,EAAA9L,GAAA,GAAA3lB,KAAAkC,IAAA,GAAAlC,KAAAkC,IAAA0jB,GAAAD,GAAA,IAAA3lB,KAAAkC,IAAA,IAAAlC,KAAAkC,IAAA0jB,EACA8L,EAAA/L,IAAA3lB,KAAAkC,KAAAlC,KAAAkC,IAAA0jB,GAAAD,GAAA3lB,KAAAkC,IAAAlC,KAAAkC,IAAA0jB,EACA+L,EAAAhM,GAAA,IAAA3lB,KAAAkC,IAAA,IAAAlC,KAAAkC,IAAA0jB,GAAAD,GAAA,IAAA3lB,KAAAkC,IAAA,IAAAlC,KAAAkC,IAAA0jB,EACAgM,EAAAnB,EAAA,IACA1wB,EAAA,CACAU,EAAAixB,GAAA,EAAA1xB,KAAAD,IAAAie,EAAAvd,GAAAud,EAAAvd,EAAA,IAAAmxB,GAAAxE,EAAA3sB,GAAA2sB,EAAA3sB,EAAA,IAAAmxB,IACAlxB,EAAAixB,GAAA,EAAA3xB,KAAAD,IAAAie,EAAAtd,GAAAsd,EAAAtd,EAAA,IAAAkxB,GAAAxE,EAAA1sB,GAAA0sB,EAAA1sB,EAAA,IAAAkxB,KAEA3xB,EAAA,CACAQ,EAAA+wB,EAAA,EAAAxxB,KAAAC,IAAA+d,EAAAvd,GAAAud,EAAAvd,EAAA,IAAAmxB,GAAAxE,EAAA3sB,GAAA2sB,EAAA3sB,EAAA,IAAAmxB,IACAlxB,EAAA+wB,EAAA,EAAAzxB,KAAAC,IAAA+d,EAAAtd,GAAAsd,EAAAtd,EAAA,IAAAkxB,GAAAxE,EAAA1sB,GAAA0sB,EAAA1sB,EAAA,IAAAkxB,KAEAlY,EAAA,CACArjB,MAAA,IAAA4J,EAAAQ,EAAAV,EAAAU,GACArK,OAAA,IAAA6J,EAAAS,EAAAX,EAAAW,IAEA0wB,EAAApxB,KAAAD,IAAAmxB,EAAAxX,EAAArjB,MAAA86B,EAAAzX,EAAAtjB,QACAg1B,EAAA,CACA3qB,GAAA,IAAAR,EAAAQ,EAAAV,EAAAU,GACAC,GAAA,IAAAT,EAAAS,EAAAX,EAAAW,IAIA,IAAA3O,EAAA,EAAAoiB,EAAAkd,EAAAp/B,OAAqCF,EAAAoiB,IAAUpiB,EAC/Cs/B,EAAAt/B,GAAA49B,SAAAxa,EAAAyW,uBAAAyF,EAAAt/B,MAaA,IAVAymB,EAAAsL,YAAA3O,EAAA0c,oBACArZ,EAAAwN,YAAAhmB,KAAAC,KAAAmxB,EAAA5Y,EAAAsL,aAAA,KACAtL,EAAAuN,YAAA/lB,KAAAC,IAAAwwB,EAAAjY,EAAAwN,YAAA,IAAAyK,EAAA,KACAjY,EAAAsZ,cAAAtZ,EAAAwN,YAAAxN,EAAAuN,cAAA5Q,EAAA4c,iCAAA,GACAvZ,EAAAwZ,QAAA5G,EAAA3qB,EAAA+X,EAAAwN,YACAxN,EAAAyZ,QAAA7G,EAAA1qB,EAAA8X,EAAAwN,YACA3E,EAAA6Q,MAAA/c,EAAAgd,iBACAhd,EAAA6Q,YAAAxN,EAAAwN,YAAAxN,EAAAsZ,aAAA3c,EAAAid,qBAAAjd,EAAA3C,OACA2C,EAAA4Q,YAAA/lB,KAAAC,IAAAkV,EAAA6Q,YAAAxN,EAAAsZ,aAAAR,EAAA,GAEAv/B,EAAA,EAAAoiB,EAAAkd,EAAAp/B,OAAqCF,EAAAoiB,IAAUpiB,EAC/CojB,EAAA0N,cAAAwO,EAAAt/B,KAAAqwB,IAGAS,cAAA,SAAA3J,EAAA1G,EAAA4P,GACA,IAAAjN,EAAAhhB,KACAqkB,EAAArD,EAAAqD,MACAsQ,EAAAtQ,EAAAsQ,UACAmI,EAAAzY,EAAAviB,QACAo8B,EAAApB,EAAA9R,UACAmT,GAAAxJ,EAAAjQ,KAAAiQ,EAAA/P,OAAA,EACAwZ,GAAAzJ,EAAAhQ,IAAAgQ,EAAA9P,QAAA,EACA2M,EAAAsL,EAAA1X,SAEAqM,EAAAqL,EAAA1X,SAEA/hB,EAAA2d,EAAAoM,aACAmP,EAAAtO,GAAAiQ,EAAAvC,cAAA,EAAA5W,EAAAsE,OAAA,EAAArI,EAAAqd,uBAAAh7B,EAAAd,KAAA8b,KAAAye,EAAAP,eAAA,EAAA1wB,KAAAkC,KACA6jB,EAAA3D,GAAAiQ,EAAAtC,aAAA,EAAA5a,EAAA4Q,YACAC,EAAA5D,GAAAiQ,EAAAtC,aAAA,EAAA5a,EAAA6Q,YACA/vB,EAAAijB,EAAAyW,UAAA,GACAzS,GAAAnI,OAAAmE,EAAA,CAEAsJ,cAAArN,EAAA3C,MACAkQ,OAAAlQ,EAEAmL,OAAA,CACAiG,gBAAA3tB,EAAA2tB,gBACAC,YAAA5tB,EAAA4tB,YACAC,YAAA7tB,EAAA6tB,YACAgB,YAAA7uB,EAAA6uB,YACArkB,EAAA6xB,EAAA9Z,EAAAwZ,QACAtxB,EAAA6xB,EAAA/Z,EAAAyZ,QACAtM,aACAC,WACA8K,gBACA1K,cACAD,cACAtuB,MAAAylB,GAAA1J,sBAAAhc,EAAAC,MAAA+a,EAAAgG,EAAA9hB,KAAAs1B,OAAAxZ,OAGA,IAAAuL,EAAA7E,EAAAyE,OAEAyE,GAAAiQ,EAAAvC,gBAEA/R,EAAA4H,WADA,IAAAnT,EACAye,EAAA1X,SAEApE,EAAAmM,UAAA5qB,KAAA8b,EAAA,GAAAmL,OAAAiI,SAGA7H,EAAA6H,SAAA7H,EAAA4H,WAAA5H,EAAA2S,eAGAxX,EAAAuE,SAEA0U,eAAA,WACA,IAGA5+B,EAHAiE,EAAArD,KAAAotB,aACAF,EAAAltB,KAAAmtB,UACA4Q,EAAA,EAaA,OAXAhV,GAAAtJ,KAAAyN,EAAA3qB,KAAA,SAAAtB,EAAAod,GACAjf,EAAAiE,EAAAd,KAAA8b,GAEA/D,MAAAlb,IAAA6B,EAAAooB,SACA0U,GAAAlyB,KAAAsoB,IAAA/0B,MAOA2+B,GAEAM,uBAAA,SAAAj/B,GACA,IAAA2+B,EAAA/9B,KAAAmtB,UAAA4Q,MAEA,OAAAA,EAAA,IAAAzjB,MAAAlb,GACA,EAAAyM,KAAAkC,IAAAlC,KAAAsoB,IAAA/0B,GAAA2+B,GAGA,GAGAL,kBAAA,SAAAR,GACA,IAGAt/B,EAAAoiB,EAAAkN,EAAAnI,EAAAgV,EAAAj4B,EAAA6tB,EAAA2O,EAFAxyB,EAAA,EACAuY,EAFArkB,KAEAqkB,MAGA,IAAA6Y,EAEA,IAAAt/B,EAAA,EAAAoiB,EAAAqE,EAAA9hB,KAAAE,SAAA3E,OAAsDF,EAAAoiB,IAAUpiB,EAChE,GAAAymB,EAAAwU,iBAAAj7B,GAAA,CACAsvB,EAAA7I,EAAAqJ,eAAA9vB,GACAs/B,EAAAhQ,EAAA3qB,KAEA3E,IAZAoC,KAYAqe,QACA0b,EAAA7M,EAAA6M,YAGA,MAKA,IAAAmD,EACA,SAGA,IAAAt/B,EAAA,EAAAoiB,EAAAkd,EAAAp/B,OAAqCF,EAAAoiB,IAAUpiB,EAC/CmnB,EAAAmY,EAAAt/B,GAGA,WAFAkE,EAAAi4B,IAAAtC,uBAAA1S,EAAAnnB,GAAAmnB,EAAAyW,UAEA7K,cACAhB,EAAA7tB,EAAA6tB,YACA2O,EAAAx8B,EAAAguB,iBAEAhkB,EAAAwyB,GADAxyB,EAAA6jB,EAAA7jB,EAAA6jB,EAAA7jB,GACAwyB,EAAAxyB,GAIA,OAAAA,GAMAwjB,cAAA,SAAAvK,GACA,IAAA6E,EAAA7E,EAAAyE,OACA1nB,EAAAijB,EAAAyW,SACAhM,EAAAzG,GAAAyG,cACAzK,EAAAsK,eAAA,CACAI,gBAAA7F,EAAA6F,gBACAC,YAAA9F,EAAA8F,YACAC,YAAA/F,EAAA+F,aAEA/F,EAAA6F,gBAAAiM,GAAA55B,EAAA8tB,qBAAAJ,EAAA1tB,EAAA2tB,kBACA7F,EAAA8F,YAAAgM,GAAA55B,EAAA+tB,iBAAAL,EAAA1tB,EAAA4tB,cACA9F,EAAA+F,YAAA+L,GAAA55B,EAAAguB,iBAAAhuB,EAAA6tB,cAMA8H,uBAAA,SAAA1S,EAAA1G,GACA,IAMAzgB,EAAAoiB,EAAAhiB,EALAqmB,EADArkB,KACAqkB,MACAhhB,EAFArD,KAEAotB,aACAmC,EAAAxK,EAAAwK,QAAA,GACAztB,EAAAuiB,EAAAviB,QAAAotB,SAAAnK,IACAlgB,EAAA,GAGAikB,EAAA,CACAzE,QACAoW,UAAApc,EACAhb,UACAupB,aAZA5sB,KAYAqe,OAEA/f,EAAA,2HAEA,IAAAV,EAAA,EAAAoiB,EAAA1hB,EAAAR,OAAqCF,EAAAoiB,IAAUpiB,EAE/CiH,EADA7G,EAAAM,EAAAV,IACA69B,GAAA,CAAAlM,EAAAvxB,GAAAqF,EAAArF,GAAA8D,EAAA9D,IAAA8qB,EAAAzK,GAGA,OAAAxZ,GAOAo5B,qBAAA,SAAArR,GAGA,IAFA,IAAA2R,EAAA,EAEA3gC,EAAA,EAAqBA,EAAAgvB,IAAkBhvB,EACvCoC,KAAAqkB,MAAAwU,iBAAAj7B,KACA2gC,GAAAv+B,KAAAo9B,eAAAx/B,IAIA,OAAA2gC,GAMAnB,eAAA,SAAAoB,GACA,OAAA3yB,KAAAC,IAAA4vB,GAAA17B,KAAAqkB,MAAA9hB,KAAAE,SAAA+7B,GAAAhhB,OAAA,OAOAogB,8BAAA,WACA,OAAA59B,KAAAi+B,qBAAAj+B,KAAAqkB,MAAA9hB,KAAAE,SAAA3E,WAIA+pB,GAAAT,KAAA,iBACAyP,MAAA,CACAC,KAAA,QACA2H,KAAA,KAEAnR,OAAA,CACAC,MAAA,EACA1rB,KAAA,SACAqE,SAAA,WAEAunB,MAAA,EACA5rB,KAAA,WACAqE,SAAA,OACA6wB,mBAAA,GACAC,cAAA,GACAC,QAAA,EACAC,UAAA,CACAC,iBAAA,MAIAjI,SAAA,CACA+G,UAAA,CACAP,cAAA,SAGAkF,SAAA,CACA9D,KAAA,QACA2H,KAAA,OAIA,IAAAC,GAAAtH,GAAAxW,OAAA,CAIAiN,iBAAA,WACA,OAAA7tB,KAAAmtB,UAAAE,SAMAS,iBAAA,WACA,OAAA9tB,KAAAmtB,UAAAK,WAGAmR,GAAA5V,GAAA5J,eACAyf,GAAA7V,GAAAjnB,QAAA8mB,QACAiW,GAAA9V,GAAAE,OAAAjD,eAoBA,SAAA8Y,GAAAz7B,EAAAvB,GACA,OAAA68B,GAAAt7B,EAAA07B,SAAAj9B,EAAA8lB,WAnBAC,GAAAT,KAAA,QACAQ,WAAA,EACAyL,UAAA,EACAwD,MAAA,CACAC,KAAA,SAEAxJ,OAAA,CACAC,MAAA,EACA1rB,KAAA,WACAoD,GAAA,aAEAwoB,MAAA,EACA5rB,KAAA,SACAoD,GAAA,gBASA,IAAA+5B,GAAAtO,GAAA9P,OAAA,CACAiM,mBAAAqC,GAAA5yB,KACAwwB,gBAAAoC,GAAAwH,MACAjyB,OAAA,SAAAwpB,GACA,IAOArwB,EAAAoiB,EAPAgB,EAAAhhB,KACAktB,EAAAlM,EAAAmM,UACA0F,EAAA3F,EAAA7pB,QACAiwB,EAAApG,EAAA3qB,MAAA,GACA8X,EAAA2G,EAAA2M,cAAAT,EAAAM,SACAnqB,EAAA2d,EAAAoM,aACA2R,EAAAD,GAAAz7B,EAAA2d,EAAAqD,MAAAviB,SAoBA,IAjBAi9B,SAEA59B,IAAAkC,EAAAujB,cAAAzlB,IAAAkC,EAAA47B,cACA57B,EAAA47B,YAAA57B,EAAAujB,SAIAiM,EAAAqM,OAAA7kB,EACAwY,EAAAxE,cAAArN,EAAA3C,MAEAwU,EAAAU,UAAAD,EAEAT,EAAArJ,OAAAxI,EAAAme,oBAAAtM,GACAA,EAAAvJ,SAIA1rB,EAAA,EAAAoiB,EAAAsT,EAAAx1B,OAAuCF,EAAAoiB,IAAUpiB,EACjDojB,EAAA0N,cAAA4E,EAAA11B,KAAAqwB,GAQA,IALA8Q,GAAA,IAAAlM,EAAArJ,OAAA5C,SACA5F,EAAAoe,4BAIAxhC,EAAA,EAAAoiB,EAAAsT,EAAAx1B,OAAuCF,EAAAoiB,IAAUpiB,EACjD01B,EAAA11B,GAAA0rB,SAGAoF,cAAA,SAAArqB,EAAAga,EAAA4P,GACA,IASA3hB,EAAAC,EATAyU,EAAAhhB,KACAktB,EAAAlM,EAAAmM,UACAoC,EAAAlrB,EAAAkrB,QAAA,GACAlsB,EAAA2d,EAAAoM,aACAR,EAAA5L,EAAA3C,MACAjf,EAAAiE,EAAAd,KAAA8b,GACA+c,EAAApa,EAAA2M,cAAAT,EAAAM,SACA2N,EAAAna,EAAA2M,cAAAT,EAAAG,SACAgS,EAAAnS,EAAA7pB,QAAAmmB,OAGA1nB,EAAAkf,EAAAse,qBAAAj7B,EAAAga,GAEA/R,EAAA6uB,EAAAhC,iBAAA,kBAAA/5B,IAAAm8B,IAAAld,EAAAuO,GACArgB,EAAA0hB,EAAAmN,EAAApD,eAAAhX,EAAAue,gBAAAngC,EAAAif,EAAAuO,GAEAvoB,EAAAqzB,QAAAyD,EACA92B,EAAAszB,QAAAyD,EACA/2B,EAAAm3B,SAAA15B,EACAuC,EAAAgqB,cAAAzB,EACAvoB,EAAAkqB,OAAAlQ,EAEAha,EAAAmlB,OAAA,CACAld,IACAC,IACAwnB,KAAAxE,EAAAwE,MAAAzZ,MAAAhO,IAAAgO,MAAA/N,GAEAkY,OAAA3iB,EAAA2iB,OACA4P,WAAAvyB,EAAAuyB,WACAjP,SAAAtjB,EAAAsjB,SACAqK,gBAAA3tB,EAAA2tB,gBACAC,YAAA5tB,EAAA4tB,YACAC,YAAA7tB,EAAA6tB,YACA/I,QAAA+X,GAAApP,EAAA3I,QAAAyY,IAAAzY,QAAA,GACAF,cAAA2Y,KAAA3Y,YAEA0N,UAAAtyB,EAAAsyB,YAOAkL,qBAAA,SAAAr+B,EAAAod,GACA,IAMAzgB,EAAAoiB,EAAAhiB,EALAqmB,EADArkB,KACAqkB,MACAhhB,EAAAghB,EAAA9hB,KAAAE,SAFAzC,KAEAqe,OACAkR,EAAAtuB,EAAAsuB,QAAA,GACAztB,EAAAuiB,EAAAviB,QAAAotB,SAAA7qB,MACAQ,EAAA,GAGAikB,EAAA,CACAzE,QACAoW,UAAApc,EACAhb,UACAupB,aAZA5sB,KAYAqe,OAEAmhB,EAAA,CACA/P,gBAAA,uBACAC,YAAA,mBACAC,YAAA,mBACAyE,UAAA,iBACAxE,qBAAA,4BACAC,iBAAA,wBACAC,iBAAA,wBACAkB,YAAA,mBACAqD,WAAA,aACA5P,OAAA,cACAW,SAAA,iBAEA9mB,EAAAb,OAAAa,KAAAkhC,GAEA,IAAA5hC,EAAA,EAAAoiB,EAAA1hB,EAAAR,OAAqCF,EAAAoiB,IAAUpiB,EAC/CI,EAAAM,EAAAV,GACAiH,EAAA7G,GAAA4gC,GAAA,CAAArP,EAAAvxB,GAAAqF,EAAAm8B,EAAAxhC,IAAAqF,EAAArF,GAAA8D,EAAA9D,IAAA8qB,EAAAzK,GAGA,OAAAxZ,GAMAs6B,oBAAA,SAAAl+B,GACA,IAOArD,EAAAoiB,EAAAhiB,EANAqmB,EADArkB,KACAqkB,MACAhhB,EAAAghB,EAAA9hB,KAAAE,SAFAzC,KAEAqe,OACAkR,EAAAtuB,EAAAsuB,QAAA,GACAztB,EAAAuiB,EAAAviB,QACA29B,EAAA39B,EAAAotB,SAAA2D,KACAhuB,EAAA,GAEAvG,EAAA,mJAEA,IAAAV,EAAA,EAAAoiB,EAAA1hB,EAAAR,OAAqCF,EAAAoiB,IAAUpiB,EAE/CiH,EADA7G,EAAAM,EAAAV,IACAghC,GAAA,CAAArP,EAAAvxB,GAAAqF,EAAArF,GAAAyhC,EAAAzhC,KASA,OAHA6G,EAAAwuB,SAAAsL,GAAAt7B,EAAAgwB,SAAAvxB,EAAAuxB,UACAxuB,EAAA+hB,QAAA+X,GAAAt7B,EAAA47B,YAAAQ,EAAA7Y,SACA/hB,EAAA6hB,YAAAkY,GAAA,CAAArP,EAAA7I,YAAArjB,EAAAqjB,YAAA+Y,EAAAhZ,UACA5hB,GAEA06B,gBAAA,SAAAngC,EAAAif,EAAAuO,GACA,IAMAhvB,EAAAq+B,EAAAyD,EALArb,EADArkB,KACAqkB,MACA6I,EAFAltB,KAEAmtB,UACAiO,EAHAp7B,KAGA2tB,cAAAT,EAAAM,SACAmS,EAAA,EACAC,EAAA,EAGA,GAAAxE,EAAAt5B,QAAA62B,QAAA,CACA,IAAA/6B,EAAA,EAAmBA,EAAAgvB,EAAkBhvB,IAIrC,GAHAq+B,EAAA5X,EAAA9hB,KAAAE,SAAA7E,GAGA,UAFA8hC,EAAArb,EAAAqJ,eAAA9vB,IAEAiE,MAAA69B,EAAAlS,UAAA4N,EAAAn2B,IAAAof,EAAAwU,iBAAAj7B,GAAA,CACA,IAAAiiC,EAAA3gB,OAAAkc,EAAAvB,cAAAoC,EAAA15B,KAAA8b,KAEAwhB,EAAA,EACAD,GAAAC,GAAA,EAEAF,GAAAE,GAAA,EAKA,IAAAC,EAAA5gB,OAAAkc,EAAAvB,cAAAz6B,IAEA,OAAA0gC,EAAA,EACA1E,EAAAjC,iBAAAyG,EAAAE,GAGA1E,EAAAjC,iBAAAwG,EAAAG,GAGA,OAAA1E,EAAAjC,iBAAA/5B,IAEAggC,0BAAA,WACA,IAMAxhC,EAAAoiB,EAAA4J,EAAAmW,EALA1b,EADArkB,KACAqkB,MACA6I,EAFAltB,KAEAmtB,UACAkS,EAAAnS,EAAA7pB,QAAAmmB,OACAvD,EAAA5B,EAAAsQ,UACArB,EAAApG,EAAA3qB,MAAA,GASA,SAAAy9B,EAAAC,EAAAr0B,EAAAE,GACA,OAAAD,KAAAC,IAAAD,KAAAD,IAAAq0B,EAAAn0B,GAAAF,GAGA,GAVAyzB,EAAAhM,WACAC,IAAA4M,OAAA,SAAAD,GACA,OAAAA,EAAAzW,OAAAuK,QAQA,aAAAsL,EAAAc,uBACApX,GAAAqX,oBAAA9M,QAEA,IAAA11B,EAAA,EAAAoiB,EAAAsT,EAAAx1B,OAAyCF,EAAAoiB,IAAUpiB,EACnDgsB,EAAA0J,EAAA11B,GAAA4rB,OACAuW,EAAAhX,GAAAsX,YAAAtX,GAAA+K,aAAAR,EAAA11B,GAAA4rB,OAAAI,EAAAb,GAAAuX,SAAAhN,EAAA11B,GAAA4rB,OAAA6V,EAAAzY,SACAgD,EAAA9C,sBAAAiZ,EAAAxZ,SAAAja,EACAsd,EAAA5C,sBAAA+Y,EAAAxZ,SAAAha,EACAqd,EAAA7C,kBAAAgZ,EAAA77B,KAAAoI,EACAsd,EAAA3C,kBAAA8Y,EAAA77B,KAAAqI,EAIA,GAAA8X,EAAAviB,QAAAotB,SAAA2D,KAAAK,gBACA,IAAAt1B,EAAA,EAAAoiB,EAAAsT,EAAAx1B,OAAyCF,EAAAoiB,IAAUpiB,EACnDgsB,EAAA0J,EAAA11B,GAAA4rB,OAEAqV,GAAAjV,EAAA3D,KACAroB,EAAA,GAAAihC,GAAAvL,EAAA11B,EAAA,GAAA4rB,OAAAvD,KACA2D,EAAA9C,sBAAAkZ,EAAApW,EAAA9C,sBAAAb,EAAAvB,KAAAuB,EAAArB,OACAgF,EAAA5C,sBAAAgZ,EAAApW,EAAA5C,sBAAAf,EAAAtB,IAAAsB,EAAApB,SAGAjnB,EAAA01B,EAAAx1B,OAAA,GAAA+gC,GAAAvL,EAAA11B,EAAA,GAAA4rB,OAAAvD,KACA2D,EAAA7C,kBAAAiZ,EAAApW,EAAA7C,kBAAAd,EAAAvB,KAAAuB,EAAArB,OACAgF,EAAA3C,kBAAA+Y,EAAApW,EAAA3C,kBAAAhB,EAAAtB,IAAAsB,EAAApB,WAMAsK,KAAA,WACA,IAMAoR,EALAlc,EADArkB,KACAqkB,MACA6I,EAFAltB,KAEAmtB,UACAmG,EAAApG,EAAA3qB,MAAA,GACA0jB,EAAA5B,EAAAsQ,UACA3U,EAAAsT,EAAAx1B,OAEAF,EAAA,EAeA,IAbAkhC,GATA9+B,KASAotB,aAAA/I,EAAAviB,WACAy+B,GAAArT,EAAA7pB,QAAAmmB,OAAAmG,aAAA,KACA5G,GAAAE,OAAA/C,SAAA7B,EAAAC,IAAA,CACAI,KAAAuB,EAAAvB,KACAE,MAAAqB,EAAArB,MACAD,IAAAsB,EAAAtB,IAAA4b,EACA1b,OAAAoB,EAAApB,OAAA0b,IAEArT,EAAA7pB,QAAA8rB,OACApG,GAAAE,OAAA5C,WAAAhC,EAAAC,MAIY1mB,EAAAoiB,IAAUpiB,EACtB01B,EAAA11B,GAAAuxB,KAAAlJ,IAOAqJ,cAAA,SAAAjrB,GACA,IAAAulB,EAAAvlB,EAAAmlB,OACA1nB,EAAAuC,EAAAm3B,SACAhM,EAAAzG,GAAAyG,cACAnrB,EAAAgrB,eAAA,CACAI,gBAAA7F,EAAA6F,gBACAC,YAAA9F,EAAA8F,YACAC,YAAA/F,EAAA+F,YACAlL,OAAAmF,EAAAnF,QAEAmF,EAAA6F,gBAAAkP,GAAA78B,EAAA8tB,qBAAAJ,EAAA1tB,EAAA2tB,kBACA7F,EAAA8F,YAAAiP,GAAA78B,EAAA+tB,iBAAAL,EAAA1tB,EAAA4tB,cACA9F,EAAA+F,YAAAgP,GAAA78B,EAAAguB,iBAAAhuB,EAAA6tB,aACA/F,EAAAnF,OAAAka,GAAA78B,EAAAkvB,YAAAlvB,EAAA2iB,WAGA+b,GAAAzX,GAAAjnB,QAAA8mB,QAEAf,GAAAT,KAAA,aACA/M,MAAA,CACAxY,KAAA,eACA4+B,WAAA,CACAx6B,SAAA,GAEAixB,UAAA,CACAwJ,UAAA,GAEAC,YAAA,CACA16B,SAAA,GAEAszB,MAAA,CACAqH,aAAA,IAIA5V,UAAA,CACA2Q,eAAA,EACAC,cAAA,GAEApK,YAAA,GAAA3lB,KAAAkC,GACA8tB,eAAA,SAAAxX,GACA,IAAAyX,EAAA,GACAA,EAAAjQ,KAAA,cAAAxH,EAAApf,GAAA,aACA,IAAA1C,EAAA8hB,EAAA9hB,KACAE,EAAAF,EAAAE,SACAo1B,EAAAt1B,EAAAs1B,OAEA,GAAAp1B,EAAA3E,OACA,QAAAF,EAAA,EAAuBA,EAAA6E,EAAA,GAAAF,KAAAzE,SAA6BF,EACpDk+B,EAAAjQ,KAAA,qCAAAppB,EAAA,GAAAgtB,gBAAA7xB,GAAA,aAEAi6B,EAAAj6B,IACAk+B,EAAAjQ,KAAAgM,EAAAj6B,IAGAk+B,EAAAjQ,KAAA,SAKA,OADAiQ,EAAAjQ,KAAA,SACAiQ,EAAAC,KAAA,KAEA/5B,OAAA,CACA61B,OAAA,CACAmE,eAAA,SAAA3X,GACA,IAAA9hB,EAAA8hB,EAAA9hB,KAEA,OAAAA,EAAAs1B,OAAA/5B,QAAAyE,EAAAE,SAAA3E,OACAyE,EAAAs1B,OAAAn1B,IAAA,SAAAY,EAAA1F,GACA,IAAAsvB,EAAA7I,EAAAqJ,eAAA,GACAuO,EAAA15B,EAAAE,SAAA,GACAsiB,EAAAmI,EAAA3qB,KAAA3E,GACA2xB,EAAAxK,EAAAwK,QAAA,GACA2M,EAAA7X,EAAAviB,QAAAotB,SAAAnK,IACAc,EAAA2a,GAAA,CAAAjR,EAAAE,gBAAAwM,EAAAxM,gBAAAyM,EAAAzM,sBAAAtuB,EAAAvD,GACAkoB,EAAA0a,GAAA,CAAAjR,EAAAG,YAAAuM,EAAAvM,YAAAwM,EAAAxM,kBAAAvuB,EAAAvD,GACAu+B,EAAAqE,GAAA,CAAAjR,EAAAI,YAAAsM,EAAAtM,YAAAuM,EAAAvM,kBAAAxuB,EAAAvD,GACA,OACAk+B,KAAAx4B,EACAkvB,UAAA3M,EACA8M,YAAA7M,EACA2M,UAAA0J,EACA9S,OAAA/O,MAAA2hB,EAAA15B,KAAA3E,KAAAsvB,EAAA3qB,KAAA3E,GAAAyrB,OAEAhL,MAAAzgB,KAKA,KAGAuH,QAAA,SAAAi3B,EAAAC,GACA,IAEAz+B,EAAAoiB,EAAAkN,EAFA7O,EAAAge,EAAAhe,MACAgG,EAAArkB,KAAAqkB,MAGA,IAAAzmB,EAAA,EAAAoiB,GAAAqE,EAAA9hB,KAAAE,UAAA,IAAA3E,OAA8DF,EAAAoiB,IAAUpiB,GACxEsvB,EAAA7I,EAAAqJ,eAAA9vB,IACA2E,KAAA8b,GAAAgL,QAAA6D,EAAA3qB,KAAA8b,GAAAgL,OAGAhF,EAAA5f,WAIAm2B,SAAA,CACAC,UAAA,CACAC,MAAA,WACA,UAEAx3B,MAAA,SAAAie,EAAAhf,GACA,OAAAA,EAAAs1B,OAAAtW,EAAAlD,OAAA,KAAAkD,EAAA0Z,YAMA,IAAA4F,GAAAnQ,GAAA9P,OAAA,CACAkM,gBAAAoC,GAAAuH,IACA1J,WAAAhE,GAAAtK,KACAha,OAAA,SAAAwpB,GACA,IAOArwB,EAAAoiB,EAAAsR,EAPAtQ,EAAAhhB,KACAqD,EAAA2d,EAAAoM,aACAF,EAAAlM,EAAAmM,UACAtD,EAAA7I,EAAAqD,MAAAviB,QAAA0vB,YAAA,EACAsP,EAAA9f,EAAA+f,QAAA,GACAC,EAAAhgB,EAAAigB,QAAA,GACA/D,EAAAhQ,EAAA3qB,KAOA,IAJAye,EAAAkgB,gBAEAhU,EAAAgD,MAAAlP,EAAAmgB,uBAEAvjC,EAAA,EAAAoiB,EAAA3c,EAAAd,KAAAzE,OAA6CF,EAAAoiB,EAAUpiB,IACvDkjC,EAAAljC,GAAAisB,EACAyH,EAAAtQ,EAAAogB,cAAAxjC,GACAojC,EAAApjC,GAAA0zB,EACAzH,GAAAyH,EAGA,IAAA1zB,EAAA,EAAAoiB,EAAAkd,EAAAp/B,OAAqCF,EAAAoiB,IAAUpiB,EAC/Cs/B,EAAAt/B,GAAA49B,SAAAxa,EAAAyW,uBAAAyF,EAAAt/B,MACAojB,EAAA0N,cAAAwO,EAAAt/B,KAAAqwB,IAOAiT,cAAA,WACA,IAAAlgB,EAAAhhB,KACAqkB,EAAArD,EAAAqD,MACAsQ,EAAAtQ,EAAAsQ,UACAmI,EAAAzY,EAAAviB,QACAm7B,EAAApxB,KAAAD,IAAA+oB,EAAA/P,MAAA+P,EAAAjQ,KAAAiQ,EAAA9P,OAAA8P,EAAAhQ,KACAN,EAAAwN,YAAAhmB,KAAAC,IAAAmxB,EAAA,KACA5Y,EAAAuN,YAAA/lB,KAAAC,IAAAgxB,EAAAR,iBAAAjY,EAAAwN,YAAA,IAAAiL,EAAAR,iBAAA,KACAjY,EAAAsZ,cAAAtZ,EAAAwN,YAAAxN,EAAAuN,aAAAvN,EAAAgd,yBACArgB,EAAA6Q,YAAAxN,EAAAwN,YAAAxN,EAAAsZ,aAAA3c,EAAA3C,MACA2C,EAAA4Q,YAAA5Q,EAAA6Q,YAAAxN,EAAAsZ,cAEAjP,cAAA,SAAA3J,EAAA1G,EAAA4P,GACA,IAAAjN,EAAAhhB,KACAqkB,EAAArD,EAAAqD,MACAhhB,EAAA2d,EAAAoM,aACA0P,EAAAzY,EAAAviB,QACAo8B,EAAApB,EAAA9R,UACA3Q,EAAAgK,EAAAhK,MACAwd,EAAAxT,EAAA9hB,KAAAs1B,OACAsG,EAAA9jB,EAAAinB,QACAlD,EAAA/jB,EAAAknB,QAEAC,EAAA1E,EAAAtL,WACAD,EAAAxM,EAAAsE,OAAA,EAAAhP,EAAAonB,8BAAAp+B,EAAAd,KAAA8b,IACAmT,EAAAxQ,EAAA+f,QAAA1iB,GACAoT,EAAAD,GAAAzM,EAAAsE,OAAA,EAAArI,EAAAigB,QAAA5iB,IACAqjB,EAAAxD,EAAAtC,aAAA,EAAAvhB,EAAAonB,8BAAAp+B,EAAAd,KAAA8b,IACAvc,EAAAijB,EAAAyW,UAAA,GACAzS,GAAAnI,OAAAmE,EAAA,CAEAsJ,cAAArN,EAAA3C,MACAkQ,OAAAlQ,EACA6gB,OAAA7kB,EAEAmP,OAAA,CACAiG,gBAAA3tB,EAAA2tB,gBACAC,YAAA5tB,EAAA4tB,YACAC,YAAA7tB,EAAA6tB,YACAgB,YAAA7uB,EAAA6uB,YACArkB,EAAA6xB,EACA5xB,EAAA6xB,EACAxM,YAAA,EACAC,YAAA5D,EAAAyT,EAAAnQ,EACAC,WAAAvD,GAAAiQ,EAAAvC,cAAA6F,EAAAhQ,EACAC,SAAAxD,GAAAiQ,EAAAvC,cAAA6F,EAAA/P,EACAnuB,MAAAylB,GAAA1J,sBAAAwY,EAAAxZ,EAAAwZ,EAAAxZ,OAGA0G,EAAAuE,SAEA6X,qBAAA,WACA,IAAA99B,EAAArD,KAAAotB,aACAF,EAAAltB,KAAAmtB,UACA+C,EAAA,EAMA,OALAnH,GAAAtJ,KAAAyN,EAAA3qB,KAAA,SAAAtB,EAAAod,GACA/D,MAAAjX,EAAAd,KAAA8b,KAAApd,EAAAooB,QACA6G,MAGAA,GAMAZ,cAAA,SAAAvK,GACA,IAAA6E,EAAA7E,EAAAyE,OACA1nB,EAAAijB,EAAAyW,SACAhM,EAAAzG,GAAAyG,cACArQ,EAAA4J,GAAA5J,eACA4F,EAAAsK,eAAA,CACAI,gBAAA7F,EAAA6F,gBACAC,YAAA9F,EAAA8F,YACAC,YAAA/F,EAAA+F,aAEA/F,EAAA6F,gBAAAtQ,EAAArd,EAAA8tB,qBAAAJ,EAAA1tB,EAAA2tB,kBACA7F,EAAA8F,YAAAvQ,EAAArd,EAAA+tB,iBAAAL,EAAA1tB,EAAA4tB,cACA9F,EAAA+F,YAAAxQ,EAAArd,EAAAguB,iBAAAhuB,EAAA6tB,cAMA8H,uBAAA,SAAA1S,EAAA1G,GACA,IAMAzgB,EAAAoiB,EAAAhiB,EALAqmB,EADArkB,KACAqkB,MACAhhB,EAFArD,KAEAotB,aACAmC,EAAAxK,EAAAwK,QAAA,GACAztB,EAAAuiB,EAAAviB,QAAAotB,SAAAnK,IACAlgB,EAAA,GAGAikB,EAAA,CACAzE,QACAoW,UAAApc,EACAhb,UACAupB,aAZA5sB,KAYAqe,OAEA/f,EAAA,2HAEA,IAAAV,EAAA,EAAAoiB,EAAA1hB,EAAAR,OAAqCF,EAAAoiB,IAAUpiB,EAE/CiH,EADA7G,EAAAM,EAAAV,IACA4iC,GAAA,CAAAjR,EAAAvxB,GAAAqF,EAAArF,GAAA8D,EAAA9D,IAAA8qB,EAAAzK,GAGA,OAAAxZ,GAMAu8B,cAAA,SAAA/iB,GACA,IAAA2C,EAAAhhB,KACAkwB,EAAAlwB,KAAAmtB,UAAA+C,MACA7sB,EAAA2d,EAAAoM,aACAF,EAAAlM,EAAAmM,UAEA,GAAA7S,MAAAjX,EAAAd,KAAA8b,KAAA6O,EAAA3qB,KAAA8b,GAAAgL,OACA,SAIA,IAAAP,EAAA,CACAzE,MAAArD,EAAAqD,MACAoW,UAAApc,EACAhb,UACAupB,aAAA5L,EAAA3C,OAEA,OAAAmiB,GAAA,CAAAxf,EAAAqD,MAAAviB,QAAAotB,SAAAnK,IAAAuM,MAAA,EAAAzlB,KAAAkC,GAAAmiB,GAAApH,EAAAzK,MAIAwJ,GAAAT,KAAA,MAAA2B,GAAAnL,MAAAiK,GAAA8Z,WAEA9Z,GAAAT,KAAA,OACAkV,iBAAA,IAIA,IAAAsF,GAAAlF,GACAmF,GAAA9Y,GAAA5J,eACA2iB,GAAA/Y,GAAAjnB,QAAA8mB,QAEAf,GAAAT,KAAA,SACA/M,MAAA,CACAxY,KAAA,gBAEAqtB,SAAA,CACA2D,KAAA,CACAjM,QAAA,MAMA,IAAAmb,GAAArR,GAAA9P,OAAA,CACAiM,mBAAAqC,GAAA5yB,KACAwwB,gBAAAoC,GAAAwH,MACA3J,WAAAhE,GAAAtK,KACAha,OAAA,SAAAwpB,GACA,IAMArwB,EAAAoiB,EANAgB,EAAAhhB,KACAktB,EAAAlM,EAAAmM,UACA0F,EAAA3F,EAAA7pB,QACAiwB,EAAApG,EAAA3qB,MAAA,GACA8X,EAAA2G,EAAAqD,MAAAhK,MACAhX,EAAA2d,EAAAoM,aAiBA,SAdAjsB,IAAAkC,EAAAujB,cAAAzlB,IAAAkC,EAAA47B,cACA57B,EAAA47B,YAAA57B,EAAAujB,SAIAiM,EAAAqM,OAAA7kB,EACAwY,EAAAxE,cAAArN,EAAA3C,MAEAwU,EAAAU,UAAAD,EACAT,EAAAa,OAAA,EAEAb,EAAArJ,OAAAxI,EAAAme,oBAAAtM,GACAA,EAAAvJ,QAEA1rB,EAAA,EAAAoiB,EAAAsT,EAAAx1B,OAAuCF,EAAAoiB,IAAUpiB,EACjDojB,EAAA0N,cAAA4E,EAAA11B,KAAAqwB,GAMA,IAFAjN,EAAAoe,4BAEAxhC,EAAA,EAAAoiB,EAAAsT,EAAAx1B,OAAuCF,EAAAoiB,IAAUpiB,EACjD01B,EAAA11B,GAAA0rB,SAGAoF,cAAA,SAAArqB,EAAAga,EAAA4P,GACA,IAAAjN,EAAAhhB,KACAuvB,EAAAlrB,EAAAkrB,QAAA,GACAlsB,EAAA2d,EAAAoM,aACA/S,EAAA2G,EAAAqD,MAAAhK,MACA2nB,EAAA3nB,EAAA4nB,yBAAA5jB,EAAAhb,EAAAd,KAAA8b,IAEAvc,EAAAkf,EAAAse,qBAAAj7B,EAAAga,GAEAghB,EAAAre,EAAAmM,UAAA9pB,QAAAmmB,OAEAld,EAAA2hB,EAAA5T,EAAAinB,QAAAU,EAAA11B,EACAC,EAAA0hB,EAAA5T,EAAAknB,QAAAS,EAAAz1B,EAEAlI,EAAA66B,OAAA7kB,EACAhW,EAAAm3B,SAAA15B,EACAuC,EAAAgqB,cAAArN,EAAA3C,MACAha,EAAAkqB,OAAAlQ,EAEAha,EAAAmlB,OAAA,CACAld,IAEAC,IACAwnB,KAAAxE,EAAAwE,MAAAzZ,MAAAhO,IAAAgO,MAAA/N,GAEAkY,OAAA3iB,EAAA2iB,OACA4P,WAAAvyB,EAAAuyB,WACAjP,SAAAtjB,EAAAsjB,SACAqK,gBAAA3tB,EAAA2tB,gBACAC,YAAA5tB,EAAA4tB,YACAC,YAAA7tB,EAAA6tB,YACA/I,QAAAib,GAAAtS,EAAA3I,QAAAyY,IAAAzY,QAAA,GAEAwN,UAAAtyB,EAAAsyB,YAOAkL,qBAAA,SAAAr+B,EAAAod,GACA,IAMAzgB,EAAAoiB,EAAAhiB,EALAqmB,EADArkB,KACAqkB,MACAhhB,EAAAghB,EAAA9hB,KAAAE,SAFAzC,KAEAqe,OACAkR,EAAAtuB,EAAAsuB,QAAA,GACAztB,EAAAuiB,EAAAviB,QAAAotB,SAAA7qB,MACAQ,EAAA,GAGAikB,EAAA,CACAzE,QACAoW,UAAApc,EACAhb,UACAupB,aAZA5sB,KAYAqe,OAEAmhB,EAAA,CACA/P,gBAAA,uBACAC,YAAA,mBACAC,YAAA,mBACAyE,UAAA,iBACAxE,qBAAA,4BACAC,iBAAA,wBACAC,iBAAA,wBACAkB,YAAA,mBACAqD,WAAA,aACA5P,OAAA,cACAW,SAAA,iBAEA9mB,EAAAb,OAAAa,KAAAkhC,GAEA,IAAA5hC,EAAA,EAAAoiB,EAAA1hB,EAAAR,OAAqCF,EAAAoiB,IAAUpiB,EAC/CI,EAAAM,EAAAV,GACAiH,EAAA7G,GAAA8jC,GAAA,CAAAvS,EAAAvxB,GAAAqF,EAAAm8B,EAAAxhC,IAAAqF,EAAArF,GAAA8D,EAAA9D,IAAA8qB,EAAAzK,GAGA,OAAAxZ,GAMAs6B,oBAAA,SAAAl+B,GACA,IAMArD,EAAAoiB,EAAAhiB,EALAqmB,EADArkB,KACAqkB,MACAhhB,EAAAghB,EAAA9hB,KAAAE,SAFAzC,KAEAqe,OACAkR,EAAAtuB,EAAAsuB,QAAA,GACAztB,EAAAuiB,EAAAviB,QAAAotB,SAAA2D,KACAhuB,EAAA,GAEAvG,EAAA,0HAEA,IAAAV,EAAA,EAAAoiB,EAAA1hB,EAAAR,OAAqCF,EAAAoiB,IAAUpiB,EAE/CiH,EADA7G,EAAAM,EAAAV,IACAkkC,GAAA,CAAAvS,EAAAvxB,GAAAqF,EAAArF,GAAA8D,EAAA9D,KAIA,OADA6G,EAAA+hB,QAAAib,GAAAx+B,EAAA47B,YAAAn9B,EAAA8kB,SACA/hB,GAEAu6B,0BAAA,WACA,IAIAxhC,EAAAoiB,EAAA4J,EAAAmW,EAHA7S,EADAltB,KACAmtB,UACAlH,EAFAjmB,KAEAqkB,MAAAsQ,UACArB,EAAApG,EAAA3qB,MAAA,GAGA,SAAAy9B,EAAAC,EAAAr0B,EAAAE,GACA,OAAAD,KAAAC,IAAAD,KAAAD,IAAAq0B,EAAAn0B,GAAAF,GAGA,IAAAhO,EAAA,EAAAoiB,EAAAsT,EAAAx1B,OAAuCF,EAAAoiB,IAAUpiB,EACjDgsB,EAAA0J,EAAA11B,GAAA4rB,OACAuW,EAAAhX,GAAAsX,YAAAtX,GAAA+K,aAAAR,EAAA11B,GAAA,GAAA4rB,OAAAI,EAAAb,GAAAuX,SAAAhN,EAAA11B,GAAA,GAAA4rB,OAAAI,EAAAhD,SAEAgD,EAAA9C,sBAAAkZ,EAAAD,EAAAxZ,SAAAja,EAAA2Z,EAAAvB,KAAAuB,EAAArB,OACAgF,EAAA5C,sBAAAgZ,EAAAD,EAAAxZ,SAAAha,EAAA0Z,EAAAtB,IAAAsB,EAAApB,QACA+E,EAAA7C,kBAAAiZ,EAAAD,EAAA77B,KAAAoI,EAAA2Z,EAAAvB,KAAAuB,EAAArB,OACAgF,EAAA3C,kBAAA+Y,EAAAD,EAAA77B,KAAAqI,EAAA0Z,EAAAtB,IAAAsB,EAAApB,SAGAyK,cAAA,SAAAjrB,GACA,IAAAulB,EAAAvlB,EAAAmlB,OACA1nB,EAAAuC,EAAAm3B,SACAhM,EAAAzG,GAAAyG,cACAnrB,EAAAgrB,eAAA,CACAI,gBAAA7F,EAAA6F,gBACAC,YAAA9F,EAAA8F,YACAC,YAAA/F,EAAA+F,YACAlL,OAAAmF,EAAAnF,QAEAmF,EAAA6F,gBAAAoS,GAAA//B,EAAA8tB,qBAAAJ,EAAA1tB,EAAA2tB,kBACA7F,EAAA8F,YAAAmS,GAAA//B,EAAA+tB,iBAAAL,EAAA1tB,EAAA4tB,cACA9F,EAAA+F,YAAAkS,GAAA//B,EAAAguB,iBAAAhuB,EAAA6tB,aACA/F,EAAAnF,OAAAod,GAAA//B,EAAAkvB,YAAAlvB,EAAA2iB,WAIAoD,GAAAT,KAAA,WACAyP,MAAA,CACAC,KAAA,UAEAxJ,OAAA,CACAC,MAAA,EACAtoB,GAAA,WAEApD,KAAA,SAEAqE,SAAA,WAEAunB,MAAA,EACAxoB,GAAA,WACApD,KAAA,SACAqE,SAAA,UAGA0hB,WAAA,EACAgT,SAAA,CACAC,UAAA,CACAC,MAAA,WACA,UAEAx3B,MAAA,SAAAie,GACA,UAAAA,EAAAyZ,OAAA,KAAAzZ,EAAA0Z,OAAA,SAOA,IAIAl1B,GAAA,CACAuxB,IAAAF,GACA8K,OAAAhH,GACAyG,SAAAjF,GACAyF,cAAAzD,GACA7L,KAAAmM,GACAoD,UAAAvB,GACAwB,IAAAT,GACAU,MAAAP,GACAQ,QAbAvD,IAsBA,SAAAwD,GAAApG,EAAA/X,GACA,OAAA+X,EAAAqG,OACA,CACAn2B,EAAA8vB,EAAA9vB,EACAC,EAAA6vB,EAAA7vB,GAIAwc,GAAAyZ,oBAAApG,EAAA/X,GASA,SAAAqe,GAAAre,EAAAse,GACA,IACAzV,EAAAtvB,EAAAi/B,EAAA7c,EAAA4iB,EADAngC,EAAA4hB,EAAA9hB,KAAAE,SAGA,IAAA7E,EAAA,EAAAoiB,EAAAvd,EAAA3E,OAAuCF,EAAAoiB,IAAUpiB,EACjD,GAAAymB,EAAAwU,iBAAAj7B,GAMA,IAFAsvB,EAAA7I,EAAAqJ,eAAA9vB,GAEAi/B,EAAA,EAAA+F,EAAA1V,EAAA3qB,KAAAzE,OAA0C++B,EAAA+F,IAAU/F,EAAA,CACpD,IAAA57B,EAAAisB,EAAA3qB,KAAAs6B,GAEA57B,EAAAsoB,MAAAwK,MACA4O,EAAA1hC,IAaA,SAAA4hC,GAAAxe,EAAAne,GACA,IAAAgpB,EAAA,GAMA,OALAwT,GAAAre,EAAA,SAAApjB,GACAA,EAAAgwB,QAAA/qB,EAAAoG,EAAApG,EAAAqG,IACA2iB,EAAArD,KAAA5qB,KAGAiuB,EAYA,SAAA4T,GAAAze,EAAAne,EAAA68B,EAAAC,GACA,IAAAC,EAAA/jB,OAAAgkB,kBACAC,EAAA,GAiBA,OAhBAT,GAAAre,EAAA,SAAApjB,GACA,IAAA8hC,GAAA9hC,EAAAgwB,QAAA/qB,EAAAoG,EAAApG,EAAAqG,GAAA,CAIA,IAAAisB,EAAAv3B,EAAA6wB,iBACAP,EAAAyR,EAAA98B,EAAAsyB,GAEAjH,EAAA0R,GACAE,EAAA,CAAAliC,GACAgiC,EAAA1R,GACOA,IAAA0R,GAEPE,EAAAtX,KAAA5qB,MAGAkiC,EASA,SAAAC,GAAA3E,GACA,IAAA4E,GAAA,IAAA5E,EAAAlgC,QAAA,KACA+kC,GAAA,IAAA7E,EAAAlgC,QAAA,KACA,gBAAAglC,EAAAC,GACA,IAAAC,EAAAJ,EAAAx3B,KAAAsoB,IAAAoP,EAAAj3B,EAAAk3B,EAAAl3B,GAAA,EACAo3B,EAAAJ,EAAAz3B,KAAAsoB,IAAAoP,EAAAh3B,EAAAi3B,EAAAj3B,GAAA,EACA,OAAAV,KAAAmC,KAAAnC,KAAAQ,IAAAo3B,EAAA,GAAA53B,KAAAQ,IAAAq3B,EAAA,KAIA,SAAAC,GAAAtf,EAAA+X,EAAAt6B,GACA,IAAAoE,EAAAs8B,GAAApG,EAAA/X,GAEAviB,EAAA28B,KAAA38B,EAAA28B,MAAA,IACA,IAAAuE,EAAAI,GAAAthC,EAAA28B,MACAmF,EAAA9hC,EAAAihC,UAAAF,GAAAxe,EAAAne,GAAA48B,GAAAze,EAAAne,GAAA,EAAA88B,GACA9T,EAAA,GAEA,OAAA0U,EAAA9lC,QAIAumB,EAAA9hB,KAAAE,SAAAW,QAAA,SAAAC,EAAAupB,GACA,GAAAvI,EAAAwU,iBAAAjM,GAAA,CACA,IAAAM,EAAA7I,EAAAqJ,eAAAd,GACA3rB,EAAAisB,EAAA3qB,KAAAqhC,EAAA,GAAArV,QAEAttB,MAAAsoB,MAAAwK,MACA7E,EAAArD,KAAA5qB,MAIAiuB,GAbA,GA+BA,IAAA2U,GAAA,CAEAC,MAAA,CACAC,OAAA,SAAA1f,EAAA+X,GACA,IAAAl2B,EAAAs8B,GAAApG,EAAA/X,GACA6K,EAAA,GAOA,OANAwT,GAAAre,EAAA,SAAApjB,GACA,GAAAA,EAAAgwB,QAAA/qB,EAAAoG,EAAApG,EAAAqG,GAEA,OADA2iB,EAAArD,KAAA5qB,GACAiuB,IAGAA,EAAArX,MAAA,MASAvU,MAAAqgC,GAYAtlB,MAAAslB,GAWAtgC,QAAA,SAAAghB,EAAA+X,EAAAt6B,GACA,IAAAoE,EAAAs8B,GAAApG,EAAA/X,GACAviB,EAAA28B,KAAA38B,EAAA28B,MAAA,KACA,IAAAuE,EAAAI,GAAAthC,EAAA28B,MACAmF,EAAA9hC,EAAAihC,UAAAF,GAAAxe,EAAAne,GAAA48B,GAAAze,EAAAne,GAAA,EAAA88B,GAMA,OAJAY,EAAA9lC,OAAA,IACA8lC,EAAAvf,EAAAqJ,eAAAkW,EAAA,GAAAvV,eAAA9rB,MAGAqhC,GASAI,SAAA,SAAA3f,EAAA+X,GACA,OAAAuH,GAAAtf,EAAA+X,EAAA,CACA2G,WAAA,KAYA1+B,MAAA,SAAAggB,EAAA+X,GACA,IAAAl2B,EAAAs8B,GAAApG,EAAA/X,GACA,OAAAwe,GAAAxe,EAAAne,IAWA+9B,QAAA,SAAA5f,EAAA+X,EAAAt6B,GACA,IAAAoE,EAAAs8B,GAAApG,EAAA/X,GACAviB,EAAA28B,KAAA38B,EAAA28B,MAAA,KACA,IAAAuE,EAAAI,GAAAthC,EAAA28B,MACA,OAAAqE,GAAAze,EAAAne,EAAApE,EAAAihC,UAAAC,IAWA12B,EAAA,SAAA+X,EAAA+X,EAAAt6B,GACA,IAAAoE,EAAAs8B,GAAApG,EAAA/X,GACAuf,EAAA,GACAM,GAAA,EAgBA,OAfAxB,GAAAre,EAAA,SAAApjB,GACAA,EAAAuzB,SAAAtuB,EAAAoG,IACAs3B,EAAA/X,KAAA5qB,GAGAA,EAAAgwB,QAAA/qB,EAAAoG,EAAApG,EAAAqG,KACA23B,GAAA,KAKApiC,EAAAihC,YAAAmB,IACAN,EAAA,IAGAA,GAWAr3B,EAAA,SAAA8X,EAAA+X,EAAAt6B,GACA,IAAAoE,EAAAs8B,GAAApG,EAAA/X,GACAuf,EAAA,GACAM,GAAA,EAgBA,OAfAxB,GAAAre,EAAA,SAAApjB,GACAA,EAAAwzB,SAAAvuB,EAAAqG,IACAq3B,EAAA/X,KAAA5qB,GAGAA,EAAAgwB,QAAA/qB,EAAAoG,EAAApG,EAAAqG,KACA23B,GAAA,KAKApiC,EAAAihC,YAAAmB,IACAN,EAAA,IAGAA,KAKA,SAAAO,GAAA7iB,EAAApb,GACA,OAAA6iB,GAAAqb,MAAA9iB,EAAA,SAAA3X,GACA,OAAAA,EAAAzD,eAIA,SAAAm+B,GAAA/iB,EAAA3B,GACA2B,EAAAle,QAAA,SAAAuG,EAAA/L,GAEA,OADA+L,EAAA26B,WAAA1mC,EACA+L,IAEA2X,EAAAijB,KAAA,SAAApnC,EAAAwO,GACA,IAAAsU,EAAAN,EAAAhU,EAAAxO,EACA+iB,EAAAP,EAAAxiB,EAAAwO,EACA,OAAAsU,EAAAzC,SAAA0C,EAAA1C,OAAAyC,EAAAqkB,WAAApkB,EAAAokB,WAAArkB,EAAAzC,OAAA0C,EAAA1C,SAEA8D,EAAAle,QAAA,SAAAuG,UACAA,EAAA26B,aA0BA,SAAAE,GAAAC,EAAAlf,GACAwD,GAAAtJ,KAAAglB,EAAA,SAAAC,GACAnf,EAAAmf,EAAAx+B,WAAAw+B,EAAAzM,eAAAyM,EAAAziC,OAAAyiC,EAAAxiC,QAIA2lB,GAAAT,KAAA,UACAud,OAAA,CACAjQ,QAAA,CACA/P,IAAA,EACAC,MAAA,EACAC,OAAA,EACAH,KAAA,MAyBA,IA8TA5nB,GA9TA8nC,GAAA,CACAjoC,SAAA,GAQAkoC,OAAA,SAAAxgB,EAAA9C,GACA8C,EAAAogB,QACApgB,EAAAogB,MAAA,IAIAljB,EAAAujB,UAAAvjB,EAAAujB,YAAA,EACAvjB,EAAArb,SAAAqb,EAAArb,UAAA,MACAqb,EAAA/D,OAAA+D,EAAA/D,QAAA,EACA6G,EAAAogB,MAAA5Y,KAAAtK,IAQAwjB,UAAA,SAAA1gB,EAAA2gB,GACA,IAAA3mB,EAAAgG,EAAAogB,MAAApgB,EAAAogB,MAAAlmC,QAAAymC,IAAA,GAEA,IAAA3mB,GACAgG,EAAAogB,MAAArgC,OAAAia,EAAA,IAUA4mB,UAAA,SAAA5gB,EAAA9C,EAAAzf,GAMA,IALA,IAGAgc,EAHAnd,EAAA,kCACAqf,EAAArf,EAAA7C,OACAF,EAAA,EAGYA,EAAAoiB,IAAUpiB,EACtBkgB,EAAAnd,EAAA/C,GAEAkE,EAAA5D,eAAA4f,KACAyD,EAAAzD,GAAAhc,EAAAgc,KAYArZ,OAAA,SAAA4f,EAAAniB,EAAAD,GACA,GAAAoiB,EAAA,CAIA,IAAA6gB,EAAA7gB,EAAAviB,QAAA6iC,QAAA,GACAjQ,EAAA3L,GAAAjnB,QAAAmmB,UAAAid,EAAAxQ,SACAyQ,EAAAzQ,EAAAhQ,KACA0gB,EAAA1Q,EAAA9P,MACAygB,EAAA3Q,EAAA/P,IACA2gB,EAAA5Q,EAAA7P,OACA0gB,EAAApB,GAAA9f,EAAAogB,MAAA,QACAe,EAAArB,GAAA9f,EAAAogB,MAAA,SACAgB,EAAAtB,GAAA9f,EAAAogB,MAAA,OACAiB,EAAAvB,GAAA9f,EAAAogB,MAAA,UACAkB,EAAAxB,GAAA9f,EAAAogB,MAAA,aAEAJ,GAAAkB,GAAA,GACAlB,GAAAmB,GAAA,GACAnB,GAAAoB,GAAA,GACApB,GAAAqB,GAAA,GACA,IA2DAE,EA3DAC,EAAAN,EAAAjlC,OAAAklC,GACAM,EAAAL,EAAAnlC,OAAAolC,GACAK,EAAAF,EAAAvlC,OAAAwlC,GAsCAE,EAAA9jC,EAAAijC,EAAAC,EACAa,EAAAhkC,EAAAojC,EAAAC,EACAY,EAAAF,EAAA,EAGAG,GAAAjkC,EAAAgkC,GAAAL,EAAA/nC,OAKAsoC,EAAAJ,EACAK,EAAAJ,EACAK,EAAA,CACA3hB,IAAA0gB,EACA3gB,KAAAygB,EACAtgB,OAAAygB,EACA1gB,MAAAwgB,GAEAmB,EAAA,GAsBAxd,GAAAtJ,KAAAsmB,EAnBA,SAAArB,GACA,IAAAzH,EACAhF,EAAAyM,EAAAzM,eAEAA,GACAgF,EAAAyH,EAAAjgC,OAAAigC,EAAAI,UAAAkB,EAAAI,EAAAH,EAAA,GACAI,GAAApJ,EAAAh7B,SAEAg7B,EAAAyH,EAAAjgC,OAAA0hC,EAAAE,GACAD,GAAAnJ,EAAA/6B,OAGAqkC,EAAA1a,KAAA,CACA8J,WAAAsC,EACA/1B,MAAA+6B,EAAA/6B,MACAwiC,UAMAkB,EAhOA,SAAAnB,GACA,IAAA9f,EAAA,EACAD,EAAA,EACAG,EAAA,EACAD,EAAA,EAUA,OATAmE,GAAAtJ,KAAAglB,EAAA,SAAAC,GACA,GAAAA,EAAA8B,WAAA,CACA,IAAAC,EAAA/B,EAAA8B,aACA7hB,EAAA9Y,KAAAC,IAAA6Y,EAAA8hB,EAAA9hB,KACAD,EAAA7Y,KAAAC,IAAA4Y,EAAA+hB,EAAA/hB,MACAG,EAAAhZ,KAAAC,IAAA+Y,EAAA4hB,EAAA5hB,QACAD,EAAA/Y,KAAAC,IAAA8Y,EAAA6hB,EAAA7hB,UAGA,CACAD,MACAD,OACAG,SACAD,SA8MA8hB,CAAAX,GA4BAhd,GAAAtJ,KAAAomB,EAAAc,GACAnC,GAAAqB,EAAAS,GAEAvd,GAAAtJ,KAAAqmB,EAAAa,GACAnC,GAAAsB,EAAAQ,GAmBAvd,GAAAtJ,KAAAomB,EAjBA,SAAAnB,GACA,IAAAkC,EAAA7d,GAAA8d,cAAAN,EAAA,SAAAtJ,GACA,OAAAA,EAAAyH,UAEAoC,EAAA,CACApiB,KAAA,EACAE,MAAA,EACAD,IAAA2hB,EAAA3hB,IACAE,OAAAyhB,EAAAzhB,QAGA+hB,GACAlC,EAAAjgC,OAAAmiC,EAAA1kC,MAAAmkC,EAAAS,KAaAtC,GAAAuB,EANAO,EAAA,CACA3hB,IAAA0gB,EACA3gB,KAAAygB,EACAtgB,OAAAygB,EACA1gB,MAAAwgB,IAIA,IAAA2B,EAAAl7B,KAAAC,IAAA85B,EAAAlhB,KAAA4hB,EAAA5hB,KAAA,GACA4hB,EAAA5hB,MAAAqiB,EACAT,EAAA1hB,OAAA/Y,KAAAC,IAAA85B,EAAAhhB,MAAA0hB,EAAA1hB,MAAA,GACA,IAAAoiB,EAAAn7B,KAAAC,IAAA85B,EAAAjhB,IAAA2hB,EAAA3hB,IAAA,GACA2hB,EAAA3hB,KAAAqiB,EACAV,EAAAzhB,QAAAhZ,KAAAC,IAAA85B,EAAA/gB,OAAAyhB,EAAAzhB,OAAA,GAIA,IAAAoiB,EAAAhlC,EAAAqkC,EAAA3hB,IAAA2hB,EAAAzhB,OACAqiB,EAAAhlC,EAAAokC,EAAA5hB,KAAA4hB,EAAA1hB,MAEAsiB,IAAAd,GAAAa,IAAAZ,IACAtd,GAAAtJ,KAAAomB,EAAA,SAAAnB,GACAA,EAAAziC,OAAAglC,IAEAle,GAAAtJ,KAAAqmB,EAAA,SAAApB,GACAA,EAAAI,YACAJ,EAAAxiC,MAAAglC,KAGAb,EAAAY,EACAb,EAAAc,GAIA,IAAAxiB,EAAAygB,EAAA4B,EACApiB,EAAA0gB,EAAA2B,EAoBAje,GAAAtJ,KAAA8lB,EAAAjlC,OAAAmlC,GAAA0B,GAEAziB,GAAA0hB,EACAzhB,GAAA0hB,EACAtd,GAAAtJ,KAAA+lB,EAAA2B,GACApe,GAAAtJ,KAAAimB,EAAAyB,GAEA9iB,EAAAsQ,UAAA,CACAjQ,KAAA4hB,EAAA5hB,KACAC,IAAA2hB,EAAA3hB,IACAC,MAAA0hB,EAAA5hB,KAAA0hB,EACAvhB,OAAAyhB,EAAA3hB,IAAA0hB,GAGAtd,GAAAtJ,KAAAkmB,EAAA,SAAAjB,GACAA,EAAAhgB,KAAAL,EAAAsQ,UAAAjQ,KACAggB,EAAA/f,IAAAN,EAAAsQ,UAAAhQ,IACA+f,EAAA9f,MAAAP,EAAAsQ,UAAA/P,MACA8f,EAAA7f,OAAAR,EAAAsQ,UAAA9P,OACA6f,EAAAjgC,OAAA2hC,EAAAC,KA1HA,SAAAM,EAAAjC,GACA,IAAAkC,EAAA7d,GAAA8d,cAAAN,EAAA,SAAAa,GACA,OAAAA,EAAA1C,UAGA,GAAAkC,EACA,GAAAA,EAAAjR,WAAA,CACA,IAAAmR,EAAA,CACApiB,KAAA7Y,KAAAC,IAAAw6B,EAAA5hB,KAAAkhB,EAAAlhB,MACAE,MAAA/Y,KAAAC,IAAAw6B,EAAA1hB,MAAAghB,EAAAhhB,OACAD,IAAA,EACAE,OAAA,GAIA6f,EAAAjgC,OAAAigC,EAAAI,UAAAkB,EAAAI,EAAAH,EAAA,EAAAa,QAEApC,EAAAjgC,OAAAmiC,EAAA1kC,MAAAmkC,GAoEA,SAAAc,EAAAzC,GACAA,EAAAzM,gBACAyM,EAAAhgB,KAAAggB,EAAAI,UAAAK,EAAAmB,EAAA5hB,KACAggB,EAAA9f,MAAA8f,EAAAI,UAAA5iC,EAAAkjC,EAAAkB,EAAA5hB,KAAA0hB,EACA1B,EAAA/f,MACA+f,EAAA7f,OAAAF,EAAA+f,EAAAziC,OAEA0iB,EAAA+f,EAAA7f,SAEA6f,EAAAhgB,OACAggB,EAAA9f,MAAAF,EAAAggB,EAAAxiC,MACAwiC,EAAA/f,IAAA2hB,EAAA3hB,IACA+f,EAAA7f,OAAAyhB,EAAA3hB,IAAA0hB,EAEA3hB,EAAAggB,EAAA9f,UAqDAyiB,IAJAvqC,GAJAW,OAAA6pC,OAAA,CACAC,QAJA,w3BAQAzqC,GAAAyqC,SAAAzqC,GAIA0qC,GAAA,WAEAC,GAAAC,uBACAC,GAAAD,yBACAE,GAAAF,2BACAG,GAAA,0CAOAC,GAAA,CACAC,WAAA,YACAC,UAAA,YACAC,SAAA,UACAC,aAAA,aACAC,YAAA,YACAC,YAAA,YACAC,UAAA,UACAC,aAAA,WACAC,WAAA,YAYA,SAAAC,GAAAvnC,EAAAwnC,GACA,IAAArpC,EAAA2pB,GAAA2f,SAAAznC,EAAAwnC,GACAzgB,EAAA5oB,KAAA6a,MAAA,qBACA,OAAA+N,EAAA9I,OAAA8I,EAAA,SAAA7mB,EAgEA,IAmBAwnC,KAnBA,WACA,IAAAC,GAAA,EAEA,IACA,IAAA9mC,EAAArE,OAAAqtB,eAAA,GAA4C,WAE5CC,IAAA,WACA6d,GAAA,KAGArqB,OAAAsqB,iBAAA,SAAA/mC,GACK,MAAAs6B,IAGL,OAAAwM,EAdA,IAmBA,CACAE,SAAA,GAGA,SAAAC,GAAApkC,EAAA9C,EAAA0qB,GACA5nB,EAAAkkC,iBAAAhnC,EAAA0qB,EAAAoc,IAGA,SAAAK,GAAArkC,EAAA9C,EAAA0qB,GACA5nB,EAAAskC,oBAAApnC,EAAA0qB,EAAAoc,IAGA,SAAAO,GAAArnC,EAAAwiB,EAAA/X,EAAAC,EAAA48B,GACA,OACAtnC,OACAwiB,QACAoe,OAAA0G,GAAA,KACA78B,OAAAnL,IAAAmL,IAAA,KACAC,OAAApL,IAAAoL,IAAA,MA2BA,SAAA68B,GAAAC,GACA,IAAAC,EAAAC,SAAArkC,cAAA,OAEA,OADAokC,EAAAE,UAAAH,GAAA,GACAC,EAsEA,SAAAG,GAAA9kC,EAAA4nB,EAAAlI,GACA,IAAAqlB,EAAA/kC,EAAA6iC,MAAA7iC,EAAA6iC,IAAA,IAEAmC,EAAAD,EAAAC,QArEA,SAAAhH,GACA,IAGAgH,EAAAP,GAAA3B,IACAmC,EAAAR,GAAA3B,GAAA,WACAoC,EAAAT,GAAA3B,GAAA,WACAmC,EAAAE,YAAAV,MACAS,EAAAC,YAAAV,MACAO,EAAAG,YAAAF,GACAD,EAAAG,YAAAD,GAEAF,EAAAI,OAAA,WACAH,EAAAI,WAZA,IAaAJ,EAAAK,UAbA,IAcAJ,EAAAG,WAdA,IAeAH,EAAAI,UAfA,KAkBA,IAAAC,EAAA,WACAP,EAAAI,SAEApH,KAKA,OAFAoG,GAAAa,EAAA,SAAAM,EAAAC,KAAAP,EAAA,WACAb,GAAAc,EAAA,SAAAK,EAAAC,KAAAN,EAAA,WACAF,EA0CAS,CA7FA,SAAA7qB,EAAAC,GACA,IAAA6qB,GAAA,EACAnqC,EAAA,GACA,kBACAA,EAAAC,MAAAlC,UAAA4Z,MAAA1Z,KAAAN,WACA2hB,KAAAxf,KAEAqqC,IACAA,GAAA,EACAthB,GAAAkD,iBAAA9tB,KAAAogB,OAAA,WACA8rB,GAAA,EACA9qB,EAAAlf,MAAAmf,EAAAtf,OAkFAoqC,CAAA,WACA,GAAAZ,EAAAC,QAAA,CACA,IAAAY,EAAAlmB,EAAAviB,QAAA0oC,qBAAA7lC,EAAA8lC,WACAz+B,EAAAu+B,IAAAG,YAAA,EACAne,EAAA2c,GAAA,SAAA7kB,IAEAkmB,KAAAG,YAAA1+B,GAAAqY,EAAA4E,QAQAsD,EAAA2c,GAAA,SAAA7kB,SApDA,SAAA1f,EAAAg+B,GACA,IAAA+G,EAAA/kC,EAAA6iC,MAAA7iC,EAAA6iC,IAAA,IAEAmD,EAAAjB,EAAAkB,YAAA,SAAAxO,GACAA,EAAAyO,gBAAAjD,IACAjF,KAIA5Z,GAAAtJ,KAAAooB,GAAA,SAAAhmC,GACAknC,GAAApkC,EAAA9C,EAAA8oC,KAOAjB,EAAAoB,SAAAnmC,EAAAomC,aACApmC,EAAAqmC,UAAAC,IAAAtD,IAwCAuD,CAAAvmC,EAAA,WACA,GAAA+kC,EAAAC,QAAA,CACA,IAAAY,EAAA5lC,EAAA8lC,WAEAF,OAAAZ,EAAAc,YACAF,EAAAY,aAAAxB,EAAAY,EAAAa,YAIAzB,EAAAI,YAKA,SAAAsB,GAAA1mC,GACA,IAAA+kC,EAAA/kC,EAAA6iC,KAAA,GACAmC,EAAAD,EAAAC,eACAD,EAAAC,QAtDA,SAAAhlC,GACA,IAAA+kC,EAAA/kC,EAAA6iC,KAAA,GACAmD,EAAAjB,EAAAkB,YAEAD,IACA5hB,GAAAtJ,KAAAooB,GAAA,SAAAhmC,GACAmnC,GAAArkC,EAAA9C,EAAA8oC,YAEAjB,EAAAkB,aAGAjmC,EAAAqmC,UAAAM,OAAA3D,IA4CA4D,CAAA5mC,GAEAglC,KAAAc,YACAd,EAAAc,WAAAe,YAAA7B,GAkBA,IAAA8B,GAAA,CAQAC,qBAAA,EAOAC,SAAA,qBAAAptB,QAAA,qBAAAgrB,SAKAqC,cAAA,WACA5rC,KAAA6rC,UAIA7rC,KAAA6rC,SAAA,EAEA7rC,KAAA0rC,qBAzCA,SAAAI,EAAAC,GAEA,IAAA5mB,EAAA2mB,EAAAE,QAAAzC,SAAArkC,cAAA,SAEA4mC,EAAAE,SACAF,EAAAE,OAAA7mB,EACA4mB,EAAA,mBAAAA,EACA5mB,EAAA8mB,aAAA,mBACA1C,SAAA2C,qBAAA,WAAApC,YAAA3kB,IAGAA,EAAA2kB,YAAAP,SAAA4C,eAAAJ,IA+BAK,CAAApsC,KAAAqnC,MAGAgF,eAAA,SAAA9qB,EAAA7d,GACA,kBAAA6d,EACAA,EAAAgoB,SAAA+C,eAAA/qB,GACOA,EAAAzjB,SAEPyjB,IAAA,IAGAA,KAAA0H,SAEA1H,IAAA0H,QAMA,IAAAH,EAAAvH,KAAAgrB,YAAAhrB,EAAAgrB,WAAA,MAYA,OATAvsC,KAAA4rC,gBASA9iB,KAAAG,SAAA1H,GAzTA,SAAA0H,EAAAvlB,GACA,IAAAyhB,EAAA8D,EAAA9D,MAGAqnB,EAAAvjB,EAAAwjB,aAAA,UACAC,EAAAzjB,EAAAwjB,aAAA,SAkBA,GAhBAxjB,EAAAue,IAAA,CACAmF,QAAA,CACA1qC,OAAAuqC,EACAtqC,MAAAwqC,EACAvnB,MAAA,CACAlf,QAAAkf,EAAAlf,QACAhE,OAAAkjB,EAAAljB,OACAC,MAAAijB,EAAAjjB,SAOAijB,EAAAlf,QAAAkf,EAAAlf,SAAA,QAEA,OAAAymC,GAAA,KAAAA,EAAA,CACA,IAAAE,EAAApE,GAAAvf,EAAA,cAEA9nB,IAAAyrC,IACA3jB,EAAA/mB,MAAA0qC,GAIA,UAAAJ,GAAA,KAAAA,EACA,QAAAvjB,EAAA9D,MAAAljB,OAIAgnB,EAAAhnB,OAAAgnB,EAAA/mB,OAAAwB,EAAA5B,QAAA+qC,aAAA,OACO,CACP,IAAAC,EAAAtE,GAAAvf,EAAA,eAEA9nB,IAAAyrC,IACA3jB,EAAAhnB,OAAA6qC,IAiRAC,CAAAxrB,EAAA7d,GACAolB,GAGA,MAEAkkB,eAAA,SAAAlkB,GACA,IAAAG,EAAAH,EAAAG,OAEA,GAAAA,EAAAue,IAAA,CAIA,IAAAmF,EAAA1jB,EAAAue,IAAAmF,QACA,mBAAAvpC,QAAA,SAAA0a,GACA,IAAA1e,EAAAutC,EAAA7uB,GAEAiL,GAAApK,cAAAvf,GACA6pB,EAAAgkB,gBAAAnvB,GAEAmL,EAAAgjB,aAAAnuB,EAAA1e,KAGA2pB,GAAAtJ,KAAAktB,EAAAxnB,OAAA,GAAwC,SAAA/lB,EAAApB,GACxCirB,EAAA9D,MAAAnnB,GAAAoB,IAOA6pB,EAAA/mB,MAAA+mB,EAAA/mB,aACA+mB,EAAAue,MAEAqB,iBAAA,SAAAxkB,EAAAxiB,EAAA0qB,GACA,IAAAtD,EAAA5E,EAAA4E,OAEA,cAAApnB,EAAA,CAMA,IAAA6nC,EAAAnd,EAAAib,MAAAjb,EAAAib,IAAA,IACA0F,EAAAxD,EAAAwD,UAAAxD,EAAAwD,QAAA,IAEAvC,EAAAuC,EAAA7oB,EAAApf,GAAA,IAAApD,GAAA,SAAArB,GACA+rB,EAzQA,SAAA/rB,EAAA6jB,GACA,IAAAxiB,EAAAimC,GAAAtnC,EAAAqB,OAAArB,EAAAqB,KACAsrC,EAAApkB,GAAAyZ,oBAAAhiC,EAAA6jB,GACA,OAAA6kB,GAAArnC,EAAAwiB,EAAA8oB,EAAA7gC,EAAA6gC,EAAA5gC,EAAA/L,GAsQA4sC,CAAA5sC,EAAA6jB,KAGA0kB,GAAA9f,EAAApnB,EAAA8oC,QAXAlB,GAAAxgB,EAAAsD,EAAAlI,IAaA4kB,oBAAA,SAAA5kB,EAAAxiB,EAAA0qB,GACA,IAAAtD,EAAA5E,EAAA4E,OAEA,cAAApnB,EAAA,CAMA,IAAA6nC,EAAAnd,EAAAib,KAAA,GACA0F,EAAAxD,EAAAwD,SAAA,GACAvC,EAAAuC,EAAA7oB,EAAApf,GAAA,IAAApD,GAEA8oC,GAIA3B,GAAA/f,EAAApnB,EAAA8oC,QAZAU,GAAApiB,KA0BAF,GAAAskB,SAAAtE,GAWAhgB,GAAAukB,YAAAtE,GAEA,IAAAuE,GAAA9B,GAAAE,SAAAF,GA7dA,CACAY,eAAA,SAAA9qB,GAMA,OALAA,KAAA0H,SAEA1H,IAAA0H,QAGA1H,KAAAgrB,WAAA,cA6dAT,GAAA/iB,GAAAnI,OAAA,CAIAwI,WAAA,aASAijB,eAAA,aAQAW,eAAA,aASAnE,iBAAA,aAQAI,oBAAA,cACGsE,IAEH1lB,GAAAT,KAAA,UACArlB,QAAA,KASA,IAAAyrC,GAAA,CAKAC,SAAA,GAQAC,SAAA,EAMAC,SAAA,SAAA5rC,GACA,IAAAkL,EAAAjN,KAAAytC,SACA,GAAAntC,OAAAyB,GAAAqB,QAAA,SAAAwqC,IACA,IAAA3gC,EAAA1O,QAAAqvC,IACA3gC,EAAA4e,KAAA+hB,KAGA5tC,KAAA0tC,YAOAG,WAAA,SAAA9rC,GACA,IAAAkL,EAAAjN,KAAAytC,SACA,GAAAntC,OAAAyB,GAAAqB,QAAA,SAAAwqC,GACA,IAAAE,EAAA7gC,EAAA1O,QAAAqvC,IAEA,IAAAE,GACA7gC,EAAA7I,OAAA0pC,EAAA,KAGA9tC,KAAA0tC,YAOAtpB,MAAA,WACApkB,KAAAytC,SAAA,GACAztC,KAAA0tC,YAQAxd,MAAA,WACA,OAAAlwB,KAAAytC,SAAA3vC,QAQAiwC,OAAA,WACA,OAAA/tC,KAAAytC,UAYAO,OAAA,SAAA3pB,EAAA4pB,EAAA/tC,GACA,IAEAtC,EAAAswC,EAAAN,EAAAO,EAAAtf,EAFAuf,EAAApuC,KAAAouC,YAAA/pB,GACArE,EAAAouB,EAAAtwC,OAGA,IAAAF,EAAA,EAAiBA,EAAAoiB,IAAUpiB,EAK3B,GAJAswC,EAAAE,EAAAxwC,GACAgwC,EAAAM,EAAAN,OAGA,oBAFA/e,EAAA+e,EAAAK,OAGAE,EAAA,CAAA9pB,GAAA/jB,OAAAJ,GAAA,KACA2rB,KAAAqiB,EAAApsC,UAEA,IAAA+sB,EAAAxuB,MAAAutC,EAAAO,IACA,SAKA,UAQAC,YAAA,SAAA/pB,GACA,IAAAgqB,EAAAhqB,EAAAiqB,WAAAjqB,EAAAiqB,SAAA,IAEA,GAAAD,EAAAppC,KAAAjF,KAAA0tC,SACA,OAAAW,EAAAD,YAGA,IAAArsC,EAAA,GACAqsC,EAAA,GACA1qC,EAAA2gB,KAAA3gB,QAAA,GACA5B,EAAA4B,EAAA5B,SAAA4B,EAAA5B,QAAAC,SAAA,GA6BA,OA3BA/B,KAAAytC,SAAAntC,OAAAoD,EAAA3B,SAAA,IAAAqB,QAAA,SAAAwqC,GACA,IAAAE,EAAA/rC,EAAAxD,QAAAqvC,GAEA,QAAAE,EAAA,CAIA,IAAA7oC,EAAA2oC,EAAA3oC,GACA63B,EAAAh7B,EAAAmD,IAEA,IAAA63B,KAIA,IAAAA,IACAA,EAAA/T,GAAAnL,MAAAiK,GAAAO,OAAArmB,QAAAkD,KAGAlD,EAAA8pB,KAAA+hB,GACAQ,EAAAviB,KAAA,CACA+hB,SACA9rC,QAAAg7B,GAAA,SAIAuR,EAAAD,cACAC,EAAAppC,GAAAjF,KAAA0tC,SACAU,GASAG,YAAA,SAAAlqB,UACAA,EAAAiqB,WAGAE,GAAA,CAGAC,aAAA,GAIA9xC,SAAA,GACA+xC,kBAAA,SAAA7sC,EAAA8sC,EAAAC,GACA5uC,KAAAyuC,aAAA5sC,GAAA8sC,EACA3uC,KAAArD,SAAAkF,GAAAknB,GAAAnL,MAAAgxB,IAEAC,oBAAA,SAAAhtC,GACA,OAAA7B,KAAAyuC,aAAAvwC,eAAA2D,GAAA7B,KAAAyuC,aAAA5sC,QAAAV,GAEA2tC,iBAAA,SAAAjtC,GAEA,OAAA7B,KAAArD,SAAAuB,eAAA2D,GAAAknB,GAAAxI,MAAA,GAAoE,CAAAsH,GAAAxN,MAAAra,KAAArD,SAAAkF,KAAA,IAEpEktC,oBAAA,SAAAltC,EAAAmtC,GACAhvC,KAEArD,SAAAuB,eAAA2D,KAFA7B,KAGArD,SAAAkF,GAAAknB,GAAAnI,OAHA5gB,KAGArD,SAAAkF,GAAAmtC,KAGAC,kBAAA,SAAA5qB,GAEA0E,GAAAtJ,KAAA4E,EAAAiJ,OAAA,SAAAjT,GAEAA,EAAAyqB,UAAAzqB,EAAAvY,QAAAgjC,UACAzqB,EAAAnU,SAAAmU,EAAAvY,QAAAoE,SACAmU,EAAAmD,OAAAnD,EAAAvY,QAAA0b,OACAonB,GAAAC,OAAAxgB,EAAAhK,OAIA60B,GAAAnmB,GAAA5J,eAEA0I,GAAAT,KAAA,UACAwT,SAAA,CACAuU,SAAA,EACA5f,OAAA,KACAuH,KAAA,UACA5wB,SAAA,UACA68B,WAAA,EACAtT,gBAAA,kBACA2f,eAAA,OACAC,aAAA,EACAC,kBAAA,EACAC,eAAA,OACAC,WAAA,OACAC,YAAA,EACAC,cAAA,OACAC,UAAA,OACAC,gBAAA,OACAC,cAAA,EACAC,gBAAA,EACAC,gBAAA,OACAC,YAAA,OACAC,SAAA,EACAC,SAAA,EACAC,aAAA,EACAC,UAAA,EACA5qB,aAAA,EACA6qB,mBAAA,OACAC,eAAA,EACA5gB,YAAA,gBACAC,YAAA,EACAkL,UAAA,CAEA0V,YAAAxnB,GAAAtK,KACAqc,MAAA,SAAA0V,EAAAjuC,GACA,IAAAu4B,EAAA,GACAjD,EAAAt1B,EAAAs1B,OACA4Y,EAAA5Y,IAAA/5B,OAAA,EAEA,GAAA0yC,EAAA1yC,OAAA,GACA,IAAAyjB,EAAAivB,EAAA,GAEAjvB,EAAAje,MACAw3B,EAAAvZ,EAAAje,MACaie,EAAAyZ,OACbF,EAAAvZ,EAAAyZ,OACayV,EAAA,GAAAlvB,EAAAlD,MAAAoyB,IACb3V,EAAAjD,EAAAtW,EAAAlD,QAIA,OAAAyc,GAEA4V,WAAA3nB,GAAAtK,KAEAkyB,WAAA5nB,GAAAtK,KAEAmyB,YAAA7nB,GAAAtK,KACAnb,MAAA,SAAAk5B,EAAAj6B,GACA,IAAAe,EAAAf,EAAAE,SAAA+5B,EAAA5P,cAAAtpB,OAAA,GAYA,OAVAA,IACAA,GAAA,MAGAylB,GAAApK,cAAA6d,EAAAp9B,OAGAkE,GAAAk5B,EAAAvB,OAFA33B,GAAAk5B,EAAAp9B,MAKAkE,GAEAutC,WAAA,SAAArU,EAAAnY,GACA,IAAA6I,EAAA7I,EAAAqJ,eAAA8O,EAAA5P,cACAkkB,EAAA5jB,EAAA3qB,KAAAi6B,EAAAne,OACAyL,EAAAgnB,EAAAvnB,MACA,OACAmG,YAAA5F,EAAA4F,YACAD,gBAAA3F,EAAA2F,kBAGAshB,eAAA,WACA,OAAA/wC,KAAAw7B,SAAAkU,eAEAsB,WAAAjoB,GAAAtK,KAEAwyB,UAAAloB,GAAAtK,KAEAyyB,aAAAnoB,GAAAtK,KACA0yB,OAAApoB,GAAAtK,KACA2yB,YAAAroB,GAAAtK,SAKA,IAAA4yB,GAAA,CAOAC,QAAA,SAAApiB,GACA,IAAAA,EAAApxB,OACA,SAGA,IAAAF,EAAAgiB,EACAtT,EAAA,EACAC,EAAA,EACA2jB,EAAA,EAEA,IAAAtyB,EAAA,EAAAgiB,EAAAsP,EAAApxB,OAAwCF,EAAAgiB,IAAShiB,EAAA,CACjD,IAAA0rC,EAAApa,EAAAtxB,GAEA,GAAA0rC,KAAAjf,WAAA,CACA,IAAA8iB,EAAA7D,EAAAlf,kBACA9d,GAAA6gC,EAAA7gC,EACAC,GAAA4gC,EAAA5gC,IACA2jB,GAIA,OACA5jB,IAAA4jB,EACA3jB,IAAA2jB,IAWA+T,QAAA,SAAA/U,EAAAqiB,GACA,IAGA3zC,EAAAgiB,EAAA4xB,EAHAllC,EAAAilC,EAAAjlC,EACAC,EAAAglC,EAAAhlC,EACA02B,EAAA/jB,OAAAgkB,kBAGA,IAAAtlC,EAAA,EAAAgiB,EAAAsP,EAAApxB,OAAwCF,EAAAgiB,IAAShiB,EAAA,CACjD,IAAA0rC,EAAApa,EAAAtxB,GAEA,GAAA0rC,KAAAjf,WAAA,CACA,IAAAmO,EAAA8Q,EAAAxX,iBACA31B,EAAA4sB,GAAA0oB,sBAAAF,EAAA/Y,GAEAr8B,EAAA8mC,IACAA,EAAA9mC,EACAq1C,EAAAlI,IAKA,GAAAkI,EAAA,CACA,IAAAE,EAAAF,EAAApnB,kBACA9d,EAAAolC,EAAAplC,EACAC,EAAAmlC,EAAAnlC,EAGA,OACAD,IACAC,OAKA,SAAAolC,GAAA7iB,EAAA8iB,GAUA,OATAA,IACA7oB,GAAAnK,QAAAgzB,GAEAzxC,MAAAlC,UAAA4tB,KAAAxrB,MAAAyuB,EAAA8iB,GAEA9iB,EAAAjD,KAAA+lB,IAIA9iB,EAUA,SAAA+iB,GAAAr3B,GACA,yBAAAA,gBAAAs3B,SAAAt3B,EAAAjc,QAAA,SACAic,EAAAu3B,MAAA,MAGAv3B,EASA,SAAAw3B,GAAA/wC,GACA,IAAAk6B,EAAAl6B,EAAAy2B,QACA0D,EAAAn6B,EAAA02B,SAAA12B,EAAAi+B,OAEA7gB,EAAApd,EAAAstB,OACA3B,EAAA3rB,EAAAotB,cAEA0L,EAAA94B,EAAAmtB,OAAAV,eAAAd,GAAAmN,WAEAkY,EAAAlY,EAAA/L,iBAEAkkB,EAAAnY,EAAAhM,iBAEA,OACAiN,OAAAG,IAAAgX,iBAAA9zB,EAAAuO,GAAA,GACAqO,OAAAG,IAAA+W,iBAAA9zB,EAAAuO,GAAA,GACAtpB,MAAA2uC,EAAA,GAAAA,EAAAE,iBAAA9zB,EAAAuO,GAAA,GACAxtB,MAAA8yC,EAAA,GAAAA,EAAAC,iBAAA9zB,EAAAuO,GAAA,GACAvO,QACAuO,eACAtgB,EAAArL,EAAAuoB,OAAAld,EACAC,EAAAtL,EAAAuoB,OAAAjd,GASA,SAAA6lC,GAAAC,GACA,IAAAlqB,EAAAN,GAAAO,OACA,OAEA8nB,SAAAmC,EAAAnC,SACAD,SAAAoC,EAAApC,SACAqC,OAAAD,EAAAC,OACAC,OAAAF,EAAAE,OAEA7C,cAAA2C,EAAA3C,cACA8C,gBAAAtD,GAAAmD,EAAAI,eAAAtqB,EAAAX,mBACAkrB,eAAAxD,GAAAmD,EAAAM,cAAAxqB,EAAAT,kBACAkrB,WAAAP,EAAA1C,UACAkD,aAAA3D,GAAAmD,EAAAQ,aAAA1qB,EAAAV,iBACAgoB,YAAA4C,EAAA5C,YAEAF,eAAA8C,EAAA9C,eACAuD,iBAAA5D,GAAAmD,EAAAU,gBAAA5qB,EAAAX,mBACAwrB,gBAAA9D,GAAAmD,EAAAjD,eAAAjnB,EAAAT,kBACAurB,cAAA/D,GAAAmD,EAAAY,cAAA9qB,EAAAV,iBACAyrB,YAAAb,EAAA7C,WACAH,aAAAgD,EAAAhD,aACAC,kBAAA+C,EAAA/C,kBAEAS,gBAAAsC,EAAAtC,gBACAoD,kBAAAjE,GAAAmD,EAAAe,iBAAAjrB,EAAAX,mBACA6rB,iBAAAnE,GAAAmD,EAAAzC,gBAAAznB,EAAAT,kBACA4rB,eAAApE,GAAAmD,EAAAiB,eAAAnrB,EAAAV,iBACA8rB,aAAAlB,EAAArC,YACAH,cAAAwC,EAAAxC,cACAC,gBAAAuC,EAAAvC,gBAEAM,UAAAiC,EAAAjC,UACA5qB,aAAA6sB,EAAA7sB,aACAiK,gBAAA4iB,EAAA5iB,gBACA+jB,QAAA,EACAC,sBAAApB,EAAAhC,mBACAC,cAAA+B,EAAA/B,cACA5gB,YAAA2iB,EAAA3iB,YACAC,YAAA0iB,EAAA1iB,aA+MA,SAAA+jB,GAAA3iB,EAAA4iB,GACA,iBAAAA,EAAA5iB,EAAAzkB,EAAAykB,EAAA7uB,MAAA,YAAAyxC,EAAA5iB,EAAAzkB,EAAAykB,EAAA7uB,MAAA6uB,EAAAmf,SAAAnf,EAAAzkB,EAAAykB,EAAAmf,SAOA,SAAA0D,GAAAt0B,GACA,OAAAqyB,GAAA,GAAAE,GAAAvyB,IAGA,IAAAu0B,GAAAtpB,GAAA3J,OAAA,CACAwI,WAAA,WACAppB,KAAAwpB,OAAA4oB,GAAApyC,KAAAw7B,UACAx7B,KAAA8zC,YAAA,IAIAC,SAAA,WACA,IACAjX,EADA98B,KACAw7B,SACAX,EAAAiC,EAAAjC,UACA0V,EAAA1V,EAAA0V,YAAAlwC,MAHAL,KAGAnC,WACAi9B,EAAAD,EAAAC,MAAAz6B,MAJAL,KAIAnC,WACA6yC,EAAA7V,EAAA6V,WAAArwC,MALAL,KAKAnC,WACAm2C,EAAA,GAIA,OAHAA,EAAArC,GAAAqC,EAAAnC,GAAAtB,IACAyD,EAAArC,GAAAqC,EAAAnC,GAAA/W,IACAkZ,EAAArC,GAAAqC,EAAAnC,GAAAnB,KAIAuD,cAAA,WACA,OAAAL,GAAA5zC,KAAAw7B,SAAAX,UAAA8V,WAAAtwC,MAAAL,KAAAnC,aAGAq2C,QAAA,SAAA1D,EAAAjuC,GACA,IAAAye,EAAAhhB,KACA66B,EAAA7Z,EAAAwa,SAAAX,UACAsZ,EAAA,GAYA,OAXAprB,GAAAtJ,KAAA+wB,EAAA,SAAAhU,GACA,IAAA4X,EAAA,CACAC,OAAA,GACAL,MAAA,GACAM,MAAA,IAEA3C,GAAAyC,EAAAC,OAAAxC,GAAAhX,EAAA+V,YAAAzyC,KAAA6iB,EAAAwb,EAAAj6B,KACAovC,GAAAyC,EAAAJ,MAAAnZ,EAAAv3B,MAAAnF,KAAA6iB,EAAAwb,EAAAj6B,IACAovC,GAAAyC,EAAAE,MAAAzC,GAAAhX,EAAAmW,WAAA7yC,KAAA6iB,EAAAwb,EAAAj6B,KACA4xC,EAAAtoB,KAAAuoB,KAEAD,GAGAI,aAAA,WACA,OAAAX,GAAA5zC,KAAAw7B,SAAAX,UAAAoW,UAAA5wC,MAAAL,KAAAnC,aAIA22C,UAAA,WACA,IACA3Z,EADA76B,KACAw7B,SAAAX,UACAqW,EAAArW,EAAAqW,aAAA7wC,MAFAL,KAEAnC,WACAszC,EAAAtW,EAAAsW,OAAA9wC,MAHAL,KAGAnC,WACAuzC,EAAAvW,EAAAuW,YAAA/wC,MAJAL,KAIAnC,WACAm2C,EAAA,GAIA,OAHAA,EAAArC,GAAAqC,EAAAnC,GAAAX,IACA8C,EAAArC,GAAAqC,EAAAnC,GAAAV,IACA6C,EAAArC,GAAAqC,EAAAnC,GAAAT,KAGA3sC,OAAA,SAAAgwC,GACA,IA0BA72C,EAAAgiB,EA1BAoB,EAAAhhB,KACA88B,EAAA9b,EAAAwa,SAIAkZ,EAAA1zB,EAAAwI,OACAI,EAAA5I,EAAAwI,OAAA4oB,GAAAtV,GACA6X,EAAA3zB,EAAA4zB,QACAryC,EAAAye,EAAAkN,MAEA2mB,EAAA,CACAvC,OAAAoC,EAAApC,OACAC,OAAAmC,EAAAnC,QAEAuC,EAAA,CACAxoC,EAAAooC,EAAApoC,EACAC,EAAAmoC,EAAAnoC,GAEAwoC,EAAA,CACA7yC,MAAAwyC,EAAAxyC,MACAD,OAAAyyC,EAAAzyC,QAEAmoB,EAAA,CACA9d,EAAAooC,EAAAM,OACAzoC,EAAAmoC,EAAAO,QAIA,GAAAN,EAAA72C,OAAA,CACA8rB,EAAA4pB,QAAA,EACA,IAAA0B,EAAA,GACAC,EAAA,GACA/qB,EAAAinB,GAAAvU,EAAA52B,UAAA/H,KAAA6iB,EAAA2zB,EAAA3zB,EAAAo0B,gBACA,IAAA5E,EAAA,GAEA,IAAA5yC,EAAA,EAAAgiB,EAAA+0B,EAAA72C,OAAwCF,EAAAgiB,IAAShiB,EACjD4yC,EAAA3kB,KAAAmmB,GAAA2C,EAAA/2C,KAIAk/B,EAAAoD,SACAsQ,IAAAtQ,OAAA,SAAA/iC,GACA,OAAA2/B,EAAAoD,OAAA/iC,EAAAoF,MAKAu6B,EAAAuY,WACA7E,IAAAjM,KAAA,SAAApnC,EAAAwO,GACA,OAAAmxB,EAAAuY,SAAAl4C,EAAAwO,EAAApJ,MAKAwmB,GAAAtJ,KAAA+wB,EAAA,SAAAhU,GACA0Y,EAAArpB,KAAAiR,EAAAjC,UAAAgW,WAAA1yC,KAAA6iB,EAAAwb,EAAAxb,EAAAoN,SACA+mB,EAAAtpB,KAAAiR,EAAAjC,UAAAkW,eAAA5yC,KAAA6iB,EAAAwb,EAAAxb,EAAAoN,WAGAxE,EAAAkR,MAAA9Z,EAAA+yB,SAAAvD,EAAAjuC,GACAqnB,EAAA+mB,WAAA3vB,EAAAizB,cAAAzD,EAAAjuC,GACAqnB,EAAA0rB,KAAAt0B,EAAAkzB,QAAA1D,EAAAjuC,GACAqnB,EAAAqnB,UAAAjwB,EAAAuzB,aAAA/D,EAAAjuC,GACAqnB,EAAAunB,OAAAnwB,EAAAwzB,UAAAhE,EAAAjuC,GAEAqnB,EAAAtd,EAAA8d,EAAA9d,EACAsd,EAAArd,EAAA6d,EAAA7d,EACAqd,EAAAumB,aAAArT,EAAAqT,aACAvmB,EAAAsrB,cACAtrB,EAAAurB,kBAEAvrB,EAAA2rB,WAAA/E,EAEAuE,EAzVA,SAAAS,EAAA5rB,GACA,IAAAtF,EAAAkxB,EAAApnB,OAAA9J,IACAriB,EAAA,EAAA2nB,EAAAqmB,SAEA/tC,EAAA,EAEAozC,EAAA1rB,EAAA0rB,KACAG,EAAAH,EAAAI,OAAA,SAAAxlB,EAAAkkB,GACA,OAAAlkB,EAAAkkB,EAAAC,OAAAv2C,OAAAs2C,EAAAJ,MAAAl2C,OAAAs2C,EAAAE,MAAAx2C,QACK,GACL23C,GAAA7rB,EAAA+mB,WAAA7yC,OAAA8rB,EAAAqnB,UAAAnzC,OACA,IAAA63C,EAAA/rB,EAAAkR,MAAAh9B,OACA83C,EAAAhsB,EAAAunB,OAAArzC,OACAm1C,EAAArpB,EAAAqpB,cACAJ,EAAAjpB,EAAAipB,aACAS,EAAA1pB,EAAA0pB,eACArxC,GAAA0zC,EAAA1C,EAEAhxC,GAAA0zC,KAAA,GAAA/rB,EAAAylB,aAAA,EAEAptC,GAAA0zC,EAAA/rB,EAAA0lB,kBAAA,EAEArtC,GAAAwzC,EAAA5C,EAEA5wC,GAAAwzC,KAAA,GAAA7rB,EAAA6lB,YAAA,EAEAxtC,GAAA2zC,EAAAhsB,EAAAkmB,gBAAA,EAEA7tC,GAAA2zC,EAAAtC,EAEArxC,GAAA2zC,KAAA,GAAAhsB,EAAAimB,cAAA,EAGA,IAAAgG,EAAA,EAEAC,EAAA,SAAAjjB,GACA3wB,EAAA2J,KAAAC,IAAA5J,EAAAoiB,EAAAyxB,YAAAljB,GAAA3wB,MAAA2zC,IAsBA,OAnBAvxB,EAAAgE,KAAAS,GAAAitB,WAAA/C,EAAArpB,EAAAopB,gBAAAppB,EAAAkpB,kBACA/pB,GAAAtJ,KAAAmK,EAAAkR,MAAAgb,GAEAxxB,EAAAgE,KAAAS,GAAAitB,WAAAnD,EAAAjpB,EAAA8oB,eAAA9oB,EAAA4oB,iBACAzpB,GAAAtJ,KAAAmK,EAAA+mB,WAAArwC,OAAAspB,EAAAqnB,WAAA6E,GAEAD,EAAAjsB,EAAA0mB,cAAAuC,EAAA,IACA9pB,GAAAtJ,KAAA61B,EAAA,SAAAlB,GACArrB,GAAAtJ,KAAA20B,EAAAC,OAAAyB,GACA/sB,GAAAtJ,KAAA20B,EAAAJ,MAAA8B,GACA/sB,GAAAtJ,KAAA20B,EAAAE,MAAAwB,KAGAD,EAAA,EAEAvxB,EAAAgE,KAAAS,GAAAitB,WAAA1C,EAAA1pB,EAAAypB,iBAAAzpB,EAAAupB,mBACApqB,GAAAtJ,KAAAmK,EAAAunB,OAAA2E,GAGA,CACA5zC,MAFAA,GAAA,EAAA0nB,EAAAsmB,SAGAjuC,UA6RAg0C,CAAAj2C,KAAA4pB,GACAirB,EAtRA,SAAAW,EAAAjwB,GACA,IAYA2wB,EAAAC,EAEAC,EAAAC,EAEAC,EAhBA1sB,EAAA4rB,EAAAhsB,OACAnF,EAAAmxB,EAAApnB,OACAuG,EAAA6gB,EAAApnB,OAAAuG,UACA2d,EAAA,SACAC,EAAA,SAEA3oB,EAAArd,EAAAgZ,EAAAtjB,OACAswC,EAAA,MACK3oB,EAAArd,EAAA8X,EAAApiB,OAAAsjB,EAAAtjB,SACLswC,EAAA,UASA,IAAAgE,GAAA5hB,EAAAjQ,KAAAiQ,EAAA/P,OAAA,EACA4xB,GAAA7hB,EAAAhQ,IAAAgQ,EAAA9P,QAAA,EAEA,WAAA0tB,GACA2D,EAAA,SAAA5pC,GACA,OAAAA,GAAAiqC,GAGAJ,EAAA,SAAA7pC,GACA,OAAAA,EAAAiqC,KAGAL,EAAA,SAAA5pC,GACA,OAAAA,GAAAiZ,EAAArjB,MAAA,GAGAi0C,EAAA,SAAA7pC,GACA,OAAAA,GAAA+X,EAAAniB,MAAAqjB,EAAArjB,MAAA,IAIAk0C,EAAA,SAAA9pC,GACA,OAAAA,EAAAiZ,EAAArjB,MAAA0nB,EAAAwmB,UAAAxmB,EAAAumB,aAAA9rB,EAAAniB,OAGAm0C,EAAA,SAAA/pC,GACA,OAAAA,EAAAiZ,EAAArjB,MAAA0nB,EAAAwmB,UAAAxmB,EAAAumB,aAAA,GAGAmG,EAAA,SAAA/pC,GACA,OAAAA,GAAAiqC,EAAA,gBAGAN,EAAAtsB,EAAAtd,IACAgmC,EAAA,OAEA8D,EAAAxsB,EAAAtd,KACAgmC,EAAA,SACAC,EAAA+D,EAAA1sB,EAAArd,KAEK4pC,EAAAvsB,EAAAtd,KACLgmC,EAAA,QAEA+D,EAAAzsB,EAAAtd,KACAgmC,EAAA,SACAC,EAAA+D,EAAA1sB,EAAArd,KAIA,IAAAuwB,EAAA0Y,EAAAha,SACA,OACA8W,OAAAxV,EAAAwV,OAAAxV,EAAAwV,SACAC,OAAAzV,EAAAyV,OAAAzV,EAAAyV,UA+MAkE,CAAAz2C,KAAA+0C,GAEAD,EAzMA,SAAA/jB,EAAAxL,EAAAsvB,EAAAxwB,GAEA,IAAA/X,EAAAykB,EAAAzkB,EACAC,EAAAwkB,EAAAxkB,EACA6jC,EAAArf,EAAAqf,UACAD,EAAApf,EAAAof,aACA3qB,EAAAuL,EAAAvL,aACA8sB,EAAAuC,EAAAvC,OACAC,EAAAsC,EAAAtC,OACAmE,EAAAtG,EAAAD,EACAwG,EAAAnxB,EAAA2qB,EAoCA,MAlCA,UAAAmC,EACAhmC,GAAAiZ,EAAArjB,MACK,WAAAowC,KACLhmC,GAAAiZ,EAAArjB,MAAA,GAEAqjB,EAAArjB,MAAAmiB,EAAAniB,QACAoK,EAAA+X,EAAAniB,MAAAqjB,EAAArjB,OAGAoK,EAAA,IACAA,EAAA,IAIA,QAAAimC,EACAhmC,GAAAmqC,EAEAnqC,GADK,WAAAgmC,EACLhtB,EAAAtjB,OAAAy0C,EAEAnxB,EAAAtjB,OAAA,EAGA,WAAAswC,EACA,SAAAD,EACAhmC,GAAAoqC,EACO,UAAApE,IACPhmC,GAAAoqC,GAEK,SAAApE,EACLhmC,GAAAqqC,EACK,UAAArE,IACLhmC,GAAAqqC,GAGA,CACArqC,IACAC,KAyJAqqC,CAAAhtB,EAAAmrB,EAAAF,EAAA7zB,EAAAoN,aAEAxE,EAAA4pB,QAAA,EAkBA,OAfA5pB,EAAA0oB,OAAAuC,EAAAvC,OACA1oB,EAAA2oB,OAAAsC,EAAAtC,OACA3oB,EAAAtd,EAAAwoC,EAAAxoC,EACAsd,EAAArd,EAAAuoC,EAAAvoC,EACAqd,EAAA1nB,MAAA6yC,EAAA7yC,MACA0nB,EAAA3nB,OAAA8yC,EAAA9yC,OAEA2nB,EAAAorB,OAAA5qB,EAAA9d,EACAsd,EAAAqrB,OAAA7qB,EAAA7d,EACAyU,EAAAwI,OAAAI,EAEA6qB,GAAA3X,EAAAvN,QACAuN,EAAAvN,OAAApxB,KAAA6iB,EAAA4I,GAGA5I,GAEA61B,UAAA,SAAAC,EAAAvxB,GACA,IAAAjB,EAAAtkB,KAAAouB,OAAA9J,IACAyM,EAAA/wB,KAAAupB,MACAwtB,EAAA/2C,KAAAg3C,iBAAAF,EAAAvxB,EAAAwL,GACAzM,EAAAqB,OAAAoxB,EAAAhiB,GAAAgiB,EAAA9hB,IACA3Q,EAAAqB,OAAAoxB,EAAA/hB,GAAA+hB,EAAAnpC,IACA0W,EAAAqB,OAAAoxB,EAAAE,GAAAF,EAAAG,KAEAF,iBAAA,SAAAF,EAAAvxB,EAAAwL,GACA,IAAAgE,EAAAC,EAAAiiB,EAAAhiB,EAAArnB,EAAAspC,EACA9G,EAAArf,EAAAqf,UACA5qB,EAAAuL,EAAAvL,aACA8sB,EAAAvhB,EAAAuhB,OACAC,EAAAxhB,EAAAwhB,OACA4E,EAAAL,EAAAxqC,EACA8qC,EAAAN,EAAAvqC,EACArK,EAAAqjB,EAAArjB,MACAD,EAAAsjB,EAAAtjB,OAEA,cAAAswC,EACA3kC,EAAAwpC,EAAAn1C,EAAA,EAEA,SAAAqwC,GAEAtd,GADAD,EAAAoiB,GACA/G,EACA6G,EAAAliB,EACAE,EAAArnB,EAAAwiC,EACA8G,EAAAtpC,EAAAwiC,IAGApb,GADAD,EAAAoiB,EAAAj1C,GACAkuC,EACA6G,EAAAliB,EACAE,EAAArnB,EAAAwiC,EACA8G,EAAAtpC,EAAAwiC,QAiBA,GAdA,SAAAkC,GAEAvd,GADAC,EAAAmiB,EAAA3xB,EAAA4qB,GACAA,EACA6G,EAAAjiB,EAAAob,GACS,UAAAkC,GAETvd,GADAC,EAAAmiB,EAAAj1C,EAAAsjB,EAAA4qB,GACAA,EACA6G,EAAAjiB,EAAAob,IAEApb,EAAAjE,EAAAikB,OACAjgB,EAAAC,EAAAob,EACA6G,EAAAjiB,EAAAob,GAGA,QAAAmC,EAEA3kC,GADAqnB,EAAAmiB,GACAhH,EACA8G,EAAAjiB,MACS,CAETrnB,GADAqnB,EAAAmiB,EAAAn1C,GACAmuC,EACA8G,EAAAjiB,EAEA,IAAAoiB,EAAAJ,EACAA,EAAAliB,EACAA,EAAAsiB,EAIA,OACAtiB,KACAC,KACAiiB,KACAhiB,KACArnB,KACAspC,OAGAI,UAAA,SAAArX,EAAAlP,EAAAzM,GACA,IAAAwW,EAAA/J,EAAA+J,MAEA,GAAAA,EAAAh9B,OAAA,CACAmiC,EAAA3zB,EAAAonC,GAAA3iB,IAAAmiB,aACA5uB,EAAAizB,UAAAxmB,EAAAmiB,YACA5uB,EAAAkzB,aAAA,MACA,IAIA55C,EAAAgiB,EAJAqzB,EAAAliB,EAAAkiB,cACA5D,EAAAte,EAAAse,aAKA,IAJA/qB,EAAAkO,UAAAzB,EAAAwe,eACAjrB,EAAAgE,KAAAS,GAAAitB,WAAA/C,EAAAliB,EAAAiiB,gBAAAjiB,EAAA+hB,kBAGAl1C,EAAA,EAAAgiB,EAAAkb,EAAAh9B,OAAuCF,EAAAgiB,IAAShiB,EAChD0mB,EAAAmzB,SAAA3c,EAAAl9B,GAAAqiC,EAAA3zB,EAAA2zB,EAAA1zB,GACA0zB,EAAA1zB,GAAA0mC,EAAA5D,EAEAzxC,EAAA,IAAAk9B,EAAAh9B,SACAmiC,EAAA1zB,GAAAwkB,EAAAue,kBAAAD,KAKAqI,SAAA,SAAAzX,EAAAlP,EAAAzM,GACA,IAQAqzB,EARA9E,EAAA9hB,EAAA8hB,aACApD,EAAA1e,EAAA0e,YACAE,EAAA5e,EAAA6hB,WACA0C,EAAAvkB,EAAAukB,KACAsC,EAAA7mB,EAAAuf,cACA4E,EAAAnkB,EAAAmkB,YACA2C,EAAA,EACAC,EAAAF,EAAAlE,GAAA3iB,EAAA,UAEAzM,EAAAizB,UAAA5H,EACArrB,EAAAkzB,aAAA,MACAlzB,EAAAgE,KAAAS,GAAAitB,WAAAnD,EAAA9hB,EAAA2hB,eAAA3hB,EAAAyhB,iBACAvS,EAAA3zB,EAAAonC,GAAA3iB,EAAA4e,GAEA,IAAAoI,EAAA,SAAAllB,GACAvO,EAAAmzB,SAAA5kB,EAAAoN,EAAA3zB,EAAAurC,EAAA5X,EAAA1zB,GACA0zB,EAAA1zB,GAAAsmC,EAAApD,GAIAnrB,EAAAkO,UAAAzB,EAAA2e,cACA3mB,GAAAtJ,KAAAsR,EAAA4f,WAAAoH,GACAF,EAAAD,GAAA,UAAAjI,EAAA,WAAAA,EAAAkD,EAAA,IAAAA,EAAA,IAEA9pB,GAAAtJ,KAAA61B,EAAA,SAAAlB,EAAAx2C,GACA+5C,EAAA5mB,EAAAokB,gBAAAv3C,GACA0mB,EAAAkO,UAAAmlB,EACA5uB,GAAAtJ,KAAA20B,EAAAC,OAAA0D,GACAhvB,GAAAtJ,KAAA20B,EAAAJ,MAAA,SAAAnhB,GAEA+kB,IAEAtzB,EAAAkO,UAAAzB,EAAA0iB,sBACAnvB,EAAAkS,SAAAshB,EAAA7X,EAAA1zB,EAAAsmC,KAEAvuB,EAAAmO,UAAA,EACAnO,EAAAqO,YAAAuiB,EAAAt3C,GAAA8xB,YACApL,EAAA0zB,WAAAF,EAAA7X,EAAA1zB,EAAAsmC,KAEAvuB,EAAAkO,UAAA0iB,EAAAt3C,GAAA6xB,gBACAnL,EAAAkS,SAAAshB,EAAA,EAAA7X,EAAA1zB,EAAA,EAAAsmC,EAAA,EAAAA,EAAA,GACAvuB,EAAAkO,UAAAmlB,GAGAI,EAAAllB,KAEA9J,GAAAtJ,KAAA20B,EAAAE,MAAAyD,KAGAF,EAAA,EAEA9uB,GAAAtJ,KAAAsR,EAAAkgB,UAAA8G,GACA9X,EAAA1zB,GAAAkjC,GAEAwI,WAAA,SAAAhY,EAAAlP,EAAAzM,GACA,IAAA6sB,EAAApgB,EAAAogB,OAEAA,EAAArzC,SACAmiC,EAAA3zB,EAAAonC,GAAA3iB,IAAAwiB,cACAtT,EAAA1zB,GAAAwkB,EAAA+e,gBACAxrB,EAAAizB,UAAAxmB,EAAAwiB,aACAjvB,EAAAkzB,aAAA,MACAlzB,EAAAkO,UAAAzB,EAAAgf,gBACAzrB,EAAAgE,KAAAS,GAAAitB,WAAAjlB,EAAAuiB,eAAAviB,EAAAsiB,iBAAAtiB,EAAAoiB,mBACApqB,GAAAtJ,KAAA0xB,EAAA,SAAAte,GACAvO,EAAAmzB,SAAA5kB,EAAAoN,EAAA3zB,EAAA2zB,EAAA1zB,GACA0zB,EAAA1zB,GAAAwkB,EAAAuiB,eAAAviB,EAAA8e,kBAIAqI,eAAA,SAAAjY,EAAAlP,EAAAzM,EAAAywB,GACAzwB,EAAAkO,UAAAzB,EAAAtB,gBACAnL,EAAAqO,YAAA5B,EAAArB,YACApL,EAAAmO,UAAA1B,EAAApB,YACA,IAAA2iB,EAAAvhB,EAAAuhB,OACAC,EAAAxhB,EAAAwhB,OACAjmC,EAAA2zB,EAAA3zB,EACAC,EAAA0zB,EAAA1zB,EACArK,EAAA6yC,EAAA7yC,MACAD,EAAA8yC,EAAA9yC,OACAwiB,EAAAsM,EAAAvL,aACAlB,EAAAoB,YACApB,EAAAQ,OAAAxY,EAAAmY,EAAAlY,GAEA,QAAAgmC,GACAvyC,KAAA62C,UAAA5W,EAAA8U,GAGAzwB,EAAAqB,OAAArZ,EAAApK,EAAAuiB,EAAAlY,GACA+X,EAAA6zB,iBAAA7rC,EAAApK,EAAAqK,EAAAD,EAAApK,EAAAqK,EAAAkY,GAEA,WAAA8tB,GAAA,UAAAD,GACAtyC,KAAA62C,UAAA5W,EAAA8U,GAGAzwB,EAAAqB,OAAArZ,EAAApK,EAAAqK,EAAAtK,EAAAwiB,GACAH,EAAA6zB,iBAAA7rC,EAAApK,EAAAqK,EAAAtK,EAAAqK,EAAApK,EAAAuiB,EAAAlY,EAAAtK,GAEA,WAAAswC,GACAvyC,KAAA62C,UAAA5W,EAAA8U,GAGAzwB,EAAAqB,OAAArZ,EAAAmY,EAAAlY,EAAAtK,GACAqiB,EAAA6zB,iBAAA7rC,EAAAC,EAAAtK,EAAAqK,EAAAC,EAAAtK,EAAAwiB,GAEA,WAAA8tB,GAAA,SAAAD,GACAtyC,KAAA62C,UAAA5W,EAAA8U,GAGAzwB,EAAAqB,OAAArZ,EAAAC,EAAAkY,GACAH,EAAA6zB,iBAAA7rC,EAAAC,EAAAD,EAAAmY,EAAAlY,GACA+X,EAAAU,YACAV,EAAAuB,OAEAkL,EAAApB,YAAA,GACArL,EAAAwB,UAGAqJ,KAAA,WACA,IAAA7K,EAAAtkB,KAAAouB,OAAA9J,IACAyM,EAAA/wB,KAAAupB,MAEA,OAAAwH,EAAAyiB,QAAA,CAIA,IAAAuB,EAAA,CACA7yC,MAAA6uB,EAAA7uB,MACAD,OAAA8uB,EAAA9uB,QAEAg+B,EAAA,CACA3zB,EAAAykB,EAAAzkB,EACAC,EAAAwkB,EAAAxkB,GAGAinC,EAAA3nC,KAAAsoB,IAAApD,EAAAyiB,QAAA,QAAAziB,EAAAyiB,QAEA4E,EAAArnB,EAAA+J,MAAAh9B,QAAAizB,EAAA4f,WAAA7yC,QAAAizB,EAAAukB,KAAAx3C,QAAAizB,EAAAkgB,UAAAnzC,QAAAizB,EAAAogB,OAAArzC,OAEAkC,KAAAw7B,SAAA2T,SAAAiJ,IACA9zB,EAAA6B,OACA7B,EAAA+zB,YAAA7E,EAEAxzC,KAAAk4C,eAAAjY,EAAAlP,EAAAzM,EAAAywB,GAEA9U,EAAA1zB,GAAAwkB,EAAAkf,SAEAjwC,KAAAs3C,UAAArX,EAAAlP,EAAAzM,GAEAtkB,KAAA03C,SAAAzX,EAAAlP,EAAAzM,GAEAtkB,KAAAi4C,WAAAhY,EAAAlP,EAAAzM,GACAA,EAAAgC,aAUAgyB,YAAA,SAAAlc,GACA,IAAApb,EAAAhhB,KACA8B,EAAAkf,EAAAwa,SACAiZ,GAAA,EAyBA,OAxBAzzB,EAAA8yB,YAAA9yB,EAAA8yB,aAAA,GAEA,aAAA1X,EAAAv6B,KACAmf,EAAA4zB,QAAA,GAEA5zB,EAAA4zB,QAAA5zB,EAAAoN,OAAAmqB,0BAAAnc,EAAAt6B,EAAAg1B,KAAAh1B,IAIA2yC,GAAA1rB,GAAAlJ,YAAAmB,EAAA4zB,QAAA5zB,EAAA8yB,gBAGA9yB,EAAA8yB,YAAA9yB,EAAA4zB,SAEA9yC,EAAAqtC,SAAArtC,EAAAytB,UACAvO,EAAAo0B,eAAA,CACA9oC,EAAA8vB,EAAA9vB,EACAC,EAAA6vB,EAAA7vB,GAEAyU,EAAAvc,QAAA,GACAuc,EAAAsI,UAIAmrB,KAOA+D,GAAAnH,GACAoH,GAAA5E,GACA4E,GAAApH,YAAAmH,GACA,IAAAE,GAAA3vB,GAAA5J,eAuBA,SAAAw5B,KAGA,OAAA5vB,GAAAxI,MAAA,GAA6B,GAAA1I,MAAA1Z,KAAAN,WAAA,CAC7B8iB,OAAA,SAAA3iB,EAAAL,EAAAI,EAAA+D,GACA,aAAA9D,GAAA,UAAAA,EAAA,CACA,IACAJ,EAAAiE,EAAAwY,EADAu+B,EAAA76C,EAAAC,GAAAF,OAOA,IAJAH,EAAAK,KACAL,EAAAK,GAAA,IAGAJ,EAAA,EAAqBA,EAAAg7C,IAAUh7C,EAC/Byc,EAAAtc,EAAAC,GAAAJ,GACAiE,EAAA62C,GAAAr+B,EAAAxY,KAAA,UAAA7D,EAAA,qBAEAJ,GAAAD,EAAAK,GAAAF,QACAH,EAAAK,GAAA6tB,KAAA,KAGAluB,EAAAK,GAAAJ,GAAAiE,MAAAwY,EAAAxY,MAAAwY,EAAAxY,OAAAlE,EAAAK,GAAAJ,GAAAiE,KAGAknB,GAAAxI,MAAA5iB,EAAAK,GAAAJ,GAAA,CAAA4wC,GAAAM,iBAAAjtC,GAAAwY,IAGA0O,GAAAxI,MAAA5iB,EAAAK,GAAAJ,GAAAyc,QAIA0O,GAAA3I,QAAApiB,EAAAL,EAAAI,EAAA+D,MAYA,SAAA+2C,KAGA,OAAA9vB,GAAAxI,MAAA,GAA6B,GAAA1I,MAAA1Z,KAAAN,WAAA,CAC7B8iB,OAAA,SAAA3iB,EAAAL,EAAAI,EAAA+D,GACA,IAAAue,EAAA1iB,EAAAK,IAAA,GACAsiB,EAAAviB,EAAAC,GAEA,WAAAA,EAEAL,EAAAK,GAAA26C,GAAAt4B,EAAAC,GACS,UAAAtiB,EAETL,EAAAK,GAAA+qB,GAAAxI,MAAAF,EAAA,CAAAmuB,GAAAM,iBAAAxuB,EAAAze,MAAAye,IAEAyI,GAAA3I,QAAApiB,EAAAL,EAAAI,EAAA+D,MA+BA,SAAAg3C,GAAA5yC,GACA,cAAAA,GAAA,WAAAA,EA/GA2hB,GAAAT,KAAA,UACA8H,SAAA,GACA6pB,OAAA,0DACAliB,MAAA,CACAmiB,QAAA,KACAliB,KAAA,UACAiM,WAAA,EACAkW,kBAAA,KAEA9zC,QAAA,KACAqlC,qBAAA,EACA0O,YAAA,EACAC,4BAAA,IAsGA,IAAAC,GAAA,SAAA73B,EAAA7d,GAEA,OADA1D,KAAAq5C,UAAA93B,EAAA7d,GACA1D,MAGA+oB,GAAAnI,OAAAw4B,GAAAn7C,UAEA,CAIAo7C,UAAA,SAAA93B,EAAA7d,GACA,IAAAsd,EAAAhhB,KACA0D,EA1CA,SAAAA,GAIA,IAAAnB,GAHAmB,KAAA,IAGAnB,KAAAmB,EAAAnB,MAAA,GAIA,OAHAA,EAAAE,SAAAF,EAAAE,UAAA,GACAF,EAAAs1B,OAAAt1B,EAAAs1B,QAAA,GACAn0B,EAAA5B,QAAA+2C,GAAAhxB,GAAAO,OAAAP,GAAAnkB,EAAA7B,MAAA6B,EAAA5B,SAAA,IACA4B,EAkCA41C,CAAA51C,GACA,IAAAolB,EAAAgjB,GAAAO,eAAA9qB,EAAA7d,GACAulB,EAAAH,KAAAG,OACAhnB,EAAAgnB,KAAAhnB,OACAC,EAAA+mB,KAAA/mB,MACA8e,EAAA/b,GAAA8jB,GAAArK,MACAsC,EAAAsD,IAAAwE,EACA9H,EAAAiI,SACAjI,EAAAtd,SACAsd,EAAA9e,QACA8e,EAAA/e,SACA+e,EAAA6rB,YAAA5qC,EAAAC,EAAAD,EAAA,KACA+e,EAAAlf,QAAA4B,EAAA5B,QACAkf,EAAAu4B,iBAAA,EAUAv4B,EAAAqD,MAAArD,EACAA,EAAA+Y,WAAA/Y,EAGAo4B,GAAAI,UAAAx4B,EAAA/b,IAAA+b,EAEAvjB,OAAAqtB,eAAA9J,EAAA,QACA+J,IAAA,WACA,OAAA/J,EAAAtd,OAAAnB,MAEAI,IAAA,SAAAvD,GACA4hB,EAAAtd,OAAAnB,KAAAnD,KAIA0pB,GAAAG,GASAjI,EAAAoI,aACApI,EAAAvc,UALAlB,QAAAC,MAAA,sEAWA4lB,WAAA,WACA,IAAApI,EAAAhhB,KAiBA,OAfAwtC,GAAAQ,OAAAhtB,EAAA,cACA+H,GAAA0wB,YAAAz4B,IAAAlf,QAAA43C,kBACA14B,EAAA24B,aAEA34B,EAAAlf,QAAAo3C,YAEAl4B,EAAA44B,QAAA,GAIA54B,EAAA64B,sBACA74B,EAAA84B,sBACA94B,EAAA+4B,cAEAvM,GAAAQ,OAAAhtB,EAAA,aACAA,GAEAoD,MAAA,WAEA,OADA2E,GAAAE,OAAA7E,MAAApkB,MACAA,MAEAg6C,KAAA,WAGA,OADA5uB,GAAAW,gBAAA/rB,MACAA,MAEA45C,OAAA,SAAAK,GACA,IAAAj5B,EAAAhhB,KACA8B,EAAAkf,EAAAlf,QACAmnB,EAAAjI,EAAAiI,OACA4jB,EAAA/qC,EAAA0oC,qBAAAxpB,EAAA6rB,aAAA,KAIAqN,EAAAruC,KAAAC,IAAA,EAAAD,KAAAkB,MAAAgc,GAAAoxB,gBAAAlxB,KACAmxB,EAAAvuC,KAAAC,IAAA,EAAAD,KAAAkB,MAAA8/B,EAAAqN,EAAArN,EAAA9jB,GAAAsxB,iBAAApxB,KAEA,IAAAjI,EAAA9e,QAAAg4C,GAAAl5B,EAAA/e,SAAAm4C,KAIAnxB,EAAA/mB,MAAA8e,EAAA9e,MAAAg4C,EACAjxB,EAAAhnB,OAAA+e,EAAA/e,OAAAm4C,EACAnxB,EAAA9D,MAAAjjB,MAAAg4C,EAAA,KACAjxB,EAAA9D,MAAAljB,OAAAm4C,EAAA,KACArxB,GAAA0wB,YAAAz4B,EAAAlf,EAAA43C,mBAEAO,GAAA,CAEA,IAAAK,EAAA,CACAp4C,MAAAg4C,EACAj4C,OAAAm4C,GAEA5M,GAAAQ,OAAAhtB,EAAA,UAAAs5B,IAEAx4C,EAAAy4C,UACAz4C,EAAAy4C,SAAAv5B,EAAAs5B,GAGAt5B,EAAAg5B,OACAh5B,EAAAvc,OAAA,CACAwmB,SAAAnpB,EAAAq3C,gCAIAU,oBAAA,WACA,IAAA/3C,EAAA9B,KAAA8B,QACA04C,EAAA14C,EAAAwrB,QAAA,GACAmtB,EAAA34C,EAAAuY,MACA0O,GAAAtJ,KAAA+6B,EAAAjtB,MAAA,SAAAmtB,EAAAr8B,GACAq8B,EAAAz1C,GAAAy1C,EAAAz1C,IAAA,UAAAoZ,IAEA0K,GAAAtJ,KAAA+6B,EAAA/sB,MAAA,SAAAktB,EAAAt8B,GACAs8B,EAAA11C,GAAA01C,EAAA11C,IAAA,UAAAoZ,IAGAo8B,IACAA,EAAAx1C,GAAAw1C,EAAAx1C,IAAA,UAOA60C,oBAAA,WACA,IAAA94B,EAAAhhB,KACA8B,EAAAkf,EAAAlf,QACAwrB,EAAAtM,EAAAsM,QAAA,GACAsW,EAAA,GACAgX,EAAAn9C,OAAAa,KAAAgvB,GAAAooB,OAAA,SAAAr3C,EAAA4G,GAEA,OADA5G,EAAA4G,IAAA,EACA5G,GACO,IAEPyD,EAAAwrB,SACAsW,IAAAtjC,QAAAwB,EAAAwrB,OAAAC,OAAA,IAAA7qB,IAAA,SAAAg4C,GACA,OACA54C,QAAA44C,EACAG,MAAA,WACAC,UAAA,aAESh5C,EAAAwrB,OAAAG,OAAA,IAAA/qB,IAAA,SAAAi4C,GACT,OACA74C,QAAA64C,EACAE,MAAA,SACAC,UAAA,YAKAh5C,EAAAuY,OACAupB,EAAA/X,KAAA,CACA/pB,UAAAuY,MACAwgC,MAAA,eACAE,WAAA,EACAD,UAAA,cAIA/xB,GAAAtJ,KAAAmkB,EAAA,SAAAriB,GACA,IAAAk5B,EAAAl5B,EAAAzf,QACAmD,EAAAw1C,EAAAx1C,GACA+1C,EAAAtC,GAAA+B,EAAA54C,KAAA0f,EAAAs5B,OAEA/B,GAAA2B,EAAAv0C,YAAA4yC,GAAAv3B,EAAAu5B,aACAL,EAAAv0C,SAAAqb,EAAAu5B,WAGAF,EAAA31C,IAAA,EACA,IAAAoV,EAAA,KAEA,GAAApV,KAAAqoB,KAAAroB,GAAApD,OAAAm5C,GACA3gC,EAAAiT,EAAAroB,IACAnD,QAAA24C,EACApgC,EAAAiK,IAAAtD,EAAAsD,IACAjK,EAAAgK,MAAArD,MACS,CACT,IAAAi6B,EAAAzM,GAAAK,oBAAAmM,GAEA,IAAAC,EACA,OAGA5gC,EAAA,IAAA4gC,EAAA,CACAh2C,KACApD,KAAAm5C,EACAl5C,QAAA24C,EACAn2B,IAAAtD,EAAAsD,IACAD,MAAArD,IAEAsM,EAAAjT,EAAApV,IAAAoV,EAGAA,EAAA6gC,oBAIA35B,EAAAw5B,YACA/5B,EAAA3G,WAIA0O,GAAAtJ,KAAAm7B,EAAA,SAAAO,EAAAl2C,GACAk2C,UACA7tB,EAAAroB,KAGA+b,EAAAsM,SACAkhB,GAAAS,kBAAAjvC,OAEAo7C,yBAAA,WACA,IAAAp6B,EAAAhhB,KACAq7C,EAAA,GA0BA,OAzBAtyB,GAAAtJ,KAAAuB,EAAAze,KAAAE,SAAA,SAAAY,EAAAupB,GACA,IAAAM,EAAAlM,EAAA0M,eAAAd,GACA/qB,EAAAwB,EAAAxB,MAAAmf,EAAAtd,OAAA7B,KASA,GAPAqrB,EAAArrB,MAAAqrB,EAAArrB,WACAmf,EAAAs6B,mBAAA1uB,GACAM,EAAAlM,EAAA0M,eAAAd,IAGAM,EAAArrB,OAEAqrB,EAAA6M,WACA7M,EAAA6M,WAAA9M,YAAAL,GACAM,EAAA6M,WAAAhN,iBACS,CACT,IAAAwuB,EAAAx1C,GAAAmnB,EAAArrB,MAEA,QAAAV,IAAAo6C,EACA,UAAAv1C,MAAA,IAAAknB,EAAArrB,KAAA,0BAGAqrB,EAAA6M,WAAA,IAAAwhB,EAAAv6B,EAAA4L,GACAyuB,EAAAxvB,KAAAqB,EAAA6M,cAEO/Y,GACPq6B,GAOAG,cAAA,WACA,IAAAx6B,EAAAhhB,KACA+oB,GAAAtJ,KAAAuB,EAAAze,KAAAE,SAAA,SAAAY,EAAAupB,GACA5L,EAAA0M,eAAAd,GAAAmN,WAAA9L,SACOjN,IAMPiN,MAAA,WACAjuB,KAAAw7C,gBACAx7C,KAAAw1C,QAAApsB,cAEA3kB,OAAA,SAAAf,GACA,IAAAsd,EAAAhhB,KAeA,GAbA0D,GAAA,kBAAAA,IAEAA,EAAA,CACAunB,SAAAvnB,EACA8nB,KAAA3tB,UAAA,KA1TA,SAAAwmB,GACA,IAAAo3B,EAAAp3B,EAAAviB,QACAinB,GAAAtJ,KAAA4E,EAAAiJ,OAAA,SAAAjT,GACAuqB,GAAAG,UAAA1gB,EAAAhK,KAEAohC,EAAA5C,GAAAhxB,GAAAO,OAAAP,GAAAxD,EAAA3gB,OAAA7B,MAAA45C,GACAp3B,EAAAviB,QAAAuiB,EAAA3gB,OAAA5B,QAAA25C,EACAp3B,EAAAw1B,sBACAx1B,EAAAy1B,sBAEAz1B,EAAAmxB,QAAAha,SAAAigB,EAAA7gB,SACAvW,EAAAmxB,QAAApsB,aAmTAsyB,CAAA16B,GAGAwsB,GAAAe,YAAAvtB,IAEA,IAAAwsB,GAAAQ,OAAAhtB,EAAA,iBAKAA,EAAAw0B,QAAAtnB,MAAAlN,EAAAze,KAEA,IAAA84C,EAAAr6B,EAAAo6B,2BAEAryB,GAAAtJ,KAAAuB,EAAAze,KAAAE,SAAA,SAAAY,EAAAupB,GACA5L,EAAA0M,eAAAd,GAAAmN,WAAApL,yBACO3N,GACPA,EAAA26B,eAEA36B,EAAAlf,QAAAkpB,WAAAhK,EAAAlf,QAAAkpB,UAAAC,UACAlC,GAAAtJ,KAAA47B,EAAA,SAAAthB,GACAA,EAAA9L,UAIAjN,EAAA46B,iBAGA56B,EAAAw0B,QAAApsB,aAGApI,EAAA66B,WAAA,GAEArO,GAAAQ,OAAAhtB,EAAA,eAEAA,EAAAu4B,gBACAv4B,EAAA86B,iBAAA,CACA7wB,SAAAvnB,EAAAunB,SACAjC,OAAAtlB,EAAAslB,OACAwC,KAAA9nB,EAAA8nB,MAGAxK,EAAAjc,OAAArB,KASAi4C,aAAA,YAGA,IAAAnO,GAAAQ,OAFAhuC,KAEA,kBAIA4kC,GAAAngC,OAAAzE,UAAAkC,MAAAlC,KAAAiC,QASAurC,GAAAQ,OAfAhuC,KAeA,oBACAwtC,GAAAQ,OAhBAhuC,KAgBA,iBAQA47C,eAAA,WAGA,QAAApO,GAAAQ,OAFAhuC,KAEA,yBAIA,QAAApC,EAAA,EAAAoiB,EANAhgB,KAMAuC,KAAAE,SAAA3E,OAAqDF,EAAAoiB,IAAUpiB,EAN/DoC,KAOA+7C,cAAAn+C,GAGA4vC,GAAAQ,OAVAhuC,KAUA,yBAQA+7C,cAAA,SAAA19B,GACA,IACA6O,EADAltB,KACA0tB,eAAArP,GACAne,EAAA,CACAgtB,OACA7O,UAGA,IAAAmvB,GAAAQ,OAPAhuC,KAOA,uBAAAE,MAIAgtB,EAAA6M,WAAAt1B,SACA+oC,GAAAQ,OAZAhuC,KAYA,sBAAAE,MAEA6E,OAAA,SAAArB,GACA,IAAAsd,EAAAhhB,KAEA0D,GAAA,kBAAAA,IAEAA,EAAA,CACAunB,SAAAvnB,EACA8nB,KAAA3tB,UAAA,KAIA,IAAAm+C,EAAAh7B,EAAAlf,QAAAkpB,UACAC,EAAAytB,GAAAh1C,EAAAunB,SAAA+wB,KAAA/wB,UACAO,EAAA9nB,EAAA8nB,KAEA,QAAAgiB,GAAAQ,OAAAhtB,EAAA,iBAIA,IAAAmK,EAAA,SAAAH,GACAwiB,GAAAQ,OAAAhtB,EAAA,eACA+H,GAAAzJ,SAAA08B,KAAA7wB,WAAA,CAAAH,GAAAhK,IAGA,GAAAg7B,GAAA/wB,EAAA,CACA,IAAAD,EAAA,IAAAH,GAAA,CACAH,SAAAO,EAAA,MAEAjC,OAAAtlB,EAAAslB,QAAAgzB,EAAAhzB,OACAjkB,OAAA,SAAAsf,EAAA43B,GACA,IAAAC,EAAAnzB,GAAAC,OAAArH,QAAAs6B,EAAAjzB,QACAyB,EAAAwxB,EAAAxxB,YACA0xB,EAAA1xB,EAAAwxB,EAAAvxB,SACArG,EAAA8K,KAAA+sB,EAAAC,KAAA1xB,IAEAE,oBAAAqxB,EAAA9wB,WACAN,oBAAAO,IAEAC,GAAAG,aAAAvK,EAAAgK,EAAAC,EAAAO,QAEAxK,EAAAmO,OAEAhE,EAAA,IAAAN,GAAA,CACAH,SAAA,EACArG,MAAArD,KAIA,OAAAA,IAEAmO,KAAA,SAAAF,GACA,IAAAjO,EAAAhhB,KACAghB,EAAAoD,QAEA2E,GAAApK,cAAAsQ,KACAA,EAAA,GAGAjO,EAAA0I,WAAAuF,GAEAjO,EAAA9e,OAAA,GAAA8e,EAAA/e,QAAA,IAIA,IAAAurC,GAAAQ,OAAAhtB,EAAA,cAAAiO,MAKAlG,GAAAtJ,KAAAuB,EAAAyjB,MAAA,SAAAC,GACAA,EAAAvV,KAAAnO,EAAA2T,YACO3T,GACPA,EAAAo7B,aAAAntB,GAEAjO,EAAAq7B,aAAAptB,GAEAue,GAAAQ,OAAAhtB,EAAA,aAAAiO,MAMAvF,WAAA,SAAAuF,GAGA,IAFA,IAEArxB,EAAA,EAAAoiB,GAFAhgB,KAEAuC,KAAAE,UAAA,IAAA3E,OAA6DF,EAAAoiB,IAAUpiB,EAFvEoC,KAGA64B,iBAAAj7B,IAHAoC,KAIA0tB,eAAA9vB,GAAAm8B,WAAArQ,WAAAuF,GAJAjvB,KAQAw1C,QAAA9rB,WAAAuF,IAQAmtB,aAAA,SAAAntB,GACA,IAAAjO,EAAAhhB,KAEA,QAAAwtC,GAAAQ,OAAAhtB,EAAA,sBAAAiO,IAAA,CAKA,QAAArxB,GAAAojB,EAAAze,KAAAE,UAAA,IAAA3E,OAAA,EAAuDF,GAAA,IAAQA,EAC/DojB,EAAA6X,iBAAAj7B,IACAojB,EAAAs7B,YAAA1+C,EAAAqxB,GAIAue,GAAAQ,OAAAhtB,EAAA,qBAAAiO,MAQAqtB,YAAA,SAAAj+B,EAAA4Q,GACA,IACA/B,EADAltB,KACA0tB,eAAArP,GACAne,EAAA,CACAgtB,OACA7O,QACA4Q,gBAGA,IAAAue,GAAAQ,OARAhuC,KAQA,qBAAAE,MAIAgtB,EAAA6M,WAAA5K,KAAAF,GACAue,GAAAQ,OAbAhuC,KAaA,oBAAAE,MAQAm8C,aAAA,SAAAptB,GACA,IACAumB,EADAx1C,KACAw1C,QACAt1C,EAAA,CACAs1C,UACAvmB,gBAGA,IAAAue,GAAAQ,OAPAhuC,KAOA,qBAAAE,MAIAs1C,EAAArmB,OACAqe,GAAAQ,OAZAhuC,KAYA,oBAAAE,MAOAW,kBAAA,SAAAu7B,GACA,OAAAyH,GAAAC,MAAAC,OAAA/jC,KAAAo8B,IAEAt7B,mBAAA,SAAAs7B,GACA,OAAAyH,GAAAC,MAAAxgC,MAAAtD,KAAAo8B,EAAA,CACA2G,WAAA,KAGAwZ,mBAAA,SAAAngB,GACA,OAAAyH,GAAAC,MAAA,UAAA9jC,KAAAo8B,EAAA,CACA2G,WAAA,KAGAwV,0BAAA,SAAAnc,EAAAtF,EAAAh1B,GACA,IAAA+sB,EAAAgV,GAAAC,MAAAhN,GAEA,0BAAAjI,EACAA,EAAA7uB,KAAAo8B,EAAAt6B,GAGA,IAEAlB,kBAAA,SAAAw7B,GACA,OAAAyH,GAAAC,MAAAzgC,QAAArD,KAAAo8B,EAAA,CACA2G,WAAA,KAGArV,eAAA,SAAAd,GACA,IACAvpB,EADArD,KACAuC,KAAAE,SAAAmqB,GAEAvpB,EAAAm5C,QACAn5C,EAAAm5C,MAAA,IAGA,IAAAtvB,EAAA7pB,EAAAm5C,MAPAx8C,KAOAiF,IAeA,OAbAioB,IACAA,EAAA7pB,EAAAm5C,MAVAx8C,KAUAiF,IAAA,CACApD,KAAA,KACAU,KAAA,GACAc,QAAA,KACA02B,WAAA,KACA1Q,OAAA,KAEAgE,QAAA,KACAG,QAAA,OAIAN,GAEAmU,uBAAA,WAGA,IAFA,IAAAnR,EAAA,EAEAtyB,EAAA,EAAAoiB,EAAAhgB,KAAAuC,KAAAE,SAAA3E,OAAuDF,EAAAoiB,IAAUpiB,EACjEoC,KAAA64B,iBAAAj7B,IACAsyB,IAIA,OAAAA,GAEA2I,iBAAA,SAAAjM,GACA,IAAAM,EAAAltB,KAAA0tB,eAAAd,GAGA,yBAAAM,EAAA7D,QAAA6D,EAAA7D,QAAArpB,KAAAuC,KAAAE,SAAAmqB,GAAAvD,QAEAozB,eAAA,WACA,OAAAz8C,KAAA8B,QAAA+5B,eAAA77B,OAMAs7C,mBAAA,SAAA1uB,GACA,IAAA3nB,EAAAjF,KAAAiF,GACA5B,EAAArD,KAAAuC,KAAAE,SAAAmqB,GACAM,EAAA7pB,EAAAm5C,OAAAn5C,EAAAm5C,MAAAv3C,GAEAioB,IACAA,EAAA6M,WAAAj1B,iBACAzB,EAAAm5C,MAAAv3C,KAGAH,QAAA,WACA,IAEAlH,EAAAoiB,EAFAgB,EAAAhhB,KACAipB,EAAAjI,EAAAiI,OAIA,IAFAjI,EAAAg5B,OAEAp8C,EAAA,EAAAoiB,EAAAgB,EAAAze,KAAAE,SAAA3E,OAAiDF,EAAAoiB,IAAUpiB,EAC3DojB,EAAAs6B,mBAAA19C,GAGAqrB,IACAjI,EAAA07B,eACA3zB,GAAAE,OAAA7E,MAAApD,GACA8qB,GAAAkB,eAAAhsB,EAAAsD,KACAtD,EAAAiI,OAAA,KACAjI,EAAAsD,IAAA,MAGAkpB,GAAAQ,OAAAhtB,EAAA,kBACAo4B,GAAAI,UAAAx4B,EAAA/b,KAEA03C,cAAA,WACA,OAAA38C,KAAAipB,OAAA2zB,UAAAv8C,MAAAL,KAAAipB,OAAAprB,YAEAk8C,YAAA,WACA,IAAA/4B,EAAAhhB,KACAghB,EAAAw0B,QAAA,IAAAiD,GAAA,CACArqB,OAAApN,EACA67B,eAAA77B,EAEAkN,MAAAlN,EAAAze,KACAi5B,SAAAxa,EAAAlf,QAAA84B,UACO5Z,IAMP24B,WAAA,WACA,IAAA34B,EAAAhhB,KACA0sB,EAAA1L,EAAA87B,WAAA,GAEAvwB,EAAA,WACAvL,EAAA+7B,aAAA18C,MAAA2gB,EAAAnjB,YAGAkrB,GAAAtJ,KAAAuB,EAAAlf,QAAAi3C,OAAA,SAAAl3C,GACAiqC,GAAAjD,iBAAA7nB,EAAAnf,EAAA0qB,GACAG,EAAA7qB,GAAA0qB,IAIAvL,EAAAlf,QAAAo3C,aACA3sB,EAAA,WACAvL,EAAA44B,UAGA9N,GAAAjD,iBAAA7nB,EAAA,SAAAuL,GACAG,EAAAktB,OAAArtB,IAOAmwB,aAAA,WACA,IAAA17B,EAAAhhB,KACA0sB,EAAA1L,EAAA87B,WAEApwB,WAIA1L,EAAA87B,WACA/zB,GAAAtJ,KAAAiN,EAAA,SAAAH,EAAA1qB,GACAiqC,GAAA7C,oBAAAjoB,EAAAnf,EAAA0qB,OAGAywB,iBAAA,SAAA9tB,EAAA4H,EAAAqY,GACA,IACAluC,EAAArD,EAAAoiB,EADA6O,EAAAsgB,EAAA,mCAGA,IAAAvxC,EAAA,EAAAoiB,EAAAkP,EAAApxB,OAAyCF,EAAAoiB,IAAUpiB,GACnDqD,EAAAiuB,EAAAtxB,KAGAoC,KAAA0tB,eAAAzsB,EAAAotB,eAAA0L,WAAAlL,GAAA5tB,IAQA87C,aAAA,SAAA3gB,GACA,IAAApb,EAAAhhB,KACAw1C,EAAAx0B,EAAAw0B,QAEA,QAAAhI,GAAAQ,OAAAhtB,EAAA,eAAAob,IAAA,CAKApb,EAAAu4B,iBAAA,EACAv4B,EAAA86B,iBAAA,KACA,IAAArH,EAAAzzB,EAAAs3B,YAAAlc,GAKAoZ,IACAf,EAAAe,EAAA/rB,OAAA+rB,EAAA8C,YAAAlc,GAAAqY,EAAAe,EAAA8C,YAAAlc,IAGAoR,GAAAQ,OAAAhtB,EAAA,cAAAob,IACA,IAAA6gB,EAAAj8B,EAAA86B,iBAkBA,OAhBAmB,EAEAj8B,EAAAjc,OAAAk4C,GACOxI,IAAAzzB,EAAA4K,YAEP5K,EAAAg5B,OAGAh5B,EAAAjc,OAAA,CACAkmB,SAAAjK,EAAAlf,QAAA+0B,MAAAoiB,kBACAztB,MAAA,KAIAxK,EAAAu4B,iBAAA,EACAv4B,EAAA86B,iBAAA,KACA96B,IASAs3B,YAAA,SAAAlc,GACA,IAAApb,EAAAhhB,KACA8B,EAAAkf,EAAAlf,SAAA,GACAo7C,EAAAp7C,EAAA+0B,MACA4d,GAAA,EAiCA,OAhCAzzB,EAAA66B,WAAA76B,EAAA66B,YAAA,GAEA,aAAAzf,EAAAv6B,KACAmf,EAAA2zB,OAAA,GAEA3zB,EAAA2zB,OAAA3zB,EAAAu3B,0BAAAnc,EAAA8gB,EAAApmB,KAAAomB,GAKAn0B,GAAAzJ,SAAAxd,EAAAk3C,SAAAl3C,EAAA+0B,MAAAmiB,QAAA,CAAA5c,EAAAqG,OAAAzhB,EAAA2zB,QAAA3zB,GAEA,YAAAob,EAAAv6B,MAAA,UAAAu6B,EAAAv6B,MACAC,EAAAqD,SAEArD,EAAAqD,QAAAhH,KAAA6iB,EAAAob,EAAAqG,OAAAzhB,EAAA2zB,QAKA3zB,EAAA66B,WAAA/9C,QACAkjB,EAAAg8B,iBAAAh8B,EAAA66B,WAAAqB,EAAApmB,MAAA,GAIA9V,EAAA2zB,OAAA72C,QAAAo/C,EAAApmB,MACA9V,EAAAg8B,iBAAAh8B,EAAA2zB,OAAAuI,EAAApmB,MAAA,GAGA2d,GAAA1rB,GAAAlJ,YAAAmB,EAAA2zB,OAAA3zB,EAAA66B,YAEA76B,EAAA66B,WAAA76B,EAAA2zB,OACAF,KASA2E,GAAAI,UAAA,GACA,IAAA2D,GAAA/D,GAyrBA,SAAAgE,KACA,UAAAp3C,MAAA,6GAqBA,SAAAq3C,GAAAv7C,GACA9B,KAAA8B,WAAA,GAtsBAs3C,GAAAkE,WAAAlE,GASAA,GAAAmE,MAAA,GASAx0B,GAAAjlB,YAAA+0C,GASA9vB,GAAAy0B,WAAA7E,GA8qBA5vB,GAAAnI,OAAAy8B,GAAAp/C,UAEA,CAMAw/C,QAAAL,GASAM,MAAAN,GASAO,OAAAP,GAUAnS,IAAAmS,GAUAQ,KAAAR,GAUAS,QAAAT,GAQAU,MAAAV,GAUAW,QAAA,SAAA3+C,GACA,OAAAA,KAIAi+C,GAAAW,SAAA,SAAAC,GACAl1B,GAAAnI,OAAAy8B,GAAAp/C,UAAAggD,IAGA,IACAC,GAAA,CACAC,MAFAd,IASAe,GAAA,CAKAC,WAAA,CAOAx5C,OAAA,SAAAzF,GACA,OAAA2pB,GAAAnK,QAAAxf,KAAA,GAAAA,GAWAwiB,OAAA,SAAA08B,EAAAjgC,EAAAkb,GAEA,IAAAxtB,EAAAwtB,EAAAz7B,OAAA,EAAAy7B,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAEA1tB,KAAAsoB,IAAApoB,GAAA,GACAuyC,IAAAzyC,KAAAkB,MAAAuxC,KAEAvyC,EAAAuyC,EAAAzyC,KAAAkB,MAAAuxC,IAIA,IAAAC,EAAAx1B,GAAAy1B,MAAA3yC,KAAAsoB,IAAApoB,IACA0yC,EAAA,GAEA,OAAAH,EAAA,CACA,IAAAI,EAAA7yC,KAAAC,IAAAD,KAAAsoB,IAAAoF,EAAA,IAAA1tB,KAAAsoB,IAAAoF,IAAAz7B,OAAA,KAEA,GAAA4gD,EAAA,MAEA,IAAAC,EAAA51B,GAAAy1B,MAAA3yC,KAAAsoB,IAAAmqB,IACAG,EAAAH,EAAAM,cAAA/yC,KAAAkB,MAAA4xC,GAAA9yC,KAAAkB,MAAAwxC,QACW,CACX,IAAAM,GAAA,EAAAhzC,KAAAkB,MAAAwxC,GACAM,EAAAhzC,KAAAC,IAAAD,KAAAD,IAAAizC,EAAA,OAEAJ,EAAAH,EAAAQ,QAAAD,SAGAJ,EAAA,IAGA,OAAAA,GAEAM,YAAA,SAAAT,EAAAjgC,EAAAkb,GACA,IAAAylB,EAAAV,EAAAzyC,KAAAQ,IAAA,GAAAR,KAAAkB,MAAAgc,GAAAy1B,MAAAF,KAEA,WAAAA,EACA,IACS,IAAAU,GAAA,IAAAA,GAAA,IAAAA,GAAA,IAAA3gC,OAAAkb,EAAAz7B,OAAA,EACTwgD,EAAAM,gBAGA,MAIAK,GAAAl2B,GAAA5J,eACAE,GAAA0J,GAAA1J,sBAsDA,SAAA6/B,GAAA3lB,GACA,IACA37B,EAAAoiB,EADA6X,EAAA,GAGA,IAAAj6B,EAAA,EAAAoiB,EAAAuZ,EAAAz7B,OAAoCF,EAAAoiB,IAAUpiB,EAC9Ci6B,EAAAhM,KAAA0N,EAAA37B,GAAA0F,OAGA,OAAAu0B,EAmBA,SAAAsnB,GAAAr2B,EAAAs2B,EAAA92B,GACA,OAAAS,GAAAnK,QAAAwgC,GAAAr2B,GAAAs2B,YAAAv2B,EAAAR,EAAA82B,GAAAt2B,EAAAitB,YAAAqJ,GAAAl9C,MAhFA2lB,GAAAT,KAAA,SACAnhB,SAAA,EACAC,SAAA,OACA+wB,QAAA,EAEAC,UAAA,CACAjxB,SAAA,EACAq5C,MAAA,qBACA7sB,UAAA,EACA8sB,YAAA,EACAC,iBAAA,EACAC,WAAA,EACAC,eAAA,GACAC,cAAA,EACAC,cAAA,mBACAC,mBAAA,GACAC,yBAAA,EACA3oB,iBAAA,EACApE,WAAA,GACAC,iBAAA,GAGA+sB,WAAA,CAEA95C,SAAA,EAEA+5C,YAAA,GAEAtrB,QAAA,CACA/P,IAAA,EACAE,OAAA,IAIA0U,MAAA,CACAqH,aAAA,EACAqf,YAAA,EACAC,YAAA,GACAC,QAAA,EACAzrB,QAAA,EACA/U,SAAA,EACA1Z,SAAA,EACAm6C,UAAA,EACAC,gBAAA,EACAC,YAAA,EAEAhhC,SAAA8+B,GAAAC,WAAAx5C,OACA07C,MAAA,GACAC,MAAA,MAmCA,IAAAC,GAAAl2B,GAAA3J,OAAA,CAOA4lB,WAAA,WAEA,OACA9hB,KAFA1kB,KAEA0gD,aAAA,EACA/7B,IAHA3kB,KAGA2gD,YAAA,EACA/7B,MAJA5kB,KAIA4gD,cAAA,EACA/7B,OALA7kB,KAKA6gD,eAAA,IAQArnB,SAAA,WACA,OAAAx5B,KAAA8gD,QAKA5F,kBAAA,WACA,IAAA3hB,EAAAv5B,KAAA8B,QAAAy3B,MAcA,QAAAv7B,KAZA,IAAAu7B,EAAAgnB,QACAhnB,EAAAgnB,MAAA,CACAt6C,SAAA,KAIA,IAAAszB,EAAAinB,QACAjnB,EAAAinB,MAAA,CACAv6C,SAAA,IAIAszB,EACA,UAAAv7B,GAAA,UAAAA,IACA,qBAAAu7B,EAAAgnB,MAAAviD,KACAu7B,EAAAgnB,MAAAviD,GAAAu7B,EAAAv7B,IAGA,qBAAAu7B,EAAAinB,MAAAxiD,KACAu7B,EAAAinB,MAAAxiD,GAAAu7B,EAAAv7B,MAKA+iD,aAAA,WACAh4B,GAAAzJ,SAAAtf,KAAA8B,QAAAi/C,aAAA,CAAA/gD,QAEAyE,OAAA,SAAAu8C,EAAAC,EAAAC,GACA,IACAtjD,EAAAoiB,EAAA6X,EAAAv0B,EAAAi2B,EAAA6lB,EADAp+B,EAAAhhB,KA8CA,IA3CAghB,EAAA+/B,eAEA//B,EAAAggC,WACAhgC,EAAAigC,YACAjgC,EAAAkgC,QAAAn4B,GAAAnI,OAAA,CACA8D,KAAA,EACAE,MAAA,EACAD,IAAA,EACAE,OAAA,GACOq8B,GACPlgC,EAAAmgC,eAAA,EACAngC,EAAAogC,kBAAA,EACApgC,EAAAqgC,iBAAArgC,EAAAqgC,kBAAA,GAEArgC,EAAAsgC,sBACAtgC,EAAAugC,gBACAvgC,EAAAwgC,qBAEAxgC,EAAAygC,mBACAzgC,EAAA0gC,sBACA1gC,EAAA2gC,kBAOA3gC,EAAA4gC,mBAGAroB,EAAAvY,EAAA6gC,cAAA,GAEAtoB,EAAAvY,EAAA8gC,gBAAAvoB,MACAvY,EAAA+gC,8BAIAlqB,EAAA7W,EAAAghC,qBAAAzoB,IAAAvY,EAAAuY,MACAvY,EAAAihC,6BACAjhC,EAAAuY,MAAA1B,EAIAj6B,EAAA,EAAAoiB,EAAA6X,EAAA/5B,OAAuCF,EAAAoiB,IAAUpiB,EACjD0F,EAAAu0B,EAAAj6B,IACAwhD,EAAA7lB,EAAA37B,IAQAwhD,EAAA97C,QALAi2B,EAAA1N,KAAAuzB,EAAA,CACA97C,QACAk9C,OAAA,IAkBA,OAXAx/B,EAAA8/B,OAAAvnB,EAEAvY,EAAAkhC,8BACAlhC,EAAAmhC,wBACAnhC,EAAAohC,6BAEAphC,EAAAqhC,YACArhC,EAAAshC,MACAthC,EAAAuhC,WAEAvhC,EAAAwhC,cACAxhC,EAAAic,SAEAulB,YAAA,WACAz5B,GAAAzJ,SAAAtf,KAAA8B,QAAA0gD,YAAA,CAAAxiD,QAGAshD,oBAAA,WACAv4B,GAAAzJ,SAAAtf,KAAA8B,QAAAw/C,oBAAA,CAAAthD,QAEAuhD,cAAA,WACA,IAAAvgC,EAAAhhB,KAEAghB,EAAAiX,gBAEAjX,EAAA9e,MAAA8e,EAAAggC,SACAhgC,EAAA0D,KAAA,EACA1D,EAAA4D,MAAA5D,EAAA9e,QAEA8e,EAAA/e,OAAA+e,EAAAigC,UAEAjgC,EAAA2D,IAAA,EACA3D,EAAA6D,OAAA7D,EAAA/e,QAIA+e,EAAA0/B,YAAA,EACA1/B,EAAA2/B,WAAA,EACA3/B,EAAA4/B,aAAA,EACA5/B,EAAA6/B,cAAA,GAEAW,mBAAA,WACAz4B,GAAAzJ,SAAAtf,KAAA8B,QAAA0/C,mBAAA,CAAAxhD,QAGAyhD,iBAAA,WACA14B,GAAAzJ,SAAAtf,KAAA8B,QAAA2/C,iBAAA,CAAAzhD,QAEA0hD,oBAAA34B,GAAAtK,KACAkjC,gBAAA,WACA54B,GAAAzJ,SAAAtf,KAAA8B,QAAA6/C,gBAAA,CAAA3hD,QAGA4hD,iBAAA,WACA74B,GAAAzJ,SAAAtf,KAAA8B,QAAA8/C,iBAAA,CAAA5hD,QAEA6hD,WAAA94B,GAAAtK,KACAqjC,gBAAA,SAAAvoB,GACA,IAAAvY,EAAAhhB,KAEA,OAAA+oB,GAAAnK,QAAA2a,MAAAz7B,OACAirB,GAAAzJ,SAAA0B,EAAAlf,QAAAggD,gBAAA,CAAA9gC,EAAAuY,KAIAvY,EAAAuY,MAAAxQ,GAAAzJ,SAAA0B,EAAAlf,QAAAggD,gBAAA,CAAA9gC,IAAAuY,SAAAvY,EAAAuY,MACAA,IAEAwoB,4BAAA,WACAh5B,GAAAzJ,SAAAtf,KAAA8B,QAAAigD,4BAAA,CAAA/hD,QAEAgiD,qBAAA,WACA,IAEAS,EAFAziD,KAEA8B,QAAAy3B,MAFAv5B,KAGAu5B,MAHAv5B,KAGAu5B,MAAA72B,IAAA+/C,EAAAC,cAAAD,EAAAnjC,SAAAtf,OAEAiiD,2BAAA,WACAl5B,GAAAzJ,SAAAtf,KAAA8B,QAAAmgD,2BAAA,CAAAjiD,QAGAkiD,4BAAA,WACAn5B,GAAAzJ,SAAAtf,KAAA8B,QAAAogD,4BAAA,CAAAliD,QAEAmiD,sBAAA,WACA,IAAAnhC,EAAAhhB,KACA8oB,EAAA9H,EAAAsD,IACAm+B,EAAAzhC,EAAAlf,QAAAy3B,MACA1B,EAAAqnB,GAAAl+B,EAAA8/B,QAGA6B,EAAA55B,GAAAjnB,QAAAomB,WAAAu6B,GAEA35B,EAAAR,KAAAq6B,EAAA3pC,OACA,IAAA4pC,EAAAH,EAAAxC,aAAA,EAEA,GAAApoB,EAAA/5B,QAAAkjB,EAAAlf,QAAAmE,SAAA+a,EAAAiX,eAOA,IANA,IAEA4qB,EAFAC,EAAA/5B,GAAAs2B,YAAAv2B,EAAA65B,EAAA3pC,OAAA6e,EAAA7W,EAAAqgC,kBACA0B,EAAAD,EAGAE,EAAAhiC,EAAAyY,gBAAA,GAAAzY,EAAAyY,gBAAA,KAEAspB,EAAAC,GAAAJ,EAAAH,EAAAvC,aAAA,CACA,IAAA+C,EAAAl6B,GAAAm6B,UAAAN,GAIA,GAHAC,EAAAh3C,KAAAqC,IAAA+0C,GACAp3C,KAAAsC,IAAA80C,GAEAH,EAAA9hC,EAAAigC,UAAA,CAEA2B,IACA,MAGAA,IACAG,EAAAF,EAAAC,EAIA9hC,EAAA4hC,iBAEAR,2BAAA,WACAr5B,GAAAzJ,SAAAtf,KAAA8B,QAAAsgD,2BAAA,CAAApiD,QAGAqiD,UAAA,WACAt5B,GAAAzJ,SAAAtf,KAAA8B,QAAAugD,UAAA,CAAAriD,QAEAsiD,IAAA,WACA,IAAAthC,EAAAhhB,KAEAi9B,EAAAjc,EAAAic,QAAA,CACA/6B,MAAA,EACAD,OAAA,GAEA41B,EAAAqnB,GAAAl+B,EAAA8/B,QACAhkB,EAAA9b,EAAAlf,QACA2gD,EAAA3lB,EAAAvD,MACA4pB,EAAArmB,EAAAijB,WACAqD,EAAAtmB,EAAA5F,UAEAjxB,EAAA+a,EAAAqiC,aAEAn9C,EAAA42B,EAAA52B,SACA+xB,EAAAjX,EAAAiX,eACAqrB,EAAAv6B,GAAAjnB,QAAAomB,WACAy6B,EAAAW,EAAAb,GACA/C,EAAA5iB,EAAA5F,UAAAwoB,eAiBA,GAbAziB,EAAA/6B,MAFA+1B,EAEAjX,EAAAuiC,cAAAviC,EAAAggC,SAAAhgC,EAAAkgC,QAAAx8B,KAAA1D,EAAAkgC,QAAAt8B,MAAA5D,EAAAggC,SAEA/6C,GAAAm9C,EAAA3D,UAAAC,EAAA,EAKAziB,EAAAh7B,OADAg2B,EACAhyB,GAAAm9C,EAAA3D,UAAAC,EAAA,EAEA1+B,EAAAigC,UAIAkC,EAAAl9C,WAAA,CACA,IAAAu9C,EAAAF,EAAAH,GACAM,EAAA16B,GAAAjnB,QAAAmmB,UAAAk7B,EAAAzuB,SACAgvB,EAAAF,EAAA/6B,WAAAg7B,EAAAxhD,OAEAg2B,EACAgF,EAAAh7B,QAAAyhD,EAEAzmB,EAAA/6B,OAAAwhD,EAKA,GAAAjB,EAAAx8C,WAAA,CACA,IAAA09C,EAAA56B,GAAAs2B,YAAAr+B,EAAAsD,IAAAq+B,EAAA3pC,OAAA6e,EAAA7W,EAAAqgC,kBACAuC,EAAA76B,GAAA86B,mBAAAhsB,GACAisB,EAAA,GAAAnB,EAAAp9B,KACAw+B,EAAA/iC,EAAAlf,QAAAy3B,MAAA7E,QAKA,GAHA1T,EAAAmgC,eAAAyC,EACA5iC,EAAAogC,kBAAAuC,EAEA1rB,EAAA,CACA,IAAAgrB,EAAAl6B,GAAAm6B,UAAAliC,EAAA4hC,eACAC,EAAAh3C,KAAAqC,IAAA+0C,GACAe,EAAAn4C,KAAAsC,IAAA80C,GAEAgB,EAAAD,EAAAL,EAAAhB,EAAAl6B,WAAAm7B,EAAAE,EAEA7mB,EAAAh7B,OAAA4J,KAAAD,IAAAoV,EAAAigC,UAAAhkB,EAAAh7B,OAAAgiD,EAAAF,GACA/iC,EAAAsD,IAAAgE,KAAAq6B,EAAA3pC,OACA,IAIA0nC,EAAAE,EAJAsD,EAAA/E,GAAAn+B,EAAAsD,IAAAuT,EAAA,GAAA8qB,EAAA3pC,QACAmrC,EAAAhF,GAAAn+B,EAAAsD,IAAAuT,IAAA/5B,OAAA,GAAA6kD,EAAA3pC,QACAorC,EAAApjC,EAAAyY,gBAAA,GAAAzY,EAAA0D,KACA2/B,EAAArjC,EAAA4D,MAAA5D,EAAAyY,gBAAA5B,EAAA/5B,OAAA,GAIA,IAAAkjB,EAAA4hC,eACAlC,EAAA,WAAAx6C,EAAA28C,EAAAqB,EAAArB,EAAAiB,EACAlD,EAAA,WAAA16C,EAAA28C,EAAAiB,EAAAjB,EAAAsB,IAEAzD,EAAAwD,EAAA,EACAtD,EAAAuD,EAAA,GAGAnjC,EAAA0/B,YAAA70C,KAAAC,IAAA40C,EAAA0D,EAAA,KAEApjC,EAAA4/B,aAAA/0C,KAAAC,IAAA80C,EAAAyD,EAAA,UAIA5B,EAAAtC,OACAwD,EAAA,EAIAA,GAAAI,EAAAD,EAGA7mB,EAAA/6B,MAAA2J,KAAAD,IAAAoV,EAAAggC,SAAA/jB,EAAA/6B,MAAAyhD,GACA3iC,EAAA2/B,WAAAgC,EAAAp9B,KAAA,EACAvE,EAAA6/B,cAAA8B,EAAAp9B,KAAA,EAIAvE,EAAAsjC,gBACAtjC,EAAA9e,MAAA+6B,EAAA/6B,MACA8e,EAAA/e,OAAAg7B,EAAAh7B,QAOAqiD,cAAA,WACA,IAAAtjC,EAAAhhB,KAEAghB,EAAAkgC,UACAlgC,EAAA0/B,YAAA70C,KAAAC,IAAAkV,EAAA0/B,YAAA1/B,EAAAkgC,QAAAx8B,KAAA,GACA1D,EAAA2/B,WAAA90C,KAAAC,IAAAkV,EAAA2/B,WAAA3/B,EAAAkgC,QAAAv8B,IAAA,GACA3D,EAAA4/B,aAAA/0C,KAAAC,IAAAkV,EAAA4/B,aAAA5/B,EAAAkgC,QAAAt8B,MAAA,GACA5D,EAAA6/B,cAAAh1C,KAAAC,IAAAkV,EAAA6/B,cAAA7/B,EAAAkgC,QAAAr8B,OAAA,KAGA09B,SAAA,WACAx5B,GAAAzJ,SAAAtf,KAAA8B,QAAAygD,SAAA,CAAAviD,QAGAi4B,aAAA,WACA,cAAAj4B,KAAA8B,QAAAoE,UAAA,WAAAlG,KAAA8B,QAAAoE,UAEAq9C,YAAA,WACA,OAAAvjD,KAAA8B,QAAAgjC,WAGAjL,cAAA,SAAA0qB,GAEA,GAAAx7B,GAAApK,cAAA4lC,GACA,OAAAhpB,IAIA,sBAAAgpB,gBAAArlC,UAAAH,SAAAwlC,GACA,OAAAhpB,IAIA,GAAAgpB,EACA,GAAAvkD,KAAAi4B,gBACA,QAAA92B,IAAAojD,EAAAj4C,EACA,OAAAtM,KAAA65B,cAAA0qB,EAAAj4C,QAES,QAAAnL,IAAAojD,EAAAh4C,EACT,OAAAvM,KAAA65B,cAAA0qB,EAAAh4C,GAKA,OAAAg4C,GAQApS,iBAAAppB,GAAAtK,KASA0a,iBAAApQ,GAAAtK,KAOA+lC,iBAAAz7B,GAAAtK,KAMAgb,gBAAA,SAAApb,GACA,IAAA2C,EAAAhhB,KACAi3B,EAAAjW,EAAAlf,QAAAm1B,OAEA,GAAAjW,EAAAiX,eAAA,CACA,IAAAwsB,EAAAzjC,EAAA9e,OAAA8e,EAAA0/B,YAAA1/B,EAAA4/B,cACAoC,EAAAyB,EAAA54C,KAAAC,IAAAkV,EAAA8/B,OAAAhjD,QAAAm5B,EAAA,QACAytB,EAAA1B,EAAA3kC,EAAA2C,EAAA0/B,YAEAzpB,IACAytB,GAAA1B,EAAA,GAGA,IAAA2B,EAAA3jC,EAAA0D,KAAAggC,EAEA,OADAC,GAAA3jC,EAAAuiC,cAAAviC,EAAAkgC,QAAAx8B,KAAA,EAIA,IAAAkgC,EAAA5jC,EAAA/e,QAAA+e,EAAA2/B,WAAA3/B,EAAA6/B,eACA,OAAA7/B,EAAA2D,IAAAtG,GAAAumC,GAAA5jC,EAAA8/B,OAAAhjD,OAAA,KAOAw9B,mBAAA,SAAAupB,GACA,IAAA7jC,EAAAhhB,KAEA,GAAAghB,EAAAiX,eAAA,CACA,IAAAwsB,EAAAzjC,EAAA9e,OAAA8e,EAAA0/B,YAAA1/B,EAAA4/B,cACAkE,EAAAL,EAAAI,EAAA7jC,EAAA0/B,YACAiE,EAAA3jC,EAAA0D,KAAAogC,EAEA,OADAH,GAAA3jC,EAAAuiC,cAAAviC,EAAAkgC,QAAAx8B,KAAA,EAIA,OAAA1D,EAAA2D,IAAAkgC,EAAA7jC,EAAA/e,QAOA+1B,aAAA,WACA,OAAAh4B,KAAAm5B,iBAAAn5B,KAAA+kD,iBAEAA,aAAA,WACA,IACAn5C,EADA5L,KACA4L,IACAE,EAFA9L,KAEA8L,IACA,OAHA9L,KAGA4gC,YAAA,EAAAh1B,EAAA,GAAAE,EAAA,EAAAA,EAAAF,EAAA,GAAAE,EAAA,EAAAF,EAAA,GAOAo5C,UAAA,SAAAzrB,GACA,IAYA37B,EAAAwhD,EAZAp+B,EAAAhhB,KACAi4B,EAAAjX,EAAAiX,eACAgtB,EAAAjkC,EAAAlf,QAAAy3B,MAAAgnB,MACA2E,EAAA3rB,EAAAz7B,OACAqnD,GAAA,EACAC,EAAAH,EAAAI,cAGAC,EAAAtkC,EAAAukC,aAAAL,EAAA,GAEAM,EAAAvtB,EAAAjX,EAAA9e,OAAA8e,EAAA0/B,YAAA1/B,EAAA4/B,cAAA5/B,EAAA/e,QAAA+e,EAAA2/B,WAAA3/B,EAAAykC,eACA5nC,EAAA,GAaA,IAVAynC,EAAAE,IACAL,EAAA,EAAAt5C,KAAAkB,MAAAu4C,EAAAE,IAKAN,EAAAE,IACAD,EAAAt5C,KAAAC,IAAAq5C,EAAA,EAAAt5C,KAAAkB,MAAAm4C,EAAAE,KAGAxnD,EAAA,EAAiBA,EAAAsnD,EAAetnD,IAChCwhD,EAAA7lB,EAAA37B,GAEAunD,EAAA,GAAAvnD,EAAAunD,EAAA,UAEA/F,EAAA97C,MAGAua,EAAAgO,KAAAuzB,GAGA,OAAAvhC,GAMA0nC,UAAA,WACA,IAAAvkC,EAAAhhB,KACAi4B,EAAAjX,EAAAiX,eACAgtB,EAAAjkC,EAAAlf,QAAAy3B,MAAAgnB,MAEAmF,EAAA38B,GAAAm6B,UAAAliC,EAAA4hC,eACA10C,EAAArC,KAAAsoB,IAAAtoB,KAAAqC,IAAAw3C,IACAv3C,EAAAtC,KAAAsoB,IAAAtoB,KAAAsC,IAAAu3C,IACAhxB,EAAAuwB,EAAA5E,iBAAA,EACAr0C,EAAAgV,EAAAogC,kBAAA1sB,GAAA,EAEAiuB,EAAA55B,GAAAjnB,QAAAomB,WAAA+8B,GAEAh8C,EAAA+X,EAAAmgC,eAAAwB,EAAAl6B,WAAAiM,GAAA,EAEA,OAAAuD,EAAAhvB,EAAAiF,EAAAlC,EAAAmC,EAAAnC,EAAAkC,EAAAjF,EAAAkF,EAAAlF,EAAAkF,EAAAnC,EAAAkC,EAAAjF,EAAAiF,EAAAlC,EAAAmC,GAMAk1C,WAAA,WACA,IAGAzlD,EAAAoiB,EAAAkN,EAFA7I,EADArkB,KACAqkB,MACApe,EAFAjG,KAEA8B,QAAAmE,QAGA,YAAAA,EACA,QAAAA,EAIA,IAAArI,EAAA,EAAAoiB,EAAAqE,EAAA9hB,KAAAE,SAAA3E,OAAoDF,EAAAoiB,IAAUpiB,EAC9D,GAAAymB,EAAAwU,iBAAAj7B,MACAsvB,EAAA7I,EAAAqJ,eAAA9vB,IAEAyvB,UAdArtB,KAcAiF,IAAAioB,EAAAM,UAdAxtB,KAcAiF,IACA,SAKA,UAOAkqB,KAAA,SAAAwF,GACA,IAAA3T,EAAAhhB,KACA8B,EAAAkf,EAAAlf,QAEA,GAAAkf,EAAAqiC,aAAA,CAIA,IA6BAsC,EAAAC,EAAAC,EA7BAxhC,EAAArD,EAAAqD,MACAyE,EAAA9H,EAAAsD,IACA6D,EAAAN,GAAAO,OACAb,EAAAY,EAAAZ,iBACA09B,EAAAnjD,EAAAy3B,MAAAgnB,MACAuF,EAAAhkD,EAAAy3B,MAAAinB,OAAAyE,EACA/tB,EAAAp1B,EAAAo1B,UACA6oB,EAAAj+C,EAAAi+C,WACA75C,EAAApE,EAAAoE,SACA6/C,EAAA,IAAA/kC,EAAA4hC,cACAoD,EAAAf,EAAA9E,OACAloB,EAAAjX,EAAAiX,eACAqrB,EAAAv6B,GAAAjnB,QAAAomB,WACAqR,EAAA0rB,EAAAh/C,SAAAg/C,EAAA7E,SAAAp/B,EAAAgkC,UAAAhkC,EAAAwY,YAAAxY,EAAAwY,WACAysB,EAAAhH,GAAAgG,EAAAiB,UAAA3+B,GACAo7B,EAAAW,EAAA2B,GACAx8B,EAAAk6B,EAAAl6B,WACA09B,EAAAlH,GAAA6G,EAAAI,UAAA3+B,GACA6+B,EAAA9C,EAAAwC,GACA/B,EAAAkB,EAAAvwB,QACA4rB,EAAA2E,EAAA3E,YACA+F,EAAAnvB,EAAAuoB,UAAAvoB,EAAAwoB,eAAA,EACA4G,EAAArH,GAAAc,EAAAmG,UAAA3+B,GACAi8B,EAAAF,EAAAvD,GACA0D,EAAA16B,GAAAjnB,QAAAmmB,UAAA83B,EAAArrB,SACA6xB,EAAAx9B,GAAAm6B,UAAAliC,EAAA4hC,eACA4D,EAAA,GACAC,EAAAvvB,EAAAqoB,WAAAlgC,GAAA6X,EAAAzE,UAAA,OACAi0B,EAAA39B,GAAA49B,YAoLA,GAjLA,QAAAzgD,GACAy/C,EAAAe,EAAAriC,EAAArD,EAAA6D,OAAA4hC,GACAb,EAAA5kC,EAAA6D,OAAAwhC,EACAR,EAAAF,EAAAc,EAAA,GACO,WAAAvgD,GACPy/C,EAAAe,EAAAriC,EAAArD,EAAA2D,IAAA8hC,GACAb,EAAAD,EAAAc,EAAA,EACAZ,EAAA7kC,EAAA2D,IAAA0hC,GACO,SAAAngD,GACPy/C,EAAAe,EAAAriC,EAAArD,EAAA4D,MAAA6hC,GACAb,EAAA5kC,EAAA4D,MAAAyhC,EACAR,EAAAF,EAAAc,EAAA,IAEAd,EAAAe,EAAAriC,EAAArD,EAAA0D,KAAA+hC,GACAb,EAAAD,EAAAc,EAAA,EACAZ,EAAA7kC,EAAA0D,KAAA2hC,GAKAt9B,GAAAtJ,KAAA8Z,EAAA,SAAA6lB,EAAA/gC,GAEA,IAAA0K,GAAApK,cAAAygC,EAAA97C,OAAA,CAIA,IACAmvB,EAAAm0B,EAAA7zB,EAAAC,EAgBA6zB,EAAAC,EAAAC,EAAAC,EAAAjyB,EAAAE,EAAAD,EAAApnB,EAAAq5C,EAAAC,EAAAC,EAAA5P,EAjBAj0C,EAAA87C,EAAA97C,MAGA+a,IAAA2C,EAAAomC,eAAAtlD,EAAAm1B,SAAAC,EAAAC,iBAEA1E,EAAAyE,EAAAyoB,cACAiH,EAAA1vB,EAAA0oB,cACA7sB,EAAAmE,EAAA2oB,oBAAA,GACA7sB,EAAAkE,EAAA4oB,0BAAA,IAEArtB,EAAApT,GAAA6X,EAAAzE,UAAApU,GACAuoC,EAAAvnC,GAAA6X,EAAAooB,MAAAjhC,GACA0U,EAAAmE,EAAAnE,YAAA,GACAC,EAAAkE,EAAAlE,kBAAA,GAKA,IAAAyd,EAAA1nB,GAAAnK,QAAAtb,KAAAxF,OAAA,EACAupD,EA5qBA,SAAAhtC,EAAAgE,EAAA8Y,GACA,IAAAkwB,EAAAhtC,EAAAof,gBAAApb,GAYA,OAVA8Y,IACA,IAAA9c,EAAAmf,WAAA17B,OACAupD,GAAAhtC,EAAA4d,eAAApsB,KAAAC,IAAAu7C,EAAAhtC,EAAAqK,KAAArK,EAAAuK,MAAAyiC,GAAAx7C,KAAAC,IAAAu7C,EAAAhtC,EAAAsK,IAAAtK,EAAAwK,OAAAwiC,GAEAA,GADO,IAAAhpC,GACPhE,EAAAof,gBAAA,GAAA4tB,GAAA,GAEAA,EAAAhtC,EAAAof,gBAAApb,EAAA,OAIAgpC,EA+pBAC,CAAAtmC,EAAA3C,EAAA6Y,EAAAC,iBAEA,GAAAc,EAAA,CACA,IAAAsvB,EAAAlB,EAAAtC,EAEAsD,EAAArmC,EAAA0D,KAhCA,OAiCAkiC,EAAA,iBAGAC,EAAAE,EAAAhyB,EAAAC,EAAA0xB,EAAAriC,EAAAgjC,EAAA50B,GACAq0B,EAAAlB,EACAoB,EAAAnB,EACAoB,EAAAjmC,EAAAyY,gBAAApb,GAAAiiC,EAEA,QAAAp6C,GACA+uB,EAAAyxB,EAAAriC,EAAAsQ,EAAAhQ,IAAA8hC,KAAA,EACA74C,EAAA+mB,EAAA9P,OACAsiC,IAAApB,EAAA,MAAAtV,GAAAhoB,EACA8uB,EAAAwO,EAAA,gBACAmB,EAAAlmC,EAAA6D,OAAA0iC,IAEAtyB,EAAAN,EAAAhQ,IACA/W,EAAA84C,EAAAriC,EAAAsQ,EAAA9P,OAAA4hC,KAAA,EACAU,GAAApB,EAAA,MAAAt9B,EACA8uB,EAAAwO,EAAA,iBACAmB,EAAAlmC,EAAA2D,IAAA4iC,OAES,CACT,IAAAC,GAAAxB,EAAA,EAAAK,GAAAtC,EAEAsD,EAAArmC,EAAA2D,IAzDA,OA0DAiiC,EAAA,iBAGAC,EAAAjB,EACAmB,EAAAlB,EACAiB,EAAAE,EAAA/xB,EAAArnB,EAAA84C,EAAAriC,EAAAgjC,EAAA50B,GACAy0B,EAAAlmC,EAAAyY,gBAAApb,GAAAiiC,EACA6G,GAAA,EAAA1W,GAAAhoB,EAAA,EAEA,SAAAviB,GACA6uB,EAAA2xB,EAAAriC,EAAAsQ,EAAAjQ,KAAA+hC,KAAA,EACAzxB,EAAAL,EAAA/P,MACA2yB,EAAAyO,EAAA,eACAiB,EAAAjmC,EAAA4D,MAAA4iC,IAEAzyB,EAAAJ,EAAAjQ,KACAsQ,EAAA0xB,EAAAriC,EAAAsQ,EAAA/P,MAAA6hC,KAAA,EACAlP,EAAAyO,EAAA,eACAiB,EAAAjmC,EAAA0D,KAAA8iC,GAIAhB,EAAA36B,KAAA,CACAg7B,MACAC,MACAC,MACAC,MACAjyB,KACAE,KACAD,KACApnB,KACAq5C,SACAC,SACAO,QAAAh1B,EACAi1B,QAAAd,EACAe,aAAA50B,EACA60B,mBAAA50B,EACA5N,UAAA,EAAAmhC,EACAjjD,QACAk9C,MAAApB,EAAAoB,MACA2G,aACA5P,iBAIAxuB,GAAAtJ,KAAA+mC,EAAA,SAAAqB,GACA,IAAAJ,EAAAI,EAAAJ,QACAC,EAAAG,EAAAH,QA4BA,GA1BAxwB,EAAAjxB,SAAAwhD,GAAAC,IACA5+B,EAAA3C,OACA2C,EAAA2J,UAAAg1B,EACA3+B,EAAA6J,YAAA+0B,EAEA5+B,EAAA8K,cACA9K,EAAA8K,YAAAi0B,EAAAF,cACA7+B,EAAA+K,eAAAg0B,EAAAD,oBAGA9+B,EAAApD,YAEAwR,EAAAuoB,YACA32B,EAAAhE,OAAA+iC,EAAAhB,IAAAgB,EAAAf,KACAh+B,EAAAnD,OAAAkiC,EAAAd,IAAAc,EAAAb,MAGA9vB,EAAAsoB,kBACA12B,EAAAhE,OAAA+iC,EAAA9yB,GAAA8yB,EAAA5yB,IACAnM,EAAAnD,OAAAkiC,EAAA7yB,GAAA6yB,EAAAj6C,KAGAkb,EAAAhD,SACAgD,EAAAxC,WAGA2+B,EAAAh/C,QAAA,CAEA6iB,EAAA3C,OACA2C,EAAAg/B,UAAAD,EAAAZ,OAAAY,EAAAX,QACAp+B,EAAA1L,OAAAyqC,EAAAziC,UACA0D,EAAAR,KAAAu/B,EAAArH,MAAA4F,EAAAptC,OAAA2pC,EAAA3pC,OACA8P,EAAA0J,UAAAq1B,EAAArH,MAAA2F,EAAAF,EACAn9B,EAAA0uB,aAAA,SACA1uB,EAAAyuB,UAAAsQ,EAAAtQ,UACA,IAAAj0C,EAAAukD,EAAAvkD,MACAiJ,EAAAs7C,EAAAV,WAEA,GAAAp+B,GAAAnK,QAAAtb,GACA,QAAA1F,EAAA,EAA2BA,EAAA0F,EAAAxF,SAAkBF,EAE7CkrB,EAAA2uB,SAAA,GAAAn0C,EAAA1F,GAAA,EAAA2O,GACAA,GAAAkc,OAGAK,EAAA2uB,SAAAn0C,EAAA,EAAAiJ,GAGAuc,EAAAxC,aAIAy5B,EAAA95C,QAAA,CAEA,IAAA8hD,EACAC,EACA5iC,EAAA,EACA6iC,EAAAzE,EAAA/6B,WAAA,EAEA,GAAAwP,EACA8vB,EAAA/mC,EAAA0D,MAAA1D,EAAA4D,MAAA5D,EAAA0D,MAAA,EAEAsjC,EAAA,WAAA9hD,EAAA8a,EAAA6D,OAAAojC,EAAAxE,EAAA5+B,OAAA7D,EAAA2D,IAAAsjC,EAAAxE,EAAA9+B,QACS,CACT,IAAAujC,EAAA,SAAAhiD,EACA6hD,EAAAG,EAAAlnC,EAAA0D,KAAAujC,EAAAxE,EAAA9+B,IAAA3D,EAAA4D,MAAAqjC,EAAAxE,EAAA9+B,IACAqjC,EAAAhnC,EAAA2D,KAAA3D,EAAA6D,OAAA7D,EAAA2D,KAAA,EACAS,EAAA8iC,GAAA,GAAAr8C,KAAAkC,GAAA,GAAAlC,KAAAkC,GAGA+a,EAAA3C,OACA2C,EAAAg/B,UAAAC,EAAAC,GACAl/B,EAAA1L,OAAAgI,GACA0D,EAAAyuB,UAAA,SACAzuB,EAAA0uB,aAAA,SACA1uB,EAAA0J,UAAA8zB,EAEAx9B,EAAAR,KAAAk7B,EAAAxqC,OACA8P,EAAA2uB,SAAAsI,EAAAC,YAAA,KACAl3B,EAAAxC,UAGA,GAAAmgC,EAAA,CAEA,IAEA1xB,EAAAC,EAAAC,EAAArnB,EAFAu6C,EAAA1B,EACA2B,EAAA/oC,GAAA6X,EAAAzE,UAAA8G,EAAAz7B,OAAA,KAGAm6B,GACAlD,EAAA2xB,EAAAriC,EAAArD,EAAA0D,KAAAyjC,KAAA,EACAnzB,EAAA0xB,EAAAriC,EAAArD,EAAA4D,MAAAwjC,KAAA,EACAnzB,EAAArnB,EAAA+3C,IAEA1wB,EAAAyxB,EAAAriC,EAAArD,EAAA2D,IAAAwjC,KAAA,EACAv6C,EAAA84C,EAAAriC,EAAArD,EAAA6D,OAAAujC,KAAA,EACArzB,EAAAC,EAAA2wB,GAGA78B,EAAA2J,UAAAg0B,EACA39B,EAAA6J,YAAAtT,GAAA6X,EAAAooB,MAAA,GACAx2B,EAAApD,YACAoD,EAAAhE,OAAAiQ,EAAAE,GACAnM,EAAAnD,OAAAqP,EAAApnB,GACAkb,EAAAhD,cAOAuiC,GAAA5H,GAAA7/B,OAAA,CAMA0nC,UAAA,WACA,IAAA/lD,EAAAvC,KAAAqkB,MAAA9hB,KACA,OAAAvC,KAAA8B,QAAA+1B,SAAA73B,KAAAi4B,eAAA11B,EAAAgmD,QAAAhmD,EAAAimD,UAAAjmD,EAAAs1B,QAEA6pB,oBAAA,WACA,IAIA11B,EAJAhL,EAAAhhB,KACA63B,EAAA7W,EAAAsnC,YACAtnC,EAAAynC,SAAA,EACAznC,EAAA0nC,SAAA7wB,EAAA/5B,OAAA,OAGAqD,IAAA6f,EAAAlf,QAAAy3B,MAAA3tB,MAEAogB,EAAA6L,EAAAt5B,QAAAyiB,EAAAlf,QAAAy3B,MAAA3tB,KACAoV,EAAAynC,UAAA,IAAAz8B,IAAAhL,EAAAynC,eAGAtnD,IAAA6f,EAAAlf,QAAAy3B,MAAAztB,MAEAkgB,EAAA6L,EAAAt5B,QAAAyiB,EAAAlf,QAAAy3B,MAAAztB,KACAkV,EAAA0nC,UAAA,IAAA18B,IAAAhL,EAAA0nC,UAGA1nC,EAAApV,IAAAisB,EAAA7W,EAAAynC,UACAznC,EAAAlV,IAAA+rB,EAAA7W,EAAA0nC,WAEA7G,WAAA,WACA,IAAA7gC,EAAAhhB,KACA63B,EAAA7W,EAAAsnC,YAEAtnC,EAAAuY,MAAA,IAAAvY,EAAAynC,UAAAznC,EAAA0nC,WAAA7wB,EAAA/5B,OAAA,EAAA+5B,IAAAhgB,MAAAmJ,EAAAynC,SAAAznC,EAAA0nC,SAAA,IAEAvW,iBAAA,SAAA9zB,EAAAuO,GACA,IAAA5L,EAAAhhB,KACAqkB,EAAArD,EAAAqD,MAEA,OAAAA,EAAAqJ,eAAAd,GAAAmN,WAAAlM,qBAAA7M,EAAA/b,GACA+b,EAAA6Y,cAAAxV,EAAA9hB,KAAAE,SAAAmqB,GAAArqB,KAAA8b,IAGA2C,EAAAuY,MAAAlb,EAAA2C,EAAAynC,WAGAtvB,iBAAA,SAAA/5B,EAAAif,GACA,IAMAsqC,EANA3nC,EAAAhhB,KACAi3B,EAAAjW,EAAAlf,QAAAm1B,OAEA2xB,EAAA/8C,KAAAC,IAAAkV,EAAA0nC,SAAA,EAAA1nC,EAAAynC,UAAAxxB,EAAA,QASA,QAJA91B,IAAA/B,GAAA,OAAAA,IACAupD,EAAA3nC,EAAAiX,eAAA74B,EAAAkN,EAAAlN,EAAAmN,QAGApL,IAAAwnD,QAAAxnD,IAAA/B,GAAAkb,MAAA+D,GAAA,CACA,IAAAwZ,EAAA7W,EAAAsnC,YACAlpD,EAAAupD,GAAAvpD,EACA,IAAA0uC,EAAAjW,EAAAt5B,QAAAa,GACAif,GAAA,IAAAyvB,IAAAzvB,EAGA,GAAA2C,EAAAiX,eAAA,CACA,IAAA4wB,EAAA7nC,EAAA9e,MAAA0mD,EACAE,EAAAD,GAAAxqC,EAAA2C,EAAAynC,UAMA,OAJAxxB,IACA6xB,GAAAD,EAAA,GAGA7nC,EAAA0D,KAAAokC,EAGA,IAAAC,EAAA/nC,EAAA/e,OAAA2mD,EACAI,EAAAD,GAAA1qC,EAAA2C,EAAAynC,UAMA,OAJAxxB,IACA+xB,GAAAD,EAAA,GAGA/nC,EAAA2D,IAAAqkC,GAEAvvB,gBAAA,SAAApb,GACA,OAAAre,KAAAm5B,iBAAAn5B,KAAAu5B,MAAAlb,KAAAre,KAAAyoD,SAAA,OAEAjE,iBAAA,SAAAE,GACA,IAAA1jC,EAAAhhB,KACAi3B,EAAAjW,EAAAlf,QAAAm1B,OAEA2xB,EAAA/8C,KAAAC,IAAAkV,EAAA8/B,OAAAhjD,QAAAm5B,EAAA,QACAgyB,EAAAjoC,EAAAiX,eACAixB,GAAAD,EAAAjoC,EAAA9e,MAAA8e,EAAA/e,QAAA2mD,EAaA,OAZAlE,GAAAuE,EAAAjoC,EAAA0D,KAAA1D,EAAA2D,IAEAsS,IACAytB,GAAAwE,EAAA,IAGAxE,GAAA,EACA,EAEA74C,KAAAqM,MAAAwsC,EAAAwE,IAGAloC,EAAAynC,UAEAzwB,aAAA,WACA,OAAAh4B,KAAA6kB,UAIAskC,GAzHA,CACAjjD,SAAA,UAyHAmiD,GAAAc,aACA,IAAA1qC,GAAAsK,GAAAtK,KACAE,GAAAoK,GAAApK,cAgFAyqC,GAAA3I,GAAA7/B,OAAA,CACAiZ,cAAA,SAAAz6B,GACA,wBAAAA,GACAA,EAGAqhD,GAAAxiD,UAAA47B,cAAA17B,KAAA6B,KAAAZ,IAEAiqD,uBAAA,WACA,IAAAroC,EAAAhhB,KACA88B,EAAA9b,EAAAlf,QACA2gD,EAAA3lB,EAAAvD,MAIA,GAAAkpB,EAAA7hB,YAAA,CACA,IAAA0oB,EAAAvgC,GAAAwgC,KAAAvoC,EAAApV,KACA49C,EAAAzgC,GAAAwgC,KAAAvoC,EAAAlV,KAEAw9C,EAAA,GAAAE,EAAA,EAEAxoC,EAAAlV,IAAA,EACSw9C,EAAA,GAAAE,EAAA,IAETxoC,EAAApV,IAAA,GAIA,IAAA69C,OAAAtoD,IAAAshD,EAAA72C,UAAAzK,IAAAshD,EAAAiH,aACAC,OAAAxoD,IAAAshD,EAAA32C,UAAA3K,IAAAshD,EAAAmH,kBAEAzoD,IAAAshD,EAAA72C,IACAoV,EAAApV,IAAA62C,EAAA72C,SACOzK,IAAAshD,EAAAiH,eACP,OAAA1oC,EAAApV,IACAoV,EAAApV,IAAA62C,EAAAiH,aAEA1oC,EAAApV,IAAAC,KAAAD,IAAAoV,EAAApV,IAAA62C,EAAAiH,oBAIAvoD,IAAAshD,EAAA32C,IACAkV,EAAAlV,IAAA22C,EAAA32C,SACO3K,IAAAshD,EAAAmH,eACP,OAAA5oC,EAAAlV,IACAkV,EAAAlV,IAAA22C,EAAAmH,aAEA5oC,EAAAlV,IAAAD,KAAAC,IAAAkV,EAAAlV,IAAA22C,EAAAmH,eAIAH,IAAAE,GAKA3oC,EAAApV,KAAAoV,EAAAlV,MACA29C,EACAzoC,EAAAlV,IAAAkV,EAAApV,IAAA,EAEAoV,EAAApV,IAAAoV,EAAAlV,IAAA,GAKAkV,EAAApV,MAAAoV,EAAAlV,MACAkV,EAAAlV,MAEA22C,EAAA7hB,aACA5f,EAAApV,QAIAi+C,aAAA,WACA,IAIAzE,EAHA3C,EADAziD,KACA8B,QAAAy3B,MACAuwB,EAAArH,EAAAqH,SACAzE,EAAA5C,EAAA4C,cAcA,OAXAyE,EACA1E,EAAAv5C,KAAAk+C,KAPA/pD,KAOA8L,IAAAg+C,GAAAj+C,KAAAkB,MAPA/M,KAOA4L,IAAAk+C,GAAA,GAEA1E,EATAplD,KASAgqD,oBACA3E,KAAA,IAGAA,IACAD,EAAAv5C,KAAAD,IAAAy5C,EAAAD,IAGAA,GAEA4E,kBAAA,WACA,OAAA9qC,OAAAgkB,mBAEA+mB,yBAAAxrC,GACAojC,WAAA,WACA,IAAA7gC,EAAAhhB,KACA88B,EAAA9b,EAAAlf,QACA2gD,EAAA3lB,EAAAvD,MAKA6rB,EAAApkC,EAAA6oC,eAEAK,EAAA,CACA9E,SAFAA,EAAAv5C,KAAAC,IAAA,EAAAs5C,GAGAx5C,IAAA62C,EAAA72C,IACAE,IAAA22C,EAAA32C,IACAq+C,UAAA1H,EAAA0H,UACAL,SAAA/gC,GAAA5J,eAAAsjC,EAAA2H,cAAA3H,EAAAqH,WAEAvwB,EAAAvY,EAAAuY,MA1LA,SAAA8wB,EAAAC,GACA,IAcAC,EAAAC,EAAAC,EAAAC,EAdAnxB,EAAA,GAKAuwB,EAAAO,EAAAP,SACAa,EAAAb,GAAA,EACAc,EAAAP,EAAAjF,SAAA,EACAx5C,EAAAy+C,EAAAz+C,IACAE,EAAAu+C,EAAAv+C,IACAq+C,EAAAE,EAAAF,UACAU,EAAAP,EAAA1+C,IACAk/C,EAAAR,EAAAx+C,IACAi/C,EAAAhiC,GAAAiiC,SAAAF,EAAAD,GAAAD,EAAAD,KAIA,GAAAI,EAbA,OAaApsC,GAAA/S,IAAA+S,GAAA7S,GACA,OAAA++C,EAAAC,IAGAJ,EAAA7+C,KAAAk+C,KAAAe,EAAAC,GAAAl/C,KAAAkB,MAAA89C,EAAAE,IAEAH,IAEAG,EAAAhiC,GAAAiiC,QAAAN,EAAAK,EAAAH,EAAAD,MAGAb,GAAAnrC,GAAAwrC,GAEAI,EAAA1+C,KAAAQ,IAAA,GAAA0c,GAAAkiC,eAAAF,KAGAR,EAAA1+C,KAAAQ,IAAA,GAAA89C,GACAY,EAAAl/C,KAAAk+C,KAAAgB,EAAAR,MAGAC,EAAA3+C,KAAAkB,MAAA89C,EAAAE,KACAN,EAAA5+C,KAAAk+C,KAAAe,EAAAC,KAEAjB,KAEAnrC,GAAA/S,IAAAmd,GAAAmiC,YAAAt/C,EAAAm/C,IAAA,OACAP,EAAA5+C,IAGA+S,GAAA7S,IAAAid,GAAAmiC,YAAAp/C,EAAAi/C,IAAA,OACAN,EAAA3+C,IAIA4+C,GAAAD,EAAAD,GAAAO,EAGAL,EADA3hC,GAAAoiC,aAAAT,EAAA7+C,KAAAqM,MAAAwyC,GAAAK,EAAA,KACAl/C,KAAAqM,MAAAwyC,GAEA7+C,KAAAk+C,KAAAW,GAGAF,EAAA3+C,KAAAqM,MAAAsyC,EAAAD,KACAE,EAAA5+C,KAAAqM,MAAAuyC,EAAAF,KACAhxB,EAAA1N,KAAAlN,GAAA/S,GAAA4+C,EAAA5+C,GAEA,QAAAixB,EAAA,EAAmBA,EAAA6tB,IAAe7tB,EAClCtD,EAAA1N,KAAAhgB,KAAAqM,OAAAsyC,EAAA3tB,EAAAkuB,GAAAR,MAIA,OADAhxB,EAAA1N,KAAAlN,GAAA7S,GAAA2+C,EAAA3+C,GACAytB,EAqHA6xB,CAAAlB,EAAAlpC,GACAA,EAAAipC,2BAGAjpC,EAAAlV,IAAAid,GAAAjd,IAAAytB,GACAvY,EAAApV,IAAAmd,GAAAnd,IAAA2tB,GAEAkpB,EAAA9iC,SACA4Z,EAAA5Z,UACAqB,EAAA6I,MAAA7I,EAAAlV,IACAkV,EAAAiY,IAAAjY,EAAApV,MAEAoV,EAAA6I,MAAA7I,EAAApV,IACAoV,EAAAiY,IAAAjY,EAAAlV,MAGAk2C,qBAAA,WACA,IAAAhhC,EAAAhhB,KACAghB,EAAAqqC,eAAArqC,EAAAuY,MAAA1hB,QACAmJ,EAAAomC,cAAApmC,EAAAuY,MAAAh7B,QAAA,GACAkiD,GAAAxiD,UAAA+jD,qBAAA7jD,KAAA6iB,MAGAsqC,GAAA,CACAplD,SAAA,OACAqzB,MAAA,CACAja,SAAA8+B,GAAAC,WAAAz8B,SAGA2pC,GAAAnC,GAAAxoC,OAAA,CACA8gC,oBAAA,WACA,IAAA1gC,EAAAhhB,KACA88B,EAAA9b,EAAAlf,QACAuiB,EAAArD,EAAAqD,MACA9hB,EAAA8hB,EAAA9hB,KACAE,EAAAF,EAAAE,SACAw1B,EAAAjX,EAAAiX,eAIA,SAAAuzB,EAAAt+B,GACA,OAAA+K,EAAA/K,EAAAG,UAAArM,EAAA/b,GAAAioB,EAAAM,UAAAxM,EAAA/b,GAIA+b,EAAApV,IAAA,KACAoV,EAAAlV,IAAA,KACA,IAAA2/C,EAAA3uB,EAAAnE,QAgBA,QAdAx3B,IAAAsqD,GACA1iC,GAAAtJ,KAAAhd,EAAA,SAAAY,EAAAupB,GACA,IAAA6+B,EAAA,CAIA,IAAAv+B,EAAA7I,EAAAqJ,eAAAd,GAEAvI,EAAAwU,iBAAAjM,IAAA4+B,EAAAt+B,SAAA/rB,IAAA+rB,EAAAmK,QACAo0B,GAAA,MAKA3uB,EAAAnE,SAAA8yB,EAAA,CACA,IAAAC,EAAA,GACA3iC,GAAAtJ,KAAAhd,EAAA,SAAAY,EAAAupB,GACA,IAAAM,EAAA7I,EAAAqJ,eAAAd,GACA5uB,EAAA,CAAAkvB,EAAArrB,UACAV,IAAA27B,EAAAnE,cAAAx3B,IAAA+rB,EAAAmK,MAAAzK,EAAA,GAAAM,EAAAmK,OAAA0E,KAAA,UAEA56B,IAAAuqD,EAAA1tD,KACA0tD,EAAA1tD,GAAA,CACA2tD,eAAA,GACAC,eAAA,KAKA,IAAAD,EAAAD,EAAA1tD,GAAA2tD,eACAC,EAAAF,EAAA1tD,GAAA4tD,eAEAvnC,EAAAwU,iBAAAjM,IAAA4+B,EAAAt+B,IACAnE,GAAAtJ,KAAApc,EAAAd,KAAA,SAAAgiD,EAAAlmC,GACA,IAAAjf,GAAA4hB,EAAA6Y,cAAA0qB,GAEAjqC,MAAAlb,IAAA8tB,EAAA3qB,KAAA8b,GAAAgL,SAIAsiC,EAAAttC,GAAAstC,EAAAttC,IAAA,EACAutC,EAAAvtC,GAAAutC,EAAAvtC,IAAA,EAEAye,EAAA+uB,eACAF,EAAAttC,GAAA,IACejf,EAAA,EACfwsD,EAAAvtC,IAAAjf,EAEAusD,EAAAttC,IAAAjf,OAKA2pB,GAAAtJ,KAAAisC,EAAA,SAAAI,GACA,IAAAjnD,EAAAinD,EAAAH,eAAArrD,OAAAwrD,EAAAF,gBACAG,EAAAhjC,GAAAnd,IAAA/G,GACAmnD,EAAAjjC,GAAAjd,IAAAjH,GACAmc,EAAApV,IAAA,OAAAoV,EAAApV,IAAAmgD,EAAAlgD,KAAAD,IAAAoV,EAAApV,IAAAmgD,GACA/qC,EAAAlV,IAAA,OAAAkV,EAAAlV,IAAAkgD,EAAAngD,KAAAC,IAAAkV,EAAAlV,IAAAkgD,UAGAjjC,GAAAtJ,KAAAhd,EAAA,SAAAY,EAAAupB,GACA,IAAAM,EAAA7I,EAAAqJ,eAAAd,GAEAvI,EAAAwU,iBAAAjM,IAAA4+B,EAAAt+B,IACAnE,GAAAtJ,KAAApc,EAAAd,KAAA,SAAAgiD,EAAAlmC,GACA,IAAAjf,GAAA4hB,EAAA6Y,cAAA0qB,GAEAjqC,MAAAlb,IAAA8tB,EAAA3qB,KAAA8b,GAAAgL,SAIA,OAAArI,EAAApV,IACAoV,EAAApV,IAAAxM,EACeA,EAAA4hB,EAAApV,MACfoV,EAAApV,IAAAxM,GAGA,OAAA4hB,EAAAlV,IACAkV,EAAAlV,IAAA1M,EACeA,EAAA4hB,EAAAlV,MACfkV,EAAAlV,IAAA1M,QAOA4hB,EAAApV,IAAAmT,SAAAiC,EAAApV,OAAA0O,MAAA0G,EAAApV,KAAAoV,EAAApV,IApGA,EAqGAoV,EAAAlV,IAAAiT,SAAAiC,EAAAlV,OAAAwO,MAAA0G,EAAAlV,KAAAkV,EAAAlV,IApGA,EAsGA9L,KAAAqpD,0BAGAW,kBAAA,WACA,IACArH,EAEA,OAHA3iD,KAGAi4B,eACApsB,KAAAk+C,KAJA/pD,KAIAkC,MAAA,KAGAygD,EAAA55B,GAAAjnB,QAAAomB,WAPAloB,KAOA8B,QAAAy3B,OACA1tB,KAAAk+C,KARA/pD,KAQAiC,OAAA0gD,EAAAl6B,cAGAwhC,yBAAA,WACAjqD,KAAAi4B,gBAEAj4B,KAAAu5B,MAAA5Z,WAGAwyB,iBAAA,SAAA9zB,EAAAuO,GACA,OAAA5sB,KAAA65B,cAAA75B,KAAAqkB,MAAA9hB,KAAAE,SAAAmqB,GAAArqB,KAAA8b,KAGA8a,iBAAA,SAAA/5B,GAGA,IAAA4hB,EAAAhhB,KACA6pB,EAAA7I,EAAA6I,MACAiW,GAAA9e,EAAA6Y,cAAAz6B,GAEA46B,EAAAhZ,EAAAiY,IAAApP,EAQA,OANA7I,EAAAiX,eACAjX,EAAA0D,KAAA1D,EAAA9e,MAAA83B,GAAA8F,EAAAjW,GAEA7I,EAAA6D,OAAA7D,EAAA/e,OAAA+3B,GAAA8F,EAAAjW,IAKA26B,iBAAA,SAAAE,GACA,IAAA1jC,EAAAhhB,KACAi4B,EAAAjX,EAAAiX,eACAg0B,EAAAh0B,EAAAjX,EAAA9e,MAAA8e,EAAA/e,OACAg1B,GAAAgB,EAAAysB,EAAA1jC,EAAA0D,KAAA1D,EAAA6D,OAAA6/B,GAAAuH,EACA,OAAAjrC,EAAA6I,OAAA7I,EAAAiY,IAAAjY,EAAA6I,OAAAoN,GAEAwC,gBAAA,SAAApb,GACA,OAAAre,KAAAm5B,iBAAAn5B,KAAAqrD,eAAAhtC,OAIA6tC,GAAAZ,GACAC,GAAApC,UAAA+C,GACA,IAAAC,GAAApjC,GAAA5J,eA6CAitC,GAAA,CACAlmD,SAAA,OAEAqzB,MAAA,CACAja,SAAA8+B,GAAAC,WAAAU,cAIA,SAAAsN,GAAAjtD,EAAAggB,GACA,OAAA2J,GAAAhK,SAAA3f,OAAA,EAAAA,EAAAggB,EAGA,IAAAktC,GAAA7L,GAAA7/B,OAAA,CACA8gC,oBAAA,WACA,IAAA1gC,EAAAhhB,KACA88B,EAAA9b,EAAAlf,QACAuiB,EAAArD,EAAAqD,MACA9hB,EAAA8hB,EAAA9hB,KACAE,EAAAF,EAAAE,SACAw1B,EAAAjX,EAAAiX,eAEA,SAAAuzB,EAAAt+B,GACA,OAAA+K,EAAA/K,EAAAG,UAAArM,EAAA/b,GAAAioB,EAAAM,UAAAxM,EAAA/b,GAIA+b,EAAApV,IAAA,KACAoV,EAAAlV,IAAA,KACAkV,EAAAurC,WAAA,KACA,IAAAd,EAAA3uB,EAAAnE,QAgBA,QAdAx3B,IAAAsqD,GACA1iC,GAAAtJ,KAAAhd,EAAA,SAAAY,EAAAupB,GACA,IAAA6+B,EAAA,CAIA,IAAAv+B,EAAA7I,EAAAqJ,eAAAd,GAEAvI,EAAAwU,iBAAAjM,IAAA4+B,EAAAt+B,SAAA/rB,IAAA+rB,EAAAmK,QACAo0B,GAAA,MAKA3uB,EAAAnE,SAAA8yB,EAAA,CACA,IAAAC,EAAA,GACA3iC,GAAAtJ,KAAAhd,EAAA,SAAAY,EAAAupB,GACA,IAAAM,EAAA7I,EAAAqJ,eAAAd,GACA5uB,EAAA,CAAAkvB,EAAArrB,UACAV,IAAA27B,EAAAnE,cAAAx3B,IAAA+rB,EAAAmK,MAAAzK,EAAA,GAAAM,EAAAmK,OAAA0E,KAAA,KAEA1X,EAAAwU,iBAAAjM,IAAA4+B,EAAAt+B,UACA/rB,IAAAuqD,EAAA1tD,KACA0tD,EAAA1tD,GAAA,IAGA+qB,GAAAtJ,KAAApc,EAAAd,KAAA,SAAAgiD,EAAAlmC,GACA,IAAAxZ,EAAA6mD,EAAA1tD,GACAoB,GAAA4hB,EAAA6Y,cAAA0qB,GAEAjqC,MAAAlb,IAAA8tB,EAAA3qB,KAAA8b,GAAAgL,QAAAjqB,EAAA,IAIAyF,EAAAwZ,GAAAxZ,EAAAwZ,IAAA,EACAxZ,EAAAwZ,IAAAjf,QAIA2pB,GAAAtJ,KAAAisC,EAAA,SAAAI,GACA,GAAAA,EAAAhuD,OAAA,GACA,IAAAiuD,EAAAhjC,GAAAnd,IAAAkgD,GACAE,EAAAjjC,GAAAjd,IAAAggD,GACA9qC,EAAApV,IAAA,OAAAoV,EAAApV,IAAAmgD,EAAAlgD,KAAAD,IAAAoV,EAAApV,IAAAmgD,GACA/qC,EAAAlV,IAAA,OAAAkV,EAAAlV,IAAAkgD,EAAAngD,KAAAC,IAAAkV,EAAAlV,IAAAkgD,WAIAjjC,GAAAtJ,KAAAhd,EAAA,SAAAY,EAAAupB,GACA,IAAAM,EAAA7I,EAAAqJ,eAAAd,GAEAvI,EAAAwU,iBAAAjM,IAAA4+B,EAAAt+B,IACAnE,GAAAtJ,KAAApc,EAAAd,KAAA,SAAAgiD,EAAAlmC,GACA,IAAAjf,GAAA4hB,EAAA6Y,cAAA0qB,GAEAjqC,MAAAlb,IAAA8tB,EAAA3qB,KAAA8b,GAAAgL,QAAAjqB,EAAA,IAIA,OAAA4hB,EAAApV,IACAoV,EAAApV,IAAAxM,EACeA,EAAA4hB,EAAApV,MACfoV,EAAApV,IAAAxM,GAGA,OAAA4hB,EAAAlV,IACAkV,EAAAlV,IAAA1M,EACeA,EAAA4hB,EAAAlV,MACfkV,EAAAlV,IAAA1M,GAGA,IAAAA,IAAA,OAAA4hB,EAAAurC,YAAAntD,EAAA4hB,EAAAurC,cACAvrC,EAAAurC,WAAAntD,QAQAY,KAAAqpD,0BAEAA,uBAAA,WACA,IAAAroC,EAAAhhB,KACAyiD,EAAAzhC,EAAAlf,QAAAy3B,MAGAvY,EAAApV,IAAAygD,GAAA5J,EAAA72C,IAAAoV,EAAApV,KACAoV,EAAAlV,IAAAugD,GAAA5J,EAAA32C,IAAAkV,EAAAlV,KAEAkV,EAAApV,MAAAoV,EAAAlV,MACA,IAAAkV,EAAApV,KAAA,OAAAoV,EAAApV,KACAoV,EAAApV,IAAAC,KAAAQ,IAAA,GAAAR,KAAAkB,MAAAgc,GAAAy1B,MAAAx9B,EAAApV,MAAA,GACAoV,EAAAlV,IAAAD,KAAAQ,IAAA,GAAAR,KAAAkB,MAAAgc,GAAAy1B,MAAAx9B,EAAAlV,MAAA,KAEAkV,EAAApV,IAVA,EAWAoV,EAAAlV,IAVA,KAcA,OAAAkV,EAAApV,MACAoV,EAAApV,IAAAC,KAAAQ,IAAA,GAAAR,KAAAkB,MAAAgc,GAAAy1B,MAAAx9B,EAAAlV,MAAA,IAGA,OAAAkV,EAAAlV,MACAkV,EAAAlV,IAAA,IAAAkV,EAAApV,IAAAC,KAAAQ,IAAA,GAAAR,KAAAkB,MAAAgc,GAAAy1B,MAAAx9B,EAAApV,MAAA,GAnBA,IAsBA,OAAAoV,EAAAurC,aACAvrC,EAAApV,IAAA,EACAoV,EAAAurC,WAAAvrC,EAAApV,IACSoV,EAAAlV,IAAA,EACTkV,EAAAurC,WAAA1gD,KAAAQ,IAAA,GAAAR,KAAAkB,MAAAgc,GAAAy1B,MAAAx9B,EAAAlV,OAEAkV,EAAAurC,WA7BA,IAiCA1K,WAAA,WACA,IAAA7gC,EAAAhhB,KACAyiD,EAAAzhC,EAAAlf,QAAAy3B,MACA5Z,GAAAqB,EAAAiX,eACAoyB,EAAA,CACAz+C,IAAAygD,GAAA5J,EAAA72C,KACAE,IAAAugD,GAAA5J,EAAA32C,MAEAytB,EAAAvY,EAAAuY,MAlMA,SAAA8wB,EAAAC,GACA,IAIAkC,EAAAC,EAJAlzB,EAAA,GACAmzB,EAAAP,GAAA9B,EAAAz+C,IAAAC,KAAAQ,IAAA,GAAAR,KAAAkB,MAAAgc,GAAAy1B,MAAA8L,EAAA1+C,QACA+gD,EAAA9gD,KAAAkB,MAAAgc,GAAAy1B,MAAA8L,EAAAx+C,MACA8gD,EAAA/gD,KAAAk+C,KAAAO,EAAAx+C,IAAAD,KAAAQ,IAAA,GAAAsgD,IAGA,IAAAD,GACAF,EAAA3gD,KAAAkB,MAAAgc,GAAAy1B,MAAA8L,EAAAiC,aACAE,EAAA5gD,KAAAkB,MAAAu9C,EAAAiC,WAAA1gD,KAAAQ,IAAA,GAAAmgD,IACAjzB,EAAA1N,KAAA6gC,GACAA,EAAAD,EAAA5gD,KAAAQ,IAAA,GAAAmgD,KAEAA,EAAA3gD,KAAAkB,MAAAgc,GAAAy1B,MAAAkO,IACAD,EAAA5gD,KAAAkB,MAAA2/C,EAAA7gD,KAAAQ,IAAA,GAAAmgD,KAGA,IAAArC,EAAAqC,EAAA,EAAA3gD,KAAAQ,IAAA,GAAAR,KAAAsoB,IAAAq4B,IAAA,EAEA,GACAjzB,EAAA1N,KAAA6gC,GAGA,OAFAD,IAGAA,EAAA,EAEAtC,IADAqC,GACA,IAAArC,GAGAuC,EAAA7gD,KAAAqM,MAAAu0C,EAAA5gD,KAAAQ,IAAA,GAAAmgD,GAAArC,WACKqC,EAAAG,GAAAH,IAAAG,GAAAF,EAAAG,GAEL,IAAAC,EAAAV,GAAA9B,EAAAv+C,IAAA4gD,GAEA,OADAnzB,EAAA1N,KAAAghC,GACAtzB,EAgKAuzB,CAAAzC,EAAArpC,GAGAA,EAAAlV,IAAAid,GAAAjd,IAAAytB,GACAvY,EAAApV,IAAAmd,GAAAnd,IAAA2tB,GAEAkpB,EAAA9iC,SACAA,KACAqB,EAAA6I,MAAA7I,EAAAlV,IACAkV,EAAAiY,IAAAjY,EAAApV,MAEAoV,EAAA6I,MAAA7I,EAAApV,IACAoV,EAAAiY,IAAAjY,EAAAlV,KAGA6T,GACA4Z,EAAA5Z,WAGAqiC,qBAAA,WACAhiD,KAAA+sD,WAAA/sD,KAAAu5B,MAAA1hB,QACA4oC,GAAAxiD,UAAA+jD,qBAAA7jD,KAAA6B,OAGAmyC,iBAAA,SAAA9zB,EAAAuO,GACA,OAAA5sB,KAAA65B,cAAA75B,KAAAqkB,MAAA9hB,KAAAE,SAAAmqB,GAAArqB,KAAA8b,KAEAob,gBAAA,SAAApb,GACA,OAAAre,KAAAm5B,iBAAAn5B,KAAA+sD,WAAA1uC,KASA2uC,mBAAA,SAAA5tD,GACA,IAAAotD,EAAA3gD,KAAAkB,MAAAgc,GAAAy1B,MAAAp/C,IACAqtD,EAAA5gD,KAAAkB,MAAA3N,EAAAyM,KAAAQ,IAAA,GAAAmgD,IACA,OAAAC,EAAA5gD,KAAAQ,IAAA,GAAAmgD,IAEArzB,iBAAA,SAAA/5B,GACA,IAQA6sD,EAAAvH,EAAA76B,EAAAoP,EAAAswB,EARAvoC,EAAAhhB,KACAyiD,EAAAzhC,EAAAlf,QAAAy3B,MACA5Z,EAAA8iC,EAAA9iC,QACA6+B,EAAAz1B,GAAAy1B,MAEAyO,EAAAjsC,EAAAgsC,mBAAAhsC,EAAAurC,YAEAt1B,EAAA,EAuCA,OArCA73B,GAAA4hB,EAAA6Y,cAAAz6B,GAEAugB,GACAkK,EAAA7I,EAAAiY,IACAA,EAAAjY,EAAA6I,MACA0/B,GAAA,IAEA1/B,EAAA7I,EAAA6I,MACAoP,EAAAjY,EAAAiY,IACAswB,EAAA,GAGAvoC,EAAAiX,gBACAg0B,EAAAjrC,EAAA9e,MACAwiD,EAAA/kC,EAAAqB,EAAA4D,MAAA5D,EAAA0D,OAEAunC,EAAAjrC,EAAA/e,OACAsnD,IAAA,EAEA7E,EAAA/kC,EAAAqB,EAAA2D,IAAA3D,EAAA6D,QAGAzlB,IAAAyqB,IACA,IAAAA,IAEAoN,EAAAk1B,GAAA1J,EAAAp6B,SAAAR,GAAAO,OAAAX,iBACAwkC,GAAAh1B,EACApN,EAAAojC,GAGA,IAAA7tD,IACA63B,GAAAg1B,GAAAzN,EAAAvlB,GAAAulB,EAAA30B,KAAA20B,EAAAp/C,GAAAo/C,EAAA30B,KAGA66B,GAAA6E,EAAAtyB,GAGAytB,GAEAF,iBAAA,SAAAE,GACA,IAOAuH,EAAApiC,EAAAoP,EAAA75B,EAPA4hB,EAAAhhB,KACAyiD,EAAAzhC,EAAAlf,QAAAy3B,MACA5Z,EAAA8iC,EAAA9iC,QACA6+B,EAAAz1B,GAAAy1B,MAEAyO,EAAAjsC,EAAAgsC,mBAAAhsC,EAAAurC,YAoBA,GAhBA5sC,GACAkK,EAAA7I,EAAAiY,IACAA,EAAAjY,EAAA6I,QAEAA,EAAA7I,EAAA6I,MACAoP,EAAAjY,EAAAiY,KAGAjY,EAAAiX,gBACAg0B,EAAAjrC,EAAA9e,MACA9C,EAAAugB,EAAAqB,EAAA4D,MAAA8/B,IAAA1jC,EAAA0D,OAEAunC,EAAAjrC,EAAA/e,OACA7C,EAAAugB,EAAA+kC,EAAA1jC,EAAA2D,IAAA3D,EAAA6D,OAAA6/B,GAGAtlD,IAAAyqB,EAAA,CACA,OAAAA,EAAA,CAEA,IAAAoN,EAAAk1B,GAAA1J,EAAAp6B,SAAAR,GAAAO,OAAAX,iBACAroB,GAAA63B,EACAg1B,GAAAh1B,EACApN,EAAAojC,EAGA7tD,GAAAo/C,EAAAvlB,GAAAulB,EAAA30B,GACAzqB,GAAA6sD,EACA7sD,EAAAyM,KAAAQ,IAAA,GAAAmyC,EAAA30B,GAAAzqB,GAGA,OAAAA,KAIA8tD,GAAAd,GACAE,GAAAnD,UAAA+D,GACA,IAAAC,GAAApkC,GAAA5J,eACAiuC,GAAArkC,GAAA1J,sBACAguC,GAAAtkC,GAAAjnB,QAAA8mB,QACA0kC,GAAA,CACArnD,SAAA,EAEAsnD,SAAA,EACArnD,SAAA,YACAu6B,WAAA,CACAx6B,SAAA,EACAq5C,MAAA,qBACA7sB,UAAA,EACAM,WAAA,GACAC,iBAAA,GAEAkE,UAAA,CACAwJ,UAAA,GAGAnH,MAAA,CAEAi0B,mBAAA,EAEAC,cAAA,yBAEAC,iBAAA,EAEAC,iBAAA,EACAruC,SAAA8+B,GAAAC,WAAAz8B,QAEA+e,YAAA,CAEA16B,SAAA,EAEAoiB,SAAA,GAEA/I,SAAA,SAAAhc,GACA,OAAAA,KAKA,SAAAsqD,GAAAvzC,GACA,IAAAyiB,EAAAziB,EAAAvY,QACA,OAAAg7B,EAAA2D,WAAAx6B,SAAA62B,EAAA6D,YAAA16B,QAAAoU,EAAAgK,MAAA9hB,KAAAs1B,OAAA/5B,OAAA,EAGA,SAAA+vD,GAAA/wB,GACA,IAAA2lB,EAAA3lB,EAAAvD,MAEA,OAAAkpB,EAAAx8C,SAAA62B,EAAA72B,QACAknD,GAAA1K,EAAAp6B,SAAAR,GAAAO,OAAAX,iBAAA,EAAAg7B,EAAAiL,iBAGA,EAiBA,SAAAI,GAAAx8B,EAAA6b,EAAA5nB,EAAA3Z,EAAAE,GACA,OAAAwlB,IAAA1lB,GAAA0lB,IAAAxlB,EACA,CACA+d,MAAAsjB,EAAA5nB,EAAA,EACA0T,IAAAkU,EAAA5nB,EAAA,GAEK+L,EAAA1lB,GAAA0lB,EAAAxlB,EACL,CACA+d,MAAAsjB,EAAA5nB,EACA0T,IAAAkU,GAIA,CACAtjB,MAAAsjB,EACAlU,IAAAkU,EAAA5nB,GAoFA,SAAAwoC,GAAAz8B,GACA,WAAAA,GAAA,MAAAA,EACA,SACKA,EAAA,IACL,OAGA,QAGA,SAAAmmB,GAAAnzB,EAAAwX,EAAA51B,EAAAuiB,GACA,IACA7qB,EAAAoiB,EADAzT,EAAArG,EAAAqG,EAAAkc,EAAA,EAGA,GAAAM,GAAAnK,QAAAkd,GACA,IAAAl+B,EAAA,EAAAoiB,EAAA8b,EAAAh+B,OAAqCF,EAAAoiB,IAAUpiB,EAC/C0mB,EAAAmzB,SAAA3b,EAAAl+B,GAAAsI,EAAAoG,EAAAC,GACAA,GAAAkc,OAGAnE,EAAAmzB,SAAA3b,EAAA51B,EAAAoG,EAAAC,GAIA,SAAAyhD,GAAA18B,EAAA28B,EAAA/nD,GACA,KAAAorB,GAAA,MAAAA,EACAprB,EAAAqG,GAAA0hD,EAAAhlD,EAAA,GACKqoB,EAAA,KAAAA,EAAA,MACLprB,EAAAqG,GAAA0hD,EAAAhlD,GAkGA,SAAAilD,GAAAC,GACA,OAAAplC,GAAAuB,SAAA6jC,KAAA,EAGA,IAAAC,GAAAhF,GAAAxoC,OAAA,CACA2gC,cAAA,WACA,IAAAvgC,EAAAhhB,KAEAghB,EAAA9e,MAAA8e,EAAAggC,SACAhgC,EAAA/e,OAAA+e,EAAAigC,UACAjgC,EAAA2/B,WAAAkN,GAAA7sC,EAAAlf,SAAA,EACAkf,EAAAsgB,QAAAz1B,KAAAkB,MAAAiU,EAAA9e,MAAA,GACA8e,EAAAugB,QAAA11B,KAAAkB,OAAAiU,EAAA/e,OAAA+e,EAAA2/B,YAAA,GACA3/B,EAAAqtC,YAAAxiD,KAAAD,IAAAoV,EAAA/e,OAAA+e,EAAA2/B,WAAA3/B,EAAA9e,OAAA,GAEAw/C,oBAAA,WACA,IAAA1gC,EAAAhhB,KACAqkB,EAAArD,EAAAqD,MACAzY,EAAAsT,OAAAgkB,kBACAp3B,EAAAoT,OAAAovC,kBACAvlC,GAAAtJ,KAAA4E,EAAA9hB,KAAAE,SAAA,SAAAY,EAAAupB,GACA,GAAAvI,EAAAwU,iBAAAjM,GAAA,CACA,IAAAM,EAAA7I,EAAAqJ,eAAAd,GACA7D,GAAAtJ,KAAApc,EAAAd,KAAA,SAAAgiD,EAAAlmC,GACA,IAAAjf,GAAA4hB,EAAA6Y,cAAA0qB,GAEAjqC,MAAAlb,IAAA8tB,EAAA3qB,KAAA8b,GAAAgL,SAIAzd,EAAAC,KAAAD,IAAAxM,EAAAwM,GACAE,EAAAD,KAAAC,IAAA1M,EAAA0M,SAIAkV,EAAApV,QAAAsT,OAAAgkB,kBAAA,EAAAt3B,EACAoV,EAAAlV,QAAAoT,OAAAovC,kBAAA,EAAAxiD,EAEAkV,EAAAqoC,0BAGAW,kBAAA,WACA,OAAAn+C,KAAAk+C,KAAA/pD,KAAAquD,YAAAR,GAAA7tD,KAAA8B,WAEAkgD,qBAAA,WACA,IAAAhhC,EAAAhhB,KACAopD,GAAAnrD,UAAA+jD,qBAAA7jD,KAAA6iB,GAEAA,EAAA2f,YAAA3f,EAAAqD,MAAA9hB,KAAAs1B,OAAAn1B,IAAAse,EAAAlf,QAAA6+B,YAAArhB,SAAA0B,IAEAmxB,iBAAA,SAAA9zB,EAAAuO,GACA,OAAA5sB,KAAA65B,cAAA75B,KAAAqkB,MAAA9hB,KAAAE,SAAAmqB,GAAArqB,KAAA8b,KAEAikC,IAAA,WACA,IACAxlB,EADA98B,KACA8B,QAEAg7B,EAAA72B,SAAA62B,EAAA6D,YAAA16B,QAnQA,SAAAoU,GA0BA,IAWAzc,EAAAqwD,EAAAjsB,EAXAusB,EAAAxlC,GAAAjnB,QAAAomB,WAAA7N,EAAAvY,QAAA6+B,aAIA6tB,EAAA,CACArlD,EAAA,EACAsC,EAAA4O,EAAAnY,MACAiL,EAAA,EACAxB,EAAA0O,EAAApY,OAAAoY,EAAAsmC,YAEA8N,EAAA,GAEAp0C,EAAAiK,IAAAgE,KAAAimC,EAAAv1C,OACAqB,EAAAq0C,iBAAA,GACA,IA7EApqC,EAAAmE,EAAAnlB,EA6EAqrD,EAAAf,GAAAvzC,GAEA,IAAAzc,EAAA,EAAeA,EAAA+wD,EAAgB/wD,IAAA,CAC/BokC,EAAA3nB,EAAAu0C,iBAAAhxD,EAAAyc,EAAAg0C,YAAA,GAhFA/pC,EAiFAjK,EAAAiK,IAjFAmE,EAiFA8lC,EAAA9lC,WAjFAnlB,EAiFA+W,EAAAsmB,YAAA/iC,IAAA,GAAAqwD,EAhFAllC,GAAAnK,QAAAtb,GACA,CACA0I,EAAA+c,GAAAs2B,YAAA/6B,IAAAgE,KAAAhlB,GACA2F,EAAA3F,EAAAxF,OAAA2qB,GAIA,CACAzc,EAAAsY,EAAAyxB,YAAAzyC,GAAApB,MACA+G,EAAAwf,GAwEApO,EAAAq0C,iBAAA9wD,GAAAqwD,EAEA,IAAAhL,EAAA5oC,EAAAw0C,cAAAjxD,GACA0zB,EAAAvI,GAAA+lC,UAAA7L,GAAA,IACA8L,EAAAjB,GAAAx8B,EAAA0Q,EAAA11B,EAAA2hD,EAAAjiD,EAAA,OACAgjD,EAAAlB,GAAAx8B,EAAA0Q,EAAAz1B,EAAA0hD,EAAAhlD,EAAA,QAEA8lD,EAAAllC,MAAA2kC,EAAArlD,IACAqlD,EAAArlD,EAAA4lD,EAAAllC,MACA4kC,EAAAtlD,EAAA85C,GAGA8L,EAAA91B,IAAAu1B,EAAA/iD,IACA+iD,EAAA/iD,EAAAsjD,EAAA91B,IACAw1B,EAAAhjD,EAAAw3C,GAGA+L,EAAAnlC,MAAA2kC,EAAArhD,IACAqhD,EAAArhD,EAAA6hD,EAAAnlC,MACA4kC,EAAAthD,EAAA81C,GAGA+L,EAAA/1B,IAAAu1B,EAAA7iD,IACA6iD,EAAA7iD,EAAAqjD,EAAA/1B,IACAw1B,EAAA9iD,EAAAs3C,GAIA5oC,EAAA40C,cAAA50C,EAAAg0C,YAAAG,EAAAC,GA2LAS,CAJAlvD,WAMAmvD,eAAA,UAQAF,cAAA,SAAAG,EAAAZ,EAAAC,GACA,IAAAztC,EAAAhhB,KACAqvD,EAAAb,EAAArlD,EAAA0C,KAAAsC,IAAAsgD,EAAAtlD,GACAmmD,EAAAzjD,KAAAC,IAAA0iD,EAAA/iD,EAAAuV,EAAA9e,MAAA,GAAA2J,KAAAsC,IAAAsgD,EAAAhjD,GACA8jD,GAAAf,EAAArhD,EAAAtB,KAAAqC,IAAAugD,EAAAthD,GACAqiD,GAAA3jD,KAAAC,IAAA0iD,EAAA7iD,GAAAqV,EAAA/e,OAAA+e,EAAA2/B,YAAA,GAAA90C,KAAAqC,IAAAugD,EAAA9iD,GACA0jD,EAAAnB,GAAAmB,GACAC,EAAApB,GAAAoB,GACAC,EAAArB,GAAAqB,GACAC,EAAAtB,GAAAsB,GACAxuC,EAAAqtC,YAAAxiD,KAAAD,IAAAC,KAAAkB,MAAAqiD,GAAAC,EAAAC,GAAA,GAAAzjD,KAAAkB,MAAAqiD,GAAAG,EAAAC,GAAA,IACAxuC,EAAAmuC,eAAAE,EAAAC,EAAAC,EAAAC,IAEAL,eAAA,SAAAM,EAAAC,EAAAC,EAAAC,GACA,IAAA5uC,EAAAhhB,KACA6vD,EAAA7uC,EAAA9e,MAAAwtD,EAAA1uC,EAAAqtC,YACAyB,EAAAL,EAAAzuC,EAAAqtC,YACA0B,EAAAJ,EAAA3uC,EAAAqtC,YACA2B,EAAAhvC,EAAA/e,OAAA+e,EAAA2/B,WAAAiP,EAAA5uC,EAAAqtC,YACArtC,EAAAsgB,QAAAz1B,KAAAkB,OAAA+iD,EAAAD,GAAA,EAAA7uC,EAAA0D,MACA1D,EAAAugB,QAAA11B,KAAAkB,OAAAgjD,EAAAC,GAAA,EAAAhvC,EAAA2D,IAAA3D,EAAA2/B,aAEAkO,cAAA,SAAAxwC,GACA,IAAA4xC,EAAA,EAAApkD,KAAAkC,GAAA6/C,GAAA5tD,MACAwxB,EAAAxxB,KAAAqkB,MAAAviB,SAAA9B,KAAAqkB,MAAAviB,QAAA0vB,WAAAxxB,KAAAqkB,MAAAviB,QAAA0vB,WAAA,EACA0+B,EAAA1+B,EAAA3lB,KAAAkC,GAAA,MAEA,OAAAsQ,EAAA4xC,EAAAC,GAEAzuB,8BAAA,SAAAriC,GACA,IAAA4hB,EAAAhhB,KAEA,UAAAZ,EACA,SAIA,IAAA+wD,EAAAnvC,EAAAqtC,aAAArtC,EAAAlV,IAAAkV,EAAApV,KAEA,OAAAoV,EAAAlf,QAAAy3B,MAAA5Z,SACAqB,EAAAlV,IAAA1M,GAAA+wD,GAGA/wD,EAAA4hB,EAAApV,KAAAukD,GAEAvB,iBAAA,SAAAvwC,EAAA+xC,GACA,IACAC,EADArwD,KACA6uD,cAAAxwC,GAAAxS,KAAAkC,GAAA,EACA,OACAzB,EAAAT,KAAAqC,IAAAmiD,GAAAD,EAHApwD,KAGAshC,QACA/0B,EAAAV,KAAAsC,IAAAkiD,GAAAD,EAJApwD,KAIAuhC,UAGAU,yBAAA,SAAA5jB,EAAAjf,GACA,OAAAY,KAAA4uD,iBAAAvwC,EAAAre,KAAAyhC,8BAAAriC,KAEAkxD,gBAAA,WACA,IACA1kD,EADA5L,KACA4L,IACAE,EAFA9L,KAEA8L,IACA,OAHA9L,KAGAiiC,yBAAA,EAHAjiC,KAGA4gC,YAAA,EAAAh1B,EAAA,GAAAE,EAAA,EAAAA,EAAAF,EAAA,GAAAE,EAAA,EAAAF,EAAA,IAEAujB,KAAA,WACA,IAAAnO,EAAAhhB,KACA88B,EAAA9b,EAAAlf,QACAshD,EAAAtmB,EAAA5F,UACAurB,EAAA3lB,EAAAvD,MAEA,GAAAuD,EAAA72B,QAAA,CACA,IAAAqe,EAAAtD,EAAAsD,IACAkN,EAAAxxB,KAAA6uD,cAAA,GAEAlM,EAAA55B,GAAAjnB,QAAAomB,WAAAu6B,IAEA3lB,EAAA2D,WAAAx6B,SAAA62B,EAAA6D,YAAA16B,UA5OA,SAAAoU,GACA,IAAAiK,EAAAjK,EAAAiK,IACAwY,EAAAziB,EAAAvY,QACAyuD,EAAAzzB,EAAA2D,WACA2iB,EAAAtmB,EAAA5F,UACAs5B,EAAA1zB,EAAA6D,YACAlO,EAAA06B,GAAAoD,EAAA99B,UAAA2wB,EAAA3wB,WACAm0B,EAAAuG,GAAAoD,EAAAjR,MAAA8D,EAAA9D,OACAmR,EAAA5C,GAAA/wB,GACAxY,EAAA6B,OACA7B,EAAAmO,YACAnO,EAAAqO,YAAAi0B,EAEAtiC,EAAAsP,cACAtP,EAAAsP,YAAAy5B,GAAA,CAAAkD,EAAAx9B,WAAAqwB,EAAArwB,WAAA,MACAzO,EAAAuP,eAAAw5B,GAAA,CAAAkD,EAAAv9B,iBAAAowB,EAAApwB,iBAAA,KAGA,IAAA09B,EAAAr2C,EAAAonB,8BAAA3E,EAAAvD,MAAA5Z,QAAAtF,EAAAzO,IAAAyO,EAAAvO,KAEAyiD,EAAAxlC,GAAAjnB,QAAAomB,WAAAsoC,GAEAlsC,EAAAgE,KAAAimC,EAAAv1C,OACAsL,EAAAkzB,aAAA,SAEA,QAAA55C,EAAAgwD,GAAAvzC,GAAA,EAA0Czc,GAAA,EAAQA,IAAA,CAClD,GAAA2yD,EAAAtqD,SAAAwsB,GAAAm0B,EAAA,CACA,IAAA+J,EAAAt2C,EAAAu0C,iBAAAhxD,EAAA8yD,GACApsC,EAAAoB,YACApB,EAAAQ,OAAAzK,EAAAinB,QAAAjnB,EAAAknB,SACAjd,EAAAqB,OAAAgrC,EAAArkD,EAAAqkD,EAAApkD,GACA+X,EAAAwB,SAGA,GAAA0qC,EAAAvqD,QAAA,CAEA,IAAA2qD,EAAA,IAAAhzD,EAAA6yD,EAAA,IACAI,EAAAx2C,EAAAu0C,iBAAAhxD,EAAA8yD,EAAAE,EAAA,GAEAE,EAAA1D,GAAAoD,EAAAtK,UAAAtoD,EAAAiqB,GAAAO,OAAAb,kBACAjD,EAAAkO,UAAAs+B,EACA,IAAA7N,EAAA5oC,EAAAw0C,cAAAjxD,GACA0zB,EAAAvI,GAAA+lC,UAAA7L,GACA3+B,EAAAizB,UAAAwW,GAAAz8B,GACA08B,GAAA18B,EAAAjX,EAAAq0C,iBAAA9wD,GAAAizD,GACApZ,GAAAnzB,EAAAjK,EAAAsmB,YAAA/iC,IAAA,GAAAizD,EAAAtC,EAAA9lC,aAIAnE,EAAAgC,UA4LAyqC,CAAA/vC,GAGA+H,GAAAtJ,KAAAuB,EAAAuY,MAAA,SAAAj2B,EAAA+a,GAEA,GAAAA,EAAA,GAAAokC,EAAA9iC,QAAA,CACA,IAAAqxC,EAAAhwC,EAAAygB,8BAAAzgB,EAAAqqC,eAAAhtC,IAMA,GAJA+kC,EAAAn9C,SAAA,IAAAoY,GAjMA,SAAAhE,EAAA+oC,EAAA3+B,EAAApG,GACA,IAKA2jB,EALA1d,EAAAjK,EAAAiK,IACAoc,EAAA0iB,EAAA1iB,SACAiuB,EAAAf,GAAAvzC,GACAusC,EAAAwG,GAAAhK,EAAA9D,MAAAjhC,EAAA,GACAoU,EAAA26B,GAAAhK,EAAA3wB,UAAApU,EAAA,GAGA,IAAAqiB,GAAAiuB,IAAA/H,GAAAn0B,EAAA,CAeA,GAXAnO,EAAA6B,OACA7B,EAAAqO,YAAAi0B,EACAtiC,EAAAmO,YAEAnO,EAAAsP,cACAtP,EAAAsP,YAAAwvB,EAAArwB,YAAA,IACAzO,EAAAuP,eAAAuvB,EAAApwB,kBAAA,GAGA1O,EAAAoB,YAEAgb,EAEApc,EAAAS,IAAA1K,EAAAinB,QAAAjnB,EAAAknB,QAAA9c,EAAA,IAAA5Y,KAAAkC,QACK,CAELi0B,EAAA3nB,EAAAu0C,iBAAA,EAAAnqC,GACAH,EAAAQ,OAAAkd,EAAA11B,EAAA01B,EAAAz1B,GAEA,QAAA3O,EAAA,EAAqBA,EAAA+wD,EAAgB/wD,IACrCokC,EAAA3nB,EAAAu0C,iBAAAhxD,EAAA6mB,GACAH,EAAAqB,OAAAqc,EAAA11B,EAAA01B,EAAAz1B,GAIA+X,EAAAU,YACAV,EAAAwB,SACAxB,EAAAgC,WA2JA2qC,CAAAjwC,EAAAoiC,EAAA4N,EAAA3yC,GAGAokC,EAAAx8C,QAAA,CACA,IAAAggD,EAAAkH,GAAA1K,EAAAyD,UAAAr+B,GAAAO,OAAAb,kBAMA,GALAjD,EAAAgE,KAAAq6B,EAAA3pC,OACAsL,EAAA6B,OACA7B,EAAAwjC,UAAA9mC,EAAAsgB,QAAAtgB,EAAAugB,SACAjd,EAAAlH,OAAAoU,GAEAixB,EAAA+K,kBAAA,CACA,IAAAzK,EAAAz+B,EAAAyxB,YAAAzyC,GAAApB,MACAoiB,EAAAkO,UAAAiwB,EAAAgL,cACAnpC,EAAAkS,UAAAusB,EAAA,EAAAN,EAAAkL,kBAAAqD,EAAArO,EAAAp9B,KAAA,EAAAk9B,EAAAiL,iBAAA3K,EAAA,EAAAN,EAAAkL,iBAAAhL,EAAAp9B,KAAA,EAAAk9B,EAAAiL,kBAGAppC,EAAAizB,UAAA,SACAjzB,EAAAkzB,aAAA,SACAlzB,EAAAkO,UAAAyzB,EACA3hC,EAAAmzB,SAAAn0C,EAAA,GAAA0tD,GACA1sC,EAAAgC,kBAQA4qC,GAAA5D,GACAc,GAAAjF,UAAA+H,GACA,IAAAC,GAAApoC,GAAA5J,eAEAiyC,GAAAlyC,OAAAmyC,mBAAA,iBACAC,GAAApyC,OAAAqyC,kBAAA,iBACAC,GAAA,CACAC,YAAA,CACAC,QAAA,EACAnsC,KAAA,EACAosC,MAAA,8BAEAC,OAAA,CACAF,QAAA,EACAnsC,KAAA,IACAosC,MAAA,kBAEAE,OAAA,CACAH,QAAA,EACAnsC,KAAA,IACAosC,MAAA,kBAEAG,KAAA,CACAJ,QAAA,EACAnsC,KAAA,KACAosC,MAAA,cAEAI,IAAA,CACAL,QAAA,EACAnsC,KAAA,MACAosC,MAAA,SAEAK,KAAA,CACAN,QAAA,EACAnsC,KAAA,OACAosC,MAAA,WAEAM,MAAA,CACAP,QAAA,EACAnsC,KAAA,OACAosC,MAAA,SAEAO,QAAA,CACAR,QAAA,EACAnsC,KAAA,OACAosC,MAAA,WAEAQ,KAAA,CACAT,QAAA,EACAnsC,KAAA,SAGA6sC,GAAA30D,OAAAa,KAAAkzD,IAEA,SAAAa,GAAAl1D,EAAAwO,GACA,OAAAxO,EAAAwO,EAGA,SAAA2mD,GAAA1uB,GACA,IAEAhmC,EAAAoiB,EAAAuB,EAFAgxC,EAAA,GACAC,EAAA,GAGA,IAAA50D,EAAA,EAAAoiB,EAAA4jB,EAAA9lC,OAAoCF,EAAAoiB,IAAUpiB,EAC9C2jB,EAAAqiB,EAAAhmC,GAEA20D,EAAAhxC,KACAgxC,EAAAhxC,IAAA,EACAixC,EAAA3mC,KAAAtK,IAIA,OAAAixC,EAuGA,SAAAC,GAAAC,EAAAC,EAAAryC,EAAAsyC,GACA,IAAA54B,EA3CA,SAAA04B,EAAA10D,EAAAoB,GAKA,IAJA,IAEAyzD,EAAAC,EAAAC,EAFAC,EAAA,EACAlmD,EAAA4lD,EAAA50D,OAAA,EAGAk1D,GAAA,GAAAA,GAAAlmD,GAAA,CAKA,GAHAgmD,EAAAJ,GADAG,EAAAG,EAAAlmD,GAAA,GACA,SACAimD,EAAAL,EAAAG,IAEAC,EAEA,OACAE,GAAA,KACAlmD,GAAAimD,GAEO,GAAAA,EAAA/0D,GAAAoB,EACP4zD,EAAAH,EAAA,MACO,MAAAC,EAAA90D,GAAAoB,GAGP,OACA4zD,GAAAF,EACAhmD,GAAAimD,GAJAjmD,EAAA+lD,EAAA,GAUA,OACAG,GAAAD,EACAjmD,GAAA,MAYAmmD,CAAAP,EAAAC,EAAAryC,GAEA+Y,EAAAW,EAAAg5B,GAAAh5B,EAAAltB,GAAAktB,EAAAg5B,GAAAN,IAAA50D,OAAA,GAAA40D,EAAA,GACAxuD,EAAA81B,EAAAg5B,GAAAh5B,EAAAltB,GAAAktB,EAAAltB,GAAA4lD,IAAA50D,OAAA,GAAA40D,EAAA,GACAQ,EAAAhvD,EAAAyuD,GAAAt5B,EAAAs5B,GACAplD,EAAA2lD,GAAA5yC,EAAA+Y,EAAAs5B,IAAAO,EAAA,EACAj8B,GAAA/yB,EAAA0uD,GAAAv5B,EAAAu5B,IAAArlD,EACA,OAAA8rB,EAAAu5B,GAAA37B,EAGA,SAAAk8B,GAAA94C,EAAA+4C,GACA,IAAAC,EAAAh5C,EAAAi5C,SACAxxD,EAAAuY,EAAAvY,QAAAyxD,KACAC,EAAA1xD,EAAA0xD,OACA7V,EAAA6V,GAAA1xD,EAAA67C,OACAv+C,EAAAg0D,EAWA,MATA,oBAAAI,IACAp0D,EAAAo0D,EAAAp0D,IAIA2pB,GAAAhK,SAAA3f,KACAA,EAAA,kBAAAu+C,EAAA0V,EAAA3V,MAAAt+C,EAAAu+C,GAAA0V,EAAA3V,MAAAt+C,IAGA,OAAAA,GACAA,GAKAo0D,GAAA,oBAAA7V,IACAv+C,EAAAu+C,EAAAyV,GAEArqC,GAAAhK,SAAA3f,KACAA,EAAAi0D,EAAA3V,MAAAt+C,KAIAA,GAGA,SAAAs+C,GAAArjC,EAAA+4C,GACA,GAAArqC,GAAApK,cAAAy0C,GACA,YAGA,IAAAtxD,EAAAuY,EAAAvY,QAAAyxD,KACAn0D,EAAA+zD,GAAA94C,IAAAwf,cAAAu5B,IAEA,cAAAh0D,EACAA,GAGA0C,EAAAoW,QACA9Y,GAAAib,EAAAi5C,SAAAzV,QAAAz+C,EAAA0C,EAAAoW,QAGA9Y,GAqEA,SAAAq0D,GAAA9I,GACA,QAAA/sD,EAAAw0D,GAAA7zD,QAAAosD,GAAA,EAAA3qC,EAAAoyC,GAAAt0D,OAA8DF,EAAAoiB,IAAUpiB,EACxE,GAAA4zD,GAAAY,GAAAx0D,IAAA8zD,OACA,OAAAU,GAAAx0D,GAYA,SAAA81D,GAAAr5C,EAAAzO,EAAAE,EAAA6nD,GACA,IAYAJ,EAZAF,EAAAh5C,EAAAi5C,SACAxxD,EAAAuY,EAAAvY,QACA8xD,EAAA9xD,EAAAyxD,KACAhT,EAAAqT,EAAAjJ,MAtDA,SAAAkJ,EAAAjoD,EAAAE,EAAA6nD,GACA,IACA/1D,EAAAk2D,EAAAvJ,EADAvqC,EAAAoyC,GAAAt0D,OAGA,IAAAF,EAAAw0D,GAAA7zD,QAAAs1D,GAAoCj2D,EAAAoiB,EAAA,IAAcpiB,EAIlD,GAHAk2D,EAAAtC,GAAAY,GAAAx0D,IACA2sD,EAAAuJ,EAAAnC,MAAAmC,EAAAnC,MAAAmC,EAAAnC,MAAA7zD,OAAA,GAAAwzD,GAEAwC,EAAApC,QAAA7lD,KAAAk+C,MAAAj+C,EAAAF,IAAA2+C,EAAAuJ,EAAAvuC,QAAAouC,EACA,OAAAvB,GAAAx0D,GAIA,OAAAw0D,GAAApyC,EAAA,GAyCA+zC,CAAAH,EAAAC,QAAAjoD,EAAAE,EAAA6nD,GACAnT,EAAAiT,GAAAlT,GACAuJ,EAAAqH,GAAAyC,EAAA9J,SAAA8J,EAAAI,cACAC,EAAA,SAAA1T,GAAAqT,EAAAM,WACAC,EAAAryD,EAAAy3B,MAAAinB,MAAArR,QACA2kB,EAAAtC,GAAAjR,GACA6T,EAAAxoD,EACA8sB,EAAA5sB,EACAytB,EAAA,GA+BA,IA5BAuwB,IACAA,EA5FA,SAAAl+C,EAAAE,EAAA6+C,EAAAgJ,GACA,IAIA/1D,EAAAoiB,EAAAuqC,EAJAvwB,EAAAluB,EAAAF,EACAkoD,EAAAtC,GAAA7G,GACA0J,EAAAP,EAAAvuC,KACAosC,EAAAmC,EAAAnC,MAGA,IAAAA,EACA,OAAA9lD,KAAAk+C,KAAA/vB,GAAA25B,EAAAU,IAGA,IAAAz2D,EAAA,EAAAoiB,EAAA2xC,EAAA7zD,OAAoCF,EAAAoiB,IACpCuqC,EAAAoH,EAAA/zD,KAEAiO,KAAAk+C,KAAA/vB,GAAAq6B,EAAA9J,KAAAoJ,MAH8C/1D,GAQ9C,OAAA2sD,EAyEA+J,CAAA1oD,EAAAE,EAAAy0C,EAAAoT,IAIAM,IACAG,GAAAf,EAAAxV,QAAAuW,EAAA,UAAAH,GACAv7B,GAAA26B,EAAAxV,QAAAnlB,EAAA,UAAAu7B,IAIAG,GAAAf,EAAAxV,QAAAuW,EAAAH,EAAA,MAAA1T,IACA7nB,GAAA26B,EAAAxV,QAAAnlB,EAAAu7B,EAAA,MAAA1T,IAEAz0C,IACA4sB,GAAA26B,EAAApoB,IAAAvS,EAAA,EAAA6nB,IAGAgT,EAAAa,EAEAD,GAAA3T,IAAAyT,IAAAL,EAAA17C,QAIAq7C,GAAAF,EAAAxV,QAAA0V,EAAA/S,GACA+S,GAAAF,EAAApoB,IAAAsoB,MAAAa,EAAAb,IAAAO,EAAAvuC,KAAAukC,MAAAvJ,IAGUgT,EAAA76B,EAAa66B,GAAAF,EAAApoB,IAAAsoB,EAAAzJ,EAAAvJ,GACvBhnB,EAAA1N,MAAA0nC,GAIA,OADAh6B,EAAA1N,MAAA0nC,GACAh6B,EA2DA,IAsDAg7B,GAAA9T,GAAA7/B,OAAA,CACAwI,WAAA,WACAppB,KAAAk7C,oBACAuF,GAAAxiD,UAAAmrB,WAAAjrB,KAAA6B,OAEAyE,OAAA,WACA,IACA3C,EADA9B,KACA8B,QACAyxD,EAAAzxD,EAAAyxD,OAAAzxD,EAAAyxD,KAAA,IACAF,EAHArzD,KAGAszD,SAAA,IAAApV,GAAAC,MAAAr8C,EAAA0yD,SAAAC,MAWA,OATAlB,EAAA5V,QACAp6C,QAAAmxD,KAAA,0EAOA3rC,GAAAtI,QAAA8yC,EAAAoB,eAAAtB,EAAA5V,WACAgD,GAAAxiD,UAAAwG,OAAApE,MAdAL,KAcAnC,YAMAg8B,cAAA,SAAA0qB,GAKA,OAJAA,QAAApjD,IAAAojD,EAAAp3C,IACAo3C,IAAAp3C,GAGAszC,GAAAxiD,UAAA47B,cAAA17B,KAAA6B,KAAAukD,IAEA7C,oBAAA,WACA,IAUA9jD,EAAAi/B,EAAA7c,EAAA4iB,EAAArgC,EAAAqyD,EAVA5zC,EAAAhhB,KACAqkB,EAAArD,EAAAqD,MACAgvC,EAAAryC,EAAAsyC,SACAM,EAAA5yC,EAAAlf,QAAAyxD,KACA5I,EAAAiJ,EAAAjJ,MAAA,MACA/+C,EAAA0lD,GACAxlD,EAAAslD,GACAyD,EAAA,GACApyD,EAAA,GACAo1B,EAAA,GAEAi9B,EAAAzwC,EAAA9hB,KAAAs1B,QAAA,GAEA,IAAAj6B,EAAA,EAAAoiB,EAAA80C,EAAAh3D,OAA2CF,EAAAoiB,IAAUpiB,EACrDi6B,EAAAhM,KAAA6xB,GAAA18B,EAAA8zC,EAAAl3D,KAIA,IAAAA,EAAA,EAAAoiB,GAAAqE,EAAA9hB,KAAAE,UAAA,IAAA3E,OAA4DF,EAAAoiB,IAAUpiB,EACtE,GAAAymB,EAAAwU,iBAAAj7B,GAGA,GAFA2E,EAAA8hB,EAAA9hB,KAAAE,SAAA7E,GAAA2E,KAEAwmB,GAAAjK,SAAAvc,EAAA,IAGA,IAFAE,EAAA7E,GAAA,GAEAi/B,EAAA,EAAA+F,EAAArgC,EAAAzE,OAA2C++B,EAAA+F,IAAU/F,EACrD+3B,EAAAlX,GAAA18B,EAAAze,EAAAs6B,IACAg4B,EAAAhpC,KAAA+oC,GACAnyD,EAAA7E,GAAAi/B,GAAA+3B,MAEW,CACX,IAAA/3B,EAAA,EAAA+F,EAAA/K,EAAA/5B,OAA6C++B,EAAA+F,IAAU/F,EACvDg4B,EAAAhpC,KAAAgM,EAAAgF,IAGAp6B,EAAA7E,GAAAi6B,EAAAhgB,MAAA,QAGApV,EAAA7E,GAAA,GAIAi6B,EAAA/5B,SAEA+5B,EAAAy6B,GAAAz6B,GAAA0M,KAAA8tB,IACAzmD,EAAAC,KAAAD,MAAAisB,EAAA,IACA/rB,EAAAD,KAAAC,MAAA+rB,IAAA/5B,OAAA,KAGA+2D,EAAA/2D,SACA+2D,EAAAvC,GAAAuC,GAAAtwB,KAAA8tB,IACAzmD,EAAAC,KAAAD,MAAAipD,EAAA,IACA/oD,EAAAD,KAAAC,MAAA+oD,IAAA/2D,OAAA,KAGA8N,EAAA8xC,GAAA18B,EAAA4yC,EAAAhoD,QACAE,EAAA4xC,GAAA18B,EAAA4yC,EAAA9nD,QAEAF,MAAA0lD,IAAA+B,EAAAxV,QAAAnyB,KAAAC,MAAAg/B,GAAA/+C,EACAE,MAAAslD,IAAAiC,EAAAvV,MAAApyB,KAAAC,MAAAg/B,GAAA,EAAA7+C,EAEAkV,EAAApV,IAAAC,KAAAD,MAAAE,GACAkV,EAAAlV,IAAAD,KAAAC,IAAAF,EAAA,EAAAE,GAEAkV,EAAA+zC,YAAA/zC,EAAAiX,eACAjX,EAAAg0C,OAAA,GACAh0C,EAAAi0C,YAAA,CACA1yD,KAAAsyD,EACApyD,WACAo1B,WAGAgqB,WAAA,WACA,IAOAjkD,EAAAoiB,EAAA40C,EAPA5zC,EAAAhhB,KACA4L,EAAAoV,EAAApV,IACAE,EAAAkV,EAAAlV,IACAhK,EAAAkf,EAAAlf,QACA8xD,EAAA9xD,EAAAyxD,KACAsB,EAAA,GACAt7B,EAAA,GAGA,OAAAz3B,EAAAy3B,MAAAx7B,QACA,WACA82D,EAAA7zC,EAAAi0C,YAAA1yD,KACA,MAEA,aACAsyD,EAAA7zC,EAAAi0C,YAAAp9B,OACA,MAEA,WACA,QACAg9B,EAAAnB,GAAA1yC,EAAApV,EAAAE,EAAAkV,EAAAk0C,iBAAAtpD,IAYA,IATA,UAAA9J,EAAAk0B,QAAA6+B,EAAA/2D,SACA8N,EAAAipD,EAAA,GACA/oD,EAAA+oD,IAAA/2D,OAAA,IAIA8N,EAAA8xC,GAAA18B,EAAA4yC,EAAAhoD,QACAE,EAAA4xC,GAAA18B,EAAA4yC,EAAA9nD,QAEAlO,EAAA,EAAAoiB,EAAA60C,EAAA/2D,OAA2CF,EAAAoiB,IAAUpiB,GACrDg3D,EAAAC,EAAAj3D,KAEAgO,GAAAgpD,GAAA9oD,GACAytB,EAAA1N,KAAA+oC,GAgBA,OAZA5zC,EAAApV,MACAoV,EAAAlV,MAEAkV,EAAAm0C,MAAAvB,EAAAjJ,MArVA,SAAAtwC,EAAAkf,EAAAs6B,EAAAjoD,EAAAE,GACA,IACAlO,EAAA+sD,EADA3qC,EAAAoyC,GAAAt0D,OAGA,IAAAF,EAAAoiB,EAAA,EAAsBpiB,GAAAw0D,GAAA7zD,QAAAs1D,GAA6Bj2D,IAGnD,GAFA+sD,EAAAyH,GAAAx0D,GAEA4zD,GAAA7G,GAAA+G,QAAAr3C,EAAAi5C,SAAA1V,KAAA9xC,EAAAF,EAAA++C,IAAApxB,EAAAz7B,OACA,OAAA6sD,EAIA,OAAAyH,GAAAyB,EAAAzB,GAAA7zD,QAAAs1D,GAAA,GAyUAuB,CAAAp0C,EAAAuY,EAAAq6B,EAAAC,QAAA7yC,EAAApV,IAAAoV,EAAAlV,KACAkV,EAAAq0C,WAAA5B,GAAAzyC,EAAAm0C,OACAn0C,EAAAg0C,OA7hBA,SAAAH,EAAAjpD,EAAAE,EAAAwpD,GACA,cAAAA,IAAAT,EAAA/2D,OACA,QACAy1D,KAAA3nD,EACAuhC,IAAA,GACO,CACPomB,KAAAznD,EACAqhC,IAAA,IAIA,IAEAvvC,EAAAoiB,EAAAqZ,EAAAC,EAAAp1B,EAFAwuD,EAAA,GACA9uB,EAAA,CAAAh4B,GAGA,IAAAhO,EAAA,EAAAoiB,EAAA60C,EAAA/2D,OAAyCF,EAAAoiB,IAAUpiB,GACnD07B,EAAAu7B,EAAAj3D,IAEAgO,GAAA0tB,EAAAxtB,GACA83B,EAAA/X,KAAAyN,GAMA,IAFAsK,EAAA/X,KAAA/f,GAEAlO,EAAA,EAAAoiB,EAAA4jB,EAAA9lC,OAAoCF,EAAAoiB,IAAUpiB,EAC9CsG,EAAA0/B,EAAAhmC,EAAA,GACAy7B,EAAAuK,EAAAhmC,EAAA,GACA07B,EAAAsK,EAAAhmC,QAEAuD,IAAAk4B,QAAAl4B,IAAA+C,GAAA2H,KAAAqM,OAAAhU,EAAAm1B,GAAA,KAAAC,GACAo5B,EAAA7mC,KAAA,CACA0nC,KAAAj6B,EACA6T,IAAAvvC,GAAAoiB,EAAA,KAKA,OAAA0yC,EAufA6C,CAAAv0C,EAAAi0C,YAAA1yD,KAAAqJ,EAAAE,EAAAhK,EAAAwzD,cACAt0C,EAAAw0C,SAhQA,SAAA9C,EAAAn5B,EAAA3tB,EAAAE,EAAAhK,GACA,IAEAsyD,EAAA17B,EAFA7O,EAAA,EACAoP,EAAA,EAyBA,OAtBAn3B,EAAAm1B,QAAAsC,EAAAz7B,SACAgE,EAAAyxD,KAAA3nD,MACAwoD,EAAA3B,GAAAC,EAAA,OAAAn5B,EAAA,UAGA1P,EADA,IAAA0P,EAAAz7B,OACA,EAAAs2D,GAEA3B,GAAAC,EAAA,OAAAn5B,EAAA,UAAA66B,GAAA,GAIAtyD,EAAAyxD,KAAAznD,MACA4sB,EAAA+5B,GAAAC,EAAA,OAAAn5B,IAAAz7B,OAAA,UAGAm7B,EADA,IAAAM,EAAAz7B,OACA46B,GAEAA,EAAA+5B,GAAAC,EAAA,OAAAn5B,IAAAz7B,OAAA,eAKA,CACA+rB,QACAoP,OAmOAw8B,CAAAz0C,EAAAg0C,OAAAz7B,EAAA3tB,EAAAE,EAAAhK,GAEAA,EAAAy3B,MAAA5Z,SACA4Z,EAAA5Z,UAlOA,SAAAtF,EAAAxV,EAAA6wD,GACA,IACA93D,EAAAoiB,EAAA5gB,EAAAohD,EADAjnB,EAAA,GAGA,IAAA37B,EAAA,EAAAoiB,EAAAnb,EAAA/G,OAAqCF,EAAAoiB,IAAUpiB,EAC/CwB,EAAAyF,EAAAjH,GACA4iD,IAAAkV,GAAAt2D,KAAAib,EAAAi5C,SAAAzV,QAAAz+C,EAAAs2D,GACAn8B,EAAA1N,KAAA,CACAzsB,QACAohD,UAIA,OAAAjnB,EAwNAo8B,CAAA30C,EAAAuY,EAAAvY,EAAAq0C,aAEAljB,iBAAA,SAAA9zB,EAAAuO,GACA,IAAA5L,EAAAhhB,KACAqzD,EAAAryC,EAAAsyC,SACA/wD,EAAAye,EAAAqD,MAAA9hB,KACAqxD,EAAA5yC,EAAAlf,QAAAyxD,KACAjwD,EAAAf,EAAAs1B,QAAAxZ,EAAA9b,EAAAs1B,OAAA/5B,OAAAyE,EAAAs1B,OAAAxZ,GAAA,GACAjf,EAAAmD,EAAAE,SAAAmqB,GAAArqB,KAAA8b,GAMA,OAJA0K,GAAAjK,SAAA1f,KACAkE,EAAA0d,EAAA6Y,cAAAz6B,IAGAw0D,EAAAgC,cACAvC,EAAA1V,OAAAwV,GAAAnyC,EAAA1d,GAAAswD,EAAAgC,eAGA,kBAAAtyD,EACAA,EAGA+vD,EAAA1V,OAAAwV,GAAAnyC,EAAA1d,GAAAswD,EAAAe,eAAAkB,WAOAC,mBAAA,SAAAvC,EAAAl1C,EAAAkb,EAAAokB,GACA,IACA0V,EADArzD,KACAszD,SACAxxD,EAFA9B,KAEA8B,QACA27C,EAAA37C,EAAAyxD,KAAAoB,eACAoB,EAAAtY,EAJAz9C,KAIAm1D,OACAO,EALA11D,KAKAq1D,WACAW,EAAAvY,EAAAiY,GACAO,GAAA5C,EAAAxV,QAAA0V,EAAAmC,GACAQ,EAAAp0D,EAAAy3B,MAAAinB,MACAA,EAAA0V,EAAA/mB,SAAAumB,GAAAM,GAAAzC,IAAA0C,EACA3yD,EAAA+vD,EAAA1V,OAAA4V,EAAA5V,IAAA6C,EAAAwV,EAAAD,IACAtT,EAAAjC,EAAA0V,EAAAp0D,EAAAy3B,MAAAgnB,MACA4V,EAAAhF,GAAA1O,EAAAnjC,SAAAmjC,EAAAC,cACA,OAAAyT,IAAA7yD,EAAA+a,EAAAkb,GAAAj2B,GAEA0+C,qBAAA,SAAAzoB,GACA,IACA37B,EAAAoiB,EADA6X,EAAA,GAGA,IAAAj6B,EAAA,EAAAoiB,EAAAuZ,EAAAz7B,OAAsCF,EAAAoiB,IAAUpiB,EAChDi6B,EAAAhM,KAAA7rB,KAAA81D,mBAAAv8B,EAAA37B,GAAAwB,MAAAxB,EAAA27B,IAGA,OAAA1B,GAMAu+B,kBAAA,SAAA7C,GACA,IAAAvyC,EAAAhhB,KACAq2D,EAAAr1C,EAAAlf,QAAAy3B,MAAA5Z,QACA4F,EAAAvE,EAAA+zC,YAAA/zC,EAAA9e,MAAA8e,EAAA/e,OACA4nB,EAAA7I,EAAA+zC,YAAAsB,EAAAr1C,EAAA4D,MAAA5D,EAAA0D,KAAA2xC,EAAAr1C,EAAA6D,OAAA7D,EAAA2D,IACAwoB,EAAAslB,GAAAzxC,EAAAg0C,OAAA,OAAAzB,EAAA,OACAt8B,EAAA1R,GAAAvE,EAAAw0C,SAAA3rC,MAAAsjB,IAAAnsB,EAAAw0C,SAAA3rC,MAAA,EAAA7I,EAAAw0C,SAAAv8B,KACA,OAAAo9B,EAAAxsC,EAAAoN,EAAApN,EAAAoN,GAEAkC,iBAAA,SAAA/5B,EAAAif,EAAAuO,GACA,IACA2mC,EAAA,KAUA,QARApyD,IAAAkd,QAAAld,IAAAyrB,IACA2mC,EAJAvzD,KAIAi1D,YAAAxyD,SAAAmqB,GAAAvO,IAGA,OAAAk1C,IACAA,EAAA7V,GARA19C,KAQAZ,IAGA,OAAAm0D,EACA,OAZAvzD,KAYAo2D,kBAAA7C,IAGA95B,gBAAA,SAAApb,GACA,IAAAkb,EAAAv5B,KAAAw5B,WACA,OAAAnb,GAAA,GAAAA,EAAAkb,EAAAz7B,OAAAkC,KAAAo2D,kBAAA78B,EAAAlb,GAAAjf,OAAA,MAEAolD,iBAAA,SAAAE,GACA,IAAA1jC,EAAAhhB,KACAulB,EAAAvE,EAAA+zC,YAAA/zC,EAAA9e,MAAA8e,EAAA/e,OACA4nB,EAAA7I,EAAA+zC,YAAA/zC,EAAA0D,KAAA1D,EAAA2D,IACAwoB,GAAA5nB,GAAAm/B,EAAA76B,GAAAtE,EAAA,IAAAvE,EAAAw0C,SAAA3rC,MAAA,EAAA7I,EAAAw0C,SAAA3rC,OAAA7I,EAAAw0C,SAAAv8B,IACAs6B,EAAAd,GAAAzxC,EAAAg0C,OAAA,MAAA7nB,EAAA,QAEA,OAAAnsB,EAAAsyC,SAAAvV,QAAAwV,IAOA+C,cAAA,SAAAhzD,GACA,IACAizD,EADAv2D,KACA8B,QAAAy3B,MACAi9B,EAFAx2D,KAEAskB,IAAAyxB,YAAAzyC,GAAApB,MACAovB,EAAAvI,GAAAm6B,UAAAqT,EAAArW,aACA2C,EAAAh3C,KAAAqC,IAAAojB,GACA0yB,EAAAn4C,KAAAsC,IAAAmjB,GACAmlC,EAAAtF,GAAAoF,EAAAluC,SAAAR,GAAAO,OAAAX,iBACA,OAAA+uC,EAAA3T,EAAA4T,EAAAzS,GAMAkR,iBAAA,SAAAwB,GACA,IAAA11C,EAAAhhB,KAEA29C,EAAA38B,EAAAlf,QAAAyxD,KAAAoB,eAAAlD,YACAkF,EAAA31C,EAAA80C,mBAAAY,EAAA,KAAA/Y,GACA6Y,EAAAx1C,EAAAs1C,cAAAK,GACAlS,EAAAzjC,EAAAiX,eAAAjX,EAAA9e,MAAA8e,EAAA/e,OACA0xD,EAAA9nD,KAAAkB,MAAA03C,EAAA+R,GACA,OAAA7C,EAAA,EAAAA,EAAA,KAIAiD,GArVA,CACA1wD,SAAA,SASAovD,aAAA,SASAt/B,OAAA,OACAw+B,SAAA,GACAjB,KAAA,CACAC,QAAA,EAEA7V,QAAA,EAEAgN,MAAA,EAEAzyC,OAAA,EAEA2+C,eAAA,EAEA3C,YAAA,EAEAL,QAAA,cACAc,eAAA,IAEAp7B,MAAA,CACA6mB,UAAA,EAUAriD,OAAA,OACAyiD,MAAA,CACArR,SAAA,KAoSAolB,GAAApL,UAAAyN,GACA,IAAAtpC,GAAA,CACAwpC,SAAAzO,GACAzmC,OAAA2pC,GACAxM,YAAAuN,GACAyK,aAAA3I,GACAmF,KAAAgB,IAEAyC,GAAA,CACAnB,SAAA,yBACApE,YAAA,gBACAG,OAAA,YACAC,OAAA,SACAC,KAAA,KACAC,IAAA,QACAC,KAAA,KACAC,MAAA,WACAC,QAAA,cACAC,KAAA,QAGAjU,GAAAC,MAAAH,SAAA,oBAAA71C,EAAA,CACA8uD,IAAA,SAEAxZ,QAAA,WACA,OAAAuZ,IAEAtZ,MAAA,SAAAt+C,EAAAu+C,GAOA,MANA,kBAAAv+C,GAAA,kBAAAu+C,EACAv+C,EAAA+I,EAAA/I,EAAAu+C,GACOv+C,aAAA+I,IACP/I,EAAA+I,EAAA/I,IAGAA,EAAA4b,UAAA5b,EAAA83D,UAAA,MAEAvZ,OAAA,SAAA4V,EAAA4D,GACA,OAAAhvD,EAAAorD,GAAA5V,OAAAwZ,IAEAlsB,IAAA,SAAAsoB,EAAA6D,EAAAzM,GACA,OAAAxiD,EAAAorD,GAAAtoB,IAAAmsB,EAAAzM,GAAAuM,WAEAtZ,KAAA,SAAA9xC,EAAAF,EAAA++C,GACA,OAAAxiD,EAAA8iB,SAAA9iB,EAAA2D,GAAA8xC,KAAAz1C,EAAAyD,KAAAyrD,GAAA1M,IAEA9M,QAAA,SAAA0V,EAAA5I,EAAAsJ,GAGA,OAFAV,EAAAprD,EAAAorD,GAEA,YAAA5I,EACA4I,EAAAW,WAAAD,GAAAiD,UAGA3D,EAAA1V,QAAA8M,GAAAuM,WAEApZ,MAAA,SAAAyV,EAAA5I,GACA,OAAAxiD,EAAAorD,GAAAzV,MAAA6M,GAAAuM,WAUAnZ,QAAA,SAAAwV,GACA,OAAAprD,EAAAorD,KAEG,IAEH1rC,GAAAT,KAAA,UACArlB,QAAA,CACAu1D,OAAA,CACAC,WAAA,MAKA,IAAAC,GAAA,CACAn0D,QAAA,SAAAtF,GACA,IAAAsgB,EAAAtgB,EAAA8nB,KACAxB,EAAAtmB,EAAAsmB,MACA6I,EAAA7I,EAAAqJ,eAAArP,GACAo5C,EAAAvqC,GAAA7I,EAAAwU,iBAAAxa,GACAiV,EAAAmkC,GAAAvqC,EAAA7pB,QAAAkwB,WAAA,GACAz1B,EAAAw1B,EAAAx1B,QAAA,EACA,OAAAA,EAAA,SAAAuG,EAAAzG,GACA,OAAAA,EAAAE,GAAAw1B,EAAA11B,GAAA2rB,OAAA,MADA,MAIAmuC,SAAA,SAAA35D,GACA,IAAA25D,EAAA35D,EAAA25D,SACAprD,EAAAorD,IAAAprD,EAAA,KACAC,EAAAmrD,IAAAnrD,EAAA,KACA,gBAAAlI,GACA,OACAiI,EAAA,OAAAA,EAAAjI,EAAAiI,IACAC,EAAA,OAAAA,EAAAlI,EAAAkI,QAMA,SAAAorD,GAAAruB,EAAAjrB,EAAA6R,GACA,IAEAvyB,EAFAisB,EAAA0f,EAAA9f,QAAA,GACA3D,EAAA+D,EAAA/D,KAOA,QAJA1kB,IAAA0kB,IACAA,IAAA+D,EAAA6F,kBAGA,IAAA5J,GAAA,OAAAA,EACA,SAGA,QAAAA,EACA,eAKA,GAFAloB,EAAAyc,WAAAyL,EAAA,IAEA9G,SAAAphB,IAAAkO,KAAAkB,MAAApP,OAKA,MAJA,MAAAkoB,EAAA,UAAAA,EAAA,KACAloB,EAAA0gB,EAAA1gB,KAGAA,IAAA0gB,GAAA1gB,EAAA,GAAAA,GAAAuyB,IAIAvyB,EAGA,OAAAkoB,GAEA,aACA,cAEA,UACA,YAEA,WACA,eAGA,aACA,YACA,UACA,OAAAA,EAGA,QACA,UAIA,SAAA+xC,GAAA75D,GACA,IAIA43B,EAJA/L,EAAA7rB,EAAAurC,GAAA9f,QAAA,GACAnP,EAAAtc,EAAAurC,GAAApK,QAAA,GACArZ,EAAA9nB,EAAA8nB,KACAloB,EAAA,KAGA,GAAAohB,SAAA8G,GACA,YAkBA,GAZA,UAAAA,EACAloB,OAAAwD,IAAAyoB,EAAAiuC,YAAAx9C,EAAAwK,OAAA+E,EAAAiuC,YACK,QAAAhyC,EACLloB,OAAAwD,IAAAyoB,EAAAkuC,SAAAz9C,EAAAsK,IAAAiF,EAAAkuC,cACK32D,IAAAyoB,EAAAmuC,UACLp6D,EAAAisB,EAAAmuC,UACK19C,EAAAi2C,gBACL3yD,EAAA0c,EAAAi2C,kBACKj2C,EAAA2d,eACLr6B,EAAA0c,EAAA2d,qBAGA72B,IAAAxD,GAAA,OAAAA,EAAA,CACA,QAAAwD,IAAAxD,EAAA2O,QAAAnL,IAAAxD,EAAA4O,EACA,OAAA5O,EAGA,GAAAorB,GAAAhK,SAAAphB,GAEA,OACA2O,GAFAqpB,EAAAtb,EAAA4d,gBAEAt6B,EAAA,KACA4O,EAAAopB,EAAA,KAAAh4B,GAKA,YAGA,SAAAq6D,GAAAt3C,EAAArC,EAAAk5C,GACA,IAGA55D,EAHAI,EAAA2iB,EAAArC,GACAwH,EAAA9nB,EAAA8nB,KACAoyC,EAAA,CAAA55C,GAGA,IAAAk5C,EACA,OAAA1xC,EAGA,UAAAA,IAAA,IAAAoyC,EAAA15D,QAAAsnB,IAAA,CACA,IAAA9G,SAAA8G,GACA,OAAAA,EAKA,KAFAloB,EAAA+iB,EAAAmF,IAGA,SAGA,GAAAloB,EAAA85D,QACA,OAAA5xC,EAGAoyC,EAAApsC,KAAAhG,GACAA,EAAAloB,EAAAkoB,KAGA,SAGA,SAAAqyC,GAAAn6D,GACA,IAAA8nB,EAAA9nB,EAAA8nB,KACAhkB,EAAA,UAEA,WAAAgkB,EACA,MAGA9G,SAAA8G,KACAhkB,EAAA,YAGA21D,GAAA31D,GAAA9D,IAGA,SAAAo6D,GAAA9zD,GACA,OAAAA,MAAA0vB,KAGA,SAAAqkC,GAAA9zC,EAAA+zC,EAAAC,EAAAC,EAAAC,GACA,IAAA56D,EAEA,GAAA26D,GAAAC,EAAA,CAOA,IAFAl0C,EAAAQ,OAAAuzC,EAAA,GAAA/rD,EAAA+rD,EAAA,GAAA9rD,GAEA3O,EAAA,EAAeA,EAAA26D,IAAU36D,EACzBmrB,GAAAE,OAAAtD,OAAArB,EAAA+zC,EAAAz6D,EAAA,GAAAy6D,EAAAz6D,IAMA,IAFA0mB,EAAAqB,OAAA2yC,EAAAE,EAAA,GAAAlsD,EAAAgsD,EAAAE,EAAA,GAAAjsD,GAEA3O,EAAA46D,EAAA,EAAsB56D,EAAA,IAAOA,EAC7BmrB,GAAAE,OAAAtD,OAAArB,EAAAg0C,EAAA16D,GAAA06D,EAAA16D,EAAA,QAgDA,IAAA66D,GAAA,CACAxzD,GAAA,SACAyzD,oBAAA,SAAAr0C,EAAAviB,GACA,IAGAorB,EAAAtvB,EAAA0rC,EAAAvrC,EAHAmyB,GAAA7L,EAAA9hB,KAAAE,UAAA,IAAA3E,OACAy5D,EAAAz1D,EAAAy1D,UACA72C,EAAA,GAGA,IAAA9iB,EAAA,EAAiBA,EAAAsyB,IAAWtyB,EAC5BsvB,EAAA7I,EAAAqJ,eAAA9vB,GACA0rC,EAAApc,EAAA7pB,QACAtF,EAAA,KAEAurC,KAAA9f,QAAA8f,aAAApa,GAAA5yB,OACAyB,EAAA,CACA05D,QAAApzC,EAAAwU,iBAAAj7B,GACAioB,KAAA8xC,GAAAruB,EAAA1rC,EAAAsyB,GACA7L,QACAilB,OAIApc,EAAAyrC,QAAA56D,EACA2iB,EAAAmL,KAAA9tB,GAGA,IAAAH,EAAA,EAAiBA,EAAAsyB,IAAWtyB,GAC5BG,EAAA2iB,EAAA9iB,MAMAG,EAAA8nB,KAAAmyC,GAAAt3C,EAAA9iB,EAAA25D,GACAx5D,EAAA25D,SAAAE,GAAA75D,GACAA,EAAA66D,OAAAV,GAAAn6D,KAGA86D,kBAAA,SAAAx0C,EAAAnkB,GACA,IAAAgtB,EAAAhtB,EAAAgtB,KAAAyrC,QAEA,GAAAzrC,EAAA,CAIA,IAAA5I,EAAAD,EAAAC,IACAglB,EAAApc,EAAAoc,GACAxf,EAAAwf,EAAA/f,MACA+J,EAAAgW,EAAA/V,WAAA,GACAqlC,EAAA1rC,EAAA0rC,OACAtZ,EAAAx1B,EAAA2F,iBAAA5H,GAAAO,OAAAd,aAEAsxC,GAAAtZ,GAAAhsB,EAAAx1B,SACAirB,GAAAE,OAAA/C,SAAA5B,EAAAD,EAAAsQ,WAjGA,SAAArQ,EAAAgP,EAAAslC,EAAA9uC,EAAAw1B,EAAAwZ,GACA,IAMAl7D,EAAAoiB,EAAA3B,EAAA06C,EAAAC,EAAAC,EAAAC,EANAhpC,EAAAoD,EAAAx1B,OACAo1D,EAAAppC,EAAAuJ,SACAglC,EAAA,GACAC,EAAA,GACAC,EAAA,EACAC,EAAA,EAIA,IAFAl0C,EAAAoB,YAEA9nB,EAAA,EAAAoiB,EAAAkQ,IAAA4oC,EAAsCl7D,EAAAoiB,IAAUpiB,EAEhDm7D,EAAAzlC,EADAjV,EAAAzgB,EAAAsyB,GACA3G,MACAyvC,EAAAJ,EAAAG,EAAA16C,EAAAyL,GACAmvC,EAAAd,GAAAY,GACAG,EAAAf,GAAAa,GAEAC,GAAAC,GACAX,EAAAF,EAAAxsC,KAAAktC,GACAP,EAAAF,EAAAzsC,KAAAmtC,IACOT,GAAAC,IACPtF,GAMA+F,GACAZ,EAAAxsC,KAAAktC,GAGAG,GACAZ,EAAAzsC,KAAAmtC,KAVAZ,GAAA9zC,EAAA+zC,EAAAC,EAAAC,EAAAC,GACAD,EAAAC,EAAA,EACAH,EAAA,GACAC,EAAA,KAaAF,GAAA9zC,EAAA+zC,EAAAC,EAAAC,EAAAC,GACAl0C,EAAAU,YACAV,EAAAkO,UAAA8sB,EACAh7B,EAAAuB,OAyDAszC,CAAA70C,EAAAgP,EAAAslC,EAAA9uC,EAAAw1B,EAAAhW,EAAA5V,OACA3K,GAAAE,OAAA5C,WAAA/B,OAIA80C,GAAArwC,GAAAtK,KACA46C,GAAAtwC,GAAA5J,eAkFA,SAAAm6C,GAAAC,EAAAlxC,GACA,OAAAkxC,EAAAC,eAAAD,EAAAE,SAAApxC,IAAAkxC,EAAAE,SAjFA5xC,GAAAT,KAAA,UACAplB,OAAA,CACAiE,SAAA,EACAC,SAAA,MACA4+B,WAAA,EACAnlB,SAAA,EACAnC,OAAA,IAEArY,QAAA,SAAAi3B,EAAAC,GACA,IAAAhe,EAAAge,EAAAzP,aACA8sC,EAAA15D,KAAAqkB,MACA6I,EAAAwsC,EAAAhsC,eAAArP,GAEA6O,EAAA7D,OAAA,OAAA6D,EAAA7D,QAAAqwC,EAAAn3D,KAAAE,SAAA4b,GAAAgL,OAAA,KAEAqwC,EAAAj1D,UAEAu0C,QAAA,KACA2gB,QAAA,KACA9hC,OAAA,CACA4hC,SAAA,GACA/kC,QAAA,GAYAsH,eAAA,SAAA3X,GACA,IAAA9hB,EAAA8hB,EAAA9hB,KACA,OAAAwmB,GAAAnK,QAAArc,EAAAE,UAAAF,EAAAE,SAAAC,IAAA,SAAAW,EAAAzF,GACA,OACAk+B,KAAAz4B,EAAAC,MACAkvB,UAAAzJ,GAAAnK,QAAAvb,EAAAosB,iBAAApsB,EAAAosB,gBAAA,GAAApsB,EAAAosB,gBACApG,QAAAhF,EAAAwU,iBAAAj7B,GACA+1B,QAAAtwB,EAAAyvB,eACA8mC,SAAAv2D,EAAA0vB,WACAc,eAAAxwB,EAAA2vB,iBACAN,SAAArvB,EAAA4vB,gBACAR,UAAApvB,EAAAssB,YACAgD,YAAAtvB,EAAAqsB,YACA2E,WAAAhxB,EAAAgxB,WAEAzH,aAAAhvB,IAEWoC,MAAA,MAIX67B,eAAA,SAAAxX,GACA,IAAAyX,EAAA,GACAA,EAAAjQ,KAAA,cAAAxH,EAAApf,GAAA,aAEA,QAAArH,EAAA,EAAqBA,EAAAymB,EAAA9hB,KAAAE,SAAA3E,OAAgCF,IACrDk+B,EAAAjQ,KAAA,qCAAAxH,EAAA9hB,KAAAE,SAAA7E,GAAA6xB,gBAAA,aAEApL,EAAA9hB,KAAAE,SAAA7E,GAAA0F,OACAw4B,EAAAjQ,KAAAxH,EAAA9hB,KAAAE,SAAA7E,GAAA0F,OAGAw4B,EAAAjQ,KAAA,SAIA,OADAiQ,EAAAjQ,KAAA,SACAiQ,EAAAC,KAAA,OAmBA,IAAA89B,GAAAtvC,GAAA3J,OAAA,CACAwI,WAAA,SAAA1lB,GACAqlB,GAAAnI,OAAA5gB,KAAA0D,GAEA1D,KAAA85D,eAAA,GAKA95D,KAAA+5D,aAAA,KAEA/5D,KAAAg6D,cAAA,GAKAjZ,aAAAqY,GACA30D,OAAA,SAAAu8C,EAAAC,EAAAC,GACA,IAAAlgC,EAAAhhB,KAqBA,OAnBAghB,EAAA+/B,eAEA//B,EAAAggC,WACAhgC,EAAAigC,YACAjgC,EAAAkgC,UAEAlgC,EAAAsgC,sBACAtgC,EAAAugC,gBACAvgC,EAAAwgC,qBAEAxgC,EAAAi5C,oBACAj5C,EAAAk5C,cACAl5C,EAAAm5C,mBAEAn5C,EAAAqhC,YACArhC,EAAAshC,MACAthC,EAAAuhC,WAEAvhC,EAAAwhC,cACAxhC,EAAAic,SAEAulB,YAAA4W,GAEA9X,oBAAA8X,GACA7X,cAAA,WACA,IAAAvgC,EAAAhhB,KAEAghB,EAAAiX,gBAEAjX,EAAA9e,MAAA8e,EAAAggC,SACAhgC,EAAA0D,KAAA,EACA1D,EAAA4D,MAAA5D,EAAA9e,QAEA8e,EAAA/e,OAAA+e,EAAAigC,UAEAjgC,EAAA2D,IAAA,EACA3D,EAAA6D,OAAA7D,EAAA/e,QAIA+e,EAAA0/B,YAAA,EACA1/B,EAAA2/B,WAAA,EACA3/B,EAAA4/B,aAAA,EACA5/B,EAAA6/B,cAAA,EAEA7/B,EAAAic,QAAA,CACA/6B,MAAA,EACAD,OAAA,IAGAu/C,mBAAA4X,GAEAa,kBAAAb,GACAc,YAAA,WACA,IAAAl5C,EAAAhhB,KACAu5D,EAAAv4C,EAAAlf,QAAA+1B,QAAA,GACAuiC,EAAArxC,GAAAzJ,SAAAi6C,EAAAv9B,eAAA,CAAAhb,EAAAqD,OAAArD,IAAA,GAEAu4C,EAAAr5B,SACAk6B,IAAAl6B,OAAA,SAAA3e,GACA,OAAAg4C,EAAAr5B,OAAA3e,EAAAP,EAAAqD,MAAA9hB,SAIAye,EAAAlf,QAAA6d,SACAy6C,EAAAz6C,UAGAqB,EAAAo5C,eAEAD,iBAAAf,GAEA/W,UAAA+W,GACA9W,IAAA,WACA,IAAAthC,EAAAhhB,KACA88B,EAAA9b,EAAAlf,QACAy3D,EAAAz8B,EAAAjF,OACA5xB,EAAA62B,EAAA72B,QACAqe,EAAAtD,EAAAsD,IAEA+1C,EAAAtxC,GAAAjnB,QAAAomB,WAAAqxC,GAEAlxC,EAAAgyC,EAAA90C,KAEA+0C,EAAAt5C,EAAA84C,eAAA,GACA78B,EAAAjc,EAAAic,QACAhF,EAAAjX,EAAAiX,eAYA,GAVAA,GACAgF,EAAA/6B,MAAA8e,EAAAggC,SAEA/jB,EAAAh7B,OAAAgE,EAAA,OAEAg3B,EAAA/6B,MAAA+D,EAAA,KACAg3B,EAAAh7B,OAAA+e,EAAAigC,WAIAh7C,EAGA,GAFAqe,EAAAgE,KAAA+xC,EAAArhD,OAEAif,EAAA,CAGA,IAAAsiC,EAAAv5C,EAAAu5C,WAAA,IACAC,EAAA,EACAl2C,EAAAizB,UAAA,OACAjzB,EAAAkzB,aAAA,MACAzuB,GAAAtJ,KAAAuB,EAAAo5C,YAAA,SAAA/9B,EAAAz+B,GACA,IAAA67D,EAAAH,GAAAC,EAAAlxC,GACAnmB,EAAAu3D,EAAApxC,EAAA,EAAA/D,EAAAyxB,YAAA1Z,EAAAP,MAAA55B,OAEA,IAAAtE,GAAA28D,IAAAz8D,OAAA,GAAAoE,EAAAq3D,EAAA7kC,QAAAuI,EAAA/6B,SACAs4D,GAAAnyC,EAAAkxC,EAAA7kC,QACA6lC,IAAAz8D,QAAAF,EAAA,QAAA27D,EAAA7kC,SAIA4lC,EAAA18D,GAAA,CACA8mB,KAAA,EACAC,IAAA,EACAziB,QACAD,OAAAomB,GAEAkyC,IAAAz8D,OAAA,IAAAoE,EAAAq3D,EAAA7kC,UAEAuI,EAAAh7B,QAAAu4D,MACS,CACT,IAAAC,EAAAlB,EAAA7kC,QACAgmC,EAAA15C,EAAA05C,aAAA,GACAC,EAAApB,EAAA7kC,QACAkmC,EAAA,EACAC,EAAA,EACAC,EAAAzyC,EAAAoyC,EACA1xC,GAAAtJ,KAAAuB,EAAAo5C,YAAA,SAAA/9B,EAAAz+B,GACA,IAAA67D,EAAAH,GAAAC,EAAAlxC,GACA0yC,EAAAtB,EAAApxC,EAAA,EAAA/D,EAAAyxB,YAAA1Z,EAAAP,MAAA55B,MAEAtE,EAAA,GAAAi9D,EAAAC,EAAA79B,EAAAh7B,OAAAw4D,IACAE,GAAAC,EAAArB,EAAA7kC,QACAgmC,EAAA7uC,KAAA+uC,GAEAA,EAAA,EACAC,EAAA,GAIAD,EAAA/uD,KAAAC,IAAA8uD,EAAAG,GACAF,GAAAC,EAEAR,EAAA18D,GAAA,CACA8mB,KAAA,EACAC,IAAA,EACAziB,MAAA64D,EACA94D,OAAAomB,KAGAsyC,GAAAC,EACAF,EAAA7uC,KAAA+uC,GACA39B,EAAA/6B,OAAAy4D,EAIA35C,EAAA9e,MAAA+6B,EAAA/6B,MACA8e,EAAA/e,OAAAg7B,EAAAh7B,QAEAsgD,SAAA6W,GAEAnhC,aAAA,WACA,cAAAj4B,KAAA8B,QAAAoE,UAAA,WAAAlG,KAAA8B,QAAAoE,UAGAipB,KAAA,WACA,IAAAnO,EAAAhhB,KACA88B,EAAA9b,EAAAlf,QACAy3D,EAAAz8B,EAAAjF,OACA1P,EAAAN,GAAAO,OACAd,EAAAa,EAAAb,aACA0zC,EAAA7yC,EAAA+G,SAAA2D,KACAooC,EAAAj6C,EAAA9e,MACAq4D,EAAAv5C,EAAAu5C,WAEA,GAAAz9B,EAAA72B,QAAA,CACA,IAMAi1D,EANA52C,EAAAtD,EAAAsD,IACA4hC,EAAAmT,GAAAE,EAAArT,UAAA/9B,EAAAZ,kBAEA8yC,EAAAtxC,GAAAjnB,QAAAomB,WAAAqxC,GAEAlxC,EAAAgyC,EAAA90C,KAGAjB,EAAAizB,UAAA,OACAjzB,EAAAkzB,aAAA,SACAlzB,EAAAmO,UAAA,GACAnO,EAAAqO,YAAAuzB,EAEA5hC,EAAAkO,UAAA0zB,EAEA5hC,EAAAgE,KAAA+xC,EAAArhD,OACA,IAAAygD,EAAAH,GAAAC,EAAAlxC,GACAiyC,EAAAt5C,EAAA84C,eA2DA7hC,EAAAjX,EAAAiX,eAGAijC,EADAjjC,EACA,CACA3rB,EAAA0U,EAAA0D,MAAAu2C,EAAAV,EAAA,MAAAhB,EAAA7kC,QACAnoB,EAAAyU,EAAA2D,IAAA40C,EAAA7kC,QACA7B,KAAA,GAGA,CACAvmB,EAAA0U,EAAA0D,KAAA60C,EAAA7kC,QACAnoB,EAAAyU,EAAA2D,IAAA40C,EAAA7kC,QACA7B,KAAA,GAIA,IAAAioC,EAAAzyC,EAAAkxC,EAAA7kC,QACA3L,GAAAtJ,KAAAuB,EAAAo5C,YAAA,SAAA/9B,EAAAz+B,GACA,IAAAu9D,EAAA72C,EAAAyxB,YAAA1Z,EAAAP,MAAA55B,MACAA,EAAAu3D,EAAApxC,EAAA,EAAA8yC,EACA7uD,EAAA4uD,EAAA5uD,EACAC,EAAA2uD,EAAA3uD,EAIA0rB,EACAr6B,EAAA,GAAA0O,EAAApK,EAAAq3D,EAAA7kC,QAAA1T,EAAA0D,KAAA1D,EAAAic,QAAA/6B,QACAqK,EAAA2uD,EAAA3uD,GAAAuuD,EACAI,EAAAroC,OACAvmB,EAAA4uD,EAAA5uD,EAAA0U,EAAA0D,MAAAu2C,EAAAV,EAAAW,EAAAroC,OAAA,EAAA0mC,EAAA7kC,SAEW92B,EAAA,GAAA2O,EAAAuuD,EAAA95C,EAAA2D,IAAA3D,EAAAic,QAAAh7B,SACXqK,EAAA4uD,EAAA5uD,IAAA0U,EAAA05C,aAAAQ,EAAAroC,MAAA0mC,EAAA7kC,QACAnoB,EAAA2uD,EAAA3uD,EAAAyU,EAAA2D,IAAA40C,EAAA7kC,QACAwmC,EAAAroC,QA3FA,SAAAvmB,EAAAC,EAAA8vB,GACA,KAAA/hB,MAAAm/C,OAAA,IAKAn1C,EAAA6B,OACA,IAAAsM,EAAA4mC,GAAAh9B,EAAA5J,UAAAuoC,EAAArrC,aAaA,GAZArL,EAAAkO,UAAA6mC,GAAAh9B,EAAA7J,UAAAlL,GACAhD,EAAAqP,QAAA0lC,GAAAh9B,EAAA1I,QAAAqnC,EAAAloC,gBACAxO,EAAAuP,eAAAwlC,GAAAh9B,EAAAxI,eAAAmnC,EAAAhoC,kBACA1O,EAAAoO,SAAA2mC,GAAAh9B,EAAA3J,SAAAsoC,EAAA/nC,iBACA3O,EAAAmO,YACAnO,EAAAqO,YAAA0mC,GAAAh9B,EAAA1J,YAAArL,GAEAhD,EAAAsP,aAEAtP,EAAAsP,YAAAylC,GAAAh9B,EAAAu9B,SAAAoB,EAAAjoC,aAGA+J,EAAAjF,QAAAiF,EAAAjF,OAAA2hC,cAAA,CAGA,IAAA/0C,EAAAg1C,EAAA5tD,KAAAuvD,MAAA,EACAj9B,EAAA7xB,EAAAmtD,EAAA,EACAr7B,EAAA7xB,EAAA8b,EAAA,EAEAU,GAAAE,OAAA/D,UAAAZ,EAAA+X,EAAAhI,WAAA5P,EAAA0Z,EAAAC,QAGA,IAAA3L,GACAnO,EAAA0zB,WAAA1rC,EAAAC,EAAAktD,EAAApxC,GAGA/D,EAAAkS,SAAAlqB,EAAAC,EAAAktD,EAAApxC,GAGA/D,EAAAgC,WAyDA+0C,CAAA/uD,EAAAC,EAAA8vB,GACAi+B,EAAA18D,GAAA8mB,KAAApY,EACAguD,EAAA18D,GAAA+mB,IAAApY,EAxDA,SAAAD,EAAAC,EAAA8vB,EAAA8+B,GACA,IAAAG,EAAAjzC,EAAA,EACAkzC,EAAA9B,EAAA6B,EAAAhvD,EACAkvD,EAAAjvD,EAAA+uD,EACAh3C,EAAAmzB,SAAApb,EAAAP,KAAAy/B,EAAAC,GAEAn/B,EAAAhT,SAEA/E,EAAAoB,YACApB,EAAAmO,UAAA,EACAnO,EAAAQ,OAAAy2C,EAAAC,GACAl3C,EAAAqB,OAAA41C,EAAAJ,EAAAK,GACAl3C,EAAAwB,UA8CA2xB,CAAAnrC,EAAAC,EAAA8vB,EAAA8+B,GAEAljC,EACAijC,EAAA5uD,GAAApK,EAAAq3D,EAAA7kC,QAEAwmC,EAAA3uD,GAAAuuD,MASAW,iBAAA,SAAAnvD,EAAAC,GACA,IACA3O,EAAA89D,EAAAC,EADA36C,EAAAhhB,KAGA,GAAAsM,GAAA0U,EAAA0D,MAAApY,GAAA0U,EAAA4D,OAAArY,GAAAyU,EAAA2D,KAAApY,GAAAyU,EAAA6D,OAIA,IAFA82C,EAAA36C,EAAA84C,eAEAl8D,EAAA,EAAmBA,EAAA+9D,EAAA79D,SAAeF,EAGlC,GAFA89D,EAAAC,EAAA/9D,GAEA0O,GAAAovD,EAAAh3C,MAAApY,GAAAovD,EAAAh3C,KAAAg3C,EAAAx5D,OAAAqK,GAAAmvD,EAAA/2C,KAAApY,GAAAmvD,EAAA/2C,IAAA+2C,EAAAz5D,OAEA,OAAA+e,EAAAo5C,YAAAx8D,GAKA,aAQA06C,YAAA,SAAAlc,GACA,IAGAw/B,EAHA56C,EAAAhhB,KACA88B,EAAA9b,EAAAlf,QACAD,EAAA,YAAAu6B,EAAAv6B,KAAA,QAAAu6B,EAAAv6B,KAGA,iBAAAA,GACA,IAAAi7B,EAAAkc,UAAAlc,EAAA68B,QACA,WAEO,cAAA93D,EAKP,OAJA,IAAAi7B,EAAA33B,QACA,OAOAy2D,EAAA56C,EAAAy6C,iBAAAr/B,EAAA9vB,EAAA8vB,EAAA7vB,GAEA,UAAA1K,EACA+5D,GAAA9+B,EAAA33B,SAEA23B,EAAA33B,QAAAhH,KAAA6iB,EAAAob,EAAAqG,OAAAm5B,IAGA9+B,EAAA68B,SAAAiC,IAAA56C,EAAA+4C,eACA/4C,EAAA+4C,cACAj9B,EAAA68B,QAAAx7D,KAAA6iB,EAAAob,EAAAqG,OAAAzhB,EAAA+4C,cAGA/4C,EAAA+4C,aAAA6B,GAGA9+B,EAAAkc,SAAA4iB,GAEA9+B,EAAAkc,QAAA76C,KAAA6iB,EAAAob,EAAAqG,OAAAm5B,OAMA,SAAAC,GAAAx3C,EAAAy3C,GACA,IAAA95D,EAAA,IAAA63D,GAAA,CACAv1C,IAAAD,EAAAC,IACAxiB,QAAAg6D,EACAz3C,UAEAugB,GAAAK,UAAA5gB,EAAAriB,EAAA85D,GACAl3B,GAAAC,OAAAxgB,EAAAriB,GACAqiB,EAAAriB,SAGA,IAAA+5D,GAAA,CACA92D,GAAA,SASA+2D,SAAAnC,GACAoC,WAAA,SAAA53C,GACA,IAAAy3C,EAAAz3C,EAAAviB,QAAAE,OAEA85D,GACAD,GAAAx3C,EAAAy3C,IAGA/a,aAAA,SAAA18B,GACA,IAAAy3C,EAAAz3C,EAAAviB,QAAAE,OACAA,EAAAqiB,EAAAriB,OAEA85D,GACA/yC,GAAAtI,QAAAq7C,EAAAj0C,GAAAO,OAAApmB,QAEAA,GACA4iC,GAAAK,UAAA5gB,EAAAriB,EAAA85D,GACA95D,EAAAF,QAAAg6D,GAEAD,GAAAx3C,EAAAy3C,IAEO95D,IACP4iC,GAAAG,UAAA1gB,EAAAriB,UACAqiB,EAAAriB,SAGAk6D,WAAA,SAAA73C,EAAA+X,GACA,IAAAp6B,EAAAqiB,EAAAriB,OAEAA,GACAA,EAAAs2C,YAAAlc,KAIA+/B,GAAApzC,GAAAtK,KAEAoJ,GAAAT,KAAA,UACA0T,MAAA,CACA70B,SAAA,EACAyiB,UAAA,OACAoc,WAAA,EACApQ,QAAA,GACAxuB,SAAA,MACA41B,KAAA,GACAte,OAAA,OASA,IAAA4+C,GAAA7xC,GAAA3J,OAAA,CACAwI,WAAA,SAAA1lB,GAEAqlB,GAAAnI,OADA5gB,KACA0D,GADA1D,KAGA85D,eAAA,IAGA/Y,aAAAob,GACA13D,OAAA,SAAAu8C,EAAAC,EAAAC,GACA,IAAAlgC,EAAAhhB,KAqBA,OAnBAghB,EAAA+/B,eAEA//B,EAAAggC,WACAhgC,EAAAigC,YACAjgC,EAAAkgC,UAEAlgC,EAAAsgC,sBACAtgC,EAAAugC,gBACAvgC,EAAAwgC,qBAEAxgC,EAAAi5C,oBACAj5C,EAAAk5C,cACAl5C,EAAAm5C,mBAEAn5C,EAAAqhC,YACArhC,EAAAshC,MACAthC,EAAAuhC,WAEAvhC,EAAAwhC,cACAxhC,EAAAic,SAEAulB,YAAA2Z,GAEA7a,oBAAA6a,GACA5a,cAAA,WACA,IAAAvgC,EAAAhhB,KAEAghB,EAAAiX,gBAEAjX,EAAA9e,MAAA8e,EAAAggC,SACAhgC,EAAA0D,KAAA,EACA1D,EAAA4D,MAAA5D,EAAA9e,QAEA8e,EAAA/e,OAAA+e,EAAAigC,UAEAjgC,EAAA2D,IAAA,EACA3D,EAAA6D,OAAA7D,EAAA/e,QAIA+e,EAAA0/B,YAAA,EACA1/B,EAAA2/B,WAAA,EACA3/B,EAAA4/B,aAAA,EACA5/B,EAAA6/B,cAAA,EAEA7/B,EAAAic,QAAA,CACA/6B,MAAA,EACAD,OAAA,IAGAu/C,mBAAA2a,GAEAlC,kBAAAkC,GACAjC,YAAAiC,GACAhC,iBAAAgC,GAEA9Z,UAAA8Z,GACA7Z,IAAA,WACA,IAAAthC,EAAAhhB,KACA88B,EAAA9b,EAAAlf,QACAmE,EAAA62B,EAAA72B,QACAg3B,EAAAjc,EAAAic,QACAo/B,EAAAtzC,GAAAnK,QAAAke,EAAAhB,MAAAgB,EAAAhB,KAAAh+B,OAAA,EAEAw+D,EAAAvzC,GAAAjnB,QAAAomB,WAAA4U,GAEAmxB,EAAAhoD,EAAAo2D,EAAAC,EAAA7zC,WAAA,EAAAqU,EAAApI,QAAA,EAEA1T,EAAAiX,gBACAgF,EAAA/6B,MAAA8e,EAAAggC,SAEA/jB,EAAAh7B,OAAAgsD,IAEAhxB,EAAA/6B,MAAA+rD,EACAhxB,EAAAh7B,OAAA+e,EAAAigC,WAGAjgC,EAAA9e,MAAA+6B,EAAA/6B,MACA8e,EAAA/e,OAAAg7B,EAAAh7B,QAEAsgD,SAAA4Z,GAEAlkC,aAAA,WACA,IAAAkV,EAAAntC,KAAA8B,QAAAoE,SACA,cAAAinC,GAAA,WAAAA,GAGAhe,KAAA,WACA,IAAAnO,EAAAhhB,KACAskB,EAAAtD,EAAAsD,IACAwY,EAAA9b,EAAAlf,QAEA,GAAAg7B,EAAA72B,QAAA,CACA,IASA+6C,EAAAub,EAAAC,EATAF,EAAAvzC,GAAAjnB,QAAAomB,WAAA4U,GAEArU,EAAA6zC,EAAA7zC,WACAwO,EAAAxO,EAAA,EAAAqU,EAAApI,QACAtP,EAAA,EACAT,EAAA3D,EAAA2D,IACAD,EAAA1D,EAAA0D,KACAG,EAAA7D,EAAA6D,OACAD,EAAA5D,EAAA4D,MAEAN,EAAAkO,UAAAzJ,GAAA5J,eAAA2d,EAAAopB,UAAAr+B,GAAAO,OAAAb,kBAEAjD,EAAAgE,KAAAg0C,EAAAtjD,OAEAgI,EAAAiX,gBACAskC,EAAA73C,GAAAE,EAAAF,GAAA,EAEA83C,EAAA73C,EAAAsS,EACA+pB,EAAAp8B,EAAAF,IAEA63C,EAAA,SAAAz/B,EAAA52B,SAAAwe,EAAAuS,EAAArS,EAAAqS,EACAulC,EAAA73C,GAAAE,EAAAF,GAAA,EACAq8B,EAAAn8B,EAAAF,EACAS,EAAAvZ,KAAAkC,IAAA,SAAA+uB,EAAA52B,UAAA,QAGAoe,EAAA6B,OACA7B,EAAAwjC,UAAAyU,EAAAC,GACAl4C,EAAAlH,OAAAgI,GACAd,EAAAizB,UAAA,SACAjzB,EAAAkzB,aAAA,SACA,IAAA1b,EAAAgB,EAAAhB,KAEA,GAAA/S,GAAAnK,QAAAkd,GAGA,IAFA,IAAAvvB,EAAA,EAEA3O,EAAA,EAAyBA,EAAAk+B,EAAAh+B,SAAiBF,EAC1C0mB,EAAAmzB,SAAA3b,EAAAl+B,GAAA,EAAA2O,EAAAy0C,GACAz0C,GAAAkc,OAGAnE,EAAAmzB,SAAA3b,EAAA,IAAAklB,GAGA18B,EAAAgC,cAKA,SAAAm2C,GAAAp4C,EAAAq4C,GACA,IAAA5hC,EAAA,IAAAshC,GAAA,CACA93C,IAAAD,EAAAC,IACAxiB,QAAA46D,EACAr4C,UAEAugB,GAAAK,UAAA5gB,EAAAyW,EAAA4hC,GACA93B,GAAAC,OAAAxgB,EAAAyW,GACAzW,EAAAs4C,WAAA7hC,EAGA,IAqCA/4B,GAAA,GACAu1D,GAAAmB,GACAz2D,GAAA+5D,GACAjhC,GAxCA,CACA71B,GAAA,QASA+2D,SAAAI,GACAH,WAAA,SAAA53C,GACA,IAAAq4C,EAAAr4C,EAAAviB,QAAAg5B,MAEA4hC,GACAD,GAAAp4C,EAAAq4C,IAGA3b,aAAA,SAAA18B,GACA,IAAAq4C,EAAAr4C,EAAAviB,QAAAg5B,MACA6hC,EAAAt4C,EAAAs4C,WAEAD,GACA3zC,GAAAtI,QAAAi8C,EAAA70C,GAAAO,OAAA0S,OAEA6hC,GACA/3B,GAAAK,UAAA5gB,EAAAs4C,EAAAD,GACAC,EAAA76D,QAAA46D,GAEAD,GAAAp4C,EAAAq4C,IAEOC,IACP/3B,GAAAG,UAAA1gB,EAAAs4C,UACAt4C,EAAAs4C,cAwCA,QAAA1wD,MAhCAlK,GAAAu1D,UACAv1D,GAAAC,UACAD,GAAA+4B,SAKAqiB,GAAAt5C,QAAAklB,GA76JA,WAoaA,SAAA6zC,EAAAC,EAAAl4D,EAAAm4D,GACA,IAAAC,EAaA,MAXA,kBAAAF,GACAE,EAAA5iD,SAAA0iD,EAAA,KAEA,IAAAA,EAAAt+D,QAAA,OAEAw+D,IAAA,IAAAp4D,EAAA8lC,WAAAqyB,KAGAC,EAAAF,EAGAE,EAQA,SAAAC,EAAA59D,GACA,YAAA+B,IAAA/B,GAAA,OAAAA,GAAA,SAAAA,EAWA,SAAA69D,EAAAC,EAAAC,EAAAC,GACA,IAAAtzC,EAAAyf,SAAA8zB,YAEA5yB,EAAA1hB,GAAAu0C,eAAAJ,GAEAK,EAAAzzC,EAAA0zC,iBAAAN,GAAAC,GACAM,EAAA3zC,EAAA0zC,iBAAA/yB,GAAA0yB,GACAO,EAAAV,EAAAO,GACAI,EAAAX,EAAAS,GACAG,EAAA1+C,OAAAgkB,kBAEA,OAAAw6B,GAAAC,EACA9xD,KAAAD,IAAA8xD,EAAAd,EAAAW,EAAAL,EAAAE,GAAAQ,EAAAD,EAAAf,EAAAa,EAAAhzB,EAAA2yB,GAAAQ,GAGA,OAndA70C,GAAAqb,MAAA,SAAAy5B,EAAAC,GACA,GAAA/0C,GAAAnK,QAAAi/C,IAAA19D,MAAAlC,UAAAiiC,OACA,OAAA29B,EAAA39B,OAAA49B,GAGA,IAAAC,EAAA,GAMA,OALAh1C,GAAAtJ,KAAAo+C,EAAA,SAAAt8C,GACAu8C,EAAAv8C,IACAw8C,EAAAlyC,KAAAtK,KAGAw8C,GAGAh1C,GAAAiD,UAAA7rB,MAAAlC,UAAA+tB,UAAA,SAAA1K,EAAAhC,EAAA+H,GACA,OAAA/F,EAAA0K,UAAA1M,EAAA+H,IACK,SAAA/F,EAAAhC,EAAA+H,GACLA,OAAAlmB,IAAAkmB,EAAA/F,EAAA+F,EAEA,QAAAzpB,EAAA,EAAAoiB,EAAAsB,EAAAxjB,OAA0CF,EAAAoiB,IAAUpiB,EACpD,GAAA0hB,EAAAnhB,KAAAkpB,EAAA/F,EAAA1jB,KAAA0jB,GACA,OAAA1jB,EAIA,UAGAmrB,GAAA8d,cAAA,SAAAm3B,EAAAF,EAAAG,GAEAl1C,GAAApK,cAAAs/C,KACAA,GAAA,GAGA,QAAArgE,EAAAqgE,EAAA,EAAkCrgE,EAAAogE,EAAAlgE,OAA0BF,IAAA,CAC5D,IAAAsgE,EAAAF,EAAApgE,GAEA,GAAAkgE,EAAAI,GACA,OAAAA,IAKAn1C,GAAAo1C,kBAAA,SAAAH,EAAAF,EAAAG,GAEAl1C,GAAApK,cAAAs/C,KACAA,EAAAD,EAAAlgE,QAGA,QAAAF,EAAAqgE,EAAA,EAAkCrgE,GAAA,EAAQA,IAAA,CAC1C,IAAAsgE,EAAAF,EAAApgE,GAEA,GAAAkgE,EAAAI,GACA,OAAAA,IAMAn1C,GAAAuB,SAAA,SAAAxtB,GACA,OAAAwd,MAAAF,WAAAtd,KAAAiiB,SAAAjiB,IAGAisB,GAAAoiC,aAAA,SAAA7+C,EAAAC,EAAA6xD,GACA,OAAAvyD,KAAAsoB,IAAA7nB,EAAAC,GAAA6xD,GAGAr1C,GAAAmiC,YAAA,SAAA5+C,EAAA8xD,GACA,IAAAC,EAAAxyD,KAAAqM,MAAA5L,GACA,OAAA+xD,EAAAD,EAAA9xD,GAAA+xD,EAAAD,EAAA9xD,GAGAyc,GAAAjd,IAAA,SAAAwV,GACA,OAAAA,EAAAo0B,OAAA,SAAA5pC,EAAA1M,GACA,OAAAkb,MAAAlb,GAIA0M,EAHAD,KAAAC,MAAA1M,IAIO8f,OAAAovC,oBAGPvlC,GAAAnd,IAAA,SAAA0V,GACA,OAAAA,EAAAo0B,OAAA,SAAA9pC,EAAAxM,GACA,OAAAkb,MAAAlb,GAIAwM,EAHAC,KAAAD,MAAAxM,IAIO8f,OAAAgkB,oBAGPna,GAAAwgC,KAAA19C,KAAA09C,KAAA,SAAAj9C,GACA,OAAAT,KAAA09C,KAAAj9C,IACK,SAAAA,GAGL,YAFAA,OAEAgO,MAAAhO,GACAA,EAGAA,EAAA,QAEAyc,GAAAy1B,MAAA3yC,KAAA2yC,MAAA,SAAAlyC,GACA,OAAAT,KAAA2yC,MAAAlyC,IACK,SAAAA,GACL,IAAAgyD,EAAAzyD,KAAA0yD,IAAAjyD,GAAAT,KAAA2yD,OAIAC,EAAA5yD,KAAAqM,MAAAomD,GACAI,EAAApyD,IAAAT,KAAAQ,IAAA,GAAAoyD,GACA,OAAAC,EAAAD,EAAAH,GAGAv1C,GAAAm6B,UAAA,SAAA7lC,GACA,OAAAA,GAAAxR,KAAAkC,GAAA,MAGAgb,GAAA+lC,UAAA,SAAA6P,GACA,OAAAA,GAAA,IAAA9yD,KAAAkC,KAWAgb,GAAAkiC,eAAA,SAAA3+C,GACA,GAAAyc,GAAAhK,SAAAzS,GAAA,CAOA,IAHA,IAAA8vB,EAAA,EACAnvB,EAAA,EAEApB,KAAAqM,MAAA5L,EAAA8vB,OAAA9vB,GACA8vB,GAAA,GACAnvB,IAGA,OAAAA,IAIA8b,GAAAsI,kBAAA,SAAAutC,EAAAC,GACA,IAAAC,EAAAD,EAAAvyD,EAAAsyD,EAAAtyD,EACAyyD,EAAAF,EAAAtyD,EAAAqyD,EAAAryD,EACAyyD,EAAAnzD,KAAAmC,KAAA8wD,IAAAC,KACAztC,EAAAzlB,KAAAiC,MAAAixD,EAAAD,GAMA,OAJAxtC,GAAA,GAAAzlB,KAAAkC,KACAujB,GAAA,EAAAzlB,KAAAkC,IAGA,CACAujB,QACAC,SAAAytC,IAIAj2C,GAAA0oB,sBAAA,SAAAlO,EAAAC,GACA,OAAA33B,KAAAmC,KAAAnC,KAAAQ,IAAAm3B,EAAAl3B,EAAAi3B,EAAAj3B,EAAA,GAAAT,KAAAQ,IAAAm3B,EAAAj3B,EAAAg3B,EAAAh3B,EAAA,KAUAwc,GAAAk2C,WAAA,SAAAC,GACA,OAAAA,EAAA,YAYAn2C,GAAA49B,YAAA,SAAAtiC,EAAAqgC,EAAAxiD,GACA,IAAAw3C,EAAAr1B,EAAA86C,wBACAC,EAAAl9D,EAAA,EACA,OAAA2J,KAAAqM,OAAAwsC,EAAA0a,GAAA1lB,KAAA0lB,GAGAr2C,GAAAsX,YAAA,SAAAg/B,EAAAC,EAAAC,EAAApyD,GAIA,IAAAoZ,EAAA84C,EAAAtrC,KAAAurC,EAAAD,EACAl7D,EAAAm7D,EACAp7D,EAAAq7D,EAAAxrC,KAAAurC,EAAAC,EACAC,EAAA3zD,KAAAmC,KAAAnC,KAAAQ,IAAAlI,EAAAmI,EAAAia,EAAAja,EAAA,GAAAT,KAAAQ,IAAAlI,EAAAoI,EAAAga,EAAAha,EAAA,IACAkzD,EAAA5zD,KAAAmC,KAAAnC,KAAAQ,IAAAnI,EAAAoI,EAAAnI,EAAAmI,EAAA,GAAAT,KAAAQ,IAAAnI,EAAAqI,EAAApI,EAAAoI,EAAA,IACAmzD,EAAAF,KAAAC,GACAE,EAAAF,GAAAD,EAAAC,GAEAC,EAAAplD,MAAAolD,GAAA,EAAAA,EACAC,EAAArlD,MAAAqlD,GAAA,EAAAA,EACA,IAAAC,EAAAzyD,EAAAuyD,EAEAG,EAAA1yD,EAAAwyD,EACA,OACAp5C,SAAA,CACAja,EAAAnI,EAAAmI,EAAAszD,GAAA17D,EAAAoI,EAAAia,EAAAja,GACAC,EAAApI,EAAAoI,EAAAqzD,GAAA17D,EAAAqI,EAAAga,EAAAha,IAEArI,KAAA,CACAoI,EAAAnI,EAAAmI,EAAAuzD,GAAA37D,EAAAoI,EAAAia,EAAAja,GACAC,EAAApI,EAAAoI,EAAAszD,GAAA37D,EAAAqI,EAAAga,EAAAha,MAKAwc,GAAA+2C,QAAA5gD,OAAA4gD,SAAA,MAEA/2C,GAAAqX,oBAAA,SAAA9M,GAKA,IASA11B,EAAAmiE,EAAAC,EAAAC,EA8BAC,EAAAC,EAAAC,EAAAC,EA6BA58B,EApEA68B,GAAAhtC,GAAA,IAAA5wB,IAAA,SAAA2B,GACA,OACAulB,MAAAvlB,EAAAmlB,OACA+2C,OAAA,EACAC,GAAA,KAIAC,EAAAH,EAAAxiE,OAGA,IAAAF,EAAA,EAAiBA,EAAA6iE,IAAe7iE,EAGhC,KAFAoiE,EAAAM,EAAA1iE,IAEAgsB,MAAAmK,KAAA,CAOA,GAHAgsC,EAAAniE,EAAA,EAAA0iE,EAAA1iE,EAAA,SACAqiE,EAAAriE,EAAA6iE,EAAA,EAAAH,EAAA1iE,EAAA,WAEAqiE,EAAAr2C,MAAAmK,KAAA,CACA,IAAA2sC,EAAAT,EAAAr2C,MAAAtd,EAAA0zD,EAAAp2C,MAAAtd,EAEA0zD,EAAAO,OAAA,IAAAG,GAAAT,EAAAr2C,MAAArd,EAAAyzD,EAAAp2C,MAAArd,GAAAm0D,EAAA,GAGAX,KAAAn2C,MAAAmK,KACAisC,EAAAQ,GAAAR,EAAAO,QACSN,KAAAr2C,MAAAmK,KACTisC,EAAAQ,GAAAT,EAAAQ,OACSvgE,KAAAupD,KAAAwW,EAAAQ,UAAAvgE,KAAAupD,KAAAyW,EAAAO,QACTP,EAAAQ,GAAA,EAEAR,EAAAQ,IAAAT,EAAAQ,OAAAP,EAAAO,QAAA,EAOA,IAAA3iE,EAAA,EAAiBA,EAAA6iE,EAAA,IAAmB7iE,EACpCoiE,EAAAM,EAAA1iE,GACAqiE,EAAAK,EAAA1iE,EAAA,GAEAoiE,EAAAp2C,MAAAmK,MAAAksC,EAAAr2C,MAAAmK,OAIAhL,GAAAoiC,aAAA6U,EAAAO,OAAA,EAAAvgE,KAAA8/D,SACAE,EAAAQ,GAAAP,EAAAO,GAAA,GAIAN,EAAAF,EAAAQ,GAAAR,EAAAO,OACAJ,EAAAF,EAAAO,GAAAR,EAAAO,QACAF,EAAAx0D,KAAAQ,IAAA6zD,EAAA,GAAAr0D,KAAAQ,IAAA8zD,EAAA,KAEA,IAIAC,EAAA,EAAAv0D,KAAAmC,KAAAqyD,GACAL,EAAAQ,GAAAN,EAAAE,EAAAJ,EAAAO,OACAN,EAAAO,GAAAL,EAAAC,EAAAJ,EAAAO,UAMA,IAAA3iE,EAAA,EAAiBA,EAAA6iE,IAAe7iE,GAChCoiE,EAAAM,EAAA1iE,IAEAgsB,MAAAmK,OAIAgsC,EAAAniE,EAAA,EAAA0iE,EAAA1iE,EAAA,QACAqiE,EAAAriE,EAAA6iE,EAAA,EAAAH,EAAA1iE,EAAA,QAEAmiE,MAAAn2C,MAAAmK,OACA0P,GAAAu8B,EAAAp2C,MAAAtd,EAAAyzD,EAAAn2C,MAAAtd,GAAA,EACA0zD,EAAAp2C,MAAA9C,sBAAAk5C,EAAAp2C,MAAAtd,EAAAm3B,EACAu8B,EAAAp2C,MAAA5C,sBAAAg5C,EAAAp2C,MAAArd,EAAAk3B,EAAAu8B,EAAAQ,IAGAP,MAAAr2C,MAAAmK,OACA0P,GAAAw8B,EAAAr2C,MAAAtd,EAAA0zD,EAAAp2C,MAAAtd,GAAA,EACA0zD,EAAAp2C,MAAA7C,kBAAAi5C,EAAAp2C,MAAAtd,EAAAm3B,EACAu8B,EAAAp2C,MAAA3C,kBAAA+4C,EAAAp2C,MAAArd,EAAAk3B,EAAAu8B,EAAAQ,MAKAz3C,GAAAuX,SAAA,SAAAu9B,EAAAx/C,EAAAy6C,GACA,OAAAA,EACAz6C,GAAAw/C,EAAA//D,OAAA,EAAA+/D,EAAA,GAAAA,EAAAx/C,EAAA,GAGAA,GAAAw/C,EAAA//D,OAAA,EAAA+/D,IAAA//D,OAAA,GAAA+/D,EAAAx/C,EAAA,IAGA0K,GAAA+K,aAAA,SAAA+pC,EAAAx/C,EAAAy6C,GACA,OAAAA,EACAz6C,GAAA,EAAAw/C,IAAA//D,OAAA,GAAA+/D,EAAAx/C,EAAA,GAGAA,GAAA,EAAAw/C,EAAA,GAAAA,EAAAx/C,EAAA,IAIA0K,GAAAiiC,QAAA,SAAAhxB,EAAA9hB,GACA,IAAAomD,EAAAzyD,KAAAkB,MAAAgc,GAAAy1B,MAAAxkB,IACA2mC,EAAA3mC,EAAAnuB,KAAAQ,IAAA,GAAAiyD,GAuBA,OApBApmD,EACAyoD,EAAA,IACA,EACSA,EAAA,EACT,EACSA,EAAA,EACT,EAEA,GAEOA,GAAA,EACP,EACOA,GAAA,EACP,EACOA,GAAA,EACP,EAEA,IAGA90D,KAAAQ,IAAA,GAAAiyD,IAIAv1C,GAAAkD,iBACA,qBAAA1N,OACA,SAAAe,GACAA,KAIAf,OAAAuN,uBAAAvN,OAAAqiD,6BAAAriD,OAAAsiD,0BAAAtiD,OAAAuiD,wBAAAviD,OAAAwiD,yBAAA,SAAAzhD,GACA,OAAAf,OAAAyiD,WAAA1hD,EAAA,SAKAyJ,GAAAyZ,oBAAA,SAAAy+B,EAAA58C,GACA,IAAAyM,EAAAyD,EACA6H,EAAA6kC,EAAAC,eAAAD,EACAh4C,EAAAg4C,EAAAtjE,QAAAsjE,EAAAE,WACAC,EAAAn4C,EAAAo4C,wBACAC,EAAAllC,EAAAklC,QAEAA,KAAAxjE,OAAA,GACAgzB,EAAAwwC,EAAA,GAAAC,QACAhtC,EAAA+sC,EAAA,GAAAE,UAEA1wC,EAAAsL,EAAAmlC,QACAhtC,EAAA6H,EAAAolC,SAMA,IAAA9gB,EAAAtmC,WAAA2O,GAAA2f,SAAAzf,EAAA,iBACA03B,EAAAvmC,WAAA2O,GAAA2f,SAAAzf,EAAA,gBACA23B,EAAAxmC,WAAA2O,GAAA2f,SAAAzf,EAAA,kBACA43B,EAAAzmC,WAAA2O,GAAA2f,SAAAzf,EAAA,mBACA/mB,EAAAk/D,EAAAx8C,MAAAw8C,EAAA18C,KAAAg8B,EAAAE,EACA3+C,EAAAm/D,EAAAv8C,OAAAu8C,EAAAz8C,IAAAg8B,EAAAE,EAKA,OAFA/vB,EAAAjlB,KAAAqM,OAAA4Y,EAAAswC,EAAA18C,KAAAg8B,GAAAx+C,EAAA+mB,EAAA/mB,MAAAmiB,EAAA86C,yBACA5qC,EAAA1oB,KAAAqM,OAAAqc,EAAA6sC,EAAAz8C,IAAAg8B,GAAA1+C,EAAAgnB,EAAAhnB,OAAAoiB,EAAA86C,yBACA,CACA7yD,EAAAwkB,EACAvkB,EAAAgoB,IA0DAxL,GAAA04C,mBAAA,SAAAvE,GACA,OAAAD,EAAAC,EAAA,4BAIAn0C,GAAA24C,oBAAA,SAAAxE,GACA,OAAAD,EAAAC,EAAA,8BAOAn0C,GAAA44C,kBAAA,SAAAp3B,EAAA7V,EAAAktC,GAEA,OADAltC,EAAA3L,GAAA2f,SAAA6B,EAAA7V,IACAn2B,QAAA,QAAAqjE,EAAAznD,SAAAua,EAAA,QAAAva,SAAAua,EAAA,KAOA3L,GAAAu0C,eAAA,SAAAJ,GACA,IAAA2E,EAAA3E,EAAAzyB,WAMA,OAJAo3B,GAAA,wBAAAA,EAAApnD,aACAonD,IAAAC,MAGAD,GAGA94C,GAAAoxB,gBAAA,SAAA+iB,GACA,IAAA3yB,EAAAxhB,GAAAu0C,eAAAJ,GAEA,IAAA3yB,EACA,OAAA2yB,EAAAxyB,YAGA,IAAAA,EAAAH,EAAAG,YAEAgW,EAAA33B,GAAA44C,kBAAAp3B,EAAA,eAAAG,GAEAkW,EAAA73B,GAAA44C,kBAAAp3B,EAAA,gBAAAG,GAEA1+B,EAAA0+B,EAAAgW,EAAAE,EACAmhB,EAAAh5C,GAAA04C,mBAAAvE,GACA,OAAA5iD,MAAAynD,GAAA/1D,EAAAH,KAAAD,IAAAI,EAAA+1D,IAGAh5C,GAAAsxB,iBAAA,SAAA6iB,GACA,IAAA3yB,EAAAxhB,GAAAu0C,eAAAJ,GAEA,IAAA3yB,EACA,OAAA2yB,EAAA8E,aAGA,IAAAA,EAAAz3B,EAAAy3B,aAEArhB,EAAA53B,GAAA44C,kBAAAp3B,EAAA,cAAAy3B,GAEAnhB,EAAA93B,GAAA44C,kBAAAp3B,EAAA,iBAAAy3B,GAEA/4D,EAAA+4D,EAAArhB,EAAAE,EACAohB,EAAAl5C,GAAA24C,oBAAAxE,GACA,OAAA5iD,MAAA2nD,GAAAh5D,EAAA4C,KAAAD,IAAA3C,EAAAg5D,IAGAl5C,GAAA2f,SAAA,SAAAY,EAAAb,GACA,OAAAa,EAAA44B,aAAA54B,EAAA44B,aAAAz5B,GAAAc,SAAA8zB,YAAAG,iBAAAl0B,EAAA,MAAA64B,iBAAA15B,IAGA1f,GAAA0wB,YAAA,SAAAp1B,EAAA+9C,GACA,IAAAC,EAAAh+C,EAAA86C,wBAAAiD,GAAA,qBAAA7jD,eAAAm7B,kBAAA,EAEA,OAAA2oB,EAAA,CAIA,IAAAp5C,EAAA5E,EAAA4E,OACAhnB,EAAAoiB,EAAApiB,OACAC,EAAAmiB,EAAAniB,MACA+mB,EAAAhnB,SAAAogE,EACAp5C,EAAA/mB,QAAAmgE,EACAh+C,EAAAC,IAAAjK,MAAAgoD,KAIAp5C,EAAA9D,MAAAljB,QAAAgnB,EAAA9D,MAAAjjB,QACA+mB,EAAA9D,MAAAljB,SAAA,KACAgnB,EAAA9D,MAAAjjB,QAAA,QAKA6mB,GAAAitB,WAAA,SAAAssB,EAAA55C,EAAAF,GACA,OAAAE,EAAA,IAAA45C,EAAA,MAAA95C,GAGAO,GAAAs2B,YAAA,SAAA/6B,EAAAgE,EAAAi6C,EAAAl0B,GAEA,IAAA9rC,GADA8rC,KAAA,IACA9rC,KAAA8rC,EAAA9rC,MAAA,GACAigE,EAAAn0B,EAAAo0B,eAAAp0B,EAAAo0B,gBAAA,GAEAp0B,EAAA/lB,WACA/lB,EAAA8rC,EAAA9rC,KAAA,GACAigE,EAAAn0B,EAAAo0B,eAAA,GACAp0B,EAAA/lB,QAGAhE,EAAAgE,OACA,IAAAo6C,EAAA,EACA35C,GAAAtJ,KAAA8iD,EAAA,SAAAI,QAEAxhE,IAAAwhE,GAAA,OAAAA,IAAA,IAAA55C,GAAAnK,QAAA+jD,GACAD,EAAA35C,GAAAgtB,YAAAzxB,EAAA/hB,EAAAigE,EAAAE,EAAAC,GACS55C,GAAAnK,QAAA+jD,IAGT55C,GAAAtJ,KAAAkjD,EAAA,SAAAC,QAEAzhE,IAAAyhE,GAAA,OAAAA,GAAA75C,GAAAnK,QAAAgkD,KACAF,EAAA35C,GAAAgtB,YAAAzxB,EAAA/hB,EAAAigE,EAAAE,EAAAE,QAKA,IAAAC,EAAAL,EAAA1kE,OAAA,EAEA,GAAA+kE,EAAAN,EAAAzkE,OAAA,CACA,QAAAF,EAAA,EAAuBA,EAAAilE,EAAWjlE,WAClC2E,EAAAigE,EAAA5kE,IAGA4kE,EAAAp+D,OAAA,EAAAy+D,GAGA,OAAAH,GAGA35C,GAAAgtB,YAAA,SAAAzxB,EAAA/hB,EAAAigE,EAAAE,EAAA1pD,GACA,IAAAmiD,EAAA54D,EAAAyW,GAWA,OATAmiD,IACAA,EAAA54D,EAAAyW,GAAAsL,EAAAyxB,YAAA/8B,GAAA9W,MACAsgE,EAAA32C,KAAA7S,IAGAmiD,EAAAuH,IACAA,EAAAvH,GAGAuH,GAGA35C,GAAA86B,mBAAA,SAAA0e,GACA,IAAAO,EAAA,EAQA,OAPA/5C,GAAAtJ,KAAA8iD,EAAA,SAAAI,GACA55C,GAAAnK,QAAA+jD,IACAA,EAAA7kE,OAAAglE,IACAA,EAAAH,EAAA7kE,UAIAglE,GAGA/5C,GAAAu2B,MAAA9gC,EAGK,SAAApf,GAML,OAJAA,aAAA2jE,iBACA3jE,EAAAyoB,GAAAO,OAAAd,cAGA9I,EAAApf,IATA,SAAAA,GAEA,OADAmE,QAAAC,MAAA,uBACApE,GAUA2pB,GAAAyG,cAAA,SAAAwzC,GAEA,OAAAA,aAAAC,eAAAD,aAAAD,eAAAC,EAAAj6C,GAAAu2B,MAAA0jB,GAAAnmD,SAAA,IAAAD,OAAA,IAAApD,aAiyIA0pD,GACA/lB,GAAAgmB,UAAAjlB,GACAf,GAAAimB,UAAAv4C,GACAsyB,GAAAkmB,iBAAAj4C,GACA+xB,GAAAp3C,eACAo3C,GAAAxwB,kBAAA+D,GACAysB,GAAAxgD,SAAAkrB,GACAs1B,GAAAj0B,QAAAqB,GACA4yB,GAAAjuB,YACAiuB,GAAAmmB,YAAAz/B,GACAsZ,GAAAomB,QAAA3+B,GACAuY,GAAArR,YACAqR,GAAAp7C,QAAAyrC,GACA2P,GAAAqmB,MAAA/iB,GACAtD,GAAAsmB,aAAAj1B,GACA2O,GAAAumB,MAAAtlB,GACAjB,GAAAwmB,QAAAlrB,GAEA0E,GAAAt5C,QAAA4b,KAAA6N,GAAA,SAAAjT,EAAAxY,GACAs7C,GAAAsmB,aAAA/0B,kBAAA7sC,EAAAwY,IAAA8uC,aAIApnD,GACAA,GAAA7D,eAAA+N,KACAkxC,GAAAp7C,QAAA4rC,SAAA5rC,GAAAkK,KAIAkxC,GAAArR,SAAA1iB,aACA,IAAAw6C,GAAAzmB,GA8FA,MA5FA,qBAAA5+B,SACAA,OAAA66B,MAAA+D,IAYAA,GAAA/D,MAAA+D,GASAA,GAAA0c,OAAA93D,GAAAC,OAAAg6D,SASA7e,GAAAif,MAAAr6D,GAAA+4B,MAAAkhC,SASA7e,GAAA0mB,cAAA1mB,GAAAp7C,QAUAo7C,GAAA2mB,WAAA3mB,GAAAj0B,QAAAtI,OAAA,IASAu8B,GAAA4mB,cAAA5mB,GAAAt5C,QAAAolB,OASAk0B,GAAA6mB,cAAA7mB,GAAAomB,QASApmB,GAAA8mB,gBAAA7a,GAQAjM,GAAAt5C,QAAA4b,KAAA,0EAAAykD,GACA/mB,GAAA+mB,GAAA,SAAA5/C,EAAA6/C,GACA,WAAAhnB,GAAA74B,EAAA64B,GAAAt5C,QAAA0c,MAAA4jD,GAAA,GAA6E,CAC7EtiE,KAAAqiE,EAAAjmD,OAAA,GAAAmmD,cAAAF,EAAArsD,MAAA,SAIA+rD,GAlxb8DS,CAAA,WAC9D,IACA,OAAanoE,EAAQ,KAChB,MAAAkgC,KAHyD,yBCP9D,IAAAkoC,EAAsBpoE,EAAQ,KAgC9BqoE,EA/BuBroE,EAAQ,IA+B/BsoE,CAAA,SAAA3mD,EAAAze,EAAApB,GACAsmE,EAAAzmD,EAAA7f,EAAAoB,KAEA6I,EAAAC,QAAAq8D,uBCnCA,IAAAE,EAAsBvoE,EAAQ,KAC9BwoE,EAAqBxoE,EAAQ,KAC7ByoE,EAAmBzoE,EAAQ,KAC3B0iB,EAAc1iB,EAAQ,KAmBtB+L,EAAAC,QARA,SAAA08D,EAAAC,GACA,gBAAAhH,EAAAiH,GACA,IAAAt/D,EAAAoZ,EAAAi/C,GAAA4G,EAAAC,EACAK,EAAAF,MAAA,GACA,OAAAr/D,EAAAq4D,EAAA+G,EAAAD,EAAAG,EAAA,GAAAC,wBCIA98D,EAAAC,QAZA,SAAAoZ,EAAAsjD,EAAAE,EAAAC,GAIA,IAHA,IAAA1mD,GAAA,EACAvgB,EAAA,MAAAwjB,EAAA,EAAAA,EAAAxjB,SAEAugB,EAAAvgB,GAAA,CACA,IAAAsB,EAAAkiB,EAAAjD,GACAumD,EAAAG,EAAA3lE,EAAA0lE,EAAA1lE,GAAAkiB,GAGA,OAAAyjD,wBCnBA,IAAAC,EAAe9oE,EAAQ,KAqBvB+L,EAAAC,QAPA,SAAA21D,EAAA+G,EAAAE,EAAAC,GAIA,OAHAC,EAAAnH,EAAA,SAAAz+D,EAAApB,EAAA6/D,GACA+G,EAAAG,EAAA3lE,EAAA0lE,EAAA1lE,GAAAy+D,KAEAkH,wBClBA,IAAAE,EAAiB/oE,EAAQ,KAYzB8oE,EAXqB9oE,EAAQ,IAW7BgpE,CAAAD,GACAh9D,EAAAC,QAAA88D,uBCbA,IAAAG,EAAcjpE,EAAQ,KACtBoC,EAAWpC,EAAQ,KAenB+L,EAAAC,QAJA,SAAA3C,EAAAu/D,GACA,OAAAv/D,GAAA4/D,EAAA5/D,EAAAu/D,EAAAxmE,yBCbA,IAcA6mE,EAdoBjpE,EAAQ,IAc5BkpE,GACAn9D,EAAAC,QAAAi9D,qBCWAl9D,EAAAC,QAnBA,SAAAm9D,GACA,gBAAA9/D,EAAAu/D,EAAAQ,GAMA,IALA,IAAAjnD,GAAA,EACAknD,EAAA9nE,OAAA8H,GACA5E,EAAA2kE,EAAA//D,GACAzH,EAAA6C,EAAA7C,OAEAA,KAAA,CACA,IAAAE,EAAA2C,EAAA0kE,EAAAvnE,IAAAugB,GAEA,QAAAymD,EAAAS,EAAAvnE,KAAAunE,GACA,MAIA,OAAAhgE,yBCtBA,IAAAigE,EAAkBtpE,EAAQ,KAmC1B+L,EAAAC,QAxBA,SAAAu9D,EAAAJ,GACA,gBAAAxH,EAAAiH,GACA,SAAAjH,EACA,OAAAA,EAGA,IAAA2H,EAAA3H,GACA,OAAA4H,EAAA5H,EAAAiH,GAOA,IAJA,IAAAhnE,EAAA+/D,EAAA//D,OACAugB,EAAAgnD,EAAAvnE,GAAA,EACAynE,EAAA9nE,OAAAogE,IAEAwH,EAAAhnD,QAAAvgB,KACA,IAAAgnE,EAAAS,EAAAlnD,KAAAknD,KAKA,OAAA1H","file":"static/js/12.4af05511.chunk.js","sourcesContent":["var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Chart from 'chart.js';\nimport isEqual from 'lodash/isEqual';\nimport keyBy from 'lodash/keyBy';\nvar NODE_ENV = typeof process !== 'undefined' && process.env && process.env.NODE_ENV;\n\nvar ChartComponent = function (_React$Component) {\n  _inherits(ChartComponent, _React$Component);\n\n  function ChartComponent() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, ChartComponent);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleOnClick = function (event) {\n      var instance = _this.chartInstance;\n      var _this$props = _this.props,\n          getDatasetAtEvent = _this$props.getDatasetAtEvent,\n          getElementAtEvent = _this$props.getElementAtEvent,\n          getElementsAtEvent = _this$props.getElementsAtEvent,\n          onElementsClick = _this$props.onElementsClick;\n      getDatasetAtEvent && getDatasetAtEvent(instance.getDatasetAtEvent(event), event);\n      getElementAtEvent && getElementAtEvent(instance.getElementAtEvent(event), event);\n      getElementsAtEvent && getElementsAtEvent(instance.getElementsAtEvent(event), event);\n      onElementsClick && onElementsClick(instance.getElementsAtEvent(event), event); // Backward compatibility\n    }, _this.ref = function (element) {\n      _this.element = element;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  ChartComponent.prototype.componentWillMount = function componentWillMount() {\n    this.chartInstance = undefined;\n  };\n\n  ChartComponent.prototype.componentDidMount = function componentDidMount() {\n    this.renderChart();\n  };\n\n  ChartComponent.prototype.componentDidUpdate = function componentDidUpdate() {\n    if (this.props.redraw) {\n      this.destroyChart();\n      this.renderChart();\n      return;\n    }\n\n    this.updateChart();\n  };\n\n  ChartComponent.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n    var _props = this.props,\n        redraw = _props.redraw,\n        type = _props.type,\n        options = _props.options,\n        plugins = _props.plugins,\n        legend = _props.legend,\n        height = _props.height,\n        width = _props.width;\n\n    if (nextProps.redraw === true) {\n      return true;\n    }\n\n    if (height !== nextProps.height || width !== nextProps.width) {\n      return true;\n    }\n\n    if (type !== nextProps.type) {\n      return true;\n    }\n\n    if (!isEqual(legend, nextProps.legend)) {\n      return true;\n    }\n\n    if (!isEqual(options, nextProps.options)) {\n      return true;\n    }\n\n    var nextData = this.transformDataProp(nextProps);\n\n    if (!isEqual(this.shadowDataProp, nextData)) {\n      return true;\n    }\n\n    return !isEqual(plugins, nextProps.plugins);\n  };\n\n  ChartComponent.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.destroyChart();\n  };\n\n  ChartComponent.prototype.transformDataProp = function transformDataProp(props) {\n    var data = props.data;\n\n    if (typeof data == 'function') {\n      var node = this.element;\n      return data(node);\n    } else {\n      return data;\n    }\n  }; // Chart.js directly mutates the data.dataset objects by adding _meta proprerty\n  // this makes impossible to compare the current and next data changes\n  // therefore we memoize the data prop while sending a fake to Chart.js for mutation.\n  // see https://github.com/chartjs/Chart.js/blob/master/src/core/core.controller.js#L615-L617\n\n\n  ChartComponent.prototype.memoizeDataProps = function memoizeDataProps() {\n    if (!this.props.data) {\n      return;\n    }\n\n    var data = this.transformDataProp(this.props);\n    this.shadowDataProp = _extends({}, data, {\n      datasets: data.datasets && data.datasets.map(function (set) {\n        return _extends({}, set);\n      })\n    });\n    this.saveCurrentDatasets(); // to remove the dataset metadata from this chart when the chart is destroyed\n\n    return data;\n  };\n\n  ChartComponent.prototype.checkDatasets = function checkDatasets(datasets) {\n    var isDev = NODE_ENV !== 'production' && NODE_ENV !== 'prod';\n    var usingCustomKeyProvider = this.props.datasetKeyProvider !== ChartComponent.getLabelAsKey;\n    var multipleDatasets = datasets.length > 1;\n\n    if (isDev && multipleDatasets && !usingCustomKeyProvider) {\n      var shouldWarn = false;\n      datasets.forEach(function (dataset) {\n        if (!dataset.label) {\n          shouldWarn = true;\n        }\n      });\n\n      if (shouldWarn) {\n        console.error('[react-chartjs-2] Warning: Each dataset needs a unique key. By default, the \"label\" property on each dataset is used. Alternatively, you may provide a \"datasetKeyProvider\" as a prop that returns a unique key.');\n      }\n    }\n  };\n\n  ChartComponent.prototype.getCurrentDatasets = function getCurrentDatasets() {\n    return this.chartInstance && this.chartInstance.config.data && this.chartInstance.config.data.datasets || [];\n  };\n\n  ChartComponent.prototype.saveCurrentDatasets = function saveCurrentDatasets() {\n    var _this2 = this;\n\n    this.datasets = this.datasets || {};\n    var currentDatasets = this.getCurrentDatasets();\n    currentDatasets.forEach(function (d) {\n      _this2.datasets[_this2.props.datasetKeyProvider(d)] = d;\n    });\n  };\n\n  ChartComponent.prototype.updateChart = function updateChart() {\n    var _this3 = this;\n\n    var options = this.props.options;\n    var data = this.memoizeDataProps(this.props);\n    if (!this.chartInstance) return;\n\n    if (options) {\n      this.chartInstance.options = Chart.helpers.configMerge(this.chartInstance.options, options);\n    } // Pipe datasets to chart instance datasets enabling\n    // seamless transitions\n\n\n    var currentDatasets = this.getCurrentDatasets();\n    var nextDatasets = data.datasets || [];\n    this.checkDatasets(currentDatasets);\n    var currentDatasetsIndexed = keyBy(currentDatasets, this.props.datasetKeyProvider); // We can safely replace the dataset array, as long as we retain the _meta property\n    // on each dataset.\n\n    this.chartInstance.config.data.datasets = nextDatasets.map(function (next) {\n      var current = currentDatasetsIndexed[_this3.props.datasetKeyProvider(next)];\n\n      if (current && current.type === next.type) {\n        // The data array must be edited in place. As chart.js adds listeners to it.\n        current.data.splice(next.data.length);\n        next.data.forEach(function (point, pid) {\n          current.data[pid] = next.data[pid];\n        });\n\n        var _data = next.data,\n            otherProps = _objectWithoutProperties(next, ['data']); // Merge properties. Notice a weakness here. If a property is removed\n        // from next, it will be retained by current and never disappears.\n        // Workaround is to set value to null or undefined in next.\n\n\n        return _extends({}, current, otherProps);\n      } else {\n        return next;\n      }\n    });\n\n    var datasets = data.datasets,\n        rest = _objectWithoutProperties(data, ['datasets']);\n\n    this.chartInstance.config.data = _extends({}, this.chartInstance.config.data, rest);\n    this.chartInstance.update();\n  };\n\n  ChartComponent.prototype.renderChart = function renderChart() {\n    var _props2 = this.props,\n        options = _props2.options,\n        legend = _props2.legend,\n        type = _props2.type,\n        plugins = _props2.plugins;\n    var node = this.element;\n    var data = this.memoizeDataProps();\n\n    if (typeof legend !== 'undefined' && !isEqual(ChartComponent.defaultProps.legend, legend)) {\n      options.legend = legend;\n    }\n\n    this.chartInstance = new Chart(node, {\n      type: type,\n      data: data,\n      options: options,\n      plugins: plugins\n    });\n  };\n\n  ChartComponent.prototype.destroyChart = function destroyChart() {\n    // Put all of the datasets that have existed in the chart back on the chart\n    // so that the metadata associated with this chart get destroyed.\n    // This allows the datasets to be used in another chart. This can happen,\n    // for example, in a tabbed UI where the chart gets created each time the\n    // tab gets switched to the chart and uses the same data).\n    this.saveCurrentDatasets();\n    var datasets = Object.values(this.datasets);\n    this.chartInstance.config.data.datasets = datasets;\n    this.chartInstance.destroy();\n  };\n\n  ChartComponent.prototype.render = function render() {\n    var _props3 = this.props,\n        height = _props3.height,\n        width = _props3.width,\n        id = _props3.id;\n    return React.createElement('canvas', {\n      ref: this.ref,\n      height: height,\n      width: width,\n      id: id,\n      onClick: this.handleOnClick\n    });\n  };\n\n  return ChartComponent;\n}(React.Component);\n\nChartComponent.getLabelAsKey = function (d) {\n  return d.label;\n};\n\nChartComponent.propTypes = {\n  data: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired,\n  getDatasetAtEvent: PropTypes.func,\n  getElementAtEvent: PropTypes.func,\n  getElementsAtEvent: PropTypes.func,\n  height: PropTypes.number,\n  legend: PropTypes.object,\n  onElementsClick: PropTypes.func,\n  options: PropTypes.object,\n  plugins: PropTypes.arrayOf(PropTypes.object),\n  redraw: PropTypes.bool,\n  type: function type(props, propName, componentName) {\n    if (!Chart.controllers[props[propName]]) {\n      return new Error('Invalid chart type `' + props[propName] + '` supplied to' + ' `' + componentName + '`.');\n    }\n  },\n  width: PropTypes.number,\n  datasetKeyProvider: PropTypes.func\n};\nChartComponent.defaultProps = {\n  legend: {\n    display: true,\n    position: 'bottom'\n  },\n  type: 'doughnut',\n  height: 150,\n  width: 300,\n  redraw: false,\n  options: {},\n  datasetKeyProvider: ChartComponent.getLabelAsKey\n};\nexport default ChartComponent;\nexport var Doughnut = function (_React$Component2) {\n  _inherits(Doughnut, _React$Component2);\n\n  function Doughnut() {\n    _classCallCheck(this, Doughnut);\n\n    return _possibleConstructorReturn(this, _React$Component2.apply(this, arguments));\n  }\n\n  Doughnut.prototype.render = function render() {\n    var _this5 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref) {\n        return _this5.chartInstance = _ref && _ref.chartInstance;\n      },\n      type: 'doughnut'\n    }));\n  };\n\n  return Doughnut;\n}(React.Component);\nexport var Pie = function (_React$Component3) {\n  _inherits(Pie, _React$Component3);\n\n  function Pie() {\n    _classCallCheck(this, Pie);\n\n    return _possibleConstructorReturn(this, _React$Component3.apply(this, arguments));\n  }\n\n  Pie.prototype.render = function render() {\n    var _this7 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref2) {\n        return _this7.chartInstance = _ref2 && _ref2.chartInstance;\n      },\n      type: 'pie'\n    }));\n  };\n\n  return Pie;\n}(React.Component);\nexport var Line = function (_React$Component4) {\n  _inherits(Line, _React$Component4);\n\n  function Line() {\n    _classCallCheck(this, Line);\n\n    return _possibleConstructorReturn(this, _React$Component4.apply(this, arguments));\n  }\n\n  Line.prototype.render = function render() {\n    var _this9 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref3) {\n        return _this9.chartInstance = _ref3 && _ref3.chartInstance;\n      },\n      type: 'line'\n    }));\n  };\n\n  return Line;\n}(React.Component);\nexport var Bar = function (_React$Component5) {\n  _inherits(Bar, _React$Component5);\n\n  function Bar() {\n    _classCallCheck(this, Bar);\n\n    return _possibleConstructorReturn(this, _React$Component5.apply(this, arguments));\n  }\n\n  Bar.prototype.render = function render() {\n    var _this11 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref4) {\n        return _this11.chartInstance = _ref4 && _ref4.chartInstance;\n      },\n      type: 'bar'\n    }));\n  };\n\n  return Bar;\n}(React.Component);\nexport var HorizontalBar = function (_React$Component6) {\n  _inherits(HorizontalBar, _React$Component6);\n\n  function HorizontalBar() {\n    _classCallCheck(this, HorizontalBar);\n\n    return _possibleConstructorReturn(this, _React$Component6.apply(this, arguments));\n  }\n\n  HorizontalBar.prototype.render = function render() {\n    var _this13 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref5) {\n        return _this13.chartInstance = _ref5 && _ref5.chartInstance;\n      },\n      type: 'horizontalBar'\n    }));\n  };\n\n  return HorizontalBar;\n}(React.Component);\nexport var Radar = function (_React$Component7) {\n  _inherits(Radar, _React$Component7);\n\n  function Radar() {\n    _classCallCheck(this, Radar);\n\n    return _possibleConstructorReturn(this, _React$Component7.apply(this, arguments));\n  }\n\n  Radar.prototype.render = function render() {\n    var _this15 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref6) {\n        return _this15.chartInstance = _ref6 && _ref6.chartInstance;\n      },\n      type: 'radar'\n    }));\n  };\n\n  return Radar;\n}(React.Component);\nexport var Polar = function (_React$Component8) {\n  _inherits(Polar, _React$Component8);\n\n  function Polar() {\n    _classCallCheck(this, Polar);\n\n    return _possibleConstructorReturn(this, _React$Component8.apply(this, arguments));\n  }\n\n  Polar.prototype.render = function render() {\n    var _this17 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref7) {\n        return _this17.chartInstance = _ref7 && _ref7.chartInstance;\n      },\n      type: 'polarArea'\n    }));\n  };\n\n  return Polar;\n}(React.Component);\nexport var Bubble = function (_React$Component9) {\n  _inherits(Bubble, _React$Component9);\n\n  function Bubble() {\n    _classCallCheck(this, Bubble);\n\n    return _possibleConstructorReturn(this, _React$Component9.apply(this, arguments));\n  }\n\n  Bubble.prototype.render = function render() {\n    var _this19 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref8) {\n        return _this19.chartInstance = _ref8 && _ref8.chartInstance;\n      },\n      type: 'bubble'\n    }));\n  };\n\n  return Bubble;\n}(React.Component);\nexport var Scatter = function (_React$Component10) {\n  _inherits(Scatter, _React$Component10);\n\n  function Scatter() {\n    _classCallCheck(this, Scatter);\n\n    return _possibleConstructorReturn(this, _React$Component10.apply(this, arguments));\n  }\n\n  Scatter.prototype.render = function render() {\n    var _this21 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref9) {\n        return _this21.chartInstance = _ref9 && _ref9.chartInstance;\n      },\n      type: 'scatter'\n    }));\n  };\n\n  return Scatter;\n}(React.Component);\nexport var defaults = Chart.defaults;\nexport { Chart };","/*!\n * Chart.js v2.8.0\n * https://www.chartjs.org\n * (c) 2019 Chart.js Contributors\n * Released under the MIT License\n */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(function () {\n    try {\n      return require('moment');\n    } catch (e) {}\n  }()) : typeof define === 'function' && define.amd ? define(['require'], function (require) {\n    return factory(function () {\n      try {\n        return require('moment');\n      } catch (e) {}\n    }());\n  }) : global.Chart = factory(global.moment);\n})(this, function (moment) {\n  'use strict';\n\n  moment = moment && moment.hasOwnProperty('default') ? moment['default'] : moment;\n  /* MIT license */\n\n  var conversions = {\n    rgb2hsl: rgb2hsl,\n    rgb2hsv: rgb2hsv,\n    rgb2hwb: rgb2hwb,\n    rgb2cmyk: rgb2cmyk,\n    rgb2keyword: rgb2keyword,\n    rgb2xyz: rgb2xyz,\n    rgb2lab: rgb2lab,\n    rgb2lch: rgb2lch,\n    hsl2rgb: hsl2rgb,\n    hsl2hsv: hsl2hsv,\n    hsl2hwb: hsl2hwb,\n    hsl2cmyk: hsl2cmyk,\n    hsl2keyword: hsl2keyword,\n    hsv2rgb: hsv2rgb,\n    hsv2hsl: hsv2hsl,\n    hsv2hwb: hsv2hwb,\n    hsv2cmyk: hsv2cmyk,\n    hsv2keyword: hsv2keyword,\n    hwb2rgb: hwb2rgb,\n    hwb2hsl: hwb2hsl,\n    hwb2hsv: hwb2hsv,\n    hwb2cmyk: hwb2cmyk,\n    hwb2keyword: hwb2keyword,\n    cmyk2rgb: cmyk2rgb,\n    cmyk2hsl: cmyk2hsl,\n    cmyk2hsv: cmyk2hsv,\n    cmyk2hwb: cmyk2hwb,\n    cmyk2keyword: cmyk2keyword,\n    keyword2rgb: keyword2rgb,\n    keyword2hsl: keyword2hsl,\n    keyword2hsv: keyword2hsv,\n    keyword2hwb: keyword2hwb,\n    keyword2cmyk: keyword2cmyk,\n    keyword2lab: keyword2lab,\n    keyword2xyz: keyword2xyz,\n    xyz2rgb: xyz2rgb,\n    xyz2lab: xyz2lab,\n    xyz2lch: xyz2lch,\n    lab2xyz: lab2xyz,\n    lab2rgb: lab2rgb,\n    lab2lch: lab2lch,\n    lch2lab: lch2lab,\n    lch2xyz: lch2xyz,\n    lch2rgb: lch2rgb\n  };\n\n  function rgb2hsl(rgb) {\n    var r = rgb[0] / 255,\n        g = rgb[1] / 255,\n        b = rgb[2] / 255,\n        min = Math.min(r, g, b),\n        max = Math.max(r, g, b),\n        delta = max - min,\n        h,\n        s,\n        l;\n    if (max == min) h = 0;else if (r == max) h = (g - b) / delta;else if (g == max) h = 2 + (b - r) / delta;else if (b == max) h = 4 + (r - g) / delta;\n    h = Math.min(h * 60, 360);\n    if (h < 0) h += 360;\n    l = (min + max) / 2;\n    if (max == min) s = 0;else if (l <= 0.5) s = delta / (max + min);else s = delta / (2 - max - min);\n    return [h, s * 100, l * 100];\n  }\n\n  function rgb2hsv(rgb) {\n    var r = rgb[0],\n        g = rgb[1],\n        b = rgb[2],\n        min = Math.min(r, g, b),\n        max = Math.max(r, g, b),\n        delta = max - min,\n        h,\n        s,\n        v;\n    if (max == 0) s = 0;else s = delta / max * 1000 / 10;\n    if (max == min) h = 0;else if (r == max) h = (g - b) / delta;else if (g == max) h = 2 + (b - r) / delta;else if (b == max) h = 4 + (r - g) / delta;\n    h = Math.min(h * 60, 360);\n    if (h < 0) h += 360;\n    v = max / 255 * 1000 / 10;\n    return [h, s, v];\n  }\n\n  function rgb2hwb(rgb) {\n    var r = rgb[0],\n        g = rgb[1],\n        b = rgb[2],\n        h = rgb2hsl(rgb)[0],\n        w = 1 / 255 * Math.min(r, Math.min(g, b)),\n        b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n    return [h, w * 100, b * 100];\n  }\n\n  function rgb2cmyk(rgb) {\n    var r = rgb[0] / 255,\n        g = rgb[1] / 255,\n        b = rgb[2] / 255,\n        c,\n        m,\n        y,\n        k;\n    k = Math.min(1 - r, 1 - g, 1 - b);\n    c = (1 - r - k) / (1 - k) || 0;\n    m = (1 - g - k) / (1 - k) || 0;\n    y = (1 - b - k) / (1 - k) || 0;\n    return [c * 100, m * 100, y * 100, k * 100];\n  }\n\n  function rgb2keyword(rgb) {\n    return reverseKeywords[JSON.stringify(rgb)];\n  }\n\n  function rgb2xyz(rgb) {\n    var r = rgb[0] / 255,\n        g = rgb[1] / 255,\n        b = rgb[2] / 255; // assume sRGB\n\n    r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\n    g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\n    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;\n    var x = r * 0.4124 + g * 0.3576 + b * 0.1805;\n    var y = r * 0.2126 + g * 0.7152 + b * 0.0722;\n    var z = r * 0.0193 + g * 0.1192 + b * 0.9505;\n    return [x * 100, y * 100, z * 100];\n  }\n\n  function rgb2lab(rgb) {\n    var xyz = rgb2xyz(rgb),\n        x = xyz[0],\n        y = xyz[1],\n        z = xyz[2],\n        l,\n        a,\n        b;\n    x /= 95.047;\n    y /= 100;\n    z /= 108.883;\n    x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\n    y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\n    z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\n    l = 116 * y - 16;\n    a = 500 * (x - y);\n    b = 200 * (y - z);\n    return [l, a, b];\n  }\n\n  function rgb2lch(args) {\n    return lab2lch(rgb2lab(args));\n  }\n\n  function hsl2rgb(hsl) {\n    var h = hsl[0] / 360,\n        s = hsl[1] / 100,\n        l = hsl[2] / 100,\n        t1,\n        t2,\n        t3,\n        rgb,\n        val;\n\n    if (s == 0) {\n      val = l * 255;\n      return [val, val, val];\n    }\n\n    if (l < 0.5) t2 = l * (1 + s);else t2 = l + s - l * s;\n    t1 = 2 * l - t2;\n    rgb = [0, 0, 0];\n\n    for (var i = 0; i < 3; i++) {\n      t3 = h + 1 / 3 * -(i - 1);\n      t3 < 0 && t3++;\n      t3 > 1 && t3--;\n      if (6 * t3 < 1) val = t1 + (t2 - t1) * 6 * t3;else if (2 * t3 < 1) val = t2;else if (3 * t3 < 2) val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;else val = t1;\n      rgb[i] = val * 255;\n    }\n\n    return rgb;\n  }\n\n  function hsl2hsv(hsl) {\n    var h = hsl[0],\n        s = hsl[1] / 100,\n        l = hsl[2] / 100,\n        sv,\n        v;\n\n    if (l === 0) {\n      // no need to do calc on black\n      // also avoids divide by 0 error\n      return [0, 0, 0];\n    }\n\n    l *= 2;\n    s *= l <= 1 ? l : 2 - l;\n    v = (l + s) / 2;\n    sv = 2 * s / (l + s);\n    return [h, sv * 100, v * 100];\n  }\n\n  function hsl2hwb(args) {\n    return rgb2hwb(hsl2rgb(args));\n  }\n\n  function hsl2cmyk(args) {\n    return rgb2cmyk(hsl2rgb(args));\n  }\n\n  function hsl2keyword(args) {\n    return rgb2keyword(hsl2rgb(args));\n  }\n\n  function hsv2rgb(hsv) {\n    var h = hsv[0] / 60,\n        s = hsv[1] / 100,\n        v = hsv[2] / 100,\n        hi = Math.floor(h) % 6;\n    var f = h - Math.floor(h),\n        p = 255 * v * (1 - s),\n        q = 255 * v * (1 - s * f),\n        t = 255 * v * (1 - s * (1 - f)),\n        v = 255 * v;\n\n    switch (hi) {\n      case 0:\n        return [v, t, p];\n\n      case 1:\n        return [q, v, p];\n\n      case 2:\n        return [p, v, t];\n\n      case 3:\n        return [p, q, v];\n\n      case 4:\n        return [t, p, v];\n\n      case 5:\n        return [v, p, q];\n    }\n  }\n\n  function hsv2hsl(hsv) {\n    var h = hsv[0],\n        s = hsv[1] / 100,\n        v = hsv[2] / 100,\n        sl,\n        l;\n    l = (2 - s) * v;\n    sl = s * v;\n    sl /= l <= 1 ? l : 2 - l;\n    sl = sl || 0;\n    l /= 2;\n    return [h, sl * 100, l * 100];\n  }\n\n  function hsv2hwb(args) {\n    return rgb2hwb(hsv2rgb(args));\n  }\n\n  function hsv2cmyk(args) {\n    return rgb2cmyk(hsv2rgb(args));\n  }\n\n  function hsv2keyword(args) {\n    return rgb2keyword(hsv2rgb(args));\n  } // http://dev.w3.org/csswg/css-color/#hwb-to-rgb\n\n\n  function hwb2rgb(hwb) {\n    var h = hwb[0] / 360,\n        wh = hwb[1] / 100,\n        bl = hwb[2] / 100,\n        ratio = wh + bl,\n        i,\n        v,\n        f,\n        n; // wh + bl cant be > 1\n\n    if (ratio > 1) {\n      wh /= ratio;\n      bl /= ratio;\n    }\n\n    i = Math.floor(6 * h);\n    v = 1 - bl;\n    f = 6 * h - i;\n\n    if ((i & 0x01) != 0) {\n      f = 1 - f;\n    }\n\n    n = wh + f * (v - wh); // linear interpolation\n\n    switch (i) {\n      default:\n      case 6:\n      case 0:\n        r = v;\n        g = n;\n        b = wh;\n        break;\n\n      case 1:\n        r = n;\n        g = v;\n        b = wh;\n        break;\n\n      case 2:\n        r = wh;\n        g = v;\n        b = n;\n        break;\n\n      case 3:\n        r = wh;\n        g = n;\n        b = v;\n        break;\n\n      case 4:\n        r = n;\n        g = wh;\n        b = v;\n        break;\n\n      case 5:\n        r = v;\n        g = wh;\n        b = n;\n        break;\n    }\n\n    return [r * 255, g * 255, b * 255];\n  }\n\n  function hwb2hsl(args) {\n    return rgb2hsl(hwb2rgb(args));\n  }\n\n  function hwb2hsv(args) {\n    return rgb2hsv(hwb2rgb(args));\n  }\n\n  function hwb2cmyk(args) {\n    return rgb2cmyk(hwb2rgb(args));\n  }\n\n  function hwb2keyword(args) {\n    return rgb2keyword(hwb2rgb(args));\n  }\n\n  function cmyk2rgb(cmyk) {\n    var c = cmyk[0] / 100,\n        m = cmyk[1] / 100,\n        y = cmyk[2] / 100,\n        k = cmyk[3] / 100,\n        r,\n        g,\n        b;\n    r = 1 - Math.min(1, c * (1 - k) + k);\n    g = 1 - Math.min(1, m * (1 - k) + k);\n    b = 1 - Math.min(1, y * (1 - k) + k);\n    return [r * 255, g * 255, b * 255];\n  }\n\n  function cmyk2hsl(args) {\n    return rgb2hsl(cmyk2rgb(args));\n  }\n\n  function cmyk2hsv(args) {\n    return rgb2hsv(cmyk2rgb(args));\n  }\n\n  function cmyk2hwb(args) {\n    return rgb2hwb(cmyk2rgb(args));\n  }\n\n  function cmyk2keyword(args) {\n    return rgb2keyword(cmyk2rgb(args));\n  }\n\n  function xyz2rgb(xyz) {\n    var x = xyz[0] / 100,\n        y = xyz[1] / 100,\n        z = xyz[2] / 100,\n        r,\n        g,\n        b;\n    r = x * 3.2406 + y * -1.5372 + z * -0.4986;\n    g = x * -0.9689 + y * 1.8758 + z * 0.0415;\n    b = x * 0.0557 + y * -0.2040 + z * 1.0570; // assume sRGB\n\n    r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r = r * 12.92;\n    g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g = g * 12.92;\n    b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b = b * 12.92;\n    r = Math.min(Math.max(0, r), 1);\n    g = Math.min(Math.max(0, g), 1);\n    b = Math.min(Math.max(0, b), 1);\n    return [r * 255, g * 255, b * 255];\n  }\n\n  function xyz2lab(xyz) {\n    var x = xyz[0],\n        y = xyz[1],\n        z = xyz[2],\n        l,\n        a,\n        b;\n    x /= 95.047;\n    y /= 100;\n    z /= 108.883;\n    x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\n    y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\n    z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\n    l = 116 * y - 16;\n    a = 500 * (x - y);\n    b = 200 * (y - z);\n    return [l, a, b];\n  }\n\n  function xyz2lch(args) {\n    return lab2lch(xyz2lab(args));\n  }\n\n  function lab2xyz(lab) {\n    var l = lab[0],\n        a = lab[1],\n        b = lab[2],\n        x,\n        y,\n        z,\n        y2;\n\n    if (l <= 8) {\n      y = l * 100 / 903.3;\n      y2 = 7.787 * (y / 100) + 16 / 116;\n    } else {\n      y = 100 * Math.pow((l + 16) / 116, 3);\n      y2 = Math.pow(y / 100, 1 / 3);\n    }\n\n    x = x / 95.047 <= 0.008856 ? x = 95.047 * (a / 500 + y2 - 16 / 116) / 7.787 : 95.047 * Math.pow(a / 500 + y2, 3);\n    z = z / 108.883 <= 0.008859 ? z = 108.883 * (y2 - b / 200 - 16 / 116) / 7.787 : 108.883 * Math.pow(y2 - b / 200, 3);\n    return [x, y, z];\n  }\n\n  function lab2lch(lab) {\n    var l = lab[0],\n        a = lab[1],\n        b = lab[2],\n        hr,\n        h,\n        c;\n    hr = Math.atan2(b, a);\n    h = hr * 360 / 2 / Math.PI;\n\n    if (h < 0) {\n      h += 360;\n    }\n\n    c = Math.sqrt(a * a + b * b);\n    return [l, c, h];\n  }\n\n  function lab2rgb(args) {\n    return xyz2rgb(lab2xyz(args));\n  }\n\n  function lch2lab(lch) {\n    var l = lch[0],\n        c = lch[1],\n        h = lch[2],\n        a,\n        b,\n        hr;\n    hr = h / 360 * 2 * Math.PI;\n    a = c * Math.cos(hr);\n    b = c * Math.sin(hr);\n    return [l, a, b];\n  }\n\n  function lch2xyz(args) {\n    return lab2xyz(lch2lab(args));\n  }\n\n  function lch2rgb(args) {\n    return lab2rgb(lch2lab(args));\n  }\n\n  function keyword2rgb(keyword) {\n    return cssKeywords[keyword];\n  }\n\n  function keyword2hsl(args) {\n    return rgb2hsl(keyword2rgb(args));\n  }\n\n  function keyword2hsv(args) {\n    return rgb2hsv(keyword2rgb(args));\n  }\n\n  function keyword2hwb(args) {\n    return rgb2hwb(keyword2rgb(args));\n  }\n\n  function keyword2cmyk(args) {\n    return rgb2cmyk(keyword2rgb(args));\n  }\n\n  function keyword2lab(args) {\n    return rgb2lab(keyword2rgb(args));\n  }\n\n  function keyword2xyz(args) {\n    return rgb2xyz(keyword2rgb(args));\n  }\n\n  var cssKeywords = {\n    aliceblue: [240, 248, 255],\n    antiquewhite: [250, 235, 215],\n    aqua: [0, 255, 255],\n    aquamarine: [127, 255, 212],\n    azure: [240, 255, 255],\n    beige: [245, 245, 220],\n    bisque: [255, 228, 196],\n    black: [0, 0, 0],\n    blanchedalmond: [255, 235, 205],\n    blue: [0, 0, 255],\n    blueviolet: [138, 43, 226],\n    brown: [165, 42, 42],\n    burlywood: [222, 184, 135],\n    cadetblue: [95, 158, 160],\n    chartreuse: [127, 255, 0],\n    chocolate: [210, 105, 30],\n    coral: [255, 127, 80],\n    cornflowerblue: [100, 149, 237],\n    cornsilk: [255, 248, 220],\n    crimson: [220, 20, 60],\n    cyan: [0, 255, 255],\n    darkblue: [0, 0, 139],\n    darkcyan: [0, 139, 139],\n    darkgoldenrod: [184, 134, 11],\n    darkgray: [169, 169, 169],\n    darkgreen: [0, 100, 0],\n    darkgrey: [169, 169, 169],\n    darkkhaki: [189, 183, 107],\n    darkmagenta: [139, 0, 139],\n    darkolivegreen: [85, 107, 47],\n    darkorange: [255, 140, 0],\n    darkorchid: [153, 50, 204],\n    darkred: [139, 0, 0],\n    darksalmon: [233, 150, 122],\n    darkseagreen: [143, 188, 143],\n    darkslateblue: [72, 61, 139],\n    darkslategray: [47, 79, 79],\n    darkslategrey: [47, 79, 79],\n    darkturquoise: [0, 206, 209],\n    darkviolet: [148, 0, 211],\n    deeppink: [255, 20, 147],\n    deepskyblue: [0, 191, 255],\n    dimgray: [105, 105, 105],\n    dimgrey: [105, 105, 105],\n    dodgerblue: [30, 144, 255],\n    firebrick: [178, 34, 34],\n    floralwhite: [255, 250, 240],\n    forestgreen: [34, 139, 34],\n    fuchsia: [255, 0, 255],\n    gainsboro: [220, 220, 220],\n    ghostwhite: [248, 248, 255],\n    gold: [255, 215, 0],\n    goldenrod: [218, 165, 32],\n    gray: [128, 128, 128],\n    green: [0, 128, 0],\n    greenyellow: [173, 255, 47],\n    grey: [128, 128, 128],\n    honeydew: [240, 255, 240],\n    hotpink: [255, 105, 180],\n    indianred: [205, 92, 92],\n    indigo: [75, 0, 130],\n    ivory: [255, 255, 240],\n    khaki: [240, 230, 140],\n    lavender: [230, 230, 250],\n    lavenderblush: [255, 240, 245],\n    lawngreen: [124, 252, 0],\n    lemonchiffon: [255, 250, 205],\n    lightblue: [173, 216, 230],\n    lightcoral: [240, 128, 128],\n    lightcyan: [224, 255, 255],\n    lightgoldenrodyellow: [250, 250, 210],\n    lightgray: [211, 211, 211],\n    lightgreen: [144, 238, 144],\n    lightgrey: [211, 211, 211],\n    lightpink: [255, 182, 193],\n    lightsalmon: [255, 160, 122],\n    lightseagreen: [32, 178, 170],\n    lightskyblue: [135, 206, 250],\n    lightslategray: [119, 136, 153],\n    lightslategrey: [119, 136, 153],\n    lightsteelblue: [176, 196, 222],\n    lightyellow: [255, 255, 224],\n    lime: [0, 255, 0],\n    limegreen: [50, 205, 50],\n    linen: [250, 240, 230],\n    magenta: [255, 0, 255],\n    maroon: [128, 0, 0],\n    mediumaquamarine: [102, 205, 170],\n    mediumblue: [0, 0, 205],\n    mediumorchid: [186, 85, 211],\n    mediumpurple: [147, 112, 219],\n    mediumseagreen: [60, 179, 113],\n    mediumslateblue: [123, 104, 238],\n    mediumspringgreen: [0, 250, 154],\n    mediumturquoise: [72, 209, 204],\n    mediumvioletred: [199, 21, 133],\n    midnightblue: [25, 25, 112],\n    mintcream: [245, 255, 250],\n    mistyrose: [255, 228, 225],\n    moccasin: [255, 228, 181],\n    navajowhite: [255, 222, 173],\n    navy: [0, 0, 128],\n    oldlace: [253, 245, 230],\n    olive: [128, 128, 0],\n    olivedrab: [107, 142, 35],\n    orange: [255, 165, 0],\n    orangered: [255, 69, 0],\n    orchid: [218, 112, 214],\n    palegoldenrod: [238, 232, 170],\n    palegreen: [152, 251, 152],\n    paleturquoise: [175, 238, 238],\n    palevioletred: [219, 112, 147],\n    papayawhip: [255, 239, 213],\n    peachpuff: [255, 218, 185],\n    peru: [205, 133, 63],\n    pink: [255, 192, 203],\n    plum: [221, 160, 221],\n    powderblue: [176, 224, 230],\n    purple: [128, 0, 128],\n    rebeccapurple: [102, 51, 153],\n    red: [255, 0, 0],\n    rosybrown: [188, 143, 143],\n    royalblue: [65, 105, 225],\n    saddlebrown: [139, 69, 19],\n    salmon: [250, 128, 114],\n    sandybrown: [244, 164, 96],\n    seagreen: [46, 139, 87],\n    seashell: [255, 245, 238],\n    sienna: [160, 82, 45],\n    silver: [192, 192, 192],\n    skyblue: [135, 206, 235],\n    slateblue: [106, 90, 205],\n    slategray: [112, 128, 144],\n    slategrey: [112, 128, 144],\n    snow: [255, 250, 250],\n    springgreen: [0, 255, 127],\n    steelblue: [70, 130, 180],\n    tan: [210, 180, 140],\n    teal: [0, 128, 128],\n    thistle: [216, 191, 216],\n    tomato: [255, 99, 71],\n    turquoise: [64, 224, 208],\n    violet: [238, 130, 238],\n    wheat: [245, 222, 179],\n    white: [255, 255, 255],\n    whitesmoke: [245, 245, 245],\n    yellow: [255, 255, 0],\n    yellowgreen: [154, 205, 50]\n  };\n  var reverseKeywords = {};\n\n  for (var key in cssKeywords) {\n    reverseKeywords[JSON.stringify(cssKeywords[key])] = key;\n  }\n\n  var convert = function convert() {\n    return new Converter();\n  };\n\n  for (var func in conversions) {\n    // export Raw versions\n    convert[func + \"Raw\"] = function (func) {\n      // accept array or plain args\n      return function (arg) {\n        if (typeof arg == \"number\") arg = Array.prototype.slice.call(arguments);\n        return conversions[func](arg);\n      };\n    }(func);\n\n    var pair = /(\\w+)2(\\w+)/.exec(func),\n        from = pair[1],\n        to = pair[2]; // export rgb2hsl and [\"rgb\"][\"hsl\"]\n\n    convert[from] = convert[from] || {};\n\n    convert[from][to] = convert[func] = function (func) {\n      return function (arg) {\n        if (typeof arg == \"number\") arg = Array.prototype.slice.call(arguments);\n        var val = conversions[func](arg);\n        if (typeof val == \"string\" || val === undefined) return val; // keyword\n\n        for (var i = 0; i < val.length; i++) {\n          val[i] = Math.round(val[i]);\n        }\n\n        return val;\n      };\n    }(func);\n  }\n  /* Converter does lazy conversion and caching */\n\n\n  var Converter = function Converter() {\n    this.convs = {};\n  };\n  /* Either get the values for a space or\n    set the values for a space, depending on args */\n\n\n  Converter.prototype.routeSpace = function (space, args) {\n    var values = args[0];\n\n    if (values === undefined) {\n      // color.rgb()\n      return this.getValues(space);\n    } // color.rgb(10, 10, 10)\n\n\n    if (typeof values == \"number\") {\n      values = Array.prototype.slice.call(args);\n    }\n\n    return this.setValues(space, values);\n  };\n  /* Set the values for a space, invalidating cache */\n\n\n  Converter.prototype.setValues = function (space, values) {\n    this.space = space;\n    this.convs = {};\n    this.convs[space] = values;\n    return this;\n  };\n  /* Get the values for a space. If there's already\n    a conversion for the space, fetch it, otherwise\n    compute it */\n\n\n  Converter.prototype.getValues = function (space) {\n    var vals = this.convs[space];\n\n    if (!vals) {\n      var fspace = this.space,\n          from = this.convs[fspace];\n      vals = convert[fspace][space](from);\n      this.convs[space] = vals;\n    }\n\n    return vals;\n  };\n\n  [\"rgb\", \"hsl\", \"hsv\", \"cmyk\", \"keyword\"].forEach(function (space) {\n    Converter.prototype[space] = function (vals) {\n      return this.routeSpace(space, arguments);\n    };\n  });\n  var colorConvert = convert;\n  var colorName = {\n    \"aliceblue\": [240, 248, 255],\n    \"antiquewhite\": [250, 235, 215],\n    \"aqua\": [0, 255, 255],\n    \"aquamarine\": [127, 255, 212],\n    \"azure\": [240, 255, 255],\n    \"beige\": [245, 245, 220],\n    \"bisque\": [255, 228, 196],\n    \"black\": [0, 0, 0],\n    \"blanchedalmond\": [255, 235, 205],\n    \"blue\": [0, 0, 255],\n    \"blueviolet\": [138, 43, 226],\n    \"brown\": [165, 42, 42],\n    \"burlywood\": [222, 184, 135],\n    \"cadetblue\": [95, 158, 160],\n    \"chartreuse\": [127, 255, 0],\n    \"chocolate\": [210, 105, 30],\n    \"coral\": [255, 127, 80],\n    \"cornflowerblue\": [100, 149, 237],\n    \"cornsilk\": [255, 248, 220],\n    \"crimson\": [220, 20, 60],\n    \"cyan\": [0, 255, 255],\n    \"darkblue\": [0, 0, 139],\n    \"darkcyan\": [0, 139, 139],\n    \"darkgoldenrod\": [184, 134, 11],\n    \"darkgray\": [169, 169, 169],\n    \"darkgreen\": [0, 100, 0],\n    \"darkgrey\": [169, 169, 169],\n    \"darkkhaki\": [189, 183, 107],\n    \"darkmagenta\": [139, 0, 139],\n    \"darkolivegreen\": [85, 107, 47],\n    \"darkorange\": [255, 140, 0],\n    \"darkorchid\": [153, 50, 204],\n    \"darkred\": [139, 0, 0],\n    \"darksalmon\": [233, 150, 122],\n    \"darkseagreen\": [143, 188, 143],\n    \"darkslateblue\": [72, 61, 139],\n    \"darkslategray\": [47, 79, 79],\n    \"darkslategrey\": [47, 79, 79],\n    \"darkturquoise\": [0, 206, 209],\n    \"darkviolet\": [148, 0, 211],\n    \"deeppink\": [255, 20, 147],\n    \"deepskyblue\": [0, 191, 255],\n    \"dimgray\": [105, 105, 105],\n    \"dimgrey\": [105, 105, 105],\n    \"dodgerblue\": [30, 144, 255],\n    \"firebrick\": [178, 34, 34],\n    \"floralwhite\": [255, 250, 240],\n    \"forestgreen\": [34, 139, 34],\n    \"fuchsia\": [255, 0, 255],\n    \"gainsboro\": [220, 220, 220],\n    \"ghostwhite\": [248, 248, 255],\n    \"gold\": [255, 215, 0],\n    \"goldenrod\": [218, 165, 32],\n    \"gray\": [128, 128, 128],\n    \"green\": [0, 128, 0],\n    \"greenyellow\": [173, 255, 47],\n    \"grey\": [128, 128, 128],\n    \"honeydew\": [240, 255, 240],\n    \"hotpink\": [255, 105, 180],\n    \"indianred\": [205, 92, 92],\n    \"indigo\": [75, 0, 130],\n    \"ivory\": [255, 255, 240],\n    \"khaki\": [240, 230, 140],\n    \"lavender\": [230, 230, 250],\n    \"lavenderblush\": [255, 240, 245],\n    \"lawngreen\": [124, 252, 0],\n    \"lemonchiffon\": [255, 250, 205],\n    \"lightblue\": [173, 216, 230],\n    \"lightcoral\": [240, 128, 128],\n    \"lightcyan\": [224, 255, 255],\n    \"lightgoldenrodyellow\": [250, 250, 210],\n    \"lightgray\": [211, 211, 211],\n    \"lightgreen\": [144, 238, 144],\n    \"lightgrey\": [211, 211, 211],\n    \"lightpink\": [255, 182, 193],\n    \"lightsalmon\": [255, 160, 122],\n    \"lightseagreen\": [32, 178, 170],\n    \"lightskyblue\": [135, 206, 250],\n    \"lightslategray\": [119, 136, 153],\n    \"lightslategrey\": [119, 136, 153],\n    \"lightsteelblue\": [176, 196, 222],\n    \"lightyellow\": [255, 255, 224],\n    \"lime\": [0, 255, 0],\n    \"limegreen\": [50, 205, 50],\n    \"linen\": [250, 240, 230],\n    \"magenta\": [255, 0, 255],\n    \"maroon\": [128, 0, 0],\n    \"mediumaquamarine\": [102, 205, 170],\n    \"mediumblue\": [0, 0, 205],\n    \"mediumorchid\": [186, 85, 211],\n    \"mediumpurple\": [147, 112, 219],\n    \"mediumseagreen\": [60, 179, 113],\n    \"mediumslateblue\": [123, 104, 238],\n    \"mediumspringgreen\": [0, 250, 154],\n    \"mediumturquoise\": [72, 209, 204],\n    \"mediumvioletred\": [199, 21, 133],\n    \"midnightblue\": [25, 25, 112],\n    \"mintcream\": [245, 255, 250],\n    \"mistyrose\": [255, 228, 225],\n    \"moccasin\": [255, 228, 181],\n    \"navajowhite\": [255, 222, 173],\n    \"navy\": [0, 0, 128],\n    \"oldlace\": [253, 245, 230],\n    \"olive\": [128, 128, 0],\n    \"olivedrab\": [107, 142, 35],\n    \"orange\": [255, 165, 0],\n    \"orangered\": [255, 69, 0],\n    \"orchid\": [218, 112, 214],\n    \"palegoldenrod\": [238, 232, 170],\n    \"palegreen\": [152, 251, 152],\n    \"paleturquoise\": [175, 238, 238],\n    \"palevioletred\": [219, 112, 147],\n    \"papayawhip\": [255, 239, 213],\n    \"peachpuff\": [255, 218, 185],\n    \"peru\": [205, 133, 63],\n    \"pink\": [255, 192, 203],\n    \"plum\": [221, 160, 221],\n    \"powderblue\": [176, 224, 230],\n    \"purple\": [128, 0, 128],\n    \"rebeccapurple\": [102, 51, 153],\n    \"red\": [255, 0, 0],\n    \"rosybrown\": [188, 143, 143],\n    \"royalblue\": [65, 105, 225],\n    \"saddlebrown\": [139, 69, 19],\n    \"salmon\": [250, 128, 114],\n    \"sandybrown\": [244, 164, 96],\n    \"seagreen\": [46, 139, 87],\n    \"seashell\": [255, 245, 238],\n    \"sienna\": [160, 82, 45],\n    \"silver\": [192, 192, 192],\n    \"skyblue\": [135, 206, 235],\n    \"slateblue\": [106, 90, 205],\n    \"slategray\": [112, 128, 144],\n    \"slategrey\": [112, 128, 144],\n    \"snow\": [255, 250, 250],\n    \"springgreen\": [0, 255, 127],\n    \"steelblue\": [70, 130, 180],\n    \"tan\": [210, 180, 140],\n    \"teal\": [0, 128, 128],\n    \"thistle\": [216, 191, 216],\n    \"tomato\": [255, 99, 71],\n    \"turquoise\": [64, 224, 208],\n    \"violet\": [238, 130, 238],\n    \"wheat\": [245, 222, 179],\n    \"white\": [255, 255, 255],\n    \"whitesmoke\": [245, 245, 245],\n    \"yellow\": [255, 255, 0],\n    \"yellowgreen\": [154, 205, 50]\n  };\n  /* MIT license */\n\n  var colorString = {\n    getRgba: getRgba,\n    getHsla: getHsla,\n    getRgb: getRgb,\n    getHsl: getHsl,\n    getHwb: getHwb,\n    getAlpha: getAlpha,\n    hexString: hexString,\n    rgbString: rgbString,\n    rgbaString: rgbaString,\n    percentString: percentString,\n    percentaString: percentaString,\n    hslString: hslString,\n    hslaString: hslaString,\n    hwbString: hwbString,\n    keyword: keyword\n  };\n\n  function getRgba(string) {\n    if (!string) {\n      return;\n    }\n\n    var abbr = /^#([a-fA-F0-9]{3,4})$/i,\n        hex = /^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i,\n        rgba = /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/i,\n        per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/i,\n        keyword = /(\\w+)/;\n    var rgb = [0, 0, 0],\n        a = 1,\n        match = string.match(abbr),\n        hexAlpha = \"\";\n\n    if (match) {\n      match = match[1];\n      hexAlpha = match[3];\n\n      for (var i = 0; i < rgb.length; i++) {\n        rgb[i] = parseInt(match[i] + match[i], 16);\n      }\n\n      if (hexAlpha) {\n        a = Math.round(parseInt(hexAlpha + hexAlpha, 16) / 255 * 100) / 100;\n      }\n    } else if (match = string.match(hex)) {\n      hexAlpha = match[2];\n      match = match[1];\n\n      for (var i = 0; i < rgb.length; i++) {\n        rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);\n      }\n\n      if (hexAlpha) {\n        a = Math.round(parseInt(hexAlpha, 16) / 255 * 100) / 100;\n      }\n    } else if (match = string.match(rgba)) {\n      for (var i = 0; i < rgb.length; i++) {\n        rgb[i] = parseInt(match[i + 1]);\n      }\n\n      a = parseFloat(match[4]);\n    } else if (match = string.match(per)) {\n      for (var i = 0; i < rgb.length; i++) {\n        rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\n      }\n\n      a = parseFloat(match[4]);\n    } else if (match = string.match(keyword)) {\n      if (match[1] == \"transparent\") {\n        return [0, 0, 0, 0];\n      }\n\n      rgb = colorName[match[1]];\n\n      if (!rgb) {\n        return;\n      }\n    }\n\n    for (var i = 0; i < rgb.length; i++) {\n      rgb[i] = scale(rgb[i], 0, 255);\n    }\n\n    if (!a && a != 0) {\n      a = 1;\n    } else {\n      a = scale(a, 0, 1);\n    }\n\n    rgb[3] = a;\n    return rgb;\n  }\n\n  function getHsla(string) {\n    if (!string) {\n      return;\n    }\n\n    var hsl = /^hsla?\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/;\n    var match = string.match(hsl);\n\n    if (match) {\n      var alpha = parseFloat(match[4]);\n      var h = scale(parseInt(match[1]), 0, 360),\n          s = scale(parseFloat(match[2]), 0, 100),\n          l = scale(parseFloat(match[3]), 0, 100),\n          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);\n      return [h, s, l, a];\n    }\n  }\n\n  function getHwb(string) {\n    if (!string) {\n      return;\n    }\n\n    var hwb = /^hwb\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/;\n    var match = string.match(hwb);\n\n    if (match) {\n      var alpha = parseFloat(match[4]);\n      var h = scale(parseInt(match[1]), 0, 360),\n          w = scale(parseFloat(match[2]), 0, 100),\n          b = scale(parseFloat(match[3]), 0, 100),\n          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);\n      return [h, w, b, a];\n    }\n  }\n\n  function getRgb(string) {\n    var rgba = getRgba(string);\n    return rgba && rgba.slice(0, 3);\n  }\n\n  function getHsl(string) {\n    var hsla = getHsla(string);\n    return hsla && hsla.slice(0, 3);\n  }\n\n  function getAlpha(string) {\n    var vals = getRgba(string);\n\n    if (vals) {\n      return vals[3];\n    } else if (vals = getHsla(string)) {\n      return vals[3];\n    } else if (vals = getHwb(string)) {\n      return vals[3];\n    }\n  } // generators\n\n\n  function hexString(rgba, a) {\n    var a = a !== undefined && rgba.length === 3 ? a : rgba[3];\n    return \"#\" + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (a >= 0 && a < 1 ? hexDouble(Math.round(a * 255)) : \"\");\n  }\n\n  function rgbString(rgba, alpha) {\n    if (alpha < 1 || rgba[3] && rgba[3] < 1) {\n      return rgbaString(rgba, alpha);\n    }\n\n    return \"rgb(\" + rgba[0] + \", \" + rgba[1] + \", \" + rgba[2] + \")\";\n  }\n\n  function rgbaString(rgba, alpha) {\n    if (alpha === undefined) {\n      alpha = rgba[3] !== undefined ? rgba[3] : 1;\n    }\n\n    return \"rgba(\" + rgba[0] + \", \" + rgba[1] + \", \" + rgba[2] + \", \" + alpha + \")\";\n  }\n\n  function percentString(rgba, alpha) {\n    if (alpha < 1 || rgba[3] && rgba[3] < 1) {\n      return percentaString(rgba, alpha);\n    }\n\n    var r = Math.round(rgba[0] / 255 * 100),\n        g = Math.round(rgba[1] / 255 * 100),\n        b = Math.round(rgba[2] / 255 * 100);\n    return \"rgb(\" + r + \"%, \" + g + \"%, \" + b + \"%)\";\n  }\n\n  function percentaString(rgba, alpha) {\n    var r = Math.round(rgba[0] / 255 * 100),\n        g = Math.round(rgba[1] / 255 * 100),\n        b = Math.round(rgba[2] / 255 * 100);\n    return \"rgba(\" + r + \"%, \" + g + \"%, \" + b + \"%, \" + (alpha || rgba[3] || 1) + \")\";\n  }\n\n  function hslString(hsla, alpha) {\n    if (alpha < 1 || hsla[3] && hsla[3] < 1) {\n      return hslaString(hsla, alpha);\n    }\n\n    return \"hsl(\" + hsla[0] + \", \" + hsla[1] + \"%, \" + hsla[2] + \"%)\";\n  }\n\n  function hslaString(hsla, alpha) {\n    if (alpha === undefined) {\n      alpha = hsla[3] !== undefined ? hsla[3] : 1;\n    }\n\n    return \"hsla(\" + hsla[0] + \", \" + hsla[1] + \"%, \" + hsla[2] + \"%, \" + alpha + \")\";\n  } // hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\n  // (hwb have alpha optional & 1 is default value)\n\n\n  function hwbString(hwb, alpha) {\n    if (alpha === undefined) {\n      alpha = hwb[3] !== undefined ? hwb[3] : 1;\n    }\n\n    return \"hwb(\" + hwb[0] + \", \" + hwb[1] + \"%, \" + hwb[2] + \"%\" + (alpha !== undefined && alpha !== 1 ? \", \" + alpha : \"\") + \")\";\n  }\n\n  function keyword(rgb) {\n    return reverseNames[rgb.slice(0, 3)];\n  } // helpers\n\n\n  function scale(num, min, max) {\n    return Math.min(Math.max(min, num), max);\n  }\n\n  function hexDouble(num) {\n    var str = num.toString(16).toUpperCase();\n    return str.length < 2 ? \"0\" + str : str;\n  } //create a list of reverse color names\n\n\n  var reverseNames = {};\n\n  for (var name in colorName) {\n    reverseNames[colorName[name]] = name;\n  }\n  /* MIT license */\n\n\n  var Color = function Color(obj) {\n    if (obj instanceof Color) {\n      return obj;\n    }\n\n    if (!(this instanceof Color)) {\n      return new Color(obj);\n    }\n\n    this.valid = false;\n    this.values = {\n      rgb: [0, 0, 0],\n      hsl: [0, 0, 0],\n      hsv: [0, 0, 0],\n      hwb: [0, 0, 0],\n      cmyk: [0, 0, 0, 0],\n      alpha: 1\n    }; // parse Color() argument\n\n    var vals;\n\n    if (typeof obj === 'string') {\n      vals = colorString.getRgba(obj);\n\n      if (vals) {\n        this.setValues('rgb', vals);\n      } else if (vals = colorString.getHsla(obj)) {\n        this.setValues('hsl', vals);\n      } else if (vals = colorString.getHwb(obj)) {\n        this.setValues('hwb', vals);\n      }\n    } else if (typeof obj === 'object') {\n      vals = obj;\n\n      if (vals.r !== undefined || vals.red !== undefined) {\n        this.setValues('rgb', vals);\n      } else if (vals.l !== undefined || vals.lightness !== undefined) {\n        this.setValues('hsl', vals);\n      } else if (vals.v !== undefined || vals.value !== undefined) {\n        this.setValues('hsv', vals);\n      } else if (vals.w !== undefined || vals.whiteness !== undefined) {\n        this.setValues('hwb', vals);\n      } else if (vals.c !== undefined || vals.cyan !== undefined) {\n        this.setValues('cmyk', vals);\n      }\n    }\n  };\n\n  Color.prototype = {\n    isValid: function isValid() {\n      return this.valid;\n    },\n    rgb: function rgb() {\n      return this.setSpace('rgb', arguments);\n    },\n    hsl: function hsl() {\n      return this.setSpace('hsl', arguments);\n    },\n    hsv: function hsv() {\n      return this.setSpace('hsv', arguments);\n    },\n    hwb: function hwb() {\n      return this.setSpace('hwb', arguments);\n    },\n    cmyk: function cmyk() {\n      return this.setSpace('cmyk', arguments);\n    },\n    rgbArray: function rgbArray() {\n      return this.values.rgb;\n    },\n    hslArray: function hslArray() {\n      return this.values.hsl;\n    },\n    hsvArray: function hsvArray() {\n      return this.values.hsv;\n    },\n    hwbArray: function hwbArray() {\n      var values = this.values;\n\n      if (values.alpha !== 1) {\n        return values.hwb.concat([values.alpha]);\n      }\n\n      return values.hwb;\n    },\n    cmykArray: function cmykArray() {\n      return this.values.cmyk;\n    },\n    rgbaArray: function rgbaArray() {\n      var values = this.values;\n      return values.rgb.concat([values.alpha]);\n    },\n    hslaArray: function hslaArray() {\n      var values = this.values;\n      return values.hsl.concat([values.alpha]);\n    },\n    alpha: function alpha(val) {\n      if (val === undefined) {\n        return this.values.alpha;\n      }\n\n      this.setValues('alpha', val);\n      return this;\n    },\n    red: function red(val) {\n      return this.setChannel('rgb', 0, val);\n    },\n    green: function green(val) {\n      return this.setChannel('rgb', 1, val);\n    },\n    blue: function blue(val) {\n      return this.setChannel('rgb', 2, val);\n    },\n    hue: function hue(val) {\n      if (val) {\n        val %= 360;\n        val = val < 0 ? 360 + val : val;\n      }\n\n      return this.setChannel('hsl', 0, val);\n    },\n    saturation: function saturation(val) {\n      return this.setChannel('hsl', 1, val);\n    },\n    lightness: function lightness(val) {\n      return this.setChannel('hsl', 2, val);\n    },\n    saturationv: function saturationv(val) {\n      return this.setChannel('hsv', 1, val);\n    },\n    whiteness: function whiteness(val) {\n      return this.setChannel('hwb', 1, val);\n    },\n    blackness: function blackness(val) {\n      return this.setChannel('hwb', 2, val);\n    },\n    value: function value(val) {\n      return this.setChannel('hsv', 2, val);\n    },\n    cyan: function cyan(val) {\n      return this.setChannel('cmyk', 0, val);\n    },\n    magenta: function magenta(val) {\n      return this.setChannel('cmyk', 1, val);\n    },\n    yellow: function yellow(val) {\n      return this.setChannel('cmyk', 2, val);\n    },\n    black: function black(val) {\n      return this.setChannel('cmyk', 3, val);\n    },\n    hexString: function hexString() {\n      return colorString.hexString(this.values.rgb);\n    },\n    rgbString: function rgbString() {\n      return colorString.rgbString(this.values.rgb, this.values.alpha);\n    },\n    rgbaString: function rgbaString() {\n      return colorString.rgbaString(this.values.rgb, this.values.alpha);\n    },\n    percentString: function percentString() {\n      return colorString.percentString(this.values.rgb, this.values.alpha);\n    },\n    hslString: function hslString() {\n      return colorString.hslString(this.values.hsl, this.values.alpha);\n    },\n    hslaString: function hslaString() {\n      return colorString.hslaString(this.values.hsl, this.values.alpha);\n    },\n    hwbString: function hwbString() {\n      return colorString.hwbString(this.values.hwb, this.values.alpha);\n    },\n    keyword: function keyword() {\n      return colorString.keyword(this.values.rgb, this.values.alpha);\n    },\n    rgbNumber: function rgbNumber() {\n      var rgb = this.values.rgb;\n      return rgb[0] << 16 | rgb[1] << 8 | rgb[2];\n    },\n    luminosity: function luminosity() {\n      // http://www.w3.org/TR/WCAG20/#relativeluminancedef\n      var rgb = this.values.rgb;\n      var lum = [];\n\n      for (var i = 0; i < rgb.length; i++) {\n        var chan = rgb[i] / 255;\n        lum[i] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);\n      }\n\n      return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n    },\n    contrast: function contrast(color2) {\n      // http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n      var lum1 = this.luminosity();\n      var lum2 = color2.luminosity();\n\n      if (lum1 > lum2) {\n        return (lum1 + 0.05) / (lum2 + 0.05);\n      }\n\n      return (lum2 + 0.05) / (lum1 + 0.05);\n    },\n    level: function level(color2) {\n      var contrastRatio = this.contrast(color2);\n\n      if (contrastRatio >= 7.1) {\n        return 'AAA';\n      }\n\n      return contrastRatio >= 4.5 ? 'AA' : '';\n    },\n    dark: function dark() {\n      // YIQ equation from http://24ways.org/2010/calculating-color-contrast\n      var rgb = this.values.rgb;\n      var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n      return yiq < 128;\n    },\n    light: function light() {\n      return !this.dark();\n    },\n    negate: function negate() {\n      var rgb = [];\n\n      for (var i = 0; i < 3; i++) {\n        rgb[i] = 255 - this.values.rgb[i];\n      }\n\n      this.setValues('rgb', rgb);\n      return this;\n    },\n    lighten: function lighten(ratio) {\n      var hsl = this.values.hsl;\n      hsl[2] += hsl[2] * ratio;\n      this.setValues('hsl', hsl);\n      return this;\n    },\n    darken: function darken(ratio) {\n      var hsl = this.values.hsl;\n      hsl[2] -= hsl[2] * ratio;\n      this.setValues('hsl', hsl);\n      return this;\n    },\n    saturate: function saturate(ratio) {\n      var hsl = this.values.hsl;\n      hsl[1] += hsl[1] * ratio;\n      this.setValues('hsl', hsl);\n      return this;\n    },\n    desaturate: function desaturate(ratio) {\n      var hsl = this.values.hsl;\n      hsl[1] -= hsl[1] * ratio;\n      this.setValues('hsl', hsl);\n      return this;\n    },\n    whiten: function whiten(ratio) {\n      var hwb = this.values.hwb;\n      hwb[1] += hwb[1] * ratio;\n      this.setValues('hwb', hwb);\n      return this;\n    },\n    blacken: function blacken(ratio) {\n      var hwb = this.values.hwb;\n      hwb[2] += hwb[2] * ratio;\n      this.setValues('hwb', hwb);\n      return this;\n    },\n    greyscale: function greyscale() {\n      var rgb = this.values.rgb; // http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n\n      var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n      this.setValues('rgb', [val, val, val]);\n      return this;\n    },\n    clearer: function clearer(ratio) {\n      var alpha = this.values.alpha;\n      this.setValues('alpha', alpha - alpha * ratio);\n      return this;\n    },\n    opaquer: function opaquer(ratio) {\n      var alpha = this.values.alpha;\n      this.setValues('alpha', alpha + alpha * ratio);\n      return this;\n    },\n    rotate: function rotate(degrees) {\n      var hsl = this.values.hsl;\n      var hue = (hsl[0] + degrees) % 360;\n      hsl[0] = hue < 0 ? 360 + hue : hue;\n      this.setValues('hsl', hsl);\n      return this;\n    },\n\n    /**\n     * Ported from sass implementation in C\n     * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n     */\n    mix: function mix(mixinColor, weight) {\n      var color1 = this;\n      var color2 = mixinColor;\n      var p = weight === undefined ? 0.5 : weight;\n      var w = 2 * p - 1;\n      var a = color1.alpha() - color2.alpha();\n      var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n      var w2 = 1 - w1;\n      return this.rgb(w1 * color1.red() + w2 * color2.red(), w1 * color1.green() + w2 * color2.green(), w1 * color1.blue() + w2 * color2.blue()).alpha(color1.alpha() * p + color2.alpha() * (1 - p));\n    },\n    toJSON: function toJSON() {\n      return this.rgb();\n    },\n    clone: function clone() {\n      // NOTE(SB): using node-clone creates a dependency to Buffer when using browserify,\n      // making the final build way to big to embed in Chart.js. So let's do it manually,\n      // assuming that values to clone are 1 dimension arrays containing only numbers,\n      // except 'alpha' which is a number.\n      var result = new Color();\n      var source = this.values;\n      var target = result.values;\n      var value, type;\n\n      for (var prop in source) {\n        if (source.hasOwnProperty(prop)) {\n          value = source[prop];\n          type = {}.toString.call(value);\n\n          if (type === '[object Array]') {\n            target[prop] = value.slice(0);\n          } else if (type === '[object Number]') {\n            target[prop] = value;\n          } else {\n            console.error('unexpected color value:', value);\n          }\n        }\n      }\n\n      return result;\n    }\n  };\n  Color.prototype.spaces = {\n    rgb: ['red', 'green', 'blue'],\n    hsl: ['hue', 'saturation', 'lightness'],\n    hsv: ['hue', 'saturation', 'value'],\n    hwb: ['hue', 'whiteness', 'blackness'],\n    cmyk: ['cyan', 'magenta', 'yellow', 'black']\n  };\n  Color.prototype.maxes = {\n    rgb: [255, 255, 255],\n    hsl: [360, 100, 100],\n    hsv: [360, 100, 100],\n    hwb: [360, 100, 100],\n    cmyk: [100, 100, 100, 100]\n  };\n\n  Color.prototype.getValues = function (space) {\n    var values = this.values;\n    var vals = {};\n\n    for (var i = 0; i < space.length; i++) {\n      vals[space.charAt(i)] = values[space][i];\n    }\n\n    if (values.alpha !== 1) {\n      vals.a = values.alpha;\n    } // {r: 255, g: 255, b: 255, a: 0.4}\n\n\n    return vals;\n  };\n\n  Color.prototype.setValues = function (space, vals) {\n    var values = this.values;\n    var spaces = this.spaces;\n    var maxes = this.maxes;\n    var alpha = 1;\n    var i;\n    this.valid = true;\n\n    if (space === 'alpha') {\n      alpha = vals;\n    } else if (vals.length) {\n      // [10, 10, 10]\n      values[space] = vals.slice(0, space.length);\n      alpha = vals[space.length];\n    } else if (vals[space.charAt(0)] !== undefined) {\n      // {r: 10, g: 10, b: 10}\n      for (i = 0; i < space.length; i++) {\n        values[space][i] = vals[space.charAt(i)];\n      }\n\n      alpha = vals.a;\n    } else if (vals[spaces[space][0]] !== undefined) {\n      // {red: 10, green: 10, blue: 10}\n      var chans = spaces[space];\n\n      for (i = 0; i < space.length; i++) {\n        values[space][i] = vals[chans[i]];\n      }\n\n      alpha = vals.alpha;\n    }\n\n    values.alpha = Math.max(0, Math.min(1, alpha === undefined ? values.alpha : alpha));\n\n    if (space === 'alpha') {\n      return false;\n    }\n\n    var capped; // cap values of the space prior converting all values\n\n    for (i = 0; i < space.length; i++) {\n      capped = Math.max(0, Math.min(maxes[space][i], values[space][i]));\n      values[space][i] = Math.round(capped);\n    } // convert to all the other color spaces\n\n\n    for (var sname in spaces) {\n      if (sname !== space) {\n        values[sname] = colorConvert[space][sname](values[space]);\n      }\n    }\n\n    return true;\n  };\n\n  Color.prototype.setSpace = function (space, args) {\n    var vals = args[0];\n\n    if (vals === undefined) {\n      // color.rgb()\n      return this.getValues(space);\n    } // color.rgb(10, 10, 10)\n\n\n    if (typeof vals === 'number') {\n      vals = Array.prototype.slice.call(args);\n    }\n\n    this.setValues(space, vals);\n    return this;\n  };\n\n  Color.prototype.setChannel = function (space, index, val) {\n    var svalues = this.values[space];\n\n    if (val === undefined) {\n      // color.red()\n      return svalues[index];\n    } else if (val === svalues[index]) {\n      // color.red(color.red())\n      return this;\n    } // color.red(100)\n\n\n    svalues[index] = val;\n    this.setValues(space, svalues);\n    return this;\n  };\n\n  if (typeof window !== 'undefined') {\n    window.Color = Color;\n  }\n\n  var chartjsColor = Color;\n  /**\n   * @namespace Chart.helpers\n   */\n\n  var helpers = {\n    /**\n     * An empty function that can be used, for example, for optional callback.\n     */\n    noop: function noop() {},\n\n    /**\n     * Returns a unique id, sequentially generated from a global variable.\n     * @returns {number}\n     * @function\n     */\n    uid: function () {\n      var id = 0;\n      return function () {\n        return id++;\n      };\n    }(),\n\n    /**\n     * Returns true if `value` is neither null nor undefined, else returns false.\n     * @param {*} value - The value to test.\n     * @returns {boolean}\n     * @since 2.7.0\n     */\n    isNullOrUndef: function isNullOrUndef(value) {\n      return value === null || typeof value === 'undefined';\n    },\n\n    /**\n     * Returns true if `value` is an array (including typed arrays), else returns false.\n     * @param {*} value - The value to test.\n     * @returns {boolean}\n     * @function\n     */\n    isArray: function isArray(value) {\n      if (Array.isArray && Array.isArray(value)) {\n        return true;\n      }\n\n      var type = Object.prototype.toString.call(value);\n\n      if (type.substr(0, 7) === '[object' && type.substr(-6) === 'Array]') {\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * Returns true if `value` is an object (excluding null), else returns false.\n     * @param {*} value - The value to test.\n     * @returns {boolean}\n     * @since 2.7.0\n     */\n    isObject: function isObject(value) {\n      return value !== null && Object.prototype.toString.call(value) === '[object Object]';\n    },\n\n    /**\n     * Returns true if `value` is a finite number, else returns false\n     * @param {*} value  - The value to test.\n     * @returns {boolean}\n     */\n    isFinite: function (_isFinite) {\n      function isFinite(_x) {\n        return _isFinite.apply(this, arguments);\n      }\n\n      isFinite.toString = function () {\n        return _isFinite.toString();\n      };\n\n      return isFinite;\n    }(function (value) {\n      return (typeof value === 'number' || value instanceof Number) && isFinite(value);\n    }),\n\n    /**\n     * Returns `value` if defined, else returns `defaultValue`.\n     * @param {*} value - The value to return if defined.\n     * @param {*} defaultValue - The value to return if `value` is undefined.\n     * @returns {*}\n     */\n    valueOrDefault: function valueOrDefault(value, defaultValue) {\n      return typeof value === 'undefined' ? defaultValue : value;\n    },\n\n    /**\n     * Returns value at the given `index` in array if defined, else returns `defaultValue`.\n     * @param {Array} value - The array to lookup for value at `index`.\n     * @param {number} index - The index in `value` to lookup for value.\n     * @param {*} defaultValue - The value to return if `value[index]` is undefined.\n     * @returns {*}\n     */\n    valueAtIndexOrDefault: function valueAtIndexOrDefault(value, index, defaultValue) {\n      return helpers.valueOrDefault(helpers.isArray(value) ? value[index] : value, defaultValue);\n    },\n\n    /**\n     * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\n     * value returned by `fn`. If `fn` is not a function, this method returns undefined.\n     * @param {function} fn - The function to call.\n     * @param {Array|undefined|null} args - The arguments with which `fn` should be called.\n     * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.\n     * @returns {*}\n     */\n    callback: function callback(fn, args, thisArg) {\n      if (fn && typeof fn.call === 'function') {\n        return fn.apply(thisArg, args);\n      }\n    },\n\n    /**\n     * Note(SB) for performance sake, this method should only be used when loopable type\n     * is unknown or in none intensive code (not called often and small loopable). Else\n     * it's preferable to use a regular for() loop and save extra function calls.\n     * @param {object|Array} loopable - The object or array to be iterated.\n     * @param {function} fn - The function to call for each item.\n     * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.\n     * @param {boolean} [reverse] - If true, iterates backward on the loopable.\n     */\n    each: function each(loopable, fn, thisArg, reverse) {\n      var i, len, keys;\n\n      if (helpers.isArray(loopable)) {\n        len = loopable.length;\n\n        if (reverse) {\n          for (i = len - 1; i >= 0; i--) {\n            fn.call(thisArg, loopable[i], i);\n          }\n        } else {\n          for (i = 0; i < len; i++) {\n            fn.call(thisArg, loopable[i], i);\n          }\n        }\n      } else if (helpers.isObject(loopable)) {\n        keys = Object.keys(loopable);\n        len = keys.length;\n\n        for (i = 0; i < len; i++) {\n          fn.call(thisArg, loopable[keys[i]], keys[i]);\n        }\n      }\n    },\n\n    /**\n     * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\n     * @see https://stackoverflow.com/a/14853974\n     * @param {Array} a0 - The array to compare\n     * @param {Array} a1 - The array to compare\n     * @returns {boolean}\n     */\n    arrayEquals: function arrayEquals(a0, a1) {\n      var i, ilen, v0, v1;\n\n      if (!a0 || !a1 || a0.length !== a1.length) {\n        return false;\n      }\n\n      for (i = 0, ilen = a0.length; i < ilen; ++i) {\n        v0 = a0[i];\n        v1 = a1[i];\n\n        if (v0 instanceof Array && v1 instanceof Array) {\n          if (!helpers.arrayEquals(v0, v1)) {\n            return false;\n          }\n        } else if (v0 !== v1) {\n          // NOTE: two different object instances will never be equal: {x:20} != {x:20}\n          return false;\n        }\n      }\n\n      return true;\n    },\n\n    /**\n     * Returns a deep copy of `source` without keeping references on objects and arrays.\n     * @param {*} source - The value to clone.\n     * @returns {*}\n     */\n    clone: function clone(source) {\n      if (helpers.isArray(source)) {\n        return source.map(helpers.clone);\n      }\n\n      if (helpers.isObject(source)) {\n        var target = {};\n        var keys = Object.keys(source);\n        var klen = keys.length;\n        var k = 0;\n\n        for (; k < klen; ++k) {\n          target[keys[k]] = helpers.clone(source[keys[k]]);\n        }\n\n        return target;\n      }\n\n      return source;\n    },\n\n    /**\n     * The default merger when Chart.helpers.merge is called without merger option.\n     * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\n     * @private\n     */\n    _merger: function _merger(key, target, source, options) {\n      var tval = target[key];\n      var sval = source[key];\n\n      if (helpers.isObject(tval) && helpers.isObject(sval)) {\n        helpers.merge(tval, sval, options);\n      } else {\n        target[key] = helpers.clone(sval);\n      }\n    },\n\n    /**\n     * Merges source[key] in target[key] only if target[key] is undefined.\n     * @private\n     */\n    _mergerIf: function _mergerIf(key, target, source) {\n      var tval = target[key];\n      var sval = source[key];\n\n      if (helpers.isObject(tval) && helpers.isObject(sval)) {\n        helpers.mergeIf(tval, sval);\n      } else if (!target.hasOwnProperty(key)) {\n        target[key] = helpers.clone(sval);\n      }\n    },\n\n    /**\n     * Recursively deep copies `source` properties into `target` with the given `options`.\n     * IMPORTANT: `target` is not cloned and will be updated with `source` properties.\n     * @param {object} target - The target object in which all sources are merged into.\n     * @param {object|object[]} source - Object(s) to merge into `target`.\n     * @param {object} [options] - Merging options:\n     * @param {function} [options.merger] - The merge method (key, target, source, options)\n     * @returns {object} The `target` object.\n     */\n    merge: function merge(target, source, options) {\n      var sources = helpers.isArray(source) ? source : [source];\n      var ilen = sources.length;\n      var merge, i, keys, klen, k;\n\n      if (!helpers.isObject(target)) {\n        return target;\n      }\n\n      options = options || {};\n      merge = options.merger || helpers._merger;\n\n      for (i = 0; i < ilen; ++i) {\n        source = sources[i];\n\n        if (!helpers.isObject(source)) {\n          continue;\n        }\n\n        keys = Object.keys(source);\n\n        for (k = 0, klen = keys.length; k < klen; ++k) {\n          merge(keys[k], target, source, options);\n        }\n      }\n\n      return target;\n    },\n\n    /**\n     * Recursively deep copies `source` properties into `target` *only* if not defined in target.\n     * IMPORTANT: `target` is not cloned and will be updated with `source` properties.\n     * @param {object} target - The target object in which all sources are merged into.\n     * @param {object|object[]} source - Object(s) to merge into `target`.\n     * @returns {object} The `target` object.\n     */\n    mergeIf: function mergeIf(target, source) {\n      return helpers.merge(target, source, {\n        merger: helpers._mergerIf\n      });\n    },\n\n    /**\n     * Applies the contents of two or more objects together into the first object.\n     * @param {object} target - The target object in which all objects are merged into.\n     * @param {object} arg1 - Object containing additional properties to merge in target.\n     * @param {object} argN - Additional objects containing properties to merge in target.\n     * @returns {object} The `target` object.\n     */\n    extend: function extend(target) {\n      var setFn = function setFn(value, key) {\n        target[key] = value;\n      };\n\n      for (var i = 1, ilen = arguments.length; i < ilen; ++i) {\n        helpers.each(arguments[i], setFn);\n      }\n\n      return target;\n    },\n\n    /**\n     * Basic javascript inheritance based on the model created in Backbone.js\n     */\n    inherits: function inherits(extensions) {\n      var me = this;\n      var ChartElement = extensions && extensions.hasOwnProperty('constructor') ? extensions.constructor : function () {\n        return me.apply(this, arguments);\n      };\n\n      var Surrogate = function Surrogate() {\n        this.constructor = ChartElement;\n      };\n\n      Surrogate.prototype = me.prototype;\n      ChartElement.prototype = new Surrogate();\n      ChartElement.extend = helpers.inherits;\n\n      if (extensions) {\n        helpers.extend(ChartElement.prototype, extensions);\n      }\n\n      ChartElement.__super__ = me.prototype;\n      return ChartElement;\n    }\n  };\n  var helpers_core = helpers; // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, use Chart.helpers.callback instead.\n   * @function Chart.helpers.callCallback\n   * @deprecated since version 2.6.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers.callCallback = helpers.callback;\n  /**\n   * Provided for backward compatibility, use Array.prototype.indexOf instead.\n   * Array.prototype.indexOf compatibility: Chrome, Opera, Safari, FF1.5+, IE9+\n   * @function Chart.helpers.indexOf\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers.indexOf = function (array, item, fromIndex) {\n    return Array.prototype.indexOf.call(array, item, fromIndex);\n  };\n  /**\n   * Provided for backward compatibility, use Chart.helpers.valueOrDefault instead.\n   * @function Chart.helpers.getValueOrDefault\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n\n  helpers.getValueOrDefault = helpers.valueOrDefault;\n  /**\n   * Provided for backward compatibility, use Chart.helpers.valueAtIndexOrDefault instead.\n   * @function Chart.helpers.getValueAtIndexOrDefault\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers.getValueAtIndexOrDefault = helpers.valueAtIndexOrDefault;\n  /**\n   * Easing functions adapted from Robert Penner's easing equations.\n   * @namespace Chart.helpers.easingEffects\n   * @see http://www.robertpenner.com/easing/\n   */\n\n  var effects = {\n    linear: function linear(t) {\n      return t;\n    },\n    easeInQuad: function easeInQuad(t) {\n      return t * t;\n    },\n    easeOutQuad: function easeOutQuad(t) {\n      return -t * (t - 2);\n    },\n    easeInOutQuad: function easeInOutQuad(t) {\n      if ((t /= 0.5) < 1) {\n        return 0.5 * t * t;\n      }\n\n      return -0.5 * (--t * (t - 2) - 1);\n    },\n    easeInCubic: function easeInCubic(t) {\n      return t * t * t;\n    },\n    easeOutCubic: function easeOutCubic(t) {\n      return (t = t - 1) * t * t + 1;\n    },\n    easeInOutCubic: function easeInOutCubic(t) {\n      if ((t /= 0.5) < 1) {\n        return 0.5 * t * t * t;\n      }\n\n      return 0.5 * ((t -= 2) * t * t + 2);\n    },\n    easeInQuart: function easeInQuart(t) {\n      return t * t * t * t;\n    },\n    easeOutQuart: function easeOutQuart(t) {\n      return -((t = t - 1) * t * t * t - 1);\n    },\n    easeInOutQuart: function easeInOutQuart(t) {\n      if ((t /= 0.5) < 1) {\n        return 0.5 * t * t * t * t;\n      }\n\n      return -0.5 * ((t -= 2) * t * t * t - 2);\n    },\n    easeInQuint: function easeInQuint(t) {\n      return t * t * t * t * t;\n    },\n    easeOutQuint: function easeOutQuint(t) {\n      return (t = t - 1) * t * t * t * t + 1;\n    },\n    easeInOutQuint: function easeInOutQuint(t) {\n      if ((t /= 0.5) < 1) {\n        return 0.5 * t * t * t * t * t;\n      }\n\n      return 0.5 * ((t -= 2) * t * t * t * t + 2);\n    },\n    easeInSine: function easeInSine(t) {\n      return -Math.cos(t * (Math.PI / 2)) + 1;\n    },\n    easeOutSine: function easeOutSine(t) {\n      return Math.sin(t * (Math.PI / 2));\n    },\n    easeInOutSine: function easeInOutSine(t) {\n      return -0.5 * (Math.cos(Math.PI * t) - 1);\n    },\n    easeInExpo: function easeInExpo(t) {\n      return t === 0 ? 0 : Math.pow(2, 10 * (t - 1));\n    },\n    easeOutExpo: function easeOutExpo(t) {\n      return t === 1 ? 1 : -Math.pow(2, -10 * t) + 1;\n    },\n    easeInOutExpo: function easeInOutExpo(t) {\n      if (t === 0) {\n        return 0;\n      }\n\n      if (t === 1) {\n        return 1;\n      }\n\n      if ((t /= 0.5) < 1) {\n        return 0.5 * Math.pow(2, 10 * (t - 1));\n      }\n\n      return 0.5 * (-Math.pow(2, -10 * --t) + 2);\n    },\n    easeInCirc: function easeInCirc(t) {\n      if (t >= 1) {\n        return t;\n      }\n\n      return -(Math.sqrt(1 - t * t) - 1);\n    },\n    easeOutCirc: function easeOutCirc(t) {\n      return Math.sqrt(1 - (t = t - 1) * t);\n    },\n    easeInOutCirc: function easeInOutCirc(t) {\n      if ((t /= 0.5) < 1) {\n        return -0.5 * (Math.sqrt(1 - t * t) - 1);\n      }\n\n      return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n    },\n    easeInElastic: function easeInElastic(t) {\n      var s = 1.70158;\n      var p = 0;\n      var a = 1;\n\n      if (t === 0) {\n        return 0;\n      }\n\n      if (t === 1) {\n        return 1;\n      }\n\n      if (!p) {\n        p = 0.3;\n      }\n\n      if (a < 1) {\n        a = 1;\n        s = p / 4;\n      } else {\n        s = p / (2 * Math.PI) * Math.asin(1 / a);\n      }\n\n      return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));\n    },\n    easeOutElastic: function easeOutElastic(t) {\n      var s = 1.70158;\n      var p = 0;\n      var a = 1;\n\n      if (t === 0) {\n        return 0;\n      }\n\n      if (t === 1) {\n        return 1;\n      }\n\n      if (!p) {\n        p = 0.3;\n      }\n\n      if (a < 1) {\n        a = 1;\n        s = p / 4;\n      } else {\n        s = p / (2 * Math.PI) * Math.asin(1 / a);\n      }\n\n      return a * Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1;\n    },\n    easeInOutElastic: function easeInOutElastic(t) {\n      var s = 1.70158;\n      var p = 0;\n      var a = 1;\n\n      if (t === 0) {\n        return 0;\n      }\n\n      if ((t /= 0.5) === 2) {\n        return 1;\n      }\n\n      if (!p) {\n        p = 0.45;\n      }\n\n      if (a < 1) {\n        a = 1;\n        s = p / 4;\n      } else {\n        s = p / (2 * Math.PI) * Math.asin(1 / a);\n      }\n\n      if (t < 1) {\n        return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));\n      }\n\n      return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p) * 0.5 + 1;\n    },\n    easeInBack: function easeInBack(t) {\n      var s = 1.70158;\n      return t * t * ((s + 1) * t - s);\n    },\n    easeOutBack: function easeOutBack(t) {\n      var s = 1.70158;\n      return (t = t - 1) * t * ((s + 1) * t + s) + 1;\n    },\n    easeInOutBack: function easeInOutBack(t) {\n      var s = 1.70158;\n\n      if ((t /= 0.5) < 1) {\n        return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));\n      }\n\n      return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);\n    },\n    easeInBounce: function easeInBounce(t) {\n      return 1 - effects.easeOutBounce(1 - t);\n    },\n    easeOutBounce: function easeOutBounce(t) {\n      if (t < 1 / 2.75) {\n        return 7.5625 * t * t;\n      }\n\n      if (t < 2 / 2.75) {\n        return 7.5625 * (t -= 1.5 / 2.75) * t + 0.75;\n      }\n\n      if (t < 2.5 / 2.75) {\n        return 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375;\n      }\n\n      return 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;\n    },\n    easeInOutBounce: function easeInOutBounce(t) {\n      if (t < 0.5) {\n        return effects.easeInBounce(t * 2) * 0.5;\n      }\n\n      return effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5;\n    }\n  };\n  var helpers_easing = {\n    effects: effects\n  }; // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, use Chart.helpers.easing.effects instead.\n   * @function Chart.helpers.easingEffects\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers_core.easingEffects = effects;\n  var PI = Math.PI;\n  var RAD_PER_DEG = PI / 180;\n  var DOUBLE_PI = PI * 2;\n  var HALF_PI = PI / 2;\n  var QUARTER_PI = PI / 4;\n  var TWO_THIRDS_PI = PI * 2 / 3;\n  /**\n   * @namespace Chart.helpers.canvas\n   */\n\n  var exports$1 = {\n    /**\n     * Clears the entire canvas associated to the given `chart`.\n     * @param {Chart} chart - The chart for which to clear the canvas.\n     */\n    clear: function clear(chart) {\n      chart.ctx.clearRect(0, 0, chart.width, chart.height);\n    },\n\n    /**\n     * Creates a \"path\" for a rectangle with rounded corners at position (x, y) with a\n     * given size (width, height) and the same `radius` for all corners.\n     * @param {CanvasRenderingContext2D} ctx - The canvas 2D Context.\n     * @param {number} x - The x axis of the coordinate for the rectangle starting point.\n     * @param {number} y - The y axis of the coordinate for the rectangle starting point.\n     * @param {number} width - The rectangle's width.\n     * @param {number} height - The rectangle's height.\n     * @param {number} radius - The rounded amount (in pixels) for the four corners.\n     * @todo handle `radius` as top-left, top-right, bottom-right, bottom-left array/object?\n     */\n    roundedRect: function roundedRect(ctx, x, y, width, height, radius) {\n      if (radius) {\n        var r = Math.min(radius, height / 2, width / 2);\n        var left = x + r;\n        var top = y + r;\n        var right = x + width - r;\n        var bottom = y + height - r;\n        ctx.moveTo(x, top);\n\n        if (left < right && top < bottom) {\n          ctx.arc(left, top, r, -PI, -HALF_PI);\n          ctx.arc(right, top, r, -HALF_PI, 0);\n          ctx.arc(right, bottom, r, 0, HALF_PI);\n          ctx.arc(left, bottom, r, HALF_PI, PI);\n        } else if (left < right) {\n          ctx.moveTo(left, y);\n          ctx.arc(right, top, r, -HALF_PI, HALF_PI);\n          ctx.arc(left, top, r, HALF_PI, PI + HALF_PI);\n        } else if (top < bottom) {\n          ctx.arc(left, top, r, -PI, 0);\n          ctx.arc(left, bottom, r, 0, PI);\n        } else {\n          ctx.arc(left, top, r, -PI, PI);\n        }\n\n        ctx.closePath();\n        ctx.moveTo(x, y);\n      } else {\n        ctx.rect(x, y, width, height);\n      }\n    },\n    drawPoint: function drawPoint(ctx, style, radius, x, y, rotation) {\n      var type, xOffset, yOffset, size, cornerRadius;\n      var rad = (rotation || 0) * RAD_PER_DEG;\n\n      if (style && typeof style === 'object') {\n        type = style.toString();\n\n        if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n          ctx.drawImage(style, x - style.width / 2, y - style.height / 2, style.width, style.height);\n          return;\n        }\n      }\n\n      if (isNaN(radius) || radius <= 0) {\n        return;\n      }\n\n      ctx.beginPath();\n\n      switch (style) {\n        // Default includes circle\n        default:\n          ctx.arc(x, y, radius, 0, DOUBLE_PI);\n          ctx.closePath();\n          break;\n\n        case 'triangle':\n          ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n          rad += TWO_THIRDS_PI;\n          ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n          rad += TWO_THIRDS_PI;\n          ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n          ctx.closePath();\n          break;\n\n        case 'rectRounded':\n          // NOTE: the rounded rect implementation changed to use `arc` instead of\n          // `quadraticCurveTo` since it generates better results when rect is\n          // almost a circle. 0.516 (instead of 0.5) produces results with visually\n          // closer proportion to the previous impl and it is inscribed in the\n          // circle with `radius`. For more details, see the following PRs:\n          // https://github.com/chartjs/Chart.js/issues/5597\n          // https://github.com/chartjs/Chart.js/issues/5858\n          cornerRadius = radius * 0.516;\n          size = radius - cornerRadius;\n          xOffset = Math.cos(rad + QUARTER_PI) * size;\n          yOffset = Math.sin(rad + QUARTER_PI) * size;\n          ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n          ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n          ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n          ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n          ctx.closePath();\n          break;\n\n        case 'rect':\n          if (!rotation) {\n            size = Math.SQRT1_2 * radius;\n            ctx.rect(x - size, y - size, 2 * size, 2 * size);\n            break;\n          }\n\n          rad += QUARTER_PI;\n\n        /* falls through */\n\n        case 'rectRot':\n          xOffset = Math.cos(rad) * radius;\n          yOffset = Math.sin(rad) * radius;\n          ctx.moveTo(x - xOffset, y - yOffset);\n          ctx.lineTo(x + yOffset, y - xOffset);\n          ctx.lineTo(x + xOffset, y + yOffset);\n          ctx.lineTo(x - yOffset, y + xOffset);\n          ctx.closePath();\n          break;\n\n        case 'crossRot':\n          rad += QUARTER_PI;\n\n        /* falls through */\n\n        case 'cross':\n          xOffset = Math.cos(rad) * radius;\n          yOffset = Math.sin(rad) * radius;\n          ctx.moveTo(x - xOffset, y - yOffset);\n          ctx.lineTo(x + xOffset, y + yOffset);\n          ctx.moveTo(x + yOffset, y - xOffset);\n          ctx.lineTo(x - yOffset, y + xOffset);\n          break;\n\n        case 'star':\n          xOffset = Math.cos(rad) * radius;\n          yOffset = Math.sin(rad) * radius;\n          ctx.moveTo(x - xOffset, y - yOffset);\n          ctx.lineTo(x + xOffset, y + yOffset);\n          ctx.moveTo(x + yOffset, y - xOffset);\n          ctx.lineTo(x - yOffset, y + xOffset);\n          rad += QUARTER_PI;\n          xOffset = Math.cos(rad) * radius;\n          yOffset = Math.sin(rad) * radius;\n          ctx.moveTo(x - xOffset, y - yOffset);\n          ctx.lineTo(x + xOffset, y + yOffset);\n          ctx.moveTo(x + yOffset, y - xOffset);\n          ctx.lineTo(x - yOffset, y + xOffset);\n          break;\n\n        case 'line':\n          xOffset = Math.cos(rad) * radius;\n          yOffset = Math.sin(rad) * radius;\n          ctx.moveTo(x - xOffset, y - yOffset);\n          ctx.lineTo(x + xOffset, y + yOffset);\n          break;\n\n        case 'dash':\n          ctx.moveTo(x, y);\n          ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);\n          break;\n      }\n\n      ctx.fill();\n      ctx.stroke();\n    },\n\n    /**\n     * Returns true if the point is inside the rectangle\n     * @param {object} point - The point to test\n     * @param {object} area - The rectangle\n     * @returns {boolean}\n     * @private\n     */\n    _isPointInArea: function _isPointInArea(point, area) {\n      var epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n\n      return point.x > area.left - epsilon && point.x < area.right + epsilon && point.y > area.top - epsilon && point.y < area.bottom + epsilon;\n    },\n    clipArea: function clipArea(ctx, area) {\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n      ctx.clip();\n    },\n    unclipArea: function unclipArea(ctx) {\n      ctx.restore();\n    },\n    lineTo: function lineTo(ctx, previous, target, flip) {\n      var stepped = target.steppedLine;\n\n      if (stepped) {\n        if (stepped === 'middle') {\n          var midpoint = (previous.x + target.x) / 2.0;\n          ctx.lineTo(midpoint, flip ? target.y : previous.y);\n          ctx.lineTo(midpoint, flip ? previous.y : target.y);\n        } else if (stepped === 'after' && !flip || stepped !== 'after' && flip) {\n          ctx.lineTo(previous.x, target.y);\n        } else {\n          ctx.lineTo(target.x, previous.y);\n        }\n\n        ctx.lineTo(target.x, target.y);\n        return;\n      }\n\n      if (!target.tension) {\n        ctx.lineTo(target.x, target.y);\n        return;\n      }\n\n      ctx.bezierCurveTo(flip ? previous.controlPointPreviousX : previous.controlPointNextX, flip ? previous.controlPointPreviousY : previous.controlPointNextY, flip ? target.controlPointNextX : target.controlPointPreviousX, flip ? target.controlPointNextY : target.controlPointPreviousY, target.x, target.y);\n    }\n  };\n  var helpers_canvas = exports$1; // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, use Chart.helpers.canvas.clear instead.\n   * @namespace Chart.helpers.clear\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers_core.clear = exports$1.clear;\n  /**\n   * Provided for backward compatibility, use Chart.helpers.canvas.roundedRect instead.\n   * @namespace Chart.helpers.drawRoundedRectangle\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers_core.drawRoundedRectangle = function (ctx) {\n    ctx.beginPath();\n    exports$1.roundedRect.apply(exports$1, arguments);\n  };\n\n  var defaults = {\n    /**\n     * @private\n     */\n    _set: function _set(scope, values) {\n      return helpers_core.merge(this[scope] || (this[scope] = {}), values);\n    }\n  };\n\n  defaults._set('global', {\n    defaultColor: 'rgba(0,0,0,0.1)',\n    defaultFontColor: '#666',\n    defaultFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n    defaultFontSize: 12,\n    defaultFontStyle: 'normal',\n    defaultLineHeight: 1.2,\n    showLines: true\n  });\n\n  var core_defaults = defaults;\n  var valueOrDefault = helpers_core.valueOrDefault;\n  /**\n   * Converts the given font object into a CSS font string.\n   * @param {object} font - A font object.\n   * @return {string} The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\n   * @private\n   */\n\n  function toFontString(font) {\n    if (!font || helpers_core.isNullOrUndef(font.size) || helpers_core.isNullOrUndef(font.family)) {\n      return null;\n    }\n\n    return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;\n  }\n  /**\n   * @alias Chart.helpers.options\n   * @namespace\n   */\n\n\n  var helpers_options = {\n    /**\n     * Converts the given line height `value` in pixels for a specific font `size`.\n     * @param {number|string} value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\n     * @param {number} size - The font size (in pixels) used to resolve relative `value`.\n     * @returns {number} The effective line height in pixels (size * 1.2 if value is invalid).\n     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\n     * @since 2.7.0\n     */\n    toLineHeight: function toLineHeight(value, size) {\n      var matches = ('' + value).match(/^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/);\n\n      if (!matches || matches[1] === 'normal') {\n        return size * 1.2;\n      }\n\n      value = +matches[2];\n\n      switch (matches[3]) {\n        case 'px':\n          return value;\n\n        case '%':\n          value /= 100;\n          break;\n\n        default:\n          break;\n      }\n\n      return size * value;\n    },\n\n    /**\n     * Converts the given value into a padding object with pre-computed width/height.\n     * @param {number|object} value - If a number, set the value to all TRBL component,\n     *  else, if and object, use defined properties and sets undefined ones to 0.\n     * @returns {object} The padding values (top, right, bottom, left, width, height)\n     * @since 2.7.0\n     */\n    toPadding: function toPadding(value) {\n      var t, r, b, l;\n\n      if (helpers_core.isObject(value)) {\n        t = +value.top || 0;\n        r = +value.right || 0;\n        b = +value.bottom || 0;\n        l = +value.left || 0;\n      } else {\n        t = r = b = l = +value || 0;\n      }\n\n      return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        height: t + b,\n        width: l + r\n      };\n    },\n\n    /**\n     * Parses font options and returns the font object.\n     * @param {object} options - A object that contains font options to be parsed.\n     * @return {object} The font object.\n     * @todo Support font.* options and renamed to toFont().\n     * @private\n     */\n    _parseFont: function _parseFont(options) {\n      var globalDefaults = core_defaults.global;\n      var size = valueOrDefault(options.fontSize, globalDefaults.defaultFontSize);\n      var font = {\n        family: valueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily),\n        lineHeight: helpers_core.options.toLineHeight(valueOrDefault(options.lineHeight, globalDefaults.defaultLineHeight), size),\n        size: size,\n        style: valueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle),\n        weight: null,\n        string: ''\n      };\n      font.string = toFontString(font);\n      return font;\n    },\n\n    /**\n     * Evaluates the given `inputs` sequentially and returns the first defined value.\n     * @param {Array} inputs - An array of values, falling back to the last value.\n     * @param {object} [context] - If defined and the current value is a function, the value\n     * is called with `context` as first argument and the result becomes the new input.\n     * @param {number} [index] - If defined and the current value is an array, the value\n     * at `index` become the new input.\n     * @since 2.7.0\n     */\n    resolve: function resolve(inputs, context, index) {\n      var i, ilen, value;\n\n      for (i = 0, ilen = inputs.length; i < ilen; ++i) {\n        value = inputs[i];\n\n        if (value === undefined) {\n          continue;\n        }\n\n        if (context !== undefined && typeof value === 'function') {\n          value = value(context);\n        }\n\n        if (index !== undefined && helpers_core.isArray(value)) {\n          value = value[index];\n        }\n\n        if (value !== undefined) {\n          return value;\n        }\n      }\n    }\n  };\n  var helpers$1 = helpers_core;\n  var easing = helpers_easing;\n  var canvas = helpers_canvas;\n  var options = helpers_options;\n  helpers$1.easing = easing;\n  helpers$1.canvas = canvas;\n  helpers$1.options = options;\n\n  function interpolate(start, view, model, ease) {\n    var keys = Object.keys(model);\n    var i, ilen, key, actual, origin, target, type, c0, c1;\n\n    for (i = 0, ilen = keys.length; i < ilen; ++i) {\n      key = keys[i];\n      target = model[key]; // if a value is added to the model after pivot() has been called, the view\n      // doesn't contain it, so let's initialize the view to the target value.\n\n      if (!view.hasOwnProperty(key)) {\n        view[key] = target;\n      }\n\n      actual = view[key];\n\n      if (actual === target || key[0] === '_') {\n        continue;\n      }\n\n      if (!start.hasOwnProperty(key)) {\n        start[key] = actual;\n      }\n\n      origin = start[key];\n      type = typeof target;\n\n      if (type === typeof origin) {\n        if (type === 'string') {\n          c0 = chartjsColor(origin);\n\n          if (c0.valid) {\n            c1 = chartjsColor(target);\n\n            if (c1.valid) {\n              view[key] = c1.mix(c0, ease).rgbString();\n              continue;\n            }\n          }\n        } else if (helpers$1.isFinite(origin) && helpers$1.isFinite(target)) {\n          view[key] = origin + (target - origin) * ease;\n          continue;\n        }\n      }\n\n      view[key] = target;\n    }\n  }\n\n  var Element = function Element(configuration) {\n    helpers$1.extend(this, configuration);\n    this.initialize.apply(this, arguments);\n  };\n\n  helpers$1.extend(Element.prototype, {\n    initialize: function initialize() {\n      this.hidden = false;\n    },\n    pivot: function pivot() {\n      var me = this;\n\n      if (!me._view) {\n        me._view = helpers$1.clone(me._model);\n      }\n\n      me._start = {};\n      return me;\n    },\n    transition: function transition(ease) {\n      var me = this;\n      var model = me._model;\n      var start = me._start;\n      var view = me._view; // No animation -> No Transition\n\n      if (!model || ease === 1) {\n        me._view = model;\n        me._start = null;\n        return me;\n      }\n\n      if (!view) {\n        view = me._view = {};\n      }\n\n      if (!start) {\n        start = me._start = {};\n      }\n\n      interpolate(start, view, model, ease);\n      return me;\n    },\n    tooltipPosition: function tooltipPosition() {\n      return {\n        x: this._model.x,\n        y: this._model.y\n      };\n    },\n    hasValue: function hasValue() {\n      return helpers$1.isNumber(this._model.x) && helpers$1.isNumber(this._model.y);\n    }\n  });\n  Element.extend = helpers$1.inherits;\n  var core_element = Element;\n  var exports$2 = core_element.extend({\n    chart: null,\n    // the animation associated chart instance\n    currentStep: 0,\n    // the current animation step\n    numSteps: 60,\n    // default number of steps\n    easing: '',\n    // the easing to use for this animation\n    render: null,\n    // render function used by the animation service\n    onAnimationProgress: null,\n    // user specified callback to fire on each step of the animation\n    onAnimationComplete: null // user specified callback to fire when the animation finishes\n\n  });\n  var core_animation = exports$2; // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, use Chart.Animation instead\n   * @prop Chart.Animation#animationObject\n   * @deprecated since version 2.6.0\n   * @todo remove at version 3\n   */\n\n  Object.defineProperty(exports$2.prototype, 'animationObject', {\n    get: function get() {\n      return this;\n    }\n  });\n  /**\n   * Provided for backward compatibility, use Chart.Animation#chart instead\n   * @prop Chart.Animation#chartInstance\n   * @deprecated since version 2.6.0\n   * @todo remove at version 3\n   */\n\n  Object.defineProperty(exports$2.prototype, 'chartInstance', {\n    get: function get() {\n      return this.chart;\n    },\n    set: function set(value) {\n      this.chart = value;\n    }\n  });\n\n  core_defaults._set('global', {\n    animation: {\n      duration: 1000,\n      easing: 'easeOutQuart',\n      onProgress: helpers$1.noop,\n      onComplete: helpers$1.noop\n    }\n  });\n\n  var core_animations = {\n    animations: [],\n    request: null,\n\n    /**\n     * @param {Chart} chart - The chart to animate.\n     * @param {Chart.Animation} animation - The animation that we will animate.\n     * @param {number} duration - The animation duration in ms.\n     * @param {boolean} lazy - if true, the chart is not marked as animating to enable more responsive interactions\n     */\n    addAnimation: function addAnimation(chart, animation, duration, lazy) {\n      var animations = this.animations;\n      var i, ilen;\n      animation.chart = chart;\n      animation.startTime = Date.now();\n      animation.duration = duration;\n\n      if (!lazy) {\n        chart.animating = true;\n      }\n\n      for (i = 0, ilen = animations.length; i < ilen; ++i) {\n        if (animations[i].chart === chart) {\n          animations[i] = animation;\n          return;\n        }\n      }\n\n      animations.push(animation); // If there are no animations queued, manually kickstart a digest, for lack of a better word\n\n      if (animations.length === 1) {\n        this.requestAnimationFrame();\n      }\n    },\n    cancelAnimation: function cancelAnimation(chart) {\n      var index = helpers$1.findIndex(this.animations, function (animation) {\n        return animation.chart === chart;\n      });\n\n      if (index !== -1) {\n        this.animations.splice(index, 1);\n        chart.animating = false;\n      }\n    },\n    requestAnimationFrame: function requestAnimationFrame() {\n      var me = this;\n\n      if (me.request === null) {\n        // Skip animation frame requests until the active one is executed.\n        // This can happen when processing mouse events, e.g. 'mousemove'\n        // and 'mouseout' events will trigger multiple renders.\n        me.request = helpers$1.requestAnimFrame.call(window, function () {\n          me.request = null;\n          me.startDigest();\n        });\n      }\n    },\n\n    /**\n     * @private\n     */\n    startDigest: function startDigest() {\n      var me = this;\n      me.advance(); // Do we have more stuff to animate?\n\n      if (me.animations.length > 0) {\n        me.requestAnimationFrame();\n      }\n    },\n\n    /**\n     * @private\n     */\n    advance: function advance() {\n      var animations = this.animations;\n      var animation, chart, numSteps, nextStep;\n      var i = 0; // 1 animation per chart, so we are looping charts here\n\n      while (i < animations.length) {\n        animation = animations[i];\n        chart = animation.chart;\n        numSteps = animation.numSteps; // Make sure that currentStep starts at 1\n        // https://github.com/chartjs/Chart.js/issues/6104\n\n        nextStep = Math.floor((Date.now() - animation.startTime) / animation.duration * numSteps) + 1;\n        animation.currentStep = Math.min(nextStep, numSteps);\n        helpers$1.callback(animation.render, [chart, animation], chart);\n        helpers$1.callback(animation.onAnimationProgress, [animation], chart);\n\n        if (animation.currentStep >= numSteps) {\n          helpers$1.callback(animation.onAnimationComplete, [animation], chart);\n          chart.animating = false;\n          animations.splice(i, 1);\n        } else {\n          ++i;\n        }\n      }\n    }\n  };\n  var resolve = helpers$1.options.resolve;\n  var arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];\n  /**\n   * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',\n   * 'unshift') and notify the listener AFTER the array has been altered. Listeners are\n   * called on the 'onData*' callbacks (e.g. onDataPush, etc.) with same arguments.\n   */\n\n  function listenArrayEvents(array, listener) {\n    if (array._chartjs) {\n      array._chartjs.listeners.push(listener);\n\n      return;\n    }\n\n    Object.defineProperty(array, '_chartjs', {\n      configurable: true,\n      enumerable: false,\n      value: {\n        listeners: [listener]\n      }\n    });\n    arrayEvents.forEach(function (key) {\n      var method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);\n      var base = array[key];\n      Object.defineProperty(array, key, {\n        configurable: true,\n        enumerable: false,\n        value: function value() {\n          var args = Array.prototype.slice.call(arguments);\n          var res = base.apply(this, args);\n          helpers$1.each(array._chartjs.listeners, function (object) {\n            if (typeof object[method] === 'function') {\n              object[method].apply(object, args);\n            }\n          });\n          return res;\n        }\n      });\n    });\n  }\n  /**\n   * Removes the given array event listener and cleanup extra attached properties (such as\n   * the _chartjs stub and overridden methods) if array doesn't have any more listeners.\n   */\n\n\n  function unlistenArrayEvents(array, listener) {\n    var stub = array._chartjs;\n\n    if (!stub) {\n      return;\n    }\n\n    var listeners = stub.listeners;\n    var index = listeners.indexOf(listener);\n\n    if (index !== -1) {\n      listeners.splice(index, 1);\n    }\n\n    if (listeners.length > 0) {\n      return;\n    }\n\n    arrayEvents.forEach(function (key) {\n      delete array[key];\n    });\n    delete array._chartjs;\n  } // Base class for all dataset controllers (line, bar, etc)\n\n\n  var DatasetController = function DatasetController(chart, datasetIndex) {\n    this.initialize(chart, datasetIndex);\n  };\n\n  helpers$1.extend(DatasetController.prototype, {\n    /**\n     * Element type used to generate a meta dataset (e.g. Chart.element.Line).\n     * @type {Chart.core.element}\n     */\n    datasetElementType: null,\n\n    /**\n     * Element type used to generate a meta data (e.g. Chart.element.Point).\n     * @type {Chart.core.element}\n     */\n    dataElementType: null,\n    initialize: function initialize(chart, datasetIndex) {\n      var me = this;\n      me.chart = chart;\n      me.index = datasetIndex;\n      me.linkScales();\n      me.addElements();\n    },\n    updateIndex: function updateIndex(datasetIndex) {\n      this.index = datasetIndex;\n    },\n    linkScales: function linkScales() {\n      var me = this;\n      var meta = me.getMeta();\n      var dataset = me.getDataset();\n\n      if (meta.xAxisID === null || !(meta.xAxisID in me.chart.scales)) {\n        meta.xAxisID = dataset.xAxisID || me.chart.options.scales.xAxes[0].id;\n      }\n\n      if (meta.yAxisID === null || !(meta.yAxisID in me.chart.scales)) {\n        meta.yAxisID = dataset.yAxisID || me.chart.options.scales.yAxes[0].id;\n      }\n    },\n    getDataset: function getDataset() {\n      return this.chart.data.datasets[this.index];\n    },\n    getMeta: function getMeta() {\n      return this.chart.getDatasetMeta(this.index);\n    },\n    getScaleForId: function getScaleForId(scaleID) {\n      return this.chart.scales[scaleID];\n    },\n\n    /**\n     * @private\n     */\n    _getValueScaleId: function _getValueScaleId() {\n      return this.getMeta().yAxisID;\n    },\n\n    /**\n     * @private\n     */\n    _getIndexScaleId: function _getIndexScaleId() {\n      return this.getMeta().xAxisID;\n    },\n\n    /**\n     * @private\n     */\n    _getValueScale: function _getValueScale() {\n      return this.getScaleForId(this._getValueScaleId());\n    },\n\n    /**\n     * @private\n     */\n    _getIndexScale: function _getIndexScale() {\n      return this.getScaleForId(this._getIndexScaleId());\n    },\n    reset: function reset() {\n      this.update(true);\n    },\n\n    /**\n     * @private\n     */\n    destroy: function destroy() {\n      if (this._data) {\n        unlistenArrayEvents(this._data, this);\n      }\n    },\n    createMetaDataset: function createMetaDataset() {\n      var me = this;\n      var type = me.datasetElementType;\n      return type && new type({\n        _chart: me.chart,\n        _datasetIndex: me.index\n      });\n    },\n    createMetaData: function createMetaData(index) {\n      var me = this;\n      var type = me.dataElementType;\n      return type && new type({\n        _chart: me.chart,\n        _datasetIndex: me.index,\n        _index: index\n      });\n    },\n    addElements: function addElements() {\n      var me = this;\n      var meta = me.getMeta();\n      var data = me.getDataset().data || [];\n      var metaData = meta.data;\n      var i, ilen;\n\n      for (i = 0, ilen = data.length; i < ilen; ++i) {\n        metaData[i] = metaData[i] || me.createMetaData(i);\n      }\n\n      meta.dataset = meta.dataset || me.createMetaDataset();\n    },\n    addElementAndReset: function addElementAndReset(index) {\n      var element = this.createMetaData(index);\n      this.getMeta().data.splice(index, 0, element);\n      this.updateElement(element, index, true);\n    },\n    buildOrUpdateElements: function buildOrUpdateElements() {\n      var me = this;\n      var dataset = me.getDataset();\n      var data = dataset.data || (dataset.data = []); // In order to correctly handle data addition/deletion animation (an thus simulate\n      // real-time charts), we need to monitor these data modifications and synchronize\n      // the internal meta data accordingly.\n\n      if (me._data !== data) {\n        if (me._data) {\n          // This case happens when the user replaced the data array instance.\n          unlistenArrayEvents(me._data, me);\n        }\n\n        if (data && Object.isExtensible(data)) {\n          listenArrayEvents(data, me);\n        }\n\n        me._data = data;\n      } // Re-sync meta data in case the user replaced the data array or if we missed\n      // any updates and so make sure that we handle number of datapoints changing.\n\n\n      me.resyncElements();\n    },\n    update: helpers$1.noop,\n    transition: function transition(easingValue) {\n      var meta = this.getMeta();\n      var elements = meta.data || [];\n      var ilen = elements.length;\n      var i = 0;\n\n      for (; i < ilen; ++i) {\n        elements[i].transition(easingValue);\n      }\n\n      if (meta.dataset) {\n        meta.dataset.transition(easingValue);\n      }\n    },\n    draw: function draw() {\n      var meta = this.getMeta();\n      var elements = meta.data || [];\n      var ilen = elements.length;\n      var i = 0;\n\n      if (meta.dataset) {\n        meta.dataset.draw();\n      }\n\n      for (; i < ilen; ++i) {\n        elements[i].draw();\n      }\n    },\n    removeHoverStyle: function removeHoverStyle(element) {\n      helpers$1.merge(element._model, element.$previousStyle || {});\n      delete element.$previousStyle;\n    },\n    setHoverStyle: function setHoverStyle(element) {\n      var dataset = this.chart.data.datasets[element._datasetIndex];\n      var index = element._index;\n      var custom = element.custom || {};\n      var model = element._model;\n      var getHoverColor = helpers$1.getHoverColor;\n      element.$previousStyle = {\n        backgroundColor: model.backgroundColor,\n        borderColor: model.borderColor,\n        borderWidth: model.borderWidth\n      };\n      model.backgroundColor = resolve([custom.hoverBackgroundColor, dataset.hoverBackgroundColor, getHoverColor(model.backgroundColor)], undefined, index);\n      model.borderColor = resolve([custom.hoverBorderColor, dataset.hoverBorderColor, getHoverColor(model.borderColor)], undefined, index);\n      model.borderWidth = resolve([custom.hoverBorderWidth, dataset.hoverBorderWidth, model.borderWidth], undefined, index);\n    },\n\n    /**\n     * @private\n     */\n    resyncElements: function resyncElements() {\n      var me = this;\n      var meta = me.getMeta();\n      var data = me.getDataset().data;\n      var numMeta = meta.data.length;\n      var numData = data.length;\n\n      if (numData < numMeta) {\n        meta.data.splice(numData, numMeta - numData);\n      } else if (numData > numMeta) {\n        me.insertElements(numMeta, numData - numMeta);\n      }\n    },\n\n    /**\n     * @private\n     */\n    insertElements: function insertElements(start, count) {\n      for (var i = 0; i < count; ++i) {\n        this.addElementAndReset(start + i);\n      }\n    },\n\n    /**\n     * @private\n     */\n    onDataPush: function onDataPush() {\n      var count = arguments.length;\n      this.insertElements(this.getDataset().data.length - count, count);\n    },\n\n    /**\n     * @private\n     */\n    onDataPop: function onDataPop() {\n      this.getMeta().data.pop();\n    },\n\n    /**\n     * @private\n     */\n    onDataShift: function onDataShift() {\n      this.getMeta().data.shift();\n    },\n\n    /**\n     * @private\n     */\n    onDataSplice: function onDataSplice(start, count) {\n      this.getMeta().data.splice(start, count);\n      this.insertElements(start, arguments.length - 2);\n    },\n\n    /**\n     * @private\n     */\n    onDataUnshift: function onDataUnshift() {\n      this.insertElements(0, arguments.length);\n    }\n  });\n  DatasetController.extend = helpers$1.inherits;\n  var core_datasetController = DatasetController;\n\n  core_defaults._set('global', {\n    elements: {\n      arc: {\n        backgroundColor: core_defaults.global.defaultColor,\n        borderColor: '#fff',\n        borderWidth: 2,\n        borderAlign: 'center'\n      }\n    }\n  });\n\n  var element_arc = core_element.extend({\n    inLabelRange: function inLabelRange(mouseX) {\n      var vm = this._view;\n\n      if (vm) {\n        return Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2);\n      }\n\n      return false;\n    },\n    inRange: function inRange(chartX, chartY) {\n      var vm = this._view;\n\n      if (vm) {\n        var pointRelativePosition = helpers$1.getAngleFromPoint(vm, {\n          x: chartX,\n          y: chartY\n        });\n        var angle = pointRelativePosition.angle;\n        var distance = pointRelativePosition.distance; // Sanitise angle range\n\n        var startAngle = vm.startAngle;\n        var endAngle = vm.endAngle;\n\n        while (endAngle < startAngle) {\n          endAngle += 2.0 * Math.PI;\n        }\n\n        while (angle > endAngle) {\n          angle -= 2.0 * Math.PI;\n        }\n\n        while (angle < startAngle) {\n          angle += 2.0 * Math.PI;\n        } // Check if within the range of the open/close angle\n\n\n        var betweenAngles = angle >= startAngle && angle <= endAngle;\n        var withinRadius = distance >= vm.innerRadius && distance <= vm.outerRadius;\n        return betweenAngles && withinRadius;\n      }\n\n      return false;\n    },\n    getCenterPoint: function getCenterPoint() {\n      var vm = this._view;\n      var halfAngle = (vm.startAngle + vm.endAngle) / 2;\n      var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;\n      return {\n        x: vm.x + Math.cos(halfAngle) * halfRadius,\n        y: vm.y + Math.sin(halfAngle) * halfRadius\n      };\n    },\n    getArea: function getArea() {\n      var vm = this._view;\n      return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));\n    },\n    tooltipPosition: function tooltipPosition() {\n      var vm = this._view;\n      var centreAngle = vm.startAngle + (vm.endAngle - vm.startAngle) / 2;\n      var rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;\n      return {\n        x: vm.x + Math.cos(centreAngle) * rangeFromCentre,\n        y: vm.y + Math.sin(centreAngle) * rangeFromCentre\n      };\n    },\n    draw: function draw() {\n      var ctx = this._chart.ctx;\n      var vm = this._view;\n      var sA = vm.startAngle;\n      var eA = vm.endAngle;\n      var pixelMargin = vm.borderAlign === 'inner' ? 0.33 : 0;\n      var angleMargin;\n      ctx.save();\n      ctx.beginPath();\n      ctx.arc(vm.x, vm.y, Math.max(vm.outerRadius - pixelMargin, 0), sA, eA);\n      ctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);\n      ctx.closePath();\n      ctx.fillStyle = vm.backgroundColor;\n      ctx.fill();\n\n      if (vm.borderWidth) {\n        if (vm.borderAlign === 'inner') {\n          // Draw an inner border by cliping the arc and drawing a double-width border\n          // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n          ctx.beginPath();\n          angleMargin = pixelMargin / vm.outerRadius;\n          ctx.arc(vm.x, vm.y, vm.outerRadius, sA - angleMargin, eA + angleMargin);\n\n          if (vm.innerRadius > pixelMargin) {\n            angleMargin = pixelMargin / vm.innerRadius;\n            ctx.arc(vm.x, vm.y, vm.innerRadius - pixelMargin, eA + angleMargin, sA - angleMargin, true);\n          } else {\n            ctx.arc(vm.x, vm.y, pixelMargin, eA + Math.PI / 2, sA - Math.PI / 2);\n          }\n\n          ctx.closePath();\n          ctx.clip();\n          ctx.beginPath();\n          ctx.arc(vm.x, vm.y, vm.outerRadius, sA, eA);\n          ctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);\n          ctx.closePath();\n          ctx.lineWidth = vm.borderWidth * 2;\n          ctx.lineJoin = 'round';\n        } else {\n          ctx.lineWidth = vm.borderWidth;\n          ctx.lineJoin = 'bevel';\n        }\n\n        ctx.strokeStyle = vm.borderColor;\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  });\n  var valueOrDefault$1 = helpers$1.valueOrDefault;\n  var defaultColor = core_defaults.global.defaultColor;\n\n  core_defaults._set('global', {\n    elements: {\n      line: {\n        tension: 0.4,\n        backgroundColor: defaultColor,\n        borderWidth: 3,\n        borderColor: defaultColor,\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        capBezierPoints: true,\n        fill: true // do we fill in the area between the line and its base axis\n\n      }\n    }\n  });\n\n  var element_line = core_element.extend({\n    draw: function draw() {\n      var me = this;\n      var vm = me._view;\n      var ctx = me._chart.ctx;\n      var spanGaps = vm.spanGaps;\n\n      var points = me._children.slice(); // clone array\n\n\n      var globalDefaults = core_defaults.global;\n      var globalOptionLineElements = globalDefaults.elements.line;\n      var lastDrawnIndex = -1;\n      var index, current, previous, currentVM; // If we are looping, adding the first point again\n\n      if (me._loop && points.length) {\n        points.push(points[0]);\n      }\n\n      ctx.save(); // Stroke Line Options\n\n      ctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle; // IE 9 and 10 do not support line dash\n\n      if (ctx.setLineDash) {\n        ctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);\n      }\n\n      ctx.lineDashOffset = valueOrDefault$1(vm.borderDashOffset, globalOptionLineElements.borderDashOffset);\n      ctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;\n      ctx.lineWidth = valueOrDefault$1(vm.borderWidth, globalOptionLineElements.borderWidth);\n      ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor; // Stroke Line\n\n      ctx.beginPath();\n      lastDrawnIndex = -1;\n\n      for (index = 0; index < points.length; ++index) {\n        current = points[index];\n        previous = helpers$1.previousItem(points, index);\n        currentVM = current._view; // First point moves to it's starting position no matter what\n\n        if (index === 0) {\n          if (!currentVM.skip) {\n            ctx.moveTo(currentVM.x, currentVM.y);\n            lastDrawnIndex = index;\n          }\n        } else {\n          previous = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];\n\n          if (!currentVM.skip) {\n            if (lastDrawnIndex !== index - 1 && !spanGaps || lastDrawnIndex === -1) {\n              // There was a gap and this is the first point after the gap\n              ctx.moveTo(currentVM.x, currentVM.y);\n            } else {\n              // Line to next point\n              helpers$1.canvas.lineTo(ctx, previous._view, current._view);\n            }\n\n            lastDrawnIndex = index;\n          }\n        }\n      }\n\n      ctx.stroke();\n      ctx.restore();\n    }\n  });\n  var valueOrDefault$2 = helpers$1.valueOrDefault;\n  var defaultColor$1 = core_defaults.global.defaultColor;\n\n  core_defaults._set('global', {\n    elements: {\n      point: {\n        radius: 3,\n        pointStyle: 'circle',\n        backgroundColor: defaultColor$1,\n        borderColor: defaultColor$1,\n        borderWidth: 1,\n        // Hover\n        hitRadius: 1,\n        hoverRadius: 4,\n        hoverBorderWidth: 1\n      }\n    }\n  });\n\n  function xRange(mouseX) {\n    var vm = this._view;\n    return vm ? Math.abs(mouseX - vm.x) < vm.radius + vm.hitRadius : false;\n  }\n\n  function yRange(mouseY) {\n    var vm = this._view;\n    return vm ? Math.abs(mouseY - vm.y) < vm.radius + vm.hitRadius : false;\n  }\n\n  var element_point = core_element.extend({\n    inRange: function inRange(mouseX, mouseY) {\n      var vm = this._view;\n      return vm ? Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2) < Math.pow(vm.hitRadius + vm.radius, 2) : false;\n    },\n    inLabelRange: xRange,\n    inXRange: xRange,\n    inYRange: yRange,\n    getCenterPoint: function getCenterPoint() {\n      var vm = this._view;\n      return {\n        x: vm.x,\n        y: vm.y\n      };\n    },\n    getArea: function getArea() {\n      return Math.PI * Math.pow(this._view.radius, 2);\n    },\n    tooltipPosition: function tooltipPosition() {\n      var vm = this._view;\n      return {\n        x: vm.x,\n        y: vm.y,\n        padding: vm.radius + vm.borderWidth\n      };\n    },\n    draw: function draw(chartArea) {\n      var vm = this._view;\n      var ctx = this._chart.ctx;\n      var pointStyle = vm.pointStyle;\n      var rotation = vm.rotation;\n      var radius = vm.radius;\n      var x = vm.x;\n      var y = vm.y;\n      var globalDefaults = core_defaults.global;\n      var defaultColor = globalDefaults.defaultColor; // eslint-disable-line no-shadow\n\n      if (vm.skip) {\n        return;\n      } // Clipping for Points.\n\n\n      if (chartArea === undefined || helpers$1.canvas._isPointInArea(vm, chartArea)) {\n        ctx.strokeStyle = vm.borderColor || defaultColor;\n        ctx.lineWidth = valueOrDefault$2(vm.borderWidth, globalDefaults.elements.point.borderWidth);\n        ctx.fillStyle = vm.backgroundColor || defaultColor;\n        helpers$1.canvas.drawPoint(ctx, pointStyle, radius, x, y, rotation);\n      }\n    }\n  });\n  var defaultColor$2 = core_defaults.global.defaultColor;\n\n  core_defaults._set('global', {\n    elements: {\n      rectangle: {\n        backgroundColor: defaultColor$2,\n        borderColor: defaultColor$2,\n        borderSkipped: 'bottom',\n        borderWidth: 0\n      }\n    }\n  });\n\n  function isVertical(vm) {\n    return vm && vm.width !== undefined;\n  }\n  /**\n   * Helper function to get the bounds of the bar regardless of the orientation\n   * @param bar {Chart.Element.Rectangle} the bar\n   * @return {Bounds} bounds of the bar\n   * @private\n   */\n\n\n  function getBarBounds(vm) {\n    var x1, x2, y1, y2, half;\n\n    if (isVertical(vm)) {\n      half = vm.width / 2;\n      x1 = vm.x - half;\n      x2 = vm.x + half;\n      y1 = Math.min(vm.y, vm.base);\n      y2 = Math.max(vm.y, vm.base);\n    } else {\n      half = vm.height / 2;\n      x1 = Math.min(vm.x, vm.base);\n      x2 = Math.max(vm.x, vm.base);\n      y1 = vm.y - half;\n      y2 = vm.y + half;\n    }\n\n    return {\n      left: x1,\n      top: y1,\n      right: x2,\n      bottom: y2\n    };\n  }\n\n  function swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n  }\n\n  function parseBorderSkipped(vm) {\n    var edge = vm.borderSkipped;\n    var res = {};\n\n    if (!edge) {\n      return res;\n    }\n\n    if (vm.horizontal) {\n      if (vm.base > vm.x) {\n        edge = swap(edge, 'left', 'right');\n      }\n    } else if (vm.base < vm.y) {\n      edge = swap(edge, 'bottom', 'top');\n    }\n\n    res[edge] = true;\n    return res;\n  }\n\n  function parseBorderWidth(vm, maxW, maxH) {\n    var value = vm.borderWidth;\n    var skip = parseBorderSkipped(vm);\n    var t, r, b, l;\n\n    if (helpers$1.isObject(value)) {\n      t = +value.top || 0;\n      r = +value.right || 0;\n      b = +value.bottom || 0;\n      l = +value.left || 0;\n    } else {\n      t = r = b = l = +value || 0;\n    }\n\n    return {\n      t: skip.top || t < 0 ? 0 : t > maxH ? maxH : t,\n      r: skip.right || r < 0 ? 0 : r > maxW ? maxW : r,\n      b: skip.bottom || b < 0 ? 0 : b > maxH ? maxH : b,\n      l: skip.left || l < 0 ? 0 : l > maxW ? maxW : l\n    };\n  }\n\n  function boundingRects(vm) {\n    var bounds = getBarBounds(vm);\n    var width = bounds.right - bounds.left;\n    var height = bounds.bottom - bounds.top;\n    var border = parseBorderWidth(vm, width / 2, height / 2);\n    return {\n      outer: {\n        x: bounds.left,\n        y: bounds.top,\n        w: width,\n        h: height\n      },\n      inner: {\n        x: bounds.left + border.l,\n        y: bounds.top + border.t,\n        w: width - border.l - border.r,\n        h: height - border.t - border.b\n      }\n    };\n  }\n\n  function _inRange(vm, x, y) {\n    var skipX = x === null;\n    var skipY = y === null;\n    var bounds = !vm || skipX && skipY ? false : getBarBounds(vm);\n    return bounds && (skipX || x >= bounds.left && x <= bounds.right) && (skipY || y >= bounds.top && y <= bounds.bottom);\n  }\n\n  var element_rectangle = core_element.extend({\n    draw: function draw() {\n      var ctx = this._chart.ctx;\n      var vm = this._view;\n      var rects = boundingRects(vm);\n      var outer = rects.outer;\n      var inner = rects.inner;\n      ctx.fillStyle = vm.backgroundColor;\n      ctx.fillRect(outer.x, outer.y, outer.w, outer.h);\n\n      if (outer.w === inner.w && outer.h === inner.h) {\n        return;\n      }\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(outer.x, outer.y, outer.w, outer.h);\n      ctx.clip();\n      ctx.fillStyle = vm.borderColor;\n      ctx.rect(inner.x, inner.y, inner.w, inner.h);\n      ctx.fill('evenodd');\n      ctx.restore();\n    },\n    height: function height() {\n      var vm = this._view;\n      return vm.base - vm.y;\n    },\n    inRange: function inRange(mouseX, mouseY) {\n      return _inRange(this._view, mouseX, mouseY);\n    },\n    inLabelRange: function inLabelRange(mouseX, mouseY) {\n      var vm = this._view;\n      return isVertical(vm) ? _inRange(vm, mouseX, null) : _inRange(vm, null, mouseY);\n    },\n    inXRange: function inXRange(mouseX) {\n      return _inRange(this._view, mouseX, null);\n    },\n    inYRange: function inYRange(mouseY) {\n      return _inRange(this._view, null, mouseY);\n    },\n    getCenterPoint: function getCenterPoint() {\n      var vm = this._view;\n      var x, y;\n\n      if (isVertical(vm)) {\n        x = vm.x;\n        y = (vm.y + vm.base) / 2;\n      } else {\n        x = (vm.x + vm.base) / 2;\n        y = vm.y;\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    },\n    getArea: function getArea() {\n      var vm = this._view;\n      return isVertical(vm) ? vm.width * Math.abs(vm.y - vm.base) : vm.height * Math.abs(vm.x - vm.base);\n    },\n    tooltipPosition: function tooltipPosition() {\n      var vm = this._view;\n      return {\n        x: vm.x,\n        y: vm.y\n      };\n    }\n  });\n  var elements = {};\n  var Arc = element_arc;\n  var Line = element_line;\n  var Point = element_point;\n  var Rectangle = element_rectangle;\n  elements.Arc = Arc;\n  elements.Line = Line;\n  elements.Point = Point;\n  elements.Rectangle = Rectangle;\n  var resolve$1 = helpers$1.options.resolve;\n\n  core_defaults._set('bar', {\n    hover: {\n      mode: 'label'\n    },\n    scales: {\n      xAxes: [{\n        type: 'category',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        offset: true,\n        gridLines: {\n          offsetGridLines: true\n        }\n      }],\n      yAxes: [{\n        type: 'linear'\n      }]\n    }\n  });\n  /**\n   * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n   * @private\n   */\n\n\n  function computeMinSampleSize(scale, pixels) {\n    var min = scale.isHorizontal() ? scale.width : scale.height;\n    var ticks = scale.getTicks();\n    var prev, curr, i, ilen;\n\n    for (i = 1, ilen = pixels.length; i < ilen; ++i) {\n      min = Math.min(min, Math.abs(pixels[i] - pixels[i - 1]));\n    }\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      curr = scale.getPixelForTick(i);\n      min = i > 0 ? Math.min(min, curr - prev) : min;\n      prev = curr;\n    }\n\n    return min;\n  }\n  /**\n   * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n   * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n   * mode currently always generates bars equally sized (until we introduce scriptable options?).\n   * @private\n   */\n\n\n  function computeFitCategoryTraits(index, ruler, options) {\n    var thickness = options.barThickness;\n    var count = ruler.stackCount;\n    var curr = ruler.pixels[index];\n    var size, ratio;\n\n    if (helpers$1.isNullOrUndef(thickness)) {\n      size = ruler.min * options.categoryPercentage;\n      ratio = options.barPercentage;\n    } else {\n      // When bar thickness is enforced, category and bar percentages are ignored.\n      // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n      // and deprecate barPercentage since this value is ignored when thickness is absolute.\n      size = thickness * count;\n      ratio = 1;\n    }\n\n    return {\n      chunk: size / count,\n      ratio: ratio,\n      start: curr - size / 2\n    };\n  }\n  /**\n   * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n   * percentage options are 1), based on the previous and following categories. This mode\n   * generates bars with different widths when data are not evenly spaced.\n   * @private\n   */\n\n\n  function computeFlexCategoryTraits(index, ruler, options) {\n    var pixels = ruler.pixels;\n    var curr = pixels[index];\n    var prev = index > 0 ? pixels[index - 1] : null;\n    var next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    var percent = options.categoryPercentage;\n    var start, size;\n\n    if (prev === null) {\n      // first data: its size is double based on the next point or,\n      // if it's also the last data, we use the scale size.\n      prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n\n    if (next === null) {\n      // last data: its size is also double based on the previous point.\n      next = curr + curr - prev;\n    }\n\n    start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    size = Math.abs(next - prev) / 2 * percent;\n    return {\n      chunk: size / ruler.stackCount,\n      ratio: options.barPercentage,\n      start: start\n    };\n  }\n\n  var controller_bar = core_datasetController.extend({\n    dataElementType: elements.Rectangle,\n    initialize: function initialize() {\n      var me = this;\n      var meta;\n      core_datasetController.prototype.initialize.apply(me, arguments);\n      meta = me.getMeta();\n      meta.stack = me.getDataset().stack;\n      meta.bar = true;\n    },\n    update: function update(reset) {\n      var me = this;\n      var rects = me.getMeta().data;\n      var i, ilen;\n      me._ruler = me.getRuler();\n\n      for (i = 0, ilen = rects.length; i < ilen; ++i) {\n        me.updateElement(rects[i], i, reset);\n      }\n    },\n    updateElement: function updateElement(rectangle, index, reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var dataset = me.getDataset();\n\n      var options = me._resolveElementOptions(rectangle, index);\n\n      rectangle._xScale = me.getScaleForId(meta.xAxisID);\n      rectangle._yScale = me.getScaleForId(meta.yAxisID);\n      rectangle._datasetIndex = me.index;\n      rectangle._index = index;\n      rectangle._model = {\n        backgroundColor: options.backgroundColor,\n        borderColor: options.borderColor,\n        borderSkipped: options.borderSkipped,\n        borderWidth: options.borderWidth,\n        datasetLabel: dataset.label,\n        label: me.chart.data.labels[index]\n      };\n\n      me._updateElementGeometry(rectangle, index, reset);\n\n      rectangle.pivot();\n    },\n\n    /**\n     * @private\n     */\n    _updateElementGeometry: function _updateElementGeometry(rectangle, index, reset) {\n      var me = this;\n      var model = rectangle._model;\n\n      var vscale = me._getValueScale();\n\n      var base = vscale.getBasePixel();\n      var horizontal = vscale.isHorizontal();\n      var ruler = me._ruler || me.getRuler();\n      var vpixels = me.calculateBarValuePixels(me.index, index);\n      var ipixels = me.calculateBarIndexPixels(me.index, index, ruler);\n      model.horizontal = horizontal;\n      model.base = reset ? base : vpixels.base;\n      model.x = horizontal ? reset ? base : vpixels.head : ipixels.center;\n      model.y = horizontal ? ipixels.center : reset ? base : vpixels.head;\n      model.height = horizontal ? ipixels.size : undefined;\n      model.width = horizontal ? undefined : ipixels.size;\n    },\n\n    /**\n     * Returns the stacks based on groups and bar visibility.\n     * @param {number} [last] - The dataset index\n     * @returns {string[]} The list of stack IDs\n     * @private\n     */\n    _getStacks: function _getStacks(last) {\n      var me = this;\n      var chart = me.chart;\n\n      var scale = me._getIndexScale();\n\n      var stacked = scale.options.stacked;\n      var ilen = last === undefined ? chart.data.datasets.length : last + 1;\n      var stacks = [];\n      var i, meta;\n\n      for (i = 0; i < ilen; ++i) {\n        meta = chart.getDatasetMeta(i);\n\n        if (meta.bar && chart.isDatasetVisible(i) && (stacked === false || stacked === true && stacks.indexOf(meta.stack) === -1 || stacked === undefined && (meta.stack === undefined || stacks.indexOf(meta.stack) === -1))) {\n          stacks.push(meta.stack);\n        }\n      }\n\n      return stacks;\n    },\n\n    /**\n     * Returns the effective number of stacks based on groups and bar visibility.\n     * @private\n     */\n    getStackCount: function getStackCount() {\n      return this._getStacks().length;\n    },\n\n    /**\n     * Returns the stack index for the given dataset based on groups and bar visibility.\n     * @param {number} [datasetIndex] - The dataset index\n     * @param {string} [name] - The stack name to find\n     * @returns {number} The stack index\n     * @private\n     */\n    getStackIndex: function getStackIndex(datasetIndex, name) {\n      var stacks = this._getStacks(datasetIndex);\n\n      var index = name !== undefined ? stacks.indexOf(name) : -1; // indexOf returns -1 if element is not present\n\n      return index === -1 ? stacks.length - 1 : index;\n    },\n\n    /**\n     * @private\n     */\n    getRuler: function getRuler() {\n      var me = this;\n\n      var scale = me._getIndexScale();\n\n      var stackCount = me.getStackCount();\n      var datasetIndex = me.index;\n      var isHorizontal = scale.isHorizontal();\n      var start = isHorizontal ? scale.left : scale.top;\n      var end = start + (isHorizontal ? scale.width : scale.height);\n      var pixels = [];\n      var i, ilen, min;\n\n      for (i = 0, ilen = me.getMeta().data.length; i < ilen; ++i) {\n        pixels.push(scale.getPixelForValue(null, i, datasetIndex));\n      }\n\n      min = helpers$1.isNullOrUndef(scale.options.barThickness) ? computeMinSampleSize(scale, pixels) : -1;\n      return {\n        min: min,\n        pixels: pixels,\n        start: start,\n        end: end,\n        stackCount: stackCount,\n        scale: scale\n      };\n    },\n\n    /**\n     * Note: pixel values are not clamped to the scale area.\n     * @private\n     */\n    calculateBarValuePixels: function calculateBarValuePixels(datasetIndex, index) {\n      var me = this;\n      var chart = me.chart;\n      var meta = me.getMeta();\n\n      var scale = me._getValueScale();\n\n      var isHorizontal = scale.isHorizontal();\n      var datasets = chart.data.datasets;\n      var value = +scale.getRightValue(datasets[datasetIndex].data[index]);\n      var minBarLength = scale.options.minBarLength;\n      var stacked = scale.options.stacked;\n      var stack = meta.stack;\n      var start = 0;\n      var i, imeta, ivalue, base, head, size;\n\n      if (stacked || stacked === undefined && stack !== undefined) {\n        for (i = 0; i < datasetIndex; ++i) {\n          imeta = chart.getDatasetMeta(i);\n\n          if (imeta.bar && imeta.stack === stack && imeta.controller._getValueScaleId() === scale.id && chart.isDatasetVisible(i)) {\n            ivalue = +scale.getRightValue(datasets[i].data[index]);\n\n            if (value < 0 && ivalue < 0 || value >= 0 && ivalue > 0) {\n              start += ivalue;\n            }\n          }\n        }\n      }\n\n      base = scale.getPixelForValue(start);\n      head = scale.getPixelForValue(start + value);\n      size = head - base;\n\n      if (minBarLength !== undefined && Math.abs(size) < minBarLength) {\n        size = minBarLength;\n\n        if (value >= 0 && !isHorizontal || value < 0 && isHorizontal) {\n          head = base - minBarLength;\n        } else {\n          head = base + minBarLength;\n        }\n      }\n\n      return {\n        size: size,\n        base: base,\n        head: head,\n        center: head + size / 2\n      };\n    },\n\n    /**\n     * @private\n     */\n    calculateBarIndexPixels: function calculateBarIndexPixels(datasetIndex, index, ruler) {\n      var me = this;\n      var options = ruler.scale.options;\n      var range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options) : computeFitCategoryTraits(index, ruler, options);\n      var stackIndex = me.getStackIndex(datasetIndex, me.getMeta().stack);\n      var center = range.start + range.chunk * stackIndex + range.chunk / 2;\n      var size = Math.min(helpers$1.valueOrDefault(options.maxBarThickness, Infinity), range.chunk * range.ratio);\n      return {\n        base: center - size / 2,\n        head: center + size / 2,\n        center: center,\n        size: size\n      };\n    },\n    draw: function draw() {\n      var me = this;\n      var chart = me.chart;\n\n      var scale = me._getValueScale();\n\n      var rects = me.getMeta().data;\n      var dataset = me.getDataset();\n      var ilen = rects.length;\n      var i = 0;\n      helpers$1.canvas.clipArea(chart.ctx, chart.chartArea);\n\n      for (; i < ilen; ++i) {\n        if (!isNaN(scale.getRightValue(dataset.data[i]))) {\n          rects[i].draw();\n        }\n      }\n\n      helpers$1.canvas.unclipArea(chart.ctx);\n    },\n\n    /**\n     * @private\n     */\n    _resolveElementOptions: function _resolveElementOptions(rectangle, index) {\n      var me = this;\n      var chart = me.chart;\n      var datasets = chart.data.datasets;\n      var dataset = datasets[me.index];\n      var custom = rectangle.custom || {};\n      var options = chart.options.elements.rectangle;\n      var values = {};\n      var i, ilen, key; // Scriptable options\n\n      var context = {\n        chart: chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      var keys = ['backgroundColor', 'borderColor', 'borderSkipped', 'borderWidth'];\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$1([custom[key], dataset[key], options[key]], context, index);\n      }\n\n      return values;\n    }\n  });\n  var valueOrDefault$3 = helpers$1.valueOrDefault;\n  var resolve$2 = helpers$1.options.resolve;\n\n  core_defaults._set('bubble', {\n    hover: {\n      mode: 'single'\n    },\n    scales: {\n      xAxes: [{\n        type: 'linear',\n        // bubble should probably use a linear scale by default\n        position: 'bottom',\n        id: 'x-axis-0' // need an ID so datasets can reference the scale\n\n      }],\n      yAxes: [{\n        type: 'linear',\n        position: 'left',\n        id: 'y-axis-0'\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        title: function title() {\n          // Title doesn't make sense for scatter since we format the data as a point\n          return '';\n        },\n        label: function label(item, data) {\n          var datasetLabel = data.datasets[item.datasetIndex].label || '';\n          var dataPoint = data.datasets[item.datasetIndex].data[item.index];\n          return datasetLabel + ': (' + item.xLabel + ', ' + item.yLabel + ', ' + dataPoint.r + ')';\n        }\n      }\n    }\n  });\n\n  var controller_bubble = core_datasetController.extend({\n    /**\n     * @protected\n     */\n    dataElementType: elements.Point,\n\n    /**\n     * @protected\n     */\n    update: function update(reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var points = meta.data; // Update Points\n\n      helpers$1.each(points, function (point, index) {\n        me.updateElement(point, index, reset);\n      });\n    },\n\n    /**\n     * @protected\n     */\n    updateElement: function updateElement(point, index, reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var custom = point.custom || {};\n      var xScale = me.getScaleForId(meta.xAxisID);\n      var yScale = me.getScaleForId(meta.yAxisID);\n\n      var options = me._resolveElementOptions(point, index);\n\n      var data = me.getDataset().data[index];\n      var dsIndex = me.index;\n      var x = reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex);\n      var y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex);\n      point._xScale = xScale;\n      point._yScale = yScale;\n      point._options = options;\n      point._datasetIndex = dsIndex;\n      point._index = index;\n      point._model = {\n        backgroundColor: options.backgroundColor,\n        borderColor: options.borderColor,\n        borderWidth: options.borderWidth,\n        hitRadius: options.hitRadius,\n        pointStyle: options.pointStyle,\n        rotation: options.rotation,\n        radius: reset ? 0 : options.radius,\n        skip: custom.skip || isNaN(x) || isNaN(y),\n        x: x,\n        y: y\n      };\n      point.pivot();\n    },\n\n    /**\n     * @protected\n     */\n    setHoverStyle: function setHoverStyle(point) {\n      var model = point._model;\n      var options = point._options;\n      var getHoverColor = helpers$1.getHoverColor;\n      point.$previousStyle = {\n        backgroundColor: model.backgroundColor,\n        borderColor: model.borderColor,\n        borderWidth: model.borderWidth,\n        radius: model.radius\n      };\n      model.backgroundColor = valueOrDefault$3(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n      model.borderColor = valueOrDefault$3(options.hoverBorderColor, getHoverColor(options.borderColor));\n      model.borderWidth = valueOrDefault$3(options.hoverBorderWidth, options.borderWidth);\n      model.radius = options.radius + options.hoverRadius;\n    },\n\n    /**\n     * @private\n     */\n    _resolveElementOptions: function _resolveElementOptions(point, index) {\n      var me = this;\n      var chart = me.chart;\n      var datasets = chart.data.datasets;\n      var dataset = datasets[me.index];\n      var custom = point.custom || {};\n      var options = chart.options.elements.point;\n      var data = dataset.data[index];\n      var values = {};\n      var i, ilen, key; // Scriptable options\n\n      var context = {\n        chart: chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      var keys = ['backgroundColor', 'borderColor', 'borderWidth', 'hoverBackgroundColor', 'hoverBorderColor', 'hoverBorderWidth', 'hoverRadius', 'hitRadius', 'pointStyle', 'rotation'];\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$2([custom[key], dataset[key], options[key]], context, index);\n      } // Custom radius resolution\n\n\n      values.radius = resolve$2([custom.radius, data ? data.r : undefined, dataset.radius, options.radius], context, index);\n      return values;\n    }\n  });\n  var resolve$3 = helpers$1.options.resolve;\n  var valueOrDefault$4 = helpers$1.valueOrDefault;\n\n  core_defaults._set('doughnut', {\n    animation: {\n      // Boolean - Whether we animate the rotation of the Doughnut\n      animateRotate: true,\n      // Boolean - Whether we animate scaling the Doughnut from the centre\n      animateScale: false\n    },\n    hover: {\n      mode: 'single'\n    },\n    legendCallback: function legendCallback(chart) {\n      var text = [];\n      text.push('<ul class=\"' + chart.id + '-legend\">');\n      var data = chart.data;\n      var datasets = data.datasets;\n      var labels = data.labels;\n\n      if (datasets.length) {\n        for (var i = 0; i < datasets[0].data.length; ++i) {\n          text.push('<li><span style=\"background-color:' + datasets[0].backgroundColor[i] + '\"></span>');\n\n          if (labels[i]) {\n            text.push(labels[i]);\n          }\n\n          text.push('</li>');\n        }\n      }\n\n      text.push('</ul>');\n      return text.join('');\n    },\n    legend: {\n      labels: {\n        generateLabels: function generateLabels(chart) {\n          var data = chart.data;\n\n          if (data.labels.length && data.datasets.length) {\n            return data.labels.map(function (label, i) {\n              var meta = chart.getDatasetMeta(0);\n              var ds = data.datasets[0];\n              var arc = meta.data[i];\n              var custom = arc && arc.custom || {};\n              var arcOpts = chart.options.elements.arc;\n              var fill = resolve$3([custom.backgroundColor, ds.backgroundColor, arcOpts.backgroundColor], undefined, i);\n              var stroke = resolve$3([custom.borderColor, ds.borderColor, arcOpts.borderColor], undefined, i);\n              var bw = resolve$3([custom.borderWidth, ds.borderWidth, arcOpts.borderWidth], undefined, i);\n              return {\n                text: label,\n                fillStyle: fill,\n                strokeStyle: stroke,\n                lineWidth: bw,\n                hidden: isNaN(ds.data[i]) || meta.data[i].hidden,\n                // Extra data used for toggling the correct item\n                index: i\n              };\n            });\n          }\n\n          return [];\n        }\n      },\n      onClick: function onClick(e, legendItem) {\n        var index = legendItem.index;\n        var chart = this.chart;\n        var i, ilen, meta;\n\n        for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n          meta = chart.getDatasetMeta(i); // toggle visibility of index if exists\n\n          if (meta.data[index]) {\n            meta.data[index].hidden = !meta.data[index].hidden;\n          }\n        }\n\n        chart.update();\n      }\n    },\n    // The percentage of the chart that we cut out of the middle.\n    cutoutPercentage: 50,\n    // The rotation of the chart, where the first data arc begins.\n    rotation: Math.PI * -0.5,\n    // The total circumference of the chart.\n    circumference: Math.PI * 2.0,\n    // Need to override these to give a nice default\n    tooltips: {\n      callbacks: {\n        title: function title() {\n          return '';\n        },\n        label: function label(tooltipItem, data) {\n          var dataLabel = data.labels[tooltipItem.index];\n          var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n\n          if (helpers$1.isArray(dataLabel)) {\n            // show value on first line of multiline label\n            // need to clone because we are changing the value\n            dataLabel = dataLabel.slice();\n            dataLabel[0] += value;\n          } else {\n            dataLabel += value;\n          }\n\n          return dataLabel;\n        }\n      }\n    }\n  });\n\n  var controller_doughnut = core_datasetController.extend({\n    dataElementType: elements.Arc,\n    linkScales: helpers$1.noop,\n    // Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly\n    getRingIndex: function getRingIndex(datasetIndex) {\n      var ringIndex = 0;\n\n      for (var j = 0; j < datasetIndex; ++j) {\n        if (this.chart.isDatasetVisible(j)) {\n          ++ringIndex;\n        }\n      }\n\n      return ringIndex;\n    },\n    update: function update(reset) {\n      var me = this;\n      var chart = me.chart;\n      var chartArea = chart.chartArea;\n      var opts = chart.options;\n      var availableWidth = chartArea.right - chartArea.left;\n      var availableHeight = chartArea.bottom - chartArea.top;\n      var minSize = Math.min(availableWidth, availableHeight);\n      var offset = {\n        x: 0,\n        y: 0\n      };\n      var meta = me.getMeta();\n      var arcs = meta.data;\n      var cutoutPercentage = opts.cutoutPercentage;\n      var circumference = opts.circumference;\n\n      var chartWeight = me._getRingWeight(me.index);\n\n      var i, ilen; // If the chart's circumference isn't a full circle, calculate minSize as a ratio of the width/height of the arc\n\n      if (circumference < Math.PI * 2.0) {\n        var startAngle = opts.rotation % (Math.PI * 2.0);\n        startAngle += Math.PI * 2.0 * (startAngle >= Math.PI ? -1 : startAngle < -Math.PI ? 1 : 0);\n        var endAngle = startAngle + circumference;\n        var start = {\n          x: Math.cos(startAngle),\n          y: Math.sin(startAngle)\n        };\n        var end = {\n          x: Math.cos(endAngle),\n          y: Math.sin(endAngle)\n        };\n        var contains0 = startAngle <= 0 && endAngle >= 0 || startAngle <= Math.PI * 2.0 && Math.PI * 2.0 <= endAngle;\n        var contains90 = startAngle <= Math.PI * 0.5 && Math.PI * 0.5 <= endAngle || startAngle <= Math.PI * 2.5 && Math.PI * 2.5 <= endAngle;\n        var contains180 = startAngle <= -Math.PI && -Math.PI <= endAngle || startAngle <= Math.PI && Math.PI <= endAngle;\n        var contains270 = startAngle <= -Math.PI * 0.5 && -Math.PI * 0.5 <= endAngle || startAngle <= Math.PI * 1.5 && Math.PI * 1.5 <= endAngle;\n        var cutout = cutoutPercentage / 100.0;\n        var min = {\n          x: contains180 ? -1 : Math.min(start.x * (start.x < 0 ? 1 : cutout), end.x * (end.x < 0 ? 1 : cutout)),\n          y: contains270 ? -1 : Math.min(start.y * (start.y < 0 ? 1 : cutout), end.y * (end.y < 0 ? 1 : cutout))\n        };\n        var max = {\n          x: contains0 ? 1 : Math.max(start.x * (start.x > 0 ? 1 : cutout), end.x * (end.x > 0 ? 1 : cutout)),\n          y: contains90 ? 1 : Math.max(start.y * (start.y > 0 ? 1 : cutout), end.y * (end.y > 0 ? 1 : cutout))\n        };\n        var size = {\n          width: (max.x - min.x) * 0.5,\n          height: (max.y - min.y) * 0.5\n        };\n        minSize = Math.min(availableWidth / size.width, availableHeight / size.height);\n        offset = {\n          x: (max.x + min.x) * -0.5,\n          y: (max.y + min.y) * -0.5\n        };\n      }\n\n      for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n        arcs[i]._options = me._resolveElementOptions(arcs[i], i);\n      }\n\n      chart.borderWidth = me.getMaxBorderWidth();\n      chart.outerRadius = Math.max((minSize - chart.borderWidth) / 2, 0);\n      chart.innerRadius = Math.max(cutoutPercentage ? chart.outerRadius / 100 * cutoutPercentage : 0, 0);\n      chart.radiusLength = (chart.outerRadius - chart.innerRadius) / (me._getVisibleDatasetWeightTotal() || 1);\n      chart.offsetX = offset.x * chart.outerRadius;\n      chart.offsetY = offset.y * chart.outerRadius;\n      meta.total = me.calculateTotal();\n      me.outerRadius = chart.outerRadius - chart.radiusLength * me._getRingWeightOffset(me.index);\n      me.innerRadius = Math.max(me.outerRadius - chart.radiusLength * chartWeight, 0);\n\n      for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n        me.updateElement(arcs[i], i, reset);\n      }\n    },\n    updateElement: function updateElement(arc, index, reset) {\n      var me = this;\n      var chart = me.chart;\n      var chartArea = chart.chartArea;\n      var opts = chart.options;\n      var animationOpts = opts.animation;\n      var centerX = (chartArea.left + chartArea.right) / 2;\n      var centerY = (chartArea.top + chartArea.bottom) / 2;\n      var startAngle = opts.rotation; // non reset case handled later\n\n      var endAngle = opts.rotation; // non reset case handled later\n\n      var dataset = me.getDataset();\n      var circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / (2.0 * Math.PI));\n      var innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius;\n      var outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius;\n      var options = arc._options || {};\n      helpers$1.extend(arc, {\n        // Utility\n        _datasetIndex: me.index,\n        _index: index,\n        // Desired view properties\n        _model: {\n          backgroundColor: options.backgroundColor,\n          borderColor: options.borderColor,\n          borderWidth: options.borderWidth,\n          borderAlign: options.borderAlign,\n          x: centerX + chart.offsetX,\n          y: centerY + chart.offsetY,\n          startAngle: startAngle,\n          endAngle: endAngle,\n          circumference: circumference,\n          outerRadius: outerRadius,\n          innerRadius: innerRadius,\n          label: helpers$1.valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])\n        }\n      });\n      var model = arc._model; // Set correct angles if not resetting\n\n      if (!reset || !animationOpts.animateRotate) {\n        if (index === 0) {\n          model.startAngle = opts.rotation;\n        } else {\n          model.startAngle = me.getMeta().data[index - 1]._model.endAngle;\n        }\n\n        model.endAngle = model.startAngle + model.circumference;\n      }\n\n      arc.pivot();\n    },\n    calculateTotal: function calculateTotal() {\n      var dataset = this.getDataset();\n      var meta = this.getMeta();\n      var total = 0;\n      var value;\n      helpers$1.each(meta.data, function (element, index) {\n        value = dataset.data[index];\n\n        if (!isNaN(value) && !element.hidden) {\n          total += Math.abs(value);\n        }\n      });\n      /* if (total === 0) {\n      \ttotal = NaN;\n      }*/\n\n      return total;\n    },\n    calculateCircumference: function calculateCircumference(value) {\n      var total = this.getMeta().total;\n\n      if (total > 0 && !isNaN(value)) {\n        return Math.PI * 2.0 * (Math.abs(value) / total);\n      }\n\n      return 0;\n    },\n    // gets the max border or hover width to properly scale pie charts\n    getMaxBorderWidth: function getMaxBorderWidth(arcs) {\n      var me = this;\n      var max = 0;\n      var chart = me.chart;\n      var i, ilen, meta, arc, controller, options, borderWidth, hoverWidth;\n\n      if (!arcs) {\n        // Find the outmost visible dataset\n        for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n          if (chart.isDatasetVisible(i)) {\n            meta = chart.getDatasetMeta(i);\n            arcs = meta.data;\n\n            if (i !== me.index) {\n              controller = meta.controller;\n            }\n\n            break;\n          }\n        }\n      }\n\n      if (!arcs) {\n        return 0;\n      }\n\n      for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n        arc = arcs[i];\n        options = controller ? controller._resolveElementOptions(arc, i) : arc._options;\n\n        if (options.borderAlign !== 'inner') {\n          borderWidth = options.borderWidth;\n          hoverWidth = options.hoverBorderWidth;\n          max = borderWidth > max ? borderWidth : max;\n          max = hoverWidth > max ? hoverWidth : max;\n        }\n      }\n\n      return max;\n    },\n\n    /**\n     * @protected\n     */\n    setHoverStyle: function setHoverStyle(arc) {\n      var model = arc._model;\n      var options = arc._options;\n      var getHoverColor = helpers$1.getHoverColor;\n      arc.$previousStyle = {\n        backgroundColor: model.backgroundColor,\n        borderColor: model.borderColor,\n        borderWidth: model.borderWidth\n      };\n      model.backgroundColor = valueOrDefault$4(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n      model.borderColor = valueOrDefault$4(options.hoverBorderColor, getHoverColor(options.borderColor));\n      model.borderWidth = valueOrDefault$4(options.hoverBorderWidth, options.borderWidth);\n    },\n\n    /**\n     * @private\n     */\n    _resolveElementOptions: function _resolveElementOptions(arc, index) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = me.getDataset();\n      var custom = arc.custom || {};\n      var options = chart.options.elements.arc;\n      var values = {};\n      var i, ilen, key; // Scriptable options\n\n      var context = {\n        chart: chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      var keys = ['backgroundColor', 'borderColor', 'borderWidth', 'borderAlign', 'hoverBackgroundColor', 'hoverBorderColor', 'hoverBorderWidth'];\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$3([custom[key], dataset[key], options[key]], context, index);\n      }\n\n      return values;\n    },\n\n    /**\n     * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n     * @private\n     */\n    _getRingWeightOffset: function _getRingWeightOffset(datasetIndex) {\n      var ringWeightOffset = 0;\n\n      for (var i = 0; i < datasetIndex; ++i) {\n        if (this.chart.isDatasetVisible(i)) {\n          ringWeightOffset += this._getRingWeight(i);\n        }\n      }\n\n      return ringWeightOffset;\n    },\n\n    /**\n     * @private\n     */\n    _getRingWeight: function _getRingWeight(dataSetIndex) {\n      return Math.max(valueOrDefault$4(this.chart.data.datasets[dataSetIndex].weight, 1), 0);\n    },\n\n    /**\n     * Returns the sum of all visibile data set weights.  This value can be 0.\n     * @private\n     */\n    _getVisibleDatasetWeightTotal: function _getVisibleDatasetWeightTotal() {\n      return this._getRingWeightOffset(this.chart.data.datasets.length);\n    }\n  });\n\n  core_defaults._set('horizontalBar', {\n    hover: {\n      mode: 'index',\n      axis: 'y'\n    },\n    scales: {\n      xAxes: [{\n        type: 'linear',\n        position: 'bottom'\n      }],\n      yAxes: [{\n        type: 'category',\n        position: 'left',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        offset: true,\n        gridLines: {\n          offsetGridLines: true\n        }\n      }]\n    },\n    elements: {\n      rectangle: {\n        borderSkipped: 'left'\n      }\n    },\n    tooltips: {\n      mode: 'index',\n      axis: 'y'\n    }\n  });\n\n  var controller_horizontalBar = controller_bar.extend({\n    /**\n     * @private\n     */\n    _getValueScaleId: function _getValueScaleId() {\n      return this.getMeta().xAxisID;\n    },\n\n    /**\n     * @private\n     */\n    _getIndexScaleId: function _getIndexScaleId() {\n      return this.getMeta().yAxisID;\n    }\n  });\n  var valueOrDefault$5 = helpers$1.valueOrDefault;\n  var resolve$4 = helpers$1.options.resolve;\n  var isPointInArea = helpers$1.canvas._isPointInArea;\n\n  core_defaults._set('line', {\n    showLines: true,\n    spanGaps: false,\n    hover: {\n      mode: 'label'\n    },\n    scales: {\n      xAxes: [{\n        type: 'category',\n        id: 'x-axis-0'\n      }],\n      yAxes: [{\n        type: 'linear',\n        id: 'y-axis-0'\n      }]\n    }\n  });\n\n  function lineEnabled(dataset, options) {\n    return valueOrDefault$5(dataset.showLine, options.showLines);\n  }\n\n  var controller_line = core_datasetController.extend({\n    datasetElementType: elements.Line,\n    dataElementType: elements.Point,\n    update: function update(reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var line = meta.dataset;\n      var points = meta.data || [];\n      var scale = me.getScaleForId(meta.yAxisID);\n      var dataset = me.getDataset();\n      var showLine = lineEnabled(dataset, me.chart.options);\n      var i, ilen; // Update Line\n\n      if (showLine) {\n        // Compatibility: If the properties are defined with only the old name, use those values\n        if (dataset.tension !== undefined && dataset.lineTension === undefined) {\n          dataset.lineTension = dataset.tension;\n        } // Utility\n\n\n        line._scale = scale;\n        line._datasetIndex = me.index; // Data\n\n        line._children = points; // Model\n\n        line._model = me._resolveLineOptions(line);\n        line.pivot();\n      } // Update Points\n\n\n      for (i = 0, ilen = points.length; i < ilen; ++i) {\n        me.updateElement(points[i], i, reset);\n      }\n\n      if (showLine && line._model.tension !== 0) {\n        me.updateBezierControlPoints();\n      } // Now pivot the point for animation\n\n\n      for (i = 0, ilen = points.length; i < ilen; ++i) {\n        points[i].pivot();\n      }\n    },\n    updateElement: function updateElement(point, index, reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var custom = point.custom || {};\n      var dataset = me.getDataset();\n      var datasetIndex = me.index;\n      var value = dataset.data[index];\n      var yScale = me.getScaleForId(meta.yAxisID);\n      var xScale = me.getScaleForId(meta.xAxisID);\n      var lineModel = meta.dataset._model;\n      var x, y;\n\n      var options = me._resolvePointOptions(point, index);\n\n      x = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex);\n      y = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex); // Utility\n\n      point._xScale = xScale;\n      point._yScale = yScale;\n      point._options = options;\n      point._datasetIndex = datasetIndex;\n      point._index = index; // Desired view properties\n\n      point._model = {\n        x: x,\n        y: y,\n        skip: custom.skip || isNaN(x) || isNaN(y),\n        // Appearance\n        radius: options.radius,\n        pointStyle: options.pointStyle,\n        rotation: options.rotation,\n        backgroundColor: options.backgroundColor,\n        borderColor: options.borderColor,\n        borderWidth: options.borderWidth,\n        tension: valueOrDefault$5(custom.tension, lineModel ? lineModel.tension : 0),\n        steppedLine: lineModel ? lineModel.steppedLine : false,\n        // Tooltip\n        hitRadius: options.hitRadius\n      };\n    },\n\n    /**\n     * @private\n     */\n    _resolvePointOptions: function _resolvePointOptions(element, index) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = chart.data.datasets[me.index];\n      var custom = element.custom || {};\n      var options = chart.options.elements.point;\n      var values = {};\n      var i, ilen, key; // Scriptable options\n\n      var context = {\n        chart: chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      var ELEMENT_OPTIONS = {\n        backgroundColor: 'pointBackgroundColor',\n        borderColor: 'pointBorderColor',\n        borderWidth: 'pointBorderWidth',\n        hitRadius: 'pointHitRadius',\n        hoverBackgroundColor: 'pointHoverBackgroundColor',\n        hoverBorderColor: 'pointHoverBorderColor',\n        hoverBorderWidth: 'pointHoverBorderWidth',\n        hoverRadius: 'pointHoverRadius',\n        pointStyle: 'pointStyle',\n        radius: 'pointRadius',\n        rotation: 'pointRotation'\n      };\n      var keys = Object.keys(ELEMENT_OPTIONS);\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$4([custom[key], dataset[ELEMENT_OPTIONS[key]], dataset[key], options[key]], context, index);\n      }\n\n      return values;\n    },\n\n    /**\n     * @private\n     */\n    _resolveLineOptions: function _resolveLineOptions(element) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = chart.data.datasets[me.index];\n      var custom = element.custom || {};\n      var options = chart.options;\n      var elementOptions = options.elements.line;\n      var values = {};\n      var i, ilen, key;\n      var keys = ['backgroundColor', 'borderWidth', 'borderColor', 'borderCapStyle', 'borderDash', 'borderDashOffset', 'borderJoinStyle', 'fill', 'cubicInterpolationMode'];\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$4([custom[key], dataset[key], elementOptions[key]]);\n      } // The default behavior of lines is to break at null values, according\n      // to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158\n      // This option gives lines the ability to span gaps\n\n\n      values.spanGaps = valueOrDefault$5(dataset.spanGaps, options.spanGaps);\n      values.tension = valueOrDefault$5(dataset.lineTension, elementOptions.tension);\n      values.steppedLine = resolve$4([custom.steppedLine, dataset.steppedLine, elementOptions.stepped]);\n      return values;\n    },\n    calculatePointY: function calculatePointY(value, index, datasetIndex) {\n      var me = this;\n      var chart = me.chart;\n      var meta = me.getMeta();\n      var yScale = me.getScaleForId(meta.yAxisID);\n      var sumPos = 0;\n      var sumNeg = 0;\n      var i, ds, dsMeta;\n\n      if (yScale.options.stacked) {\n        for (i = 0; i < datasetIndex; i++) {\n          ds = chart.data.datasets[i];\n          dsMeta = chart.getDatasetMeta(i);\n\n          if (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i)) {\n            var stackedRightValue = Number(yScale.getRightValue(ds.data[index]));\n\n            if (stackedRightValue < 0) {\n              sumNeg += stackedRightValue || 0;\n            } else {\n              sumPos += stackedRightValue || 0;\n            }\n          }\n        }\n\n        var rightValue = Number(yScale.getRightValue(value));\n\n        if (rightValue < 0) {\n          return yScale.getPixelForValue(sumNeg + rightValue);\n        }\n\n        return yScale.getPixelForValue(sumPos + rightValue);\n      }\n\n      return yScale.getPixelForValue(value);\n    },\n    updateBezierControlPoints: function updateBezierControlPoints() {\n      var me = this;\n      var chart = me.chart;\n      var meta = me.getMeta();\n      var lineModel = meta.dataset._model;\n      var area = chart.chartArea;\n      var points = meta.data || [];\n      var i, ilen, model, controlPoints; // Only consider points that are drawn in case the spanGaps option is used\n\n      if (lineModel.spanGaps) {\n        points = points.filter(function (pt) {\n          return !pt._model.skip;\n        });\n      }\n\n      function capControlPoint(pt, min, max) {\n        return Math.max(Math.min(pt, max), min);\n      }\n\n      if (lineModel.cubicInterpolationMode === 'monotone') {\n        helpers$1.splineCurveMonotone(points);\n      } else {\n        for (i = 0, ilen = points.length; i < ilen; ++i) {\n          model = points[i]._model;\n          controlPoints = helpers$1.splineCurve(helpers$1.previousItem(points, i)._model, model, helpers$1.nextItem(points, i)._model, lineModel.tension);\n          model.controlPointPreviousX = controlPoints.previous.x;\n          model.controlPointPreviousY = controlPoints.previous.y;\n          model.controlPointNextX = controlPoints.next.x;\n          model.controlPointNextY = controlPoints.next.y;\n        }\n      }\n\n      if (chart.options.elements.line.capBezierPoints) {\n        for (i = 0, ilen = points.length; i < ilen; ++i) {\n          model = points[i]._model;\n\n          if (isPointInArea(model, area)) {\n            if (i > 0 && isPointInArea(points[i - 1]._model, area)) {\n              model.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);\n              model.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);\n            }\n\n            if (i < points.length - 1 && isPointInArea(points[i + 1]._model, area)) {\n              model.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);\n              model.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);\n            }\n          }\n        }\n      }\n    },\n    draw: function draw() {\n      var me = this;\n      var chart = me.chart;\n      var meta = me.getMeta();\n      var points = meta.data || [];\n      var area = chart.chartArea;\n      var ilen = points.length;\n      var halfBorderWidth;\n      var i = 0;\n\n      if (lineEnabled(me.getDataset(), chart.options)) {\n        halfBorderWidth = (meta.dataset._model.borderWidth || 0) / 2;\n        helpers$1.canvas.clipArea(chart.ctx, {\n          left: area.left,\n          right: area.right,\n          top: area.top - halfBorderWidth,\n          bottom: area.bottom + halfBorderWidth\n        });\n        meta.dataset.draw();\n        helpers$1.canvas.unclipArea(chart.ctx);\n      } // Draw the points\n\n\n      for (; i < ilen; ++i) {\n        points[i].draw(area);\n      }\n    },\n\n    /**\n     * @protected\n     */\n    setHoverStyle: function setHoverStyle(point) {\n      var model = point._model;\n      var options = point._options;\n      var getHoverColor = helpers$1.getHoverColor;\n      point.$previousStyle = {\n        backgroundColor: model.backgroundColor,\n        borderColor: model.borderColor,\n        borderWidth: model.borderWidth,\n        radius: model.radius\n      };\n      model.backgroundColor = valueOrDefault$5(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n      model.borderColor = valueOrDefault$5(options.hoverBorderColor, getHoverColor(options.borderColor));\n      model.borderWidth = valueOrDefault$5(options.hoverBorderWidth, options.borderWidth);\n      model.radius = valueOrDefault$5(options.hoverRadius, options.radius);\n    }\n  });\n  var resolve$5 = helpers$1.options.resolve;\n\n  core_defaults._set('polarArea', {\n    scale: {\n      type: 'radialLinear',\n      angleLines: {\n        display: false\n      },\n      gridLines: {\n        circular: true\n      },\n      pointLabels: {\n        display: false\n      },\n      ticks: {\n        beginAtZero: true\n      }\n    },\n    // Boolean - Whether to animate the rotation of the chart\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    startAngle: -0.5 * Math.PI,\n    legendCallback: function legendCallback(chart) {\n      var text = [];\n      text.push('<ul class=\"' + chart.id + '-legend\">');\n      var data = chart.data;\n      var datasets = data.datasets;\n      var labels = data.labels;\n\n      if (datasets.length) {\n        for (var i = 0; i < datasets[0].data.length; ++i) {\n          text.push('<li><span style=\"background-color:' + datasets[0].backgroundColor[i] + '\"></span>');\n\n          if (labels[i]) {\n            text.push(labels[i]);\n          }\n\n          text.push('</li>');\n        }\n      }\n\n      text.push('</ul>');\n      return text.join('');\n    },\n    legend: {\n      labels: {\n        generateLabels: function generateLabels(chart) {\n          var data = chart.data;\n\n          if (data.labels.length && data.datasets.length) {\n            return data.labels.map(function (label, i) {\n              var meta = chart.getDatasetMeta(0);\n              var ds = data.datasets[0];\n              var arc = meta.data[i];\n              var custom = arc.custom || {};\n              var arcOpts = chart.options.elements.arc;\n              var fill = resolve$5([custom.backgroundColor, ds.backgroundColor, arcOpts.backgroundColor], undefined, i);\n              var stroke = resolve$5([custom.borderColor, ds.borderColor, arcOpts.borderColor], undefined, i);\n              var bw = resolve$5([custom.borderWidth, ds.borderWidth, arcOpts.borderWidth], undefined, i);\n              return {\n                text: label,\n                fillStyle: fill,\n                strokeStyle: stroke,\n                lineWidth: bw,\n                hidden: isNaN(ds.data[i]) || meta.data[i].hidden,\n                // Extra data used for toggling the correct item\n                index: i\n              };\n            });\n          }\n\n          return [];\n        }\n      },\n      onClick: function onClick(e, legendItem) {\n        var index = legendItem.index;\n        var chart = this.chart;\n        var i, ilen, meta;\n\n        for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n          meta = chart.getDatasetMeta(i);\n          meta.data[index].hidden = !meta.data[index].hidden;\n        }\n\n        chart.update();\n      }\n    },\n    // Need to override these to give a nice default\n    tooltips: {\n      callbacks: {\n        title: function title() {\n          return '';\n        },\n        label: function label(item, data) {\n          return data.labels[item.index] + ': ' + item.yLabel;\n        }\n      }\n    }\n  });\n\n  var controller_polarArea = core_datasetController.extend({\n    dataElementType: elements.Arc,\n    linkScales: helpers$1.noop,\n    update: function update(reset) {\n      var me = this;\n      var dataset = me.getDataset();\n      var meta = me.getMeta();\n      var start = me.chart.options.startAngle || 0;\n      var starts = me._starts = [];\n      var angles = me._angles = [];\n      var arcs = meta.data;\n      var i, ilen, angle;\n\n      me._updateRadius();\n\n      meta.count = me.countVisibleElements();\n\n      for (i = 0, ilen = dataset.data.length; i < ilen; i++) {\n        starts[i] = start;\n        angle = me._computeAngle(i);\n        angles[i] = angle;\n        start += angle;\n      }\n\n      for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n        arcs[i]._options = me._resolveElementOptions(arcs[i], i);\n        me.updateElement(arcs[i], i, reset);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _updateRadius: function _updateRadius() {\n      var me = this;\n      var chart = me.chart;\n      var chartArea = chart.chartArea;\n      var opts = chart.options;\n      var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n      chart.outerRadius = Math.max(minSize / 2, 0);\n      chart.innerRadius = Math.max(opts.cutoutPercentage ? chart.outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n      chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();\n      me.outerRadius = chart.outerRadius - chart.radiusLength * me.index;\n      me.innerRadius = me.outerRadius - chart.radiusLength;\n    },\n    updateElement: function updateElement(arc, index, reset) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = me.getDataset();\n      var opts = chart.options;\n      var animationOpts = opts.animation;\n      var scale = chart.scale;\n      var labels = chart.data.labels;\n      var centerX = scale.xCenter;\n      var centerY = scale.yCenter; // var negHalfPI = -0.5 * Math.PI;\n\n      var datasetStartAngle = opts.startAngle;\n      var distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);\n      var startAngle = me._starts[index];\n      var endAngle = startAngle + (arc.hidden ? 0 : me._angles[index]);\n      var resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);\n      var options = arc._options || {};\n      helpers$1.extend(arc, {\n        // Utility\n        _datasetIndex: me.index,\n        _index: index,\n        _scale: scale,\n        // Desired view properties\n        _model: {\n          backgroundColor: options.backgroundColor,\n          borderColor: options.borderColor,\n          borderWidth: options.borderWidth,\n          borderAlign: options.borderAlign,\n          x: centerX,\n          y: centerY,\n          innerRadius: 0,\n          outerRadius: reset ? resetRadius : distance,\n          startAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,\n          endAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,\n          label: helpers$1.valueAtIndexOrDefault(labels, index, labels[index])\n        }\n      });\n      arc.pivot();\n    },\n    countVisibleElements: function countVisibleElements() {\n      var dataset = this.getDataset();\n      var meta = this.getMeta();\n      var count = 0;\n      helpers$1.each(meta.data, function (element, index) {\n        if (!isNaN(dataset.data[index]) && !element.hidden) {\n          count++;\n        }\n      });\n      return count;\n    },\n\n    /**\n     * @protected\n     */\n    setHoverStyle: function setHoverStyle(arc) {\n      var model = arc._model;\n      var options = arc._options;\n      var getHoverColor = helpers$1.getHoverColor;\n      var valueOrDefault = helpers$1.valueOrDefault;\n      arc.$previousStyle = {\n        backgroundColor: model.backgroundColor,\n        borderColor: model.borderColor,\n        borderWidth: model.borderWidth\n      };\n      model.backgroundColor = valueOrDefault(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n      model.borderColor = valueOrDefault(options.hoverBorderColor, getHoverColor(options.borderColor));\n      model.borderWidth = valueOrDefault(options.hoverBorderWidth, options.borderWidth);\n    },\n\n    /**\n     * @private\n     */\n    _resolveElementOptions: function _resolveElementOptions(arc, index) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = me.getDataset();\n      var custom = arc.custom || {};\n      var options = chart.options.elements.arc;\n      var values = {};\n      var i, ilen, key; // Scriptable options\n\n      var context = {\n        chart: chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      var keys = ['backgroundColor', 'borderColor', 'borderWidth', 'borderAlign', 'hoverBackgroundColor', 'hoverBorderColor', 'hoverBorderWidth'];\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$5([custom[key], dataset[key], options[key]], context, index);\n      }\n\n      return values;\n    },\n\n    /**\n     * @private\n     */\n    _computeAngle: function _computeAngle(index) {\n      var me = this;\n      var count = this.getMeta().count;\n      var dataset = me.getDataset();\n      var meta = me.getMeta();\n\n      if (isNaN(dataset.data[index]) || meta.data[index].hidden) {\n        return 0;\n      } // Scriptable options\n\n\n      var context = {\n        chart: me.chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      return resolve$5([me.chart.options.elements.arc.angle, 2 * Math.PI / count], context, index);\n    }\n  });\n\n  core_defaults._set('pie', helpers$1.clone(core_defaults.doughnut));\n\n  core_defaults._set('pie', {\n    cutoutPercentage: 0\n  }); // Pie charts are Doughnut chart with different defaults\n\n\n  var controller_pie = controller_doughnut;\n  var valueOrDefault$6 = helpers$1.valueOrDefault;\n  var resolve$6 = helpers$1.options.resolve;\n\n  core_defaults._set('radar', {\n    scale: {\n      type: 'radialLinear'\n    },\n    elements: {\n      line: {\n        tension: 0 // no bezier in radar\n\n      }\n    }\n  });\n\n  var controller_radar = core_datasetController.extend({\n    datasetElementType: elements.Line,\n    dataElementType: elements.Point,\n    linkScales: helpers$1.noop,\n    update: function update(reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var line = meta.dataset;\n      var points = meta.data || [];\n      var scale = me.chart.scale;\n      var dataset = me.getDataset();\n      var i, ilen; // Compatibility: If the properties are defined with only the old name, use those values\n\n      if (dataset.tension !== undefined && dataset.lineTension === undefined) {\n        dataset.lineTension = dataset.tension;\n      } // Utility\n\n\n      line._scale = scale;\n      line._datasetIndex = me.index; // Data\n\n      line._children = points;\n      line._loop = true; // Model\n\n      line._model = me._resolveLineOptions(line);\n      line.pivot(); // Update Points\n\n      for (i = 0, ilen = points.length; i < ilen; ++i) {\n        me.updateElement(points[i], i, reset);\n      } // Update bezier control points\n\n\n      me.updateBezierControlPoints(); // Now pivot the point for animation\n\n      for (i = 0, ilen = points.length; i < ilen; ++i) {\n        points[i].pivot();\n      }\n    },\n    updateElement: function updateElement(point, index, reset) {\n      var me = this;\n      var custom = point.custom || {};\n      var dataset = me.getDataset();\n      var scale = me.chart.scale;\n      var pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);\n\n      var options = me._resolvePointOptions(point, index);\n\n      var lineModel = me.getMeta().dataset._model;\n\n      var x = reset ? scale.xCenter : pointPosition.x;\n      var y = reset ? scale.yCenter : pointPosition.y; // Utility\n\n      point._scale = scale;\n      point._options = options;\n      point._datasetIndex = me.index;\n      point._index = index; // Desired view properties\n\n      point._model = {\n        x: x,\n        // value not used in dataset scale, but we want a consistent API between scales\n        y: y,\n        skip: custom.skip || isNaN(x) || isNaN(y),\n        // Appearance\n        radius: options.radius,\n        pointStyle: options.pointStyle,\n        rotation: options.rotation,\n        backgroundColor: options.backgroundColor,\n        borderColor: options.borderColor,\n        borderWidth: options.borderWidth,\n        tension: valueOrDefault$6(custom.tension, lineModel ? lineModel.tension : 0),\n        // Tooltip\n        hitRadius: options.hitRadius\n      };\n    },\n\n    /**\n     * @private\n     */\n    _resolvePointOptions: function _resolvePointOptions(element, index) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = chart.data.datasets[me.index];\n      var custom = element.custom || {};\n      var options = chart.options.elements.point;\n      var values = {};\n      var i, ilen, key; // Scriptable options\n\n      var context = {\n        chart: chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      var ELEMENT_OPTIONS = {\n        backgroundColor: 'pointBackgroundColor',\n        borderColor: 'pointBorderColor',\n        borderWidth: 'pointBorderWidth',\n        hitRadius: 'pointHitRadius',\n        hoverBackgroundColor: 'pointHoverBackgroundColor',\n        hoverBorderColor: 'pointHoverBorderColor',\n        hoverBorderWidth: 'pointHoverBorderWidth',\n        hoverRadius: 'pointHoverRadius',\n        pointStyle: 'pointStyle',\n        radius: 'pointRadius',\n        rotation: 'pointRotation'\n      };\n      var keys = Object.keys(ELEMENT_OPTIONS);\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$6([custom[key], dataset[ELEMENT_OPTIONS[key]], dataset[key], options[key]], context, index);\n      }\n\n      return values;\n    },\n\n    /**\n     * @private\n     */\n    _resolveLineOptions: function _resolveLineOptions(element) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = chart.data.datasets[me.index];\n      var custom = element.custom || {};\n      var options = chart.options.elements.line;\n      var values = {};\n      var i, ilen, key;\n      var keys = ['backgroundColor', 'borderWidth', 'borderColor', 'borderCapStyle', 'borderDash', 'borderDashOffset', 'borderJoinStyle', 'fill'];\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$6([custom[key], dataset[key], options[key]]);\n      }\n\n      values.tension = valueOrDefault$6(dataset.lineTension, options.tension);\n      return values;\n    },\n    updateBezierControlPoints: function updateBezierControlPoints() {\n      var me = this;\n      var meta = me.getMeta();\n      var area = me.chart.chartArea;\n      var points = meta.data || [];\n      var i, ilen, model, controlPoints;\n\n      function capControlPoint(pt, min, max) {\n        return Math.max(Math.min(pt, max), min);\n      }\n\n      for (i = 0, ilen = points.length; i < ilen; ++i) {\n        model = points[i]._model;\n        controlPoints = helpers$1.splineCurve(helpers$1.previousItem(points, i, true)._model, model, helpers$1.nextItem(points, i, true)._model, model.tension); // Prevent the bezier going outside of the bounds of the graph\n\n        model.controlPointPreviousX = capControlPoint(controlPoints.previous.x, area.left, area.right);\n        model.controlPointPreviousY = capControlPoint(controlPoints.previous.y, area.top, area.bottom);\n        model.controlPointNextX = capControlPoint(controlPoints.next.x, area.left, area.right);\n        model.controlPointNextY = capControlPoint(controlPoints.next.y, area.top, area.bottom);\n      }\n    },\n    setHoverStyle: function setHoverStyle(point) {\n      var model = point._model;\n      var options = point._options;\n      var getHoverColor = helpers$1.getHoverColor;\n      point.$previousStyle = {\n        backgroundColor: model.backgroundColor,\n        borderColor: model.borderColor,\n        borderWidth: model.borderWidth,\n        radius: model.radius\n      };\n      model.backgroundColor = valueOrDefault$6(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n      model.borderColor = valueOrDefault$6(options.hoverBorderColor, getHoverColor(options.borderColor));\n      model.borderWidth = valueOrDefault$6(options.hoverBorderWidth, options.borderWidth);\n      model.radius = valueOrDefault$6(options.hoverRadius, options.radius);\n    }\n  });\n\n  core_defaults._set('scatter', {\n    hover: {\n      mode: 'single'\n    },\n    scales: {\n      xAxes: [{\n        id: 'x-axis-1',\n        // need an ID so datasets can reference the scale\n        type: 'linear',\n        // scatter should not use a category axis\n        position: 'bottom'\n      }],\n      yAxes: [{\n        id: 'y-axis-1',\n        type: 'linear',\n        position: 'left'\n      }]\n    },\n    showLines: false,\n    tooltips: {\n      callbacks: {\n        title: function title() {\n          return ''; // doesn't make sense for scatter since data are formatted as a point\n        },\n        label: function label(item) {\n          return '(' + item.xLabel + ', ' + item.yLabel + ')';\n        }\n      }\n    }\n  }); // Scatter charts use line controllers\n\n\n  var controller_scatter = controller_line; // NOTE export a map in which the key represents the controller type, not\n  // the class, and so must be CamelCase in order to be correctly retrieved\n  // by the controller in core.controller.js (`controllers[meta.type]`).\n\n  var controllers = {\n    bar: controller_bar,\n    bubble: controller_bubble,\n    doughnut: controller_doughnut,\n    horizontalBar: controller_horizontalBar,\n    line: controller_line,\n    polarArea: controller_polarArea,\n    pie: controller_pie,\n    radar: controller_radar,\n    scatter: controller_scatter\n  };\n  /**\n   * Helper function to get relative position for an event\n   * @param {Event|IEvent} event - The event to get the position for\n   * @param {Chart} chart - The chart\n   * @returns {object} the event position\n   */\n\n  function getRelativePosition(e, chart) {\n    if (e.native) {\n      return {\n        x: e.x,\n        y: e.y\n      };\n    }\n\n    return helpers$1.getRelativePosition(e, chart);\n  }\n  /**\n   * Helper function to traverse all of the visible elements in the chart\n   * @param {Chart} chart - the chart\n   * @param {function} handler - the callback to execute for each visible item\n   */\n\n\n  function parseVisibleItems(chart, handler) {\n    var datasets = chart.data.datasets;\n    var meta, i, j, ilen, jlen;\n\n    for (i = 0, ilen = datasets.length; i < ilen; ++i) {\n      if (!chart.isDatasetVisible(i)) {\n        continue;\n      }\n\n      meta = chart.getDatasetMeta(i);\n\n      for (j = 0, jlen = meta.data.length; j < jlen; ++j) {\n        var element = meta.data[j];\n\n        if (!element._view.skip) {\n          handler(element);\n        }\n      }\n    }\n  }\n  /**\n   * Helper function to get the items that intersect the event position\n   * @param {ChartElement[]} items - elements to filter\n   * @param {object} position - the point to be nearest to\n   * @return {ChartElement[]} the nearest items\n   */\n\n\n  function getIntersectItems(chart, position) {\n    var elements = [];\n    parseVisibleItems(chart, function (element) {\n      if (element.inRange(position.x, position.y)) {\n        elements.push(element);\n      }\n    });\n    return elements;\n  }\n  /**\n   * Helper function to get the items nearest to the event position considering all visible items in teh chart\n   * @param {Chart} chart - the chart to look at elements from\n   * @param {object} position - the point to be nearest to\n   * @param {boolean} intersect - if true, only consider items that intersect the position\n   * @param {function} distanceMetric - function to provide the distance between points\n   * @return {ChartElement[]} the nearest items\n   */\n\n\n  function getNearestItems(chart, position, intersect, distanceMetric) {\n    var minDistance = Number.POSITIVE_INFINITY;\n    var nearestItems = [];\n    parseVisibleItems(chart, function (element) {\n      if (intersect && !element.inRange(position.x, position.y)) {\n        return;\n      }\n\n      var center = element.getCenterPoint();\n      var distance = distanceMetric(position, center);\n\n      if (distance < minDistance) {\n        nearestItems = [element];\n        minDistance = distance;\n      } else if (distance === minDistance) {\n        // Can have multiple items at the same distance in which case we sort by size\n        nearestItems.push(element);\n      }\n    });\n    return nearestItems;\n  }\n  /**\n   * Get a distance metric function for two points based on the\n   * axis mode setting\n   * @param {string} axis - the axis mode. x|y|xy\n   */\n\n\n  function getDistanceMetricForAxis(axis) {\n    var useX = axis.indexOf('x') !== -1;\n    var useY = axis.indexOf('y') !== -1;\n    return function (pt1, pt2) {\n      var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n      var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n      return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n  }\n\n  function indexMode(chart, e, options) {\n    var position = getRelativePosition(e, chart); // Default axis for index mode is 'x' to match old behaviour\n\n    options.axis = options.axis || 'x';\n    var distanceMetric = getDistanceMetricForAxis(options.axis);\n    var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);\n    var elements = [];\n\n    if (!items.length) {\n      return [];\n    }\n\n    chart.data.datasets.forEach(function (dataset, datasetIndex) {\n      if (chart.isDatasetVisible(datasetIndex)) {\n        var meta = chart.getDatasetMeta(datasetIndex);\n        var element = meta.data[items[0]._index]; // don't count items that are skipped (null data)\n\n        if (element && !element._view.skip) {\n          elements.push(element);\n        }\n      }\n    });\n    return elements;\n  }\n  /**\n   * @interface IInteractionOptions\n   */\n\n  /**\n   * If true, only consider items that intersect the point\n   * @name IInterfaceOptions#boolean\n   * @type Boolean\n   */\n\n  /**\n   * Contains interaction related functions\n   * @namespace Chart.Interaction\n   */\n\n\n  var core_interaction = {\n    // Helper function for different modes\n    modes: {\n      single: function single(chart, e) {\n        var position = getRelativePosition(e, chart);\n        var elements = [];\n        parseVisibleItems(chart, function (element) {\n          if (element.inRange(position.x, position.y)) {\n            elements.push(element);\n            return elements;\n          }\n        });\n        return elements.slice(0, 1);\n      },\n\n      /**\n       * @function Chart.Interaction.modes.label\n       * @deprecated since version 2.4.0\n       * @todo remove at version 3\n       * @private\n       */\n      label: indexMode,\n\n      /**\n       * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n       * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n       * @function Chart.Interaction.modes.index\n       * @since v2.4.0\n       * @param {Chart} chart - the chart we are returning items from\n       * @param {Event} e - the event we are find things at\n       * @param {IInteractionOptions} options - options to use during interaction\n       * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n       */\n      index: indexMode,\n\n      /**\n       * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n       * If the options.intersect is false, we find the nearest item and return the items in that dataset\n       * @function Chart.Interaction.modes.dataset\n       * @param {Chart} chart - the chart we are returning items from\n       * @param {Event} e - the event we are find things at\n       * @param {IInteractionOptions} options - options to use during interaction\n       * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n       */\n      dataset: function dataset(chart, e, options) {\n        var position = getRelativePosition(e, chart);\n        options.axis = options.axis || 'xy';\n        var distanceMetric = getDistanceMetricForAxis(options.axis);\n        var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);\n\n        if (items.length > 0) {\n          items = chart.getDatasetMeta(items[0]._datasetIndex).data;\n        }\n\n        return items;\n      },\n\n      /**\n       * @function Chart.Interaction.modes.x-axis\n       * @deprecated since version 2.4.0. Use index mode and intersect == true\n       * @todo remove at version 3\n       * @private\n       */\n      'x-axis': function xAxis(chart, e) {\n        return indexMode(chart, e, {\n          intersect: false\n        });\n      },\n\n      /**\n       * Point mode returns all elements that hit test based on the event position\n       * of the event\n       * @function Chart.Interaction.modes.intersect\n       * @param {Chart} chart - the chart we are returning items from\n       * @param {Event} e - the event we are find things at\n       * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n       */\n      point: function point(chart, e) {\n        var position = getRelativePosition(e, chart);\n        return getIntersectItems(chart, position);\n      },\n\n      /**\n       * nearest mode returns the element closest to the point\n       * @function Chart.Interaction.modes.intersect\n       * @param {Chart} chart - the chart we are returning items from\n       * @param {Event} e - the event we are find things at\n       * @param {IInteractionOptions} options - options to use\n       * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n       */\n      nearest: function nearest(chart, e, options) {\n        var position = getRelativePosition(e, chart);\n        options.axis = options.axis || 'xy';\n        var distanceMetric = getDistanceMetricForAxis(options.axis);\n        return getNearestItems(chart, position, options.intersect, distanceMetric);\n      },\n\n      /**\n       * x mode returns the elements that hit-test at the current x coordinate\n       * @function Chart.Interaction.modes.x\n       * @param {Chart} chart - the chart we are returning items from\n       * @param {Event} e - the event we are find things at\n       * @param {IInteractionOptions} options - options to use\n       * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n       */\n      x: function x(chart, e, options) {\n        var position = getRelativePosition(e, chart);\n        var items = [];\n        var intersectsItem = false;\n        parseVisibleItems(chart, function (element) {\n          if (element.inXRange(position.x)) {\n            items.push(element);\n          }\n\n          if (element.inRange(position.x, position.y)) {\n            intersectsItem = true;\n          }\n        }); // If we want to trigger on an intersect and we don't have any items\n        // that intersect the position, return nothing\n\n        if (options.intersect && !intersectsItem) {\n          items = [];\n        }\n\n        return items;\n      },\n\n      /**\n       * y mode returns the elements that hit-test at the current y coordinate\n       * @function Chart.Interaction.modes.y\n       * @param {Chart} chart - the chart we are returning items from\n       * @param {Event} e - the event we are find things at\n       * @param {IInteractionOptions} options - options to use\n       * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n       */\n      y: function y(chart, e, options) {\n        var position = getRelativePosition(e, chart);\n        var items = [];\n        var intersectsItem = false;\n        parseVisibleItems(chart, function (element) {\n          if (element.inYRange(position.y)) {\n            items.push(element);\n          }\n\n          if (element.inRange(position.x, position.y)) {\n            intersectsItem = true;\n          }\n        }); // If we want to trigger on an intersect and we don't have any items\n        // that intersect the position, return nothing\n\n        if (options.intersect && !intersectsItem) {\n          items = [];\n        }\n\n        return items;\n      }\n    }\n  };\n\n  function filterByPosition(array, position) {\n    return helpers$1.where(array, function (v) {\n      return v.position === position;\n    });\n  }\n\n  function sortByWeight(array, reverse) {\n    array.forEach(function (v, i) {\n      v._tmpIndex_ = i;\n      return v;\n    });\n    array.sort(function (a, b) {\n      var v0 = reverse ? b : a;\n      var v1 = reverse ? a : b;\n      return v0.weight === v1.weight ? v0._tmpIndex_ - v1._tmpIndex_ : v0.weight - v1.weight;\n    });\n    array.forEach(function (v) {\n      delete v._tmpIndex_;\n    });\n  }\n\n  function findMaxPadding(boxes) {\n    var top = 0;\n    var left = 0;\n    var bottom = 0;\n    var right = 0;\n    helpers$1.each(boxes, function (box) {\n      if (box.getPadding) {\n        var boxPadding = box.getPadding();\n        top = Math.max(top, boxPadding.top);\n        left = Math.max(left, boxPadding.left);\n        bottom = Math.max(bottom, boxPadding.bottom);\n        right = Math.max(right, boxPadding.right);\n      }\n    });\n    return {\n      top: top,\n      left: left,\n      bottom: bottom,\n      right: right\n    };\n  }\n\n  function addSizeByPosition(boxes, size) {\n    helpers$1.each(boxes, function (box) {\n      size[box.position] += box.isHorizontal() ? box.height : box.width;\n    });\n  }\n\n  core_defaults._set('global', {\n    layout: {\n      padding: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      }\n    }\n  });\n  /**\n   * @interface ILayoutItem\n   * @prop {string} position - The position of the item in the chart layout. Possible values are\n   * 'left', 'top', 'right', 'bottom', and 'chartArea'\n   * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n   * @prop {boolean} fullWidth - if true, and the item is horizontal, then push vertical boxes down\n   * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n   * @prop {function} update - Takes two parameters: width and height. Returns size of item\n   * @prop {function} getPadding -  Returns an object with padding on the edges\n   * @prop {number} width - Width of item. Must be valid after update()\n   * @prop {number} height - Height of item. Must be valid after update()\n   * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n   * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n   * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n   * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n   */\n  // The layout service is very self explanatory.  It's responsible for the layout within a chart.\n  // Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n  // It is this service's responsibility of carrying out that layout.\n\n\n  var core_layouts = {\n    defaults: {},\n\n    /**\n     * Register a box to a chart.\n     * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n     * @param {Chart} chart - the chart to use\n     * @param {ILayoutItem} item - the item to add to be layed out\n     */\n    addBox: function addBox(chart, item) {\n      if (!chart.boxes) {\n        chart.boxes = [];\n      } // initialize item with default values\n\n\n      item.fullWidth = item.fullWidth || false;\n      item.position = item.position || 'top';\n      item.weight = item.weight || 0;\n      chart.boxes.push(item);\n    },\n\n    /**\n     * Remove a layoutItem from a chart\n     * @param {Chart} chart - the chart to remove the box from\n     * @param {ILayoutItem} layoutItem - the item to remove from the layout\n     */\n    removeBox: function removeBox(chart, layoutItem) {\n      var index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n\n      if (index !== -1) {\n        chart.boxes.splice(index, 1);\n      }\n    },\n\n    /**\n     * Sets (or updates) options on the given `item`.\n     * @param {Chart} chart - the chart in which the item lives (or will be added to)\n     * @param {ILayoutItem} item - the item to configure with the given options\n     * @param {object} options - the new item options.\n     */\n    configure: function configure(chart, item, options) {\n      var props = ['fullWidth', 'position', 'weight'];\n      var ilen = props.length;\n      var i = 0;\n      var prop;\n\n      for (; i < ilen; ++i) {\n        prop = props[i];\n\n        if (options.hasOwnProperty(prop)) {\n          item[prop] = options[prop];\n        }\n      }\n    },\n\n    /**\n     * Fits boxes of the given chart into the given size by having each box measure itself\n     * then running a fitting algorithm\n     * @param {Chart} chart - the chart\n     * @param {number} width - the width to fit into\n     * @param {number} height - the height to fit into\n     */\n    update: function update(chart, width, height) {\n      if (!chart) {\n        return;\n      }\n\n      var layoutOptions = chart.options.layout || {};\n      var padding = helpers$1.options.toPadding(layoutOptions.padding);\n      var leftPadding = padding.left;\n      var rightPadding = padding.right;\n      var topPadding = padding.top;\n      var bottomPadding = padding.bottom;\n      var leftBoxes = filterByPosition(chart.boxes, 'left');\n      var rightBoxes = filterByPosition(chart.boxes, 'right');\n      var topBoxes = filterByPosition(chart.boxes, 'top');\n      var bottomBoxes = filterByPosition(chart.boxes, 'bottom');\n      var chartAreaBoxes = filterByPosition(chart.boxes, 'chartArea'); // Sort boxes by weight. A higher weight is further away from the chart area\n\n      sortByWeight(leftBoxes, true);\n      sortByWeight(rightBoxes, false);\n      sortByWeight(topBoxes, true);\n      sortByWeight(bottomBoxes, false);\n      var verticalBoxes = leftBoxes.concat(rightBoxes);\n      var horizontalBoxes = topBoxes.concat(bottomBoxes);\n      var outerBoxes = verticalBoxes.concat(horizontalBoxes); // Essentially we now have any number of boxes on each of the 4 sides.\n      // Our canvas looks like the following.\n      // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n      // B1 is the bottom axis\n      // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n      // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n      // an error will be thrown.\n      //\n      // |----------------------------------------------------|\n      // |                  T1 (Full Width)                   |\n      // |----------------------------------------------------|\n      // |    |    |                 T2                  |    |\n      // |    |----|-------------------------------------|----|\n      // |    |    | C1 |                           | C2 |    |\n      // |    |    |----|                           |----|    |\n      // |    |    |                                     |    |\n      // | L1 | L2 |           ChartArea (C0)            | R1 |\n      // |    |    |                                     |    |\n      // |    |    |----|                           |----|    |\n      // |    |    | C3 |                           | C4 |    |\n      // |    |----|-------------------------------------|----|\n      // |    |    |                 B1                  |    |\n      // |----------------------------------------------------|\n      // |                  B2 (Full Width)                   |\n      // |----------------------------------------------------|\n      //\n      // What we do to find the best sizing, we do the following\n      // 1. Determine the minimum size of the chart area.\n      // 2. Split the remaining width equally between each vertical axis\n      // 3. Split the remaining height equally between each horizontal axis\n      // 4. Give each layout the maximum size it can be. The layout will return it's minimum size\n      // 5. Adjust the sizes of each axis based on it's minimum reported size.\n      // 6. Refit each axis\n      // 7. Position each axis in the final location\n      // 8. Tell the chart the final location of the chart area\n      // 9. Tell any axes that overlay the chart area the positions of the chart area\n      // Step 1\n\n      var chartWidth = width - leftPadding - rightPadding;\n      var chartHeight = height - topPadding - bottomPadding;\n      var chartAreaWidth = chartWidth / 2; // min 50%\n      // Step 2\n\n      var verticalBoxWidth = (width - chartAreaWidth) / verticalBoxes.length; // Step 3\n      // TODO re-limit horizontal axis height (this limit has affected only padding calculation since PR 1837)\n      // var horizontalBoxHeight = (height - chartAreaHeight) / horizontalBoxes.length;\n      // Step 4\n\n      var maxChartAreaWidth = chartWidth;\n      var maxChartAreaHeight = chartHeight;\n      var outerBoxSizes = {\n        top: topPadding,\n        left: leftPadding,\n        bottom: bottomPadding,\n        right: rightPadding\n      };\n      var minBoxSizes = [];\n      var maxPadding;\n\n      function getMinimumBoxSize(box) {\n        var minSize;\n        var isHorizontal = box.isHorizontal();\n\n        if (isHorizontal) {\n          minSize = box.update(box.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2);\n          maxChartAreaHeight -= minSize.height;\n        } else {\n          minSize = box.update(verticalBoxWidth, maxChartAreaHeight);\n          maxChartAreaWidth -= minSize.width;\n        }\n\n        minBoxSizes.push({\n          horizontal: isHorizontal,\n          width: minSize.width,\n          box: box\n        });\n      }\n\n      helpers$1.each(outerBoxes, getMinimumBoxSize); // If a horizontal box has padding, we move the left boxes over to avoid ugly charts (see issue #2478)\n\n      maxPadding = findMaxPadding(outerBoxes); // At this point, maxChartAreaHeight and maxChartAreaWidth are the size the chart area could\n      // be if the axes are drawn at their minimum sizes.\n      // Steps 5 & 6\n      // Function to fit a box\n\n      function fitBox(box) {\n        var minBoxSize = helpers$1.findNextWhere(minBoxSizes, function (minBox) {\n          return minBox.box === box;\n        });\n\n        if (minBoxSize) {\n          if (minBoxSize.horizontal) {\n            var scaleMargin = {\n              left: Math.max(outerBoxSizes.left, maxPadding.left),\n              right: Math.max(outerBoxSizes.right, maxPadding.right),\n              top: 0,\n              bottom: 0\n            }; // Don't use min size here because of label rotation. When the labels are rotated, their rotation highly depends\n            // on the margin. Sometimes they need to increase in size slightly\n\n            box.update(box.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2, scaleMargin);\n          } else {\n            box.update(minBoxSize.width, maxChartAreaHeight);\n          }\n        }\n      } // Update, and calculate the left and right margins for the horizontal boxes\n\n\n      helpers$1.each(verticalBoxes, fitBox);\n      addSizeByPosition(verticalBoxes, outerBoxSizes); // Set the Left and Right margins for the horizontal boxes\n\n      helpers$1.each(horizontalBoxes, fitBox);\n      addSizeByPosition(horizontalBoxes, outerBoxSizes);\n\n      function finalFitVerticalBox(box) {\n        var minBoxSize = helpers$1.findNextWhere(minBoxSizes, function (minSize) {\n          return minSize.box === box;\n        });\n        var scaleMargin = {\n          left: 0,\n          right: 0,\n          top: outerBoxSizes.top,\n          bottom: outerBoxSizes.bottom\n        };\n\n        if (minBoxSize) {\n          box.update(minBoxSize.width, maxChartAreaHeight, scaleMargin);\n        }\n      } // Let the left layout know the final margin\n\n\n      helpers$1.each(verticalBoxes, finalFitVerticalBox); // Recalculate because the size of each layout might have changed slightly due to the margins (label rotation for instance)\n\n      outerBoxSizes = {\n        top: topPadding,\n        left: leftPadding,\n        bottom: bottomPadding,\n        right: rightPadding\n      };\n      addSizeByPosition(outerBoxes, outerBoxSizes); // We may be adding some padding to account for rotated x axis labels\n\n      var leftPaddingAddition = Math.max(maxPadding.left - outerBoxSizes.left, 0);\n      outerBoxSizes.left += leftPaddingAddition;\n      outerBoxSizes.right += Math.max(maxPadding.right - outerBoxSizes.right, 0);\n      var topPaddingAddition = Math.max(maxPadding.top - outerBoxSizes.top, 0);\n      outerBoxSizes.top += topPaddingAddition;\n      outerBoxSizes.bottom += Math.max(maxPadding.bottom - outerBoxSizes.bottom, 0); // Figure out if our chart area changed. This would occur if the dataset layout label rotation\n      // changed due to the application of the margins in step 6. Since we can only get bigger, this is safe to do\n      // without calling `fit` again\n\n      var newMaxChartAreaHeight = height - outerBoxSizes.top - outerBoxSizes.bottom;\n      var newMaxChartAreaWidth = width - outerBoxSizes.left - outerBoxSizes.right;\n\n      if (newMaxChartAreaWidth !== maxChartAreaWidth || newMaxChartAreaHeight !== maxChartAreaHeight) {\n        helpers$1.each(verticalBoxes, function (box) {\n          box.height = newMaxChartAreaHeight;\n        });\n        helpers$1.each(horizontalBoxes, function (box) {\n          if (!box.fullWidth) {\n            box.width = newMaxChartAreaWidth;\n          }\n        });\n        maxChartAreaHeight = newMaxChartAreaHeight;\n        maxChartAreaWidth = newMaxChartAreaWidth;\n      } // Step 7 - Position the boxes\n\n\n      var left = leftPadding + leftPaddingAddition;\n      var top = topPadding + topPaddingAddition;\n\n      function placeBox(box) {\n        if (box.isHorizontal()) {\n          box.left = box.fullWidth ? leftPadding : outerBoxSizes.left;\n          box.right = box.fullWidth ? width - rightPadding : outerBoxSizes.left + maxChartAreaWidth;\n          box.top = top;\n          box.bottom = top + box.height; // Move to next point\n\n          top = box.bottom;\n        } else {\n          box.left = left;\n          box.right = left + box.width;\n          box.top = outerBoxSizes.top;\n          box.bottom = outerBoxSizes.top + maxChartAreaHeight; // Move to next point\n\n          left = box.right;\n        }\n      }\n\n      helpers$1.each(leftBoxes.concat(topBoxes), placeBox); // Account for chart width and height\n\n      left += maxChartAreaWidth;\n      top += maxChartAreaHeight;\n      helpers$1.each(rightBoxes, placeBox);\n      helpers$1.each(bottomBoxes, placeBox); // Step 8\n\n      chart.chartArea = {\n        left: outerBoxSizes.left,\n        top: outerBoxSizes.top,\n        right: outerBoxSizes.left + maxChartAreaWidth,\n        bottom: outerBoxSizes.top + maxChartAreaHeight\n      }; // Step 9\n\n      helpers$1.each(chartAreaBoxes, function (box) {\n        box.left = chart.chartArea.left;\n        box.top = chart.chartArea.top;\n        box.right = chart.chartArea.right;\n        box.bottom = chart.chartArea.bottom;\n        box.update(maxChartAreaWidth, maxChartAreaHeight);\n      });\n    }\n  };\n  /**\n   * Platform fallback implementation (minimal).\n   * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n   */\n\n  var platform_basic = {\n    acquireContext: function acquireContext(item) {\n      if (item && item.canvas) {\n        // Support for any object associated to a canvas (including a context2d)\n        item = item.canvas;\n      }\n\n      return item && item.getContext('2d') || null;\n    }\n  };\n  var platform_dom = \"/*\\n * DOM element rendering detection\\n * https://davidwalsh.name/detect-node-insertion\\n */\\n@keyframes chartjs-render-animation {\\n\\tfrom { opacity: 0.99; }\\n\\tto { opacity: 1; }\\n}\\n\\n.chartjs-render-monitor {\\n\\tanimation: chartjs-render-animation 0.001s;\\n}\\n\\n/*\\n * DOM element resizing detection\\n * https://github.com/marcj/css-element-queries\\n */\\n.chartjs-size-monitor,\\n.chartjs-size-monitor-expand,\\n.chartjs-size-monitor-shrink {\\n\\tposition: absolute;\\n\\tdirection: ltr;\\n\\tleft: 0;\\n\\ttop: 0;\\n\\tright: 0;\\n\\tbottom: 0;\\n\\toverflow: hidden;\\n\\tpointer-events: none;\\n\\tvisibility: hidden;\\n\\tz-index: -1;\\n}\\n\\n.chartjs-size-monitor-expand > div {\\n\\tposition: absolute;\\n\\twidth: 1000000px;\\n\\theight: 1000000px;\\n\\tleft: 0;\\n\\ttop: 0;\\n}\\n\\n.chartjs-size-monitor-shrink > div {\\n\\tposition: absolute;\\n\\twidth: 200%;\\n\\theight: 200%;\\n\\tleft: 0;\\n\\ttop: 0;\\n}\\n\";\n  var platform_dom$1 =\n  /*#__PURE__*/\n  Object.freeze({\n    default: platform_dom\n  });\n\n  function getCjsExportFromNamespace(n) {\n    return n && n.default || n;\n  }\n\n  var stylesheet = getCjsExportFromNamespace(platform_dom$1);\n  var EXPANDO_KEY = '$chartjs';\n  var CSS_PREFIX = 'chartjs-';\n  var CSS_SIZE_MONITOR = CSS_PREFIX + 'size-monitor';\n  var CSS_RENDER_MONITOR = CSS_PREFIX + 'render-monitor';\n  var CSS_RENDER_ANIMATION = CSS_PREFIX + 'render-animation';\n  var ANIMATION_START_EVENTS = ['animationstart', 'webkitAnimationStart'];\n  /**\n   * DOM event types -> Chart.js event types.\n   * Note: only events with different types are mapped.\n   * @see https://developer.mozilla.org/en-US/docs/Web/Events\n   */\n\n  var EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n  };\n  /**\n   * The \"used\" size is the final value of a dimension property after all calculations have\n   * been performed. This method uses the computed style of `element` but returns undefined\n   * if the computed style is not expressed in pixels. That can happen in some cases where\n   * `element` has a size relative to its parent and this last one is not yet displayed,\n   * for example because of `display: none` on a parent node.\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n   * @returns {number} Size in pixels or undefined if unknown.\n   */\n\n  function readUsedSize(element, property) {\n    var value = helpers$1.getStyle(element, property);\n    var matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n    return matches ? Number(matches[1]) : undefined;\n  }\n  /**\n   * Initializes the canvas style and render size without modifying the canvas display size,\n   * since responsiveness is handled by the controller.resize() method. The config is used\n   * to determine the aspect ratio to apply in case no explicit height has been specified.\n   */\n\n\n  function initCanvas(canvas, config) {\n    var style = canvas.style; // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n    // returns null or '' if no explicit value has been set to the canvas attribute.\n\n    var renderHeight = canvas.getAttribute('height');\n    var renderWidth = canvas.getAttribute('width'); // Chart.js modifies some canvas values that we want to restore on destroy\n\n    canvas[EXPANDO_KEY] = {\n      initial: {\n        height: renderHeight,\n        width: renderWidth,\n        style: {\n          display: style.display,\n          height: style.height,\n          width: style.width\n        }\n      }\n    }; // Force canvas to display as block to avoid extra space caused by inline\n    // elements, which would interfere with the responsive resize process.\n    // https://github.com/chartjs/Chart.js/issues/2538\n\n    style.display = style.display || 'block';\n\n    if (renderWidth === null || renderWidth === '') {\n      var displayWidth = readUsedSize(canvas, 'width');\n\n      if (displayWidth !== undefined) {\n        canvas.width = displayWidth;\n      }\n    }\n\n    if (renderHeight === null || renderHeight === '') {\n      if (canvas.style.height === '') {\n        // If no explicit render height and style height, let's apply the aspect ratio,\n        // which one can be specified by the user but also by charts as default option\n        // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n        canvas.height = canvas.width / (config.options.aspectRatio || 2);\n      } else {\n        var displayHeight = readUsedSize(canvas, 'height');\n\n        if (displayWidth !== undefined) {\n          canvas.height = displayHeight;\n        }\n      }\n    }\n\n    return canvas;\n  }\n  /**\n   * Detects support for options object argument in addEventListener.\n   * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n   * @private\n   */\n\n\n  var supportsEventListenerOptions = function () {\n    var supports = false;\n\n    try {\n      var options = Object.defineProperty({}, 'passive', {\n        // eslint-disable-next-line getter-return\n        get: function get() {\n          supports = true;\n        }\n      });\n      window.addEventListener('e', null, options);\n    } catch (e) {// continue regardless of error\n    }\n\n    return supports;\n  }(); // Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n  // https://github.com/chartjs/Chart.js/issues/4287\n\n\n  var eventListenerOptions = supportsEventListenerOptions ? {\n    passive: true\n  } : false;\n\n  function addListener(node, type, listener) {\n    node.addEventListener(type, listener, eventListenerOptions);\n  }\n\n  function removeListener(node, type, listener) {\n    node.removeEventListener(type, listener, eventListenerOptions);\n  }\n\n  function createEvent(type, chart, x, y, nativeEvent) {\n    return {\n      type: type,\n      chart: chart,\n      native: nativeEvent || null,\n      x: x !== undefined ? x : null,\n      y: y !== undefined ? y : null\n    };\n  }\n\n  function fromNativeEvent(event, chart) {\n    var type = EVENT_TYPES[event.type] || event.type;\n    var pos = helpers$1.getRelativePosition(event, chart);\n    return createEvent(type, chart, pos.x, pos.y, event);\n  }\n\n  function throttled(fn, thisArg) {\n    var ticking = false;\n    var args = [];\n    return function () {\n      args = Array.prototype.slice.call(arguments);\n      thisArg = thisArg || this;\n\n      if (!ticking) {\n        ticking = true;\n        helpers$1.requestAnimFrame.call(window, function () {\n          ticking = false;\n          fn.apply(thisArg, args);\n        });\n      }\n    };\n  }\n\n  function createDiv(cls) {\n    var el = document.createElement('div');\n    el.className = cls || '';\n    return el;\n  } // Implementation based on https://github.com/marcj/css-element-queries\n\n\n  function createResizer(handler) {\n    var maxSize = 1000000; // NOTE(SB) Don't use innerHTML because it could be considered unsafe.\n    // https://github.com/chartjs/Chart.js/issues/5902\n\n    var resizer = createDiv(CSS_SIZE_MONITOR);\n    var expand = createDiv(CSS_SIZE_MONITOR + '-expand');\n    var shrink = createDiv(CSS_SIZE_MONITOR + '-shrink');\n    expand.appendChild(createDiv());\n    shrink.appendChild(createDiv());\n    resizer.appendChild(expand);\n    resizer.appendChild(shrink);\n\n    resizer._reset = function () {\n      expand.scrollLeft = maxSize;\n      expand.scrollTop = maxSize;\n      shrink.scrollLeft = maxSize;\n      shrink.scrollTop = maxSize;\n    };\n\n    var onScroll = function onScroll() {\n      resizer._reset();\n\n      handler();\n    };\n\n    addListener(expand, 'scroll', onScroll.bind(expand, 'expand'));\n    addListener(shrink, 'scroll', onScroll.bind(shrink, 'shrink'));\n    return resizer;\n  } // https://davidwalsh.name/detect-node-insertion\n\n\n  function watchForRender(node, handler) {\n    var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});\n\n    var proxy = expando.renderProxy = function (e) {\n      if (e.animationName === CSS_RENDER_ANIMATION) {\n        handler();\n      }\n    };\n\n    helpers$1.each(ANIMATION_START_EVENTS, function (type) {\n      addListener(node, type, proxy);\n    }); // #4737: Chrome might skip the CSS animation when the CSS_RENDER_MONITOR class\n    // is removed then added back immediately (same animation frame?). Accessing the\n    // `offsetParent` property will force a reflow and re-evaluate the CSS animation.\n    // https://gist.github.com/paulirish/5d52fb081b3570c81e3a#box-metrics\n    // https://github.com/chartjs/Chart.js/issues/4737\n\n    expando.reflow = !!node.offsetParent;\n    node.classList.add(CSS_RENDER_MONITOR);\n  }\n\n  function unwatchForRender(node) {\n    var expando = node[EXPANDO_KEY] || {};\n    var proxy = expando.renderProxy;\n\n    if (proxy) {\n      helpers$1.each(ANIMATION_START_EVENTS, function (type) {\n        removeListener(node, type, proxy);\n      });\n      delete expando.renderProxy;\n    }\n\n    node.classList.remove(CSS_RENDER_MONITOR);\n  }\n\n  function addResizeListener(node, listener, chart) {\n    var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {}); // Let's keep track of this added resizer and thus avoid DOM query when removing it.\n\n    var resizer = expando.resizer = createResizer(throttled(function () {\n      if (expando.resizer) {\n        var container = chart.options.maintainAspectRatio && node.parentNode;\n        var w = container ? container.clientWidth : 0;\n        listener(createEvent('resize', chart));\n\n        if (container && container.clientWidth < w && chart.canvas) {\n          // If the container size shrank during chart resize, let's assume\n          // scrollbar appeared. So we resize again with the scrollbar visible -\n          // effectively making chart smaller and the scrollbar hidden again.\n          // Because we are inside `throttled`, and currently `ticking`, scroll\n          // events are ignored during this whole 2 resize process.\n          // If we assumed wrong and something else happened, we are resizing\n          // twice in a frame (potential performance issue)\n          listener(createEvent('resize', chart));\n        }\n      }\n    })); // The resizer needs to be attached to the node parent, so we first need to be\n    // sure that `node` is attached to the DOM before injecting the resizer element.\n\n    watchForRender(node, function () {\n      if (expando.resizer) {\n        var container = node.parentNode;\n\n        if (container && container !== resizer.parentNode) {\n          container.insertBefore(resizer, container.firstChild);\n        } // The container size might have changed, let's reset the resizer state.\n\n\n        resizer._reset();\n      }\n    });\n  }\n\n  function removeResizeListener(node) {\n    var expando = node[EXPANDO_KEY] || {};\n    var resizer = expando.resizer;\n    delete expando.resizer;\n    unwatchForRender(node);\n\n    if (resizer && resizer.parentNode) {\n      resizer.parentNode.removeChild(resizer);\n    }\n  }\n\n  function injectCSS(platform, css) {\n    // https://stackoverflow.com/q/3922139\n    var style = platform._style || document.createElement('style');\n\n    if (!platform._style) {\n      platform._style = style;\n      css = '/* Chart.js */\\n' + css;\n      style.setAttribute('type', 'text/css');\n      document.getElementsByTagName('head')[0].appendChild(style);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n\n  var platform_dom$2 = {\n    /**\n     * When `true`, prevents the automatic injection of the stylesheet required to\n     * correctly detect when the chart is added to the DOM and then resized. This\n     * switch has been added to allow external stylesheet (`dist/Chart(.min)?.js`)\n     * to be manually imported to make this library compatible with any CSP.\n     * See https://github.com/chartjs/Chart.js/issues/5208\n     */\n    disableCSSInjection: false,\n\n    /**\n     * This property holds whether this platform is enabled for the current environment.\n     * Currently used by platform.js to select the proper implementation.\n     * @private\n     */\n    _enabled: typeof window !== 'undefined' && typeof document !== 'undefined',\n\n    /**\n     * @private\n     */\n    _ensureLoaded: function _ensureLoaded() {\n      if (this._loaded) {\n        return;\n      }\n\n      this._loaded = true; // https://github.com/chartjs/Chart.js/issues/5208\n\n      if (!this.disableCSSInjection) {\n        injectCSS(this, stylesheet);\n      }\n    },\n    acquireContext: function acquireContext(item, config) {\n      if (typeof item === 'string') {\n        item = document.getElementById(item);\n      } else if (item.length) {\n        // Support for array based queries (such as jQuery)\n        item = item[0];\n      }\n\n      if (item && item.canvas) {\n        // Support for any object associated to a canvas (including a context2d)\n        item = item.canvas;\n      } // To prevent canvas fingerprinting, some add-ons undefine the getContext\n      // method, for example: https://github.com/kkapsner/CanvasBlocker\n      // https://github.com/chartjs/Chart.js/issues/2807\n\n\n      var context = item && item.getContext && item.getContext('2d'); // Load platform resources on first chart creation, to make possible to change\n      // platform options after importing the library (e.g. `disableCSSInjection`).\n\n      this._ensureLoaded(); // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the item is\n      // inside an iframe or when running in a protected environment. We could guess the\n      // types from their toString() value but let's keep things flexible and assume it's\n      // a sufficient condition if the item has a context2D which has item as `canvas`.\n      // https://github.com/chartjs/Chart.js/issues/3887\n      // https://github.com/chartjs/Chart.js/issues/4102\n      // https://github.com/chartjs/Chart.js/issues/4152\n\n\n      if (context && context.canvas === item) {\n        initCanvas(item, config);\n        return context;\n      }\n\n      return null;\n    },\n    releaseContext: function releaseContext(context) {\n      var canvas = context.canvas;\n\n      if (!canvas[EXPANDO_KEY]) {\n        return;\n      }\n\n      var initial = canvas[EXPANDO_KEY].initial;\n      ['height', 'width'].forEach(function (prop) {\n        var value = initial[prop];\n\n        if (helpers$1.isNullOrUndef(value)) {\n          canvas.removeAttribute(prop);\n        } else {\n          canvas.setAttribute(prop, value);\n        }\n      });\n      helpers$1.each(initial.style || {}, function (value, key) {\n        canvas.style[key] = value;\n      }); // The canvas render size might have been changed (and thus the state stack discarded),\n      // we can't use save() and restore() to restore the initial state. So make sure that at\n      // least the canvas context is reset to the default state by setting the canvas width.\n      // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n      // eslint-disable-next-line no-self-assign\n\n      canvas.width = canvas.width;\n      delete canvas[EXPANDO_KEY];\n    },\n    addEventListener: function addEventListener(chart, type, listener) {\n      var canvas = chart.canvas;\n\n      if (type === 'resize') {\n        // Note: the resize event is not supported on all browsers.\n        addResizeListener(canvas, listener, chart);\n        return;\n      }\n\n      var expando = listener[EXPANDO_KEY] || (listener[EXPANDO_KEY] = {});\n      var proxies = expando.proxies || (expando.proxies = {});\n\n      var proxy = proxies[chart.id + '_' + type] = function (event) {\n        listener(fromNativeEvent(event, chart));\n      };\n\n      addListener(canvas, type, proxy);\n    },\n    removeEventListener: function removeEventListener(chart, type, listener) {\n      var canvas = chart.canvas;\n\n      if (type === 'resize') {\n        // Note: the resize event is not supported on all browsers.\n        removeResizeListener(canvas);\n        return;\n      }\n\n      var expando = listener[EXPANDO_KEY] || {};\n      var proxies = expando.proxies || {};\n      var proxy = proxies[chart.id + '_' + type];\n\n      if (!proxy) {\n        return;\n      }\n\n      removeListener(canvas, type, proxy);\n    }\n  }; // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, use EventTarget.addEventListener instead.\n   * EventTarget.addEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n   * @function Chart.helpers.addEvent\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers$1.addEvent = addListener;\n  /**\n   * Provided for backward compatibility, use EventTarget.removeEventListener instead.\n   * EventTarget.removeEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener\n   * @function Chart.helpers.removeEvent\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers$1.removeEvent = removeListener; // @TODO Make possible to select another platform at build time.\n\n  var implementation = platform_dom$2._enabled ? platform_dom$2 : platform_basic;\n  /**\n   * @namespace Chart.platform\n   * @see https://chartjs.gitbooks.io/proposals/content/Platform.html\n   * @since 2.4.0\n   */\n\n  var platform = helpers$1.extend({\n    /**\n     * @since 2.7.0\n     */\n    initialize: function initialize() {},\n\n    /**\n     * Called at chart construction time, returns a context2d instance implementing\n     * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n     * @param {*} item - The native item from which to acquire context (platform specific)\n     * @param {object} options - The chart options\n     * @returns {CanvasRenderingContext2D} context2d instance\n     */\n    acquireContext: function acquireContext() {},\n\n    /**\n     * Called at chart destruction time, releases any resources associated to the context\n     * previously returned by the acquireContext() method.\n     * @param {CanvasRenderingContext2D} context - The context2d instance\n     * @returns {boolean} true if the method succeeded, else false\n     */\n    releaseContext: function releaseContext() {},\n\n    /**\n     * Registers the specified listener on the given chart.\n     * @param {Chart} chart - Chart from which to listen for event\n     * @param {string} type - The ({@link IEvent}) type to listen for\n     * @param {function} listener - Receives a notification (an object that implements\n     * the {@link IEvent} interface) when an event of the specified type occurs.\n     */\n    addEventListener: function addEventListener() {},\n\n    /**\n     * Removes the specified listener previously registered with addEventListener.\n     * @param {Chart} chart - Chart from which to remove the listener\n     * @param {string} type - The ({@link IEvent}) type to remove\n     * @param {function} listener - The listener function to remove from the event target.\n     */\n    removeEventListener: function removeEventListener() {}\n  }, implementation);\n\n  core_defaults._set('global', {\n    plugins: {}\n  });\n  /**\n   * The plugin service singleton\n   * @namespace Chart.plugins\n   * @since 2.1.0\n   */\n\n\n  var core_plugins = {\n    /**\n     * Globally registered plugins.\n     * @private\n     */\n    _plugins: [],\n\n    /**\n     * This identifier is used to invalidate the descriptors cache attached to each chart\n     * when a global plugin is registered or unregistered. In this case, the cache ID is\n     * incremented and descriptors are regenerated during following API calls.\n     * @private\n     */\n    _cacheId: 0,\n\n    /**\n     * Registers the given plugin(s) if not already registered.\n     * @param {IPlugin[]|IPlugin} plugins plugin instance(s).\n     */\n    register: function register(plugins) {\n      var p = this._plugins;\n      [].concat(plugins).forEach(function (plugin) {\n        if (p.indexOf(plugin) === -1) {\n          p.push(plugin);\n        }\n      });\n      this._cacheId++;\n    },\n\n    /**\n     * Unregisters the given plugin(s) only if registered.\n     * @param {IPlugin[]|IPlugin} plugins plugin instance(s).\n     */\n    unregister: function unregister(plugins) {\n      var p = this._plugins;\n      [].concat(plugins).forEach(function (plugin) {\n        var idx = p.indexOf(plugin);\n\n        if (idx !== -1) {\n          p.splice(idx, 1);\n        }\n      });\n      this._cacheId++;\n    },\n\n    /**\n     * Remove all registered plugins.\n     * @since 2.1.5\n     */\n    clear: function clear() {\n      this._plugins = [];\n      this._cacheId++;\n    },\n\n    /**\n     * Returns the number of registered plugins?\n     * @returns {number}\n     * @since 2.1.5\n     */\n    count: function count() {\n      return this._plugins.length;\n    },\n\n    /**\n     * Returns all registered plugin instances.\n     * @returns {IPlugin[]} array of plugin objects.\n     * @since 2.1.5\n     */\n    getAll: function getAll() {\n      return this._plugins;\n    },\n\n    /**\n     * Calls enabled plugins for `chart` on the specified hook and with the given args.\n     * This method immediately returns as soon as a plugin explicitly returns false. The\n     * returned value can be used, for instance, to interrupt the current action.\n     * @param {Chart} chart - The chart instance for which plugins should be called.\n     * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n     * @param {Array} [args] - Extra arguments to apply to the hook call.\n     * @returns {boolean} false if any of the plugins return false, else returns true.\n     */\n    notify: function notify(chart, hook, args) {\n      var descriptors = this.descriptors(chart);\n      var ilen = descriptors.length;\n      var i, descriptor, plugin, params, method;\n\n      for (i = 0; i < ilen; ++i) {\n        descriptor = descriptors[i];\n        plugin = descriptor.plugin;\n        method = plugin[hook];\n\n        if (typeof method === 'function') {\n          params = [chart].concat(args || []);\n          params.push(descriptor.options);\n\n          if (method.apply(plugin, params) === false) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    },\n\n    /**\n     * Returns descriptors of enabled plugins for the given chart.\n     * @returns {object[]} [{ plugin, options }]\n     * @private\n     */\n    descriptors: function descriptors(chart) {\n      var cache = chart.$plugins || (chart.$plugins = {});\n\n      if (cache.id === this._cacheId) {\n        return cache.descriptors;\n      }\n\n      var plugins = [];\n      var descriptors = [];\n      var config = chart && chart.config || {};\n      var options = config.options && config.options.plugins || {};\n\n      this._plugins.concat(config.plugins || []).forEach(function (plugin) {\n        var idx = plugins.indexOf(plugin);\n\n        if (idx !== -1) {\n          return;\n        }\n\n        var id = plugin.id;\n        var opts = options[id];\n\n        if (opts === false) {\n          return;\n        }\n\n        if (opts === true) {\n          opts = helpers$1.clone(core_defaults.global.plugins[id]);\n        }\n\n        plugins.push(plugin);\n        descriptors.push({\n          plugin: plugin,\n          options: opts || {}\n        });\n      });\n\n      cache.descriptors = descriptors;\n      cache.id = this._cacheId;\n      return descriptors;\n    },\n\n    /**\n     * Invalidates cache for the given chart: descriptors hold a reference on plugin option,\n     * but in some cases, this reference can be changed by the user when updating options.\n     * https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n     * @private\n     */\n    _invalidate: function _invalidate(chart) {\n      delete chart.$plugins;\n    }\n  };\n  var core_scaleService = {\n    // Scale registration object. Extensions can register new scale types (such as log or DB scales) and then\n    // use the new chart options to grab the correct scale\n    constructors: {},\n    // Use a registration function so that we can move to an ES6 map when we no longer need to support\n    // old browsers\n    // Scale config defaults\n    defaults: {},\n    registerScaleType: function registerScaleType(type, scaleConstructor, scaleDefaults) {\n      this.constructors[type] = scaleConstructor;\n      this.defaults[type] = helpers$1.clone(scaleDefaults);\n    },\n    getScaleConstructor: function getScaleConstructor(type) {\n      return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;\n    },\n    getScaleDefaults: function getScaleDefaults(type) {\n      // Return the scale defaults merged with the global settings so that we always use the latest ones\n      return this.defaults.hasOwnProperty(type) ? helpers$1.merge({}, [core_defaults.scale, this.defaults[type]]) : {};\n    },\n    updateScaleDefaults: function updateScaleDefaults(type, additions) {\n      var me = this;\n\n      if (me.defaults.hasOwnProperty(type)) {\n        me.defaults[type] = helpers$1.extend(me.defaults[type], additions);\n      }\n    },\n    addScalesToLayout: function addScalesToLayout(chart) {\n      // Adds each scale to the chart.boxes array to be sized accordingly\n      helpers$1.each(chart.scales, function (scale) {\n        // Set ILayoutItem parameters for backwards compatibility\n        scale.fullWidth = scale.options.fullWidth;\n        scale.position = scale.options.position;\n        scale.weight = scale.options.weight;\n        core_layouts.addBox(chart, scale);\n      });\n    }\n  };\n  var valueOrDefault$7 = helpers$1.valueOrDefault;\n\n  core_defaults._set('global', {\n    tooltips: {\n      enabled: true,\n      custom: null,\n      mode: 'nearest',\n      position: 'average',\n      intersect: true,\n      backgroundColor: 'rgba(0,0,0,0.8)',\n      titleFontStyle: 'bold',\n      titleSpacing: 2,\n      titleMarginBottom: 6,\n      titleFontColor: '#fff',\n      titleAlign: 'left',\n      bodySpacing: 2,\n      bodyFontColor: '#fff',\n      bodyAlign: 'left',\n      footerFontStyle: 'bold',\n      footerSpacing: 2,\n      footerMarginTop: 6,\n      footerFontColor: '#fff',\n      footerAlign: 'left',\n      yPadding: 6,\n      xPadding: 6,\n      caretPadding: 2,\n      caretSize: 5,\n      cornerRadius: 6,\n      multiKeyBackground: '#fff',\n      displayColors: true,\n      borderColor: 'rgba(0,0,0,0)',\n      borderWidth: 0,\n      callbacks: {\n        // Args are: (tooltipItems, data)\n        beforeTitle: helpers$1.noop,\n        title: function title(tooltipItems, data) {\n          var title = '';\n          var labels = data.labels;\n          var labelCount = labels ? labels.length : 0;\n\n          if (tooltipItems.length > 0) {\n            var item = tooltipItems[0];\n\n            if (item.label) {\n              title = item.label;\n            } else if (item.xLabel) {\n              title = item.xLabel;\n            } else if (labelCount > 0 && item.index < labelCount) {\n              title = labels[item.index];\n            }\n          }\n\n          return title;\n        },\n        afterTitle: helpers$1.noop,\n        // Args are: (tooltipItems, data)\n        beforeBody: helpers$1.noop,\n        // Args are: (tooltipItem, data)\n        beforeLabel: helpers$1.noop,\n        label: function label(tooltipItem, data) {\n          var label = data.datasets[tooltipItem.datasetIndex].label || '';\n\n          if (label) {\n            label += ': ';\n          }\n\n          if (!helpers$1.isNullOrUndef(tooltipItem.value)) {\n            label += tooltipItem.value;\n          } else {\n            label += tooltipItem.yLabel;\n          }\n\n          return label;\n        },\n        labelColor: function labelColor(tooltipItem, chart) {\n          var meta = chart.getDatasetMeta(tooltipItem.datasetIndex);\n          var activeElement = meta.data[tooltipItem.index];\n          var view = activeElement._view;\n          return {\n            borderColor: view.borderColor,\n            backgroundColor: view.backgroundColor\n          };\n        },\n        labelTextColor: function labelTextColor() {\n          return this._options.bodyFontColor;\n        },\n        afterLabel: helpers$1.noop,\n        // Args are: (tooltipItems, data)\n        afterBody: helpers$1.noop,\n        // Args are: (tooltipItems, data)\n        beforeFooter: helpers$1.noop,\n        footer: helpers$1.noop,\n        afterFooter: helpers$1.noop\n      }\n    }\n  });\n\n  var positioners = {\n    /**\n     * Average mode places the tooltip at the average position of the elements shown\n     * @function Chart.Tooltip.positioners.average\n     * @param elements {ChartElement[]} the elements being displayed in the tooltip\n     * @returns {object} tooltip position\n     */\n    average: function average(elements) {\n      if (!elements.length) {\n        return false;\n      }\n\n      var i, len;\n      var x = 0;\n      var y = 0;\n      var count = 0;\n\n      for (i = 0, len = elements.length; i < len; ++i) {\n        var el = elements[i];\n\n        if (el && el.hasValue()) {\n          var pos = el.tooltipPosition();\n          x += pos.x;\n          y += pos.y;\n          ++count;\n        }\n      }\n\n      return {\n        x: x / count,\n        y: y / count\n      };\n    },\n\n    /**\n     * Gets the tooltip position nearest of the item nearest to the event position\n     * @function Chart.Tooltip.positioners.nearest\n     * @param elements {Chart.Element[]} the tooltip elements\n     * @param eventPosition {object} the position of the event in canvas coordinates\n     * @returns {object} the tooltip position\n     */\n    nearest: function nearest(elements, eventPosition) {\n      var x = eventPosition.x;\n      var y = eventPosition.y;\n      var minDistance = Number.POSITIVE_INFINITY;\n      var i, len, nearestElement;\n\n      for (i = 0, len = elements.length; i < len; ++i) {\n        var el = elements[i];\n\n        if (el && el.hasValue()) {\n          var center = el.getCenterPoint();\n          var d = helpers$1.distanceBetweenPoints(eventPosition, center);\n\n          if (d < minDistance) {\n            minDistance = d;\n            nearestElement = el;\n          }\n        }\n      }\n\n      if (nearestElement) {\n        var tp = nearestElement.tooltipPosition();\n        x = tp.x;\n        y = tp.y;\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    }\n  }; // Helper to push or concat based on if the 2nd parameter is an array or not\n\n  function pushOrConcat(base, toPush) {\n    if (toPush) {\n      if (helpers$1.isArray(toPush)) {\n        // base = base.concat(toPush);\n        Array.prototype.push.apply(base, toPush);\n      } else {\n        base.push(toPush);\n      }\n    }\n\n    return base;\n  }\n  /**\n   * Returns array of strings split by newline\n   * @param {string} value - The value to split by newline.\n   * @returns {string[]} value if newline present - Returned from String split() method\n   * @function\n   */\n\n\n  function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n      return str.split('\\n');\n    }\n\n    return str;\n  }\n  /**\n   * Private helper to create a tooltip item model\n   * @param element - the chart element (point, arc, bar) to create the tooltip item for\n   * @return new tooltip item\n   */\n\n\n  function createTooltipItem(element) {\n    var xScale = element._xScale;\n    var yScale = element._yScale || element._scale; // handle radar || polarArea charts\n\n    var index = element._index;\n    var datasetIndex = element._datasetIndex;\n\n    var controller = element._chart.getDatasetMeta(datasetIndex).controller;\n\n    var indexScale = controller._getIndexScale();\n\n    var valueScale = controller._getValueScale();\n\n    return {\n      xLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',\n      yLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',\n      label: indexScale ? '' + indexScale.getLabelForIndex(index, datasetIndex) : '',\n      value: valueScale ? '' + valueScale.getLabelForIndex(index, datasetIndex) : '',\n      index: index,\n      datasetIndex: datasetIndex,\n      x: element._model.x,\n      y: element._model.y\n    };\n  }\n  /**\n   * Helper to get the reset model for the tooltip\n   * @param tooltipOpts {object} the tooltip options\n   */\n\n\n  function getBaseModel(tooltipOpts) {\n    var globalDefaults = core_defaults.global;\n    return {\n      // Positioning\n      xPadding: tooltipOpts.xPadding,\n      yPadding: tooltipOpts.yPadding,\n      xAlign: tooltipOpts.xAlign,\n      yAlign: tooltipOpts.yAlign,\n      // Body\n      bodyFontColor: tooltipOpts.bodyFontColor,\n      _bodyFontFamily: valueOrDefault$7(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),\n      _bodyFontStyle: valueOrDefault$7(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),\n      _bodyAlign: tooltipOpts.bodyAlign,\n      bodyFontSize: valueOrDefault$7(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),\n      bodySpacing: tooltipOpts.bodySpacing,\n      // Title\n      titleFontColor: tooltipOpts.titleFontColor,\n      _titleFontFamily: valueOrDefault$7(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),\n      _titleFontStyle: valueOrDefault$7(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),\n      titleFontSize: valueOrDefault$7(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),\n      _titleAlign: tooltipOpts.titleAlign,\n      titleSpacing: tooltipOpts.titleSpacing,\n      titleMarginBottom: tooltipOpts.titleMarginBottom,\n      // Footer\n      footerFontColor: tooltipOpts.footerFontColor,\n      _footerFontFamily: valueOrDefault$7(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),\n      _footerFontStyle: valueOrDefault$7(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),\n      footerFontSize: valueOrDefault$7(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),\n      _footerAlign: tooltipOpts.footerAlign,\n      footerSpacing: tooltipOpts.footerSpacing,\n      footerMarginTop: tooltipOpts.footerMarginTop,\n      // Appearance\n      caretSize: tooltipOpts.caretSize,\n      cornerRadius: tooltipOpts.cornerRadius,\n      backgroundColor: tooltipOpts.backgroundColor,\n      opacity: 0,\n      legendColorBackground: tooltipOpts.multiKeyBackground,\n      displayColors: tooltipOpts.displayColors,\n      borderColor: tooltipOpts.borderColor,\n      borderWidth: tooltipOpts.borderWidth\n    };\n  }\n  /**\n   * Get the size of the tooltip\n   */\n\n\n  function getTooltipSize(tooltip, model) {\n    var ctx = tooltip._chart.ctx;\n    var height = model.yPadding * 2; // Tooltip Padding\n\n    var width = 0; // Count of all lines in the body\n\n    var body = model.body;\n    var combinedBodyLength = body.reduce(function (count, bodyItem) {\n      return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;\n    }, 0);\n    combinedBodyLength += model.beforeBody.length + model.afterBody.length;\n    var titleLineCount = model.title.length;\n    var footerLineCount = model.footer.length;\n    var titleFontSize = model.titleFontSize;\n    var bodyFontSize = model.bodyFontSize;\n    var footerFontSize = model.footerFontSize;\n    height += titleLineCount * titleFontSize; // Title Lines\n\n    height += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0; // Title Line Spacing\n\n    height += titleLineCount ? model.titleMarginBottom : 0; // Title's bottom Margin\n\n    height += combinedBodyLength * bodyFontSize; // Body Lines\n\n    height += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0; // Body Line Spacing\n\n    height += footerLineCount ? model.footerMarginTop : 0; // Footer Margin\n\n    height += footerLineCount * footerFontSize; // Footer Lines\n\n    height += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0; // Footer Line Spacing\n    // Title width\n\n    var widthPadding = 0;\n\n    var maxLineWidth = function maxLineWidth(line) {\n      width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n\n    ctx.font = helpers$1.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);\n    helpers$1.each(model.title, maxLineWidth); // Body width\n\n    ctx.font = helpers$1.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);\n    helpers$1.each(model.beforeBody.concat(model.afterBody), maxLineWidth); // Body lines may include some extra width due to the color box\n\n    widthPadding = model.displayColors ? bodyFontSize + 2 : 0;\n    helpers$1.each(body, function (bodyItem) {\n      helpers$1.each(bodyItem.before, maxLineWidth);\n      helpers$1.each(bodyItem.lines, maxLineWidth);\n      helpers$1.each(bodyItem.after, maxLineWidth);\n    }); // Reset back to 0\n\n    widthPadding = 0; // Footer width\n\n    ctx.font = helpers$1.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);\n    helpers$1.each(model.footer, maxLineWidth); // Add padding\n\n    width += 2 * model.xPadding;\n    return {\n      width: width,\n      height: height\n    };\n  }\n  /**\n   * Helper to get the alignment of a tooltip given the size\n   */\n\n\n  function determineAlignment(tooltip, size) {\n    var model = tooltip._model;\n    var chart = tooltip._chart;\n    var chartArea = tooltip._chart.chartArea;\n    var xAlign = 'center';\n    var yAlign = 'center';\n\n    if (model.y < size.height) {\n      yAlign = 'top';\n    } else if (model.y > chart.height - size.height) {\n      yAlign = 'bottom';\n    }\n\n    var lf, rf; // functions to determine left, right alignment\n\n    var olf, orf; // functions to determine if left/right alignment causes tooltip to go outside chart\n\n    var yf; // function to get the y alignment if the tooltip goes outside of the left or right edges\n\n    var midX = (chartArea.left + chartArea.right) / 2;\n    var midY = (chartArea.top + chartArea.bottom) / 2;\n\n    if (yAlign === 'center') {\n      lf = function lf(x) {\n        return x <= midX;\n      };\n\n      rf = function rf(x) {\n        return x > midX;\n      };\n    } else {\n      lf = function lf(x) {\n        return x <= size.width / 2;\n      };\n\n      rf = function rf(x) {\n        return x >= chart.width - size.width / 2;\n      };\n    }\n\n    olf = function olf(x) {\n      return x + size.width + model.caretSize + model.caretPadding > chart.width;\n    };\n\n    orf = function orf(x) {\n      return x - size.width - model.caretSize - model.caretPadding < 0;\n    };\n\n    yf = function yf(y) {\n      return y <= midY ? 'top' : 'bottom';\n    };\n\n    if (lf(model.x)) {\n      xAlign = 'left'; // Is tooltip too wide and goes over the right side of the chart.?\n\n      if (olf(model.x)) {\n        xAlign = 'center';\n        yAlign = yf(model.y);\n      }\n    } else if (rf(model.x)) {\n      xAlign = 'right'; // Is tooltip too wide and goes outside left edge of canvas?\n\n      if (orf(model.x)) {\n        xAlign = 'center';\n        yAlign = yf(model.y);\n      }\n    }\n\n    var opts = tooltip._options;\n    return {\n      xAlign: opts.xAlign ? opts.xAlign : xAlign,\n      yAlign: opts.yAlign ? opts.yAlign : yAlign\n    };\n  }\n  /**\n   * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n   */\n\n\n  function getBackgroundPoint(vm, size, alignment, chart) {\n    // Background Position\n    var x = vm.x;\n    var y = vm.y;\n    var caretSize = vm.caretSize;\n    var caretPadding = vm.caretPadding;\n    var cornerRadius = vm.cornerRadius;\n    var xAlign = alignment.xAlign;\n    var yAlign = alignment.yAlign;\n    var paddingAndSize = caretSize + caretPadding;\n    var radiusAndPadding = cornerRadius + caretPadding;\n\n    if (xAlign === 'right') {\n      x -= size.width;\n    } else if (xAlign === 'center') {\n      x -= size.width / 2;\n\n      if (x + size.width > chart.width) {\n        x = chart.width - size.width;\n      }\n\n      if (x < 0) {\n        x = 0;\n      }\n    }\n\n    if (yAlign === 'top') {\n      y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n      y -= size.height + paddingAndSize;\n    } else {\n      y -= size.height / 2;\n    }\n\n    if (yAlign === 'center') {\n      if (xAlign === 'left') {\n        x += paddingAndSize;\n      } else if (xAlign === 'right') {\n        x -= paddingAndSize;\n      }\n    } else if (xAlign === 'left') {\n      x -= radiusAndPadding;\n    } else if (xAlign === 'right') {\n      x += radiusAndPadding;\n    }\n\n    return {\n      x: x,\n      y: y\n    };\n  }\n\n  function getAlignedX(vm, align) {\n    return align === 'center' ? vm.x + vm.width / 2 : align === 'right' ? vm.x + vm.width - vm.xPadding : vm.x + vm.xPadding;\n  }\n  /**\n   * Helper to build before and after body lines\n   */\n\n\n  function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n  }\n\n  var exports$3 = core_element.extend({\n    initialize: function initialize() {\n      this._model = getBaseModel(this._options);\n      this._lastActive = [];\n    },\n    // Get the title\n    // Args are: (tooltipItem, data)\n    getTitle: function getTitle() {\n      var me = this;\n      var opts = me._options;\n      var callbacks = opts.callbacks;\n      var beforeTitle = callbacks.beforeTitle.apply(me, arguments);\n      var title = callbacks.title.apply(me, arguments);\n      var afterTitle = callbacks.afterTitle.apply(me, arguments);\n      var lines = [];\n      lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n      lines = pushOrConcat(lines, splitNewlines(title));\n      lines = pushOrConcat(lines, splitNewlines(afterTitle));\n      return lines;\n    },\n    // Args are: (tooltipItem, data)\n    getBeforeBody: function getBeforeBody() {\n      return getBeforeAfterBodyLines(this._options.callbacks.beforeBody.apply(this, arguments));\n    },\n    // Args are: (tooltipItem, data)\n    getBody: function getBody(tooltipItems, data) {\n      var me = this;\n      var callbacks = me._options.callbacks;\n      var bodyItems = [];\n      helpers$1.each(tooltipItems, function (tooltipItem) {\n        var bodyItem = {\n          before: [],\n          lines: [],\n          after: []\n        };\n        pushOrConcat(bodyItem.before, splitNewlines(callbacks.beforeLabel.call(me, tooltipItem, data)));\n        pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));\n        pushOrConcat(bodyItem.after, splitNewlines(callbacks.afterLabel.call(me, tooltipItem, data)));\n        bodyItems.push(bodyItem);\n      });\n      return bodyItems;\n    },\n    // Args are: (tooltipItem, data)\n    getAfterBody: function getAfterBody() {\n      return getBeforeAfterBodyLines(this._options.callbacks.afterBody.apply(this, arguments));\n    },\n    // Get the footer and beforeFooter and afterFooter lines\n    // Args are: (tooltipItem, data)\n    getFooter: function getFooter() {\n      var me = this;\n      var callbacks = me._options.callbacks;\n      var beforeFooter = callbacks.beforeFooter.apply(me, arguments);\n      var footer = callbacks.footer.apply(me, arguments);\n      var afterFooter = callbacks.afterFooter.apply(me, arguments);\n      var lines = [];\n      lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n      lines = pushOrConcat(lines, splitNewlines(footer));\n      lines = pushOrConcat(lines, splitNewlines(afterFooter));\n      return lines;\n    },\n    update: function update(changed) {\n      var me = this;\n      var opts = me._options; // Need to regenerate the model because its faster than using extend and it is necessary due to the optimization in Chart.Element.transition\n      // that does _view = _model if ease === 1. This causes the 2nd tooltip update to set properties in both the view and model at the same time\n      // which breaks any animations.\n\n      var existingModel = me._model;\n      var model = me._model = getBaseModel(opts);\n      var active = me._active;\n      var data = me._data; // In the case where active.length === 0 we need to keep these at existing values for good animations\n\n      var alignment = {\n        xAlign: existingModel.xAlign,\n        yAlign: existingModel.yAlign\n      };\n      var backgroundPoint = {\n        x: existingModel.x,\n        y: existingModel.y\n      };\n      var tooltipSize = {\n        width: existingModel.width,\n        height: existingModel.height\n      };\n      var tooltipPosition = {\n        x: existingModel.caretX,\n        y: existingModel.caretY\n      };\n      var i, len;\n\n      if (active.length) {\n        model.opacity = 1;\n        var labelColors = [];\n        var labelTextColors = [];\n        tooltipPosition = positioners[opts.position].call(me, active, me._eventPosition);\n        var tooltipItems = [];\n\n        for (i = 0, len = active.length; i < len; ++i) {\n          tooltipItems.push(createTooltipItem(active[i]));\n        } // If the user provided a filter function, use it to modify the tooltip items\n\n\n        if (opts.filter) {\n          tooltipItems = tooltipItems.filter(function (a) {\n            return opts.filter(a, data);\n          });\n        } // If the user provided a sorting function, use it to modify the tooltip items\n\n\n        if (opts.itemSort) {\n          tooltipItems = tooltipItems.sort(function (a, b) {\n            return opts.itemSort(a, b, data);\n          });\n        } // Determine colors for boxes\n\n\n        helpers$1.each(tooltipItems, function (tooltipItem) {\n          labelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, me._chart));\n          labelTextColors.push(opts.callbacks.labelTextColor.call(me, tooltipItem, me._chart));\n        }); // Build the Text Lines\n\n        model.title = me.getTitle(tooltipItems, data);\n        model.beforeBody = me.getBeforeBody(tooltipItems, data);\n        model.body = me.getBody(tooltipItems, data);\n        model.afterBody = me.getAfterBody(tooltipItems, data);\n        model.footer = me.getFooter(tooltipItems, data); // Initial positioning and colors\n\n        model.x = tooltipPosition.x;\n        model.y = tooltipPosition.y;\n        model.caretPadding = opts.caretPadding;\n        model.labelColors = labelColors;\n        model.labelTextColors = labelTextColors; // data points\n\n        model.dataPoints = tooltipItems; // We need to determine alignment of the tooltip\n\n        tooltipSize = getTooltipSize(this, model);\n        alignment = determineAlignment(this, tooltipSize); // Final Size and Position\n\n        backgroundPoint = getBackgroundPoint(model, tooltipSize, alignment, me._chart);\n      } else {\n        model.opacity = 0;\n      }\n\n      model.xAlign = alignment.xAlign;\n      model.yAlign = alignment.yAlign;\n      model.x = backgroundPoint.x;\n      model.y = backgroundPoint.y;\n      model.width = tooltipSize.width;\n      model.height = tooltipSize.height; // Point where the caret on the tooltip points to\n\n      model.caretX = tooltipPosition.x;\n      model.caretY = tooltipPosition.y;\n      me._model = model;\n\n      if (changed && opts.custom) {\n        opts.custom.call(me, model);\n      }\n\n      return me;\n    },\n    drawCaret: function drawCaret(tooltipPoint, size) {\n      var ctx = this._chart.ctx;\n      var vm = this._view;\n      var caretPosition = this.getCaretPosition(tooltipPoint, size, vm);\n      ctx.lineTo(caretPosition.x1, caretPosition.y1);\n      ctx.lineTo(caretPosition.x2, caretPosition.y2);\n      ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    },\n    getCaretPosition: function getCaretPosition(tooltipPoint, size, vm) {\n      var x1, x2, x3, y1, y2, y3;\n      var caretSize = vm.caretSize;\n      var cornerRadius = vm.cornerRadius;\n      var xAlign = vm.xAlign;\n      var yAlign = vm.yAlign;\n      var ptX = tooltipPoint.x;\n      var ptY = tooltipPoint.y;\n      var width = size.width;\n      var height = size.height;\n\n      if (yAlign === 'center') {\n        y2 = ptY + height / 2;\n\n        if (xAlign === 'left') {\n          x1 = ptX;\n          x2 = x1 - caretSize;\n          x3 = x1;\n          y1 = y2 + caretSize;\n          y3 = y2 - caretSize;\n        } else {\n          x1 = ptX + width;\n          x2 = x1 + caretSize;\n          x3 = x1;\n          y1 = y2 - caretSize;\n          y3 = y2 + caretSize;\n        }\n      } else {\n        if (xAlign === 'left') {\n          x2 = ptX + cornerRadius + caretSize;\n          x1 = x2 - caretSize;\n          x3 = x2 + caretSize;\n        } else if (xAlign === 'right') {\n          x2 = ptX + width - cornerRadius - caretSize;\n          x1 = x2 - caretSize;\n          x3 = x2 + caretSize;\n        } else {\n          x2 = vm.caretX;\n          x1 = x2 - caretSize;\n          x3 = x2 + caretSize;\n        }\n\n        if (yAlign === 'top') {\n          y1 = ptY;\n          y2 = y1 - caretSize;\n          y3 = y1;\n        } else {\n          y1 = ptY + height;\n          y2 = y1 + caretSize;\n          y3 = y1; // invert drawing order\n\n          var tmp = x3;\n          x3 = x1;\n          x1 = tmp;\n        }\n      }\n\n      return {\n        x1: x1,\n        x2: x2,\n        x3: x3,\n        y1: y1,\n        y2: y2,\n        y3: y3\n      };\n    },\n    drawTitle: function drawTitle(pt, vm, ctx) {\n      var title = vm.title;\n\n      if (title.length) {\n        pt.x = getAlignedX(vm, vm._titleAlign);\n        ctx.textAlign = vm._titleAlign;\n        ctx.textBaseline = 'top';\n        var titleFontSize = vm.titleFontSize;\n        var titleSpacing = vm.titleSpacing;\n        ctx.fillStyle = vm.titleFontColor;\n        ctx.font = helpers$1.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);\n        var i, len;\n\n        for (i = 0, len = title.length; i < len; ++i) {\n          ctx.fillText(title[i], pt.x, pt.y);\n          pt.y += titleFontSize + titleSpacing; // Line Height and spacing\n\n          if (i + 1 === title.length) {\n            pt.y += vm.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n          }\n        }\n      }\n    },\n    drawBody: function drawBody(pt, vm, ctx) {\n      var bodyFontSize = vm.bodyFontSize;\n      var bodySpacing = vm.bodySpacing;\n      var bodyAlign = vm._bodyAlign;\n      var body = vm.body;\n      var drawColorBoxes = vm.displayColors;\n      var labelColors = vm.labelColors;\n      var xLinePadding = 0;\n      var colorX = drawColorBoxes ? getAlignedX(vm, 'left') : 0;\n      var textColor;\n      ctx.textAlign = bodyAlign;\n      ctx.textBaseline = 'top';\n      ctx.font = helpers$1.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);\n      pt.x = getAlignedX(vm, bodyAlign); // Before Body\n\n      var fillLineOfText = function fillLineOfText(line) {\n        ctx.fillText(line, pt.x + xLinePadding, pt.y);\n        pt.y += bodyFontSize + bodySpacing;\n      }; // Before body lines\n\n\n      ctx.fillStyle = vm.bodyFontColor;\n      helpers$1.each(vm.beforeBody, fillLineOfText);\n      xLinePadding = drawColorBoxes && bodyAlign !== 'right' ? bodyAlign === 'center' ? bodyFontSize / 2 + 1 : bodyFontSize + 2 : 0; // Draw body lines now\n\n      helpers$1.each(body, function (bodyItem, i) {\n        textColor = vm.labelTextColors[i];\n        ctx.fillStyle = textColor;\n        helpers$1.each(bodyItem.before, fillLineOfText);\n        helpers$1.each(bodyItem.lines, function (line) {\n          // Draw Legend-like boxes if needed\n          if (drawColorBoxes) {\n            // Fill a white rect so that colours merge nicely if the opacity is < 1\n            ctx.fillStyle = vm.legendColorBackground;\n            ctx.fillRect(colorX, pt.y, bodyFontSize, bodyFontSize); // Border\n\n            ctx.lineWidth = 1;\n            ctx.strokeStyle = labelColors[i].borderColor;\n            ctx.strokeRect(colorX, pt.y, bodyFontSize, bodyFontSize); // Inner square\n\n            ctx.fillStyle = labelColors[i].backgroundColor;\n            ctx.fillRect(colorX + 1, pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);\n            ctx.fillStyle = textColor;\n          }\n\n          fillLineOfText(line);\n        });\n        helpers$1.each(bodyItem.after, fillLineOfText);\n      }); // Reset back to 0 for after body\n\n      xLinePadding = 0; // After body lines\n\n      helpers$1.each(vm.afterBody, fillLineOfText);\n      pt.y -= bodySpacing; // Remove last body spacing\n    },\n    drawFooter: function drawFooter(pt, vm, ctx) {\n      var footer = vm.footer;\n\n      if (footer.length) {\n        pt.x = getAlignedX(vm, vm._footerAlign);\n        pt.y += vm.footerMarginTop;\n        ctx.textAlign = vm._footerAlign;\n        ctx.textBaseline = 'top';\n        ctx.fillStyle = vm.footerFontColor;\n        ctx.font = helpers$1.fontString(vm.footerFontSize, vm._footerFontStyle, vm._footerFontFamily);\n        helpers$1.each(footer, function (line) {\n          ctx.fillText(line, pt.x, pt.y);\n          pt.y += vm.footerFontSize + vm.footerSpacing;\n        });\n      }\n    },\n    drawBackground: function drawBackground(pt, vm, ctx, tooltipSize) {\n      ctx.fillStyle = vm.backgroundColor;\n      ctx.strokeStyle = vm.borderColor;\n      ctx.lineWidth = vm.borderWidth;\n      var xAlign = vm.xAlign;\n      var yAlign = vm.yAlign;\n      var x = pt.x;\n      var y = pt.y;\n      var width = tooltipSize.width;\n      var height = tooltipSize.height;\n      var radius = vm.cornerRadius;\n      ctx.beginPath();\n      ctx.moveTo(x + radius, y);\n\n      if (yAlign === 'top') {\n        this.drawCaret(pt, tooltipSize);\n      }\n\n      ctx.lineTo(x + width - radius, y);\n      ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n\n      if (yAlign === 'center' && xAlign === 'right') {\n        this.drawCaret(pt, tooltipSize);\n      }\n\n      ctx.lineTo(x + width, y + height - radius);\n      ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n\n      if (yAlign === 'bottom') {\n        this.drawCaret(pt, tooltipSize);\n      }\n\n      ctx.lineTo(x + radius, y + height);\n      ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n\n      if (yAlign === 'center' && xAlign === 'left') {\n        this.drawCaret(pt, tooltipSize);\n      }\n\n      ctx.lineTo(x, y + radius);\n      ctx.quadraticCurveTo(x, y, x + radius, y);\n      ctx.closePath();\n      ctx.fill();\n\n      if (vm.borderWidth > 0) {\n        ctx.stroke();\n      }\n    },\n    draw: function draw() {\n      var ctx = this._chart.ctx;\n      var vm = this._view;\n\n      if (vm.opacity === 0) {\n        return;\n      }\n\n      var tooltipSize = {\n        width: vm.width,\n        height: vm.height\n      };\n      var pt = {\n        x: vm.x,\n        y: vm.y\n      }; // IE11/Edge does not like very small opacities, so snap to 0\n\n      var opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity; // Truthy/falsey value for empty tooltip\n\n      var hasTooltipContent = vm.title.length || vm.beforeBody.length || vm.body.length || vm.afterBody.length || vm.footer.length;\n\n      if (this._options.enabled && hasTooltipContent) {\n        ctx.save();\n        ctx.globalAlpha = opacity; // Draw Background\n\n        this.drawBackground(pt, vm, ctx, tooltipSize); // Draw Title, Body, and Footer\n\n        pt.y += vm.yPadding; // Titles\n\n        this.drawTitle(pt, vm, ctx); // Body\n\n        this.drawBody(pt, vm, ctx); // Footer\n\n        this.drawFooter(pt, vm, ctx);\n        ctx.restore();\n      }\n    },\n\n    /**\n     * Handle an event\n     * @private\n     * @param {IEvent} event - The event to handle\n     * @returns {boolean} true if the tooltip changed\n     */\n    handleEvent: function handleEvent(e) {\n      var me = this;\n      var options = me._options;\n      var changed = false;\n      me._lastActive = me._lastActive || []; // Find Active Elements for tooltips\n\n      if (e.type === 'mouseout') {\n        me._active = [];\n      } else {\n        me._active = me._chart.getElementsAtEventForMode(e, options.mode, options);\n      } // Remember Last Actives\n\n\n      changed = !helpers$1.arrayEquals(me._active, me._lastActive); // Only handle target event on tooltip change\n\n      if (changed) {\n        me._lastActive = me._active;\n\n        if (options.enabled || options.custom) {\n          me._eventPosition = {\n            x: e.x,\n            y: e.y\n          };\n          me.update(true);\n          me.pivot();\n        }\n      }\n\n      return changed;\n    }\n  });\n  /**\n   * @namespace Chart.Tooltip.positioners\n   */\n\n  var positioners_1 = positioners;\n  var core_tooltip = exports$3;\n  core_tooltip.positioners = positioners_1;\n  var valueOrDefault$8 = helpers$1.valueOrDefault;\n\n  core_defaults._set('global', {\n    elements: {},\n    events: ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'],\n    hover: {\n      onHover: null,\n      mode: 'nearest',\n      intersect: true,\n      animationDuration: 400\n    },\n    onClick: null,\n    maintainAspectRatio: true,\n    responsive: true,\n    responsiveAnimationDuration: 0\n  });\n  /**\n   * Recursively merge the given config objects representing the `scales` option\n   * by incorporating scale defaults in `xAxes` and `yAxes` array items, then\n   * returns a deep copy of the result, thus doesn't alter inputs.\n   */\n\n\n  function mergeScaleConfig()\n  /* config objects ... */\n  {\n    return helpers$1.merge({}, [].slice.call(arguments), {\n      merger: function merger(key, target, source, options) {\n        if (key === 'xAxes' || key === 'yAxes') {\n          var slen = source[key].length;\n          var i, type, scale;\n\n          if (!target[key]) {\n            target[key] = [];\n          }\n\n          for (i = 0; i < slen; ++i) {\n            scale = source[key][i];\n            type = valueOrDefault$8(scale.type, key === 'xAxes' ? 'category' : 'linear');\n\n            if (i >= target[key].length) {\n              target[key].push({});\n            }\n\n            if (!target[key][i].type || scale.type && scale.type !== target[key][i].type) {\n              // new/untyped scale or type changed: let's apply the new defaults\n              // then merge source scale to correctly overwrite the defaults.\n              helpers$1.merge(target[key][i], [core_scaleService.getScaleDefaults(type), scale]);\n            } else {\n              // scales type are the same\n              helpers$1.merge(target[key][i], scale);\n            }\n          }\n        } else {\n          helpers$1._merger(key, target, source, options);\n        }\n      }\n    });\n  }\n  /**\n   * Recursively merge the given config objects as the root options by handling\n   * default scale options for the `scales` and `scale` properties, then returns\n   * a deep copy of the result, thus doesn't alter inputs.\n   */\n\n\n  function mergeConfig()\n  /* config objects ... */\n  {\n    return helpers$1.merge({}, [].slice.call(arguments), {\n      merger: function merger(key, target, source, options) {\n        var tval = target[key] || {};\n        var sval = source[key];\n\n        if (key === 'scales') {\n          // scale config merging is complex. Add our own function here for that\n          target[key] = mergeScaleConfig(tval, sval);\n        } else if (key === 'scale') {\n          // used in polar area & radar charts since there is only one scale\n          target[key] = helpers$1.merge(tval, [core_scaleService.getScaleDefaults(sval.type), sval]);\n        } else {\n          helpers$1._merger(key, target, source, options);\n        }\n      }\n    });\n  }\n\n  function initConfig(config) {\n    config = config || {}; // Do NOT use mergeConfig for the data object because this method merges arrays\n    // and so would change references to labels and datasets, preventing data updates.\n\n    var data = config.data = config.data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    config.options = mergeConfig(core_defaults.global, core_defaults[config.type], config.options || {});\n    return config;\n  }\n\n  function updateConfig(chart) {\n    var newOptions = chart.options;\n    helpers$1.each(chart.scales, function (scale) {\n      core_layouts.removeBox(chart, scale);\n    });\n    newOptions = mergeConfig(core_defaults.global, core_defaults[chart.config.type], newOptions);\n    chart.options = chart.config.options = newOptions;\n    chart.ensureScalesHaveIDs();\n    chart.buildOrUpdateScales(); // Tooltip\n\n    chart.tooltip._options = newOptions.tooltips;\n    chart.tooltip.initialize();\n  }\n\n  function positionIsHorizontal(position) {\n    return position === 'top' || position === 'bottom';\n  }\n\n  var Chart = function Chart(item, config) {\n    this.construct(item, config);\n    return this;\n  };\n\n  helpers$1.extend(Chart.prototype,\n  /** @lends Chart */\n  {\n    /**\n     * @private\n     */\n    construct: function construct(item, config) {\n      var me = this;\n      config = initConfig(config);\n      var context = platform.acquireContext(item, config);\n      var canvas = context && context.canvas;\n      var height = canvas && canvas.height;\n      var width = canvas && canvas.width;\n      me.id = helpers$1.uid();\n      me.ctx = context;\n      me.canvas = canvas;\n      me.config = config;\n      me.width = width;\n      me.height = height;\n      me.aspectRatio = height ? width / height : null;\n      me.options = config.options;\n      me._bufferedRender = false;\n      /**\n       * Provided for backward compatibility, Chart and Chart.Controller have been merged,\n       * the \"instance\" still need to be defined since it might be called from plugins.\n       * @prop Chart#chart\n       * @deprecated since version 2.6.0\n       * @todo remove at version 3\n       * @private\n       */\n\n      me.chart = me;\n      me.controller = me; // chart.chart.controller #inception\n      // Add the chart instance to the global namespace\n\n      Chart.instances[me.id] = me; // Define alias to the config data: `chart.data === chart.config.data`\n\n      Object.defineProperty(me, 'data', {\n        get: function get() {\n          return me.config.data;\n        },\n        set: function set(value) {\n          me.config.data = value;\n        }\n      });\n\n      if (!context || !canvas) {\n        // The given item is not a compatible context2d element, let's return before finalizing\n        // the chart initialization but after setting basic chart / controller properties that\n        // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n        // https://github.com/chartjs/Chart.js/issues/2807\n        console.error(\"Failed to create chart: can't acquire context from the given item\");\n        return;\n      }\n\n      me.initialize();\n      me.update();\n    },\n\n    /**\n     * @private\n     */\n    initialize: function initialize() {\n      var me = this; // Before init plugin notification\n\n      core_plugins.notify(me, 'beforeInit');\n      helpers$1.retinaScale(me, me.options.devicePixelRatio);\n      me.bindEvents();\n\n      if (me.options.responsive) {\n        // Initial resize before chart draws (must be silent to preserve initial animations).\n        me.resize(true);\n      } // Make sure scales have IDs and are built before we build any controllers.\n\n\n      me.ensureScalesHaveIDs();\n      me.buildOrUpdateScales();\n      me.initToolTip(); // After init plugin notification\n\n      core_plugins.notify(me, 'afterInit');\n      return me;\n    },\n    clear: function clear() {\n      helpers$1.canvas.clear(this);\n      return this;\n    },\n    stop: function stop() {\n      // Stops any current animation loop occurring\n      core_animations.cancelAnimation(this);\n      return this;\n    },\n    resize: function resize(silent) {\n      var me = this;\n      var options = me.options;\n      var canvas = me.canvas;\n      var aspectRatio = options.maintainAspectRatio && me.aspectRatio || null; // the canvas render width and height will be casted to integers so make sure that\n      // the canvas display style uses the same integer values to avoid blurring effect.\n      // Set to 0 instead of canvas.size because the size defaults to 300x150 if the element is collapsed\n\n      var newWidth = Math.max(0, Math.floor(helpers$1.getMaximumWidth(canvas)));\n      var newHeight = Math.max(0, Math.floor(aspectRatio ? newWidth / aspectRatio : helpers$1.getMaximumHeight(canvas)));\n\n      if (me.width === newWidth && me.height === newHeight) {\n        return;\n      }\n\n      canvas.width = me.width = newWidth;\n      canvas.height = me.height = newHeight;\n      canvas.style.width = newWidth + 'px';\n      canvas.style.height = newHeight + 'px';\n      helpers$1.retinaScale(me, options.devicePixelRatio);\n\n      if (!silent) {\n        // Notify any plugins about the resize\n        var newSize = {\n          width: newWidth,\n          height: newHeight\n        };\n        core_plugins.notify(me, 'resize', [newSize]); // Notify of resize\n\n        if (options.onResize) {\n          options.onResize(me, newSize);\n        }\n\n        me.stop();\n        me.update({\n          duration: options.responsiveAnimationDuration\n        });\n      }\n    },\n    ensureScalesHaveIDs: function ensureScalesHaveIDs() {\n      var options = this.options;\n      var scalesOptions = options.scales || {};\n      var scaleOptions = options.scale;\n      helpers$1.each(scalesOptions.xAxes, function (xAxisOptions, index) {\n        xAxisOptions.id = xAxisOptions.id || 'x-axis-' + index;\n      });\n      helpers$1.each(scalesOptions.yAxes, function (yAxisOptions, index) {\n        yAxisOptions.id = yAxisOptions.id || 'y-axis-' + index;\n      });\n\n      if (scaleOptions) {\n        scaleOptions.id = scaleOptions.id || 'scale';\n      }\n    },\n\n    /**\n     * Builds a map of scale ID to scale object for future lookup.\n     */\n    buildOrUpdateScales: function buildOrUpdateScales() {\n      var me = this;\n      var options = me.options;\n      var scales = me.scales || {};\n      var items = [];\n      var updated = Object.keys(scales).reduce(function (obj, id) {\n        obj[id] = false;\n        return obj;\n      }, {});\n\n      if (options.scales) {\n        items = items.concat((options.scales.xAxes || []).map(function (xAxisOptions) {\n          return {\n            options: xAxisOptions,\n            dtype: 'category',\n            dposition: 'bottom'\n          };\n        }), (options.scales.yAxes || []).map(function (yAxisOptions) {\n          return {\n            options: yAxisOptions,\n            dtype: 'linear',\n            dposition: 'left'\n          };\n        }));\n      }\n\n      if (options.scale) {\n        items.push({\n          options: options.scale,\n          dtype: 'radialLinear',\n          isDefault: true,\n          dposition: 'chartArea'\n        });\n      }\n\n      helpers$1.each(items, function (item) {\n        var scaleOptions = item.options;\n        var id = scaleOptions.id;\n        var scaleType = valueOrDefault$8(scaleOptions.type, item.dtype);\n\n        if (positionIsHorizontal(scaleOptions.position) !== positionIsHorizontal(item.dposition)) {\n          scaleOptions.position = item.dposition;\n        }\n\n        updated[id] = true;\n        var scale = null;\n\n        if (id in scales && scales[id].type === scaleType) {\n          scale = scales[id];\n          scale.options = scaleOptions;\n          scale.ctx = me.ctx;\n          scale.chart = me;\n        } else {\n          var scaleClass = core_scaleService.getScaleConstructor(scaleType);\n\n          if (!scaleClass) {\n            return;\n          }\n\n          scale = new scaleClass({\n            id: id,\n            type: scaleType,\n            options: scaleOptions,\n            ctx: me.ctx,\n            chart: me\n          });\n          scales[scale.id] = scale;\n        }\n\n        scale.mergeTicksOptions(); // TODO(SB): I think we should be able to remove this custom case (options.scale)\n        // and consider it as a regular scale part of the \"scales\"\" map only! This would\n        // make the logic easier and remove some useless? custom code.\n\n        if (item.isDefault) {\n          me.scale = scale;\n        }\n      }); // clear up discarded scales\n\n      helpers$1.each(updated, function (hasUpdated, id) {\n        if (!hasUpdated) {\n          delete scales[id];\n        }\n      });\n      me.scales = scales;\n      core_scaleService.addScalesToLayout(this);\n    },\n    buildOrUpdateControllers: function buildOrUpdateControllers() {\n      var me = this;\n      var newControllers = [];\n      helpers$1.each(me.data.datasets, function (dataset, datasetIndex) {\n        var meta = me.getDatasetMeta(datasetIndex);\n        var type = dataset.type || me.config.type;\n\n        if (meta.type && meta.type !== type) {\n          me.destroyDatasetMeta(datasetIndex);\n          meta = me.getDatasetMeta(datasetIndex);\n        }\n\n        meta.type = type;\n\n        if (meta.controller) {\n          meta.controller.updateIndex(datasetIndex);\n          meta.controller.linkScales();\n        } else {\n          var ControllerClass = controllers[meta.type];\n\n          if (ControllerClass === undefined) {\n            throw new Error('\"' + meta.type + '\" is not a chart type.');\n          }\n\n          meta.controller = new ControllerClass(me, datasetIndex);\n          newControllers.push(meta.controller);\n        }\n      }, me);\n      return newControllers;\n    },\n\n    /**\n     * Reset the elements of all datasets\n     * @private\n     */\n    resetElements: function resetElements() {\n      var me = this;\n      helpers$1.each(me.data.datasets, function (dataset, datasetIndex) {\n        me.getDatasetMeta(datasetIndex).controller.reset();\n      }, me);\n    },\n\n    /**\n    * Resets the chart back to it's state before the initial animation\n    */\n    reset: function reset() {\n      this.resetElements();\n      this.tooltip.initialize();\n    },\n    update: function update(config) {\n      var me = this;\n\n      if (!config || typeof config !== 'object') {\n        // backwards compatibility\n        config = {\n          duration: config,\n          lazy: arguments[1]\n        };\n      }\n\n      updateConfig(me); // plugins options references might have change, let's invalidate the cache\n      // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n\n      core_plugins._invalidate(me);\n\n      if (core_plugins.notify(me, 'beforeUpdate') === false) {\n        return;\n      } // In case the entire data object changed\n\n\n      me.tooltip._data = me.data; // Make sure dataset controllers are updated and new controllers are reset\n\n      var newControllers = me.buildOrUpdateControllers(); // Make sure all dataset controllers have correct meta data counts\n\n      helpers$1.each(me.data.datasets, function (dataset, datasetIndex) {\n        me.getDatasetMeta(datasetIndex).controller.buildOrUpdateElements();\n      }, me);\n      me.updateLayout(); // Can only reset the new controllers after the scales have been updated\n\n      if (me.options.animation && me.options.animation.duration) {\n        helpers$1.each(newControllers, function (controller) {\n          controller.reset();\n        });\n      }\n\n      me.updateDatasets(); // Need to reset tooltip in case it is displayed with elements that are removed\n      // after update.\n\n      me.tooltip.initialize(); // Last active contains items that were previously in the tooltip.\n      // When we reset the tooltip, we need to clear it\n\n      me.lastActive = []; // Do this before render so that any plugins that need final scale updates can use it\n\n      core_plugins.notify(me, 'afterUpdate');\n\n      if (me._bufferedRender) {\n        me._bufferedRequest = {\n          duration: config.duration,\n          easing: config.easing,\n          lazy: config.lazy\n        };\n      } else {\n        me.render(config);\n      }\n    },\n\n    /**\n     * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n     * hook, in which case, plugins will not be called on `afterLayout`.\n     * @private\n     */\n    updateLayout: function updateLayout() {\n      var me = this;\n\n      if (core_plugins.notify(me, 'beforeLayout') === false) {\n        return;\n      }\n\n      core_layouts.update(this, this.width, this.height);\n      /**\n       * Provided for backward compatibility, use `afterLayout` instead.\n       * @method IPlugin#afterScaleUpdate\n       * @deprecated since version 2.5.0\n       * @todo remove at version 3\n       * @private\n       */\n\n      core_plugins.notify(me, 'afterScaleUpdate');\n      core_plugins.notify(me, 'afterLayout');\n    },\n\n    /**\n     * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n     * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n     * @private\n     */\n    updateDatasets: function updateDatasets() {\n      var me = this;\n\n      if (core_plugins.notify(me, 'beforeDatasetsUpdate') === false) {\n        return;\n      }\n\n      for (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {\n        me.updateDataset(i);\n      }\n\n      core_plugins.notify(me, 'afterDatasetsUpdate');\n    },\n\n    /**\n     * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n     * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n     * @private\n     */\n    updateDataset: function updateDataset(index) {\n      var me = this;\n      var meta = me.getDatasetMeta(index);\n      var args = {\n        meta: meta,\n        index: index\n      };\n\n      if (core_plugins.notify(me, 'beforeDatasetUpdate', [args]) === false) {\n        return;\n      }\n\n      meta.controller.update();\n      core_plugins.notify(me, 'afterDatasetUpdate', [args]);\n    },\n    render: function render(config) {\n      var me = this;\n\n      if (!config || typeof config !== 'object') {\n        // backwards compatibility\n        config = {\n          duration: config,\n          lazy: arguments[1]\n        };\n      }\n\n      var animationOptions = me.options.animation;\n      var duration = valueOrDefault$8(config.duration, animationOptions && animationOptions.duration);\n      var lazy = config.lazy;\n\n      if (core_plugins.notify(me, 'beforeRender') === false) {\n        return;\n      }\n\n      var onComplete = function onComplete(animation) {\n        core_plugins.notify(me, 'afterRender');\n        helpers$1.callback(animationOptions && animationOptions.onComplete, [animation], me);\n      };\n\n      if (animationOptions && duration) {\n        var animation = new core_animation({\n          numSteps: duration / 16.66,\n          // 60 fps\n          easing: config.easing || animationOptions.easing,\n          render: function render(chart, animationObject) {\n            var easingFunction = helpers$1.easing.effects[animationObject.easing];\n            var currentStep = animationObject.currentStep;\n            var stepDecimal = currentStep / animationObject.numSteps;\n            chart.draw(easingFunction(stepDecimal), stepDecimal, currentStep);\n          },\n          onAnimationProgress: animationOptions.onProgress,\n          onAnimationComplete: onComplete\n        });\n        core_animations.addAnimation(me, animation, duration, lazy);\n      } else {\n        me.draw(); // See https://github.com/chartjs/Chart.js/issues/3781\n\n        onComplete(new core_animation({\n          numSteps: 0,\n          chart: me\n        }));\n      }\n\n      return me;\n    },\n    draw: function draw(easingValue) {\n      var me = this;\n      me.clear();\n\n      if (helpers$1.isNullOrUndef(easingValue)) {\n        easingValue = 1;\n      }\n\n      me.transition(easingValue);\n\n      if (me.width <= 0 || me.height <= 0) {\n        return;\n      }\n\n      if (core_plugins.notify(me, 'beforeDraw', [easingValue]) === false) {\n        return;\n      } // Draw all the scales\n\n\n      helpers$1.each(me.boxes, function (box) {\n        box.draw(me.chartArea);\n      }, me);\n      me.drawDatasets(easingValue);\n\n      me._drawTooltip(easingValue);\n\n      core_plugins.notify(me, 'afterDraw', [easingValue]);\n    },\n\n    /**\n     * @private\n     */\n    transition: function transition(easingValue) {\n      var me = this;\n\n      for (var i = 0, ilen = (me.data.datasets || []).length; i < ilen; ++i) {\n        if (me.isDatasetVisible(i)) {\n          me.getDatasetMeta(i).controller.transition(easingValue);\n        }\n      }\n\n      me.tooltip.transition(easingValue);\n    },\n\n    /**\n     * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n     * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n     * @private\n     */\n    drawDatasets: function drawDatasets(easingValue) {\n      var me = this;\n\n      if (core_plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {\n        return;\n      } // Draw datasets reversed to support proper line stacking\n\n\n      for (var i = (me.data.datasets || []).length - 1; i >= 0; --i) {\n        if (me.isDatasetVisible(i)) {\n          me.drawDataset(i, easingValue);\n        }\n      }\n\n      core_plugins.notify(me, 'afterDatasetsDraw', [easingValue]);\n    },\n\n    /**\n     * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n     * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n     * @private\n     */\n    drawDataset: function drawDataset(index, easingValue) {\n      var me = this;\n      var meta = me.getDatasetMeta(index);\n      var args = {\n        meta: meta,\n        index: index,\n        easingValue: easingValue\n      };\n\n      if (core_plugins.notify(me, 'beforeDatasetDraw', [args]) === false) {\n        return;\n      }\n\n      meta.controller.draw(easingValue);\n      core_plugins.notify(me, 'afterDatasetDraw', [args]);\n    },\n\n    /**\n     * Draws tooltip unless a plugin returns `false` to the `beforeTooltipDraw`\n     * hook, in which case, plugins will not be called on `afterTooltipDraw`.\n     * @private\n     */\n    _drawTooltip: function _drawTooltip(easingValue) {\n      var me = this;\n      var tooltip = me.tooltip;\n      var args = {\n        tooltip: tooltip,\n        easingValue: easingValue\n      };\n\n      if (core_plugins.notify(me, 'beforeTooltipDraw', [args]) === false) {\n        return;\n      }\n\n      tooltip.draw();\n      core_plugins.notify(me, 'afterTooltipDraw', [args]);\n    },\n\n    /**\n     * Get the single element that was clicked on\n     * @return An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw\n     */\n    getElementAtEvent: function getElementAtEvent(e) {\n      return core_interaction.modes.single(this, e);\n    },\n    getElementsAtEvent: function getElementsAtEvent(e) {\n      return core_interaction.modes.label(this, e, {\n        intersect: true\n      });\n    },\n    getElementsAtXAxis: function getElementsAtXAxis(e) {\n      return core_interaction.modes['x-axis'](this, e, {\n        intersect: true\n      });\n    },\n    getElementsAtEventForMode: function getElementsAtEventForMode(e, mode, options) {\n      var method = core_interaction.modes[mode];\n\n      if (typeof method === 'function') {\n        return method(this, e, options);\n      }\n\n      return [];\n    },\n    getDatasetAtEvent: function getDatasetAtEvent(e) {\n      return core_interaction.modes.dataset(this, e, {\n        intersect: true\n      });\n    },\n    getDatasetMeta: function getDatasetMeta(datasetIndex) {\n      var me = this;\n      var dataset = me.data.datasets[datasetIndex];\n\n      if (!dataset._meta) {\n        dataset._meta = {};\n      }\n\n      var meta = dataset._meta[me.id];\n\n      if (!meta) {\n        meta = dataset._meta[me.id] = {\n          type: null,\n          data: [],\n          dataset: null,\n          controller: null,\n          hidden: null,\n          // See isDatasetVisible() comment\n          xAxisID: null,\n          yAxisID: null\n        };\n      }\n\n      return meta;\n    },\n    getVisibleDatasetCount: function getVisibleDatasetCount() {\n      var count = 0;\n\n      for (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n        if (this.isDatasetVisible(i)) {\n          count++;\n        }\n      }\n\n      return count;\n    },\n    isDatasetVisible: function isDatasetVisible(datasetIndex) {\n      var meta = this.getDatasetMeta(datasetIndex); // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n      // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n\n      return typeof meta.hidden === 'boolean' ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;\n    },\n    generateLegend: function generateLegend() {\n      return this.options.legendCallback(this);\n    },\n\n    /**\n     * @private\n     */\n    destroyDatasetMeta: function destroyDatasetMeta(datasetIndex) {\n      var id = this.id;\n      var dataset = this.data.datasets[datasetIndex];\n      var meta = dataset._meta && dataset._meta[id];\n\n      if (meta) {\n        meta.controller.destroy();\n        delete dataset._meta[id];\n      }\n    },\n    destroy: function destroy() {\n      var me = this;\n      var canvas = me.canvas;\n      var i, ilen;\n      me.stop(); // dataset controllers need to cleanup associated data\n\n      for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {\n        me.destroyDatasetMeta(i);\n      }\n\n      if (canvas) {\n        me.unbindEvents();\n        helpers$1.canvas.clear(me);\n        platform.releaseContext(me.ctx);\n        me.canvas = null;\n        me.ctx = null;\n      }\n\n      core_plugins.notify(me, 'destroy');\n      delete Chart.instances[me.id];\n    },\n    toBase64Image: function toBase64Image() {\n      return this.canvas.toDataURL.apply(this.canvas, arguments);\n    },\n    initToolTip: function initToolTip() {\n      var me = this;\n      me.tooltip = new core_tooltip({\n        _chart: me,\n        _chartInstance: me,\n        // deprecated, backward compatibility\n        _data: me.data,\n        _options: me.options.tooltips\n      }, me);\n    },\n\n    /**\n     * @private\n     */\n    bindEvents: function bindEvents() {\n      var me = this;\n      var listeners = me._listeners = {};\n\n      var listener = function listener() {\n        me.eventHandler.apply(me, arguments);\n      };\n\n      helpers$1.each(me.options.events, function (type) {\n        platform.addEventListener(me, type, listener);\n        listeners[type] = listener;\n      }); // Elements used to detect size change should not be injected for non responsive charts.\n      // See https://github.com/chartjs/Chart.js/issues/2210\n\n      if (me.options.responsive) {\n        listener = function listener() {\n          me.resize();\n        };\n\n        platform.addEventListener(me, 'resize', listener);\n        listeners.resize = listener;\n      }\n    },\n\n    /**\n     * @private\n     */\n    unbindEvents: function unbindEvents() {\n      var me = this;\n      var listeners = me._listeners;\n\n      if (!listeners) {\n        return;\n      }\n\n      delete me._listeners;\n      helpers$1.each(listeners, function (listener, type) {\n        platform.removeEventListener(me, type, listener);\n      });\n    },\n    updateHoverStyle: function updateHoverStyle(elements, mode, enabled) {\n      var method = enabled ? 'setHoverStyle' : 'removeHoverStyle';\n      var element, i, ilen;\n\n      for (i = 0, ilen = elements.length; i < ilen; ++i) {\n        element = elements[i];\n\n        if (element) {\n          this.getDatasetMeta(element._datasetIndex).controller[method](element);\n        }\n      }\n    },\n\n    /**\n     * @private\n     */\n    eventHandler: function eventHandler(e) {\n      var me = this;\n      var tooltip = me.tooltip;\n\n      if (core_plugins.notify(me, 'beforeEvent', [e]) === false) {\n        return;\n      } // Buffer any update calls so that renders do not occur\n\n\n      me._bufferedRender = true;\n      me._bufferedRequest = null;\n      var changed = me.handleEvent(e); // for smooth tooltip animations issue #4989\n      // the tooltip should be the source of change\n      // Animation check workaround:\n      // tooltip._start will be null when tooltip isn't animating\n\n      if (tooltip) {\n        changed = tooltip._start ? tooltip.handleEvent(e) : changed | tooltip.handleEvent(e);\n      }\n\n      core_plugins.notify(me, 'afterEvent', [e]);\n      var bufferedRequest = me._bufferedRequest;\n\n      if (bufferedRequest) {\n        // If we have an update that was triggered, we need to do a normal render\n        me.render(bufferedRequest);\n      } else if (changed && !me.animating) {\n        // If entering, leaving, or changing elements, animate the change via pivot\n        me.stop(); // We only need to render at this point. Updating will cause scales to be\n        // recomputed generating flicker & using more memory than necessary.\n\n        me.render({\n          duration: me.options.hover.animationDuration,\n          lazy: true\n        });\n      }\n\n      me._bufferedRender = false;\n      me._bufferedRequest = null;\n      return me;\n    },\n\n    /**\n     * Handle an event\n     * @private\n     * @param {IEvent} event the event to handle\n     * @return {boolean} true if the chart needs to re-render\n     */\n    handleEvent: function handleEvent(e) {\n      var me = this;\n      var options = me.options || {};\n      var hoverOptions = options.hover;\n      var changed = false;\n      me.lastActive = me.lastActive || []; // Find Active Elements for hover and tooltips\n\n      if (e.type === 'mouseout') {\n        me.active = [];\n      } else {\n        me.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);\n      } // Invoke onHover hook\n      // Need to call with native event here to not break backwards compatibility\n\n\n      helpers$1.callback(options.onHover || options.hover.onHover, [e.native, me.active], me);\n\n      if (e.type === 'mouseup' || e.type === 'click') {\n        if (options.onClick) {\n          // Use e.native here for backwards compatibility\n          options.onClick.call(me, e.native, me.active);\n        }\n      } // Remove styling for last active (even if it may still be active)\n\n\n      if (me.lastActive.length) {\n        me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);\n      } // Built in hover styling\n\n\n      if (me.active.length && hoverOptions.mode) {\n        me.updateHoverStyle(me.active, hoverOptions.mode, true);\n      }\n\n      changed = !helpers$1.arrayEquals(me.active, me.lastActive); // Remember Last Actives\n\n      me.lastActive = me.active;\n      return changed;\n    }\n  });\n  /**\n   * NOTE(SB) We actually don't use this container anymore but we need to keep it\n   * for backward compatibility. Though, it can still be useful for plugins that\n   * would need to work on multiple charts?!\n   */\n\n  Chart.instances = {};\n  var core_controller = Chart; // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, use Chart instead.\n   * @class Chart.Controller\n   * @deprecated since version 2.6\n   * @todo remove at version 3\n   * @private\n   */\n\n  Chart.Controller = Chart;\n  /**\n   * Provided for backward compatibility, not available anymore.\n   * @namespace Chart\n   * @deprecated since version 2.8\n   * @todo remove at version 3\n   * @private\n   */\n\n  Chart.types = {};\n  /**\n   * Provided for backward compatibility, not available anymore.\n   * @namespace Chart.helpers.configMerge\n   * @deprecated since version 2.8.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers$1.configMerge = mergeConfig;\n  /**\n   * Provided for backward compatibility, not available anymore.\n   * @namespace Chart.helpers.scaleMerge\n   * @deprecated since version 2.8.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers$1.scaleMerge = mergeScaleConfig;\n\n  var core_helpers = function core_helpers() {\n    // -- Basic js utility methods\n    helpers$1.where = function (collection, filterCallback) {\n      if (helpers$1.isArray(collection) && Array.prototype.filter) {\n        return collection.filter(filterCallback);\n      }\n\n      var filtered = [];\n      helpers$1.each(collection, function (item) {\n        if (filterCallback(item)) {\n          filtered.push(item);\n        }\n      });\n      return filtered;\n    };\n\n    helpers$1.findIndex = Array.prototype.findIndex ? function (array, callback, scope) {\n      return array.findIndex(callback, scope);\n    } : function (array, callback, scope) {\n      scope = scope === undefined ? array : scope;\n\n      for (var i = 0, ilen = array.length; i < ilen; ++i) {\n        if (callback.call(scope, array[i], i, array)) {\n          return i;\n        }\n      }\n\n      return -1;\n    };\n\n    helpers$1.findNextWhere = function (arrayToSearch, filterCallback, startIndex) {\n      // Default to start of the array\n      if (helpers$1.isNullOrUndef(startIndex)) {\n        startIndex = -1;\n      }\n\n      for (var i = startIndex + 1; i < arrayToSearch.length; i++) {\n        var currentItem = arrayToSearch[i];\n\n        if (filterCallback(currentItem)) {\n          return currentItem;\n        }\n      }\n    };\n\n    helpers$1.findPreviousWhere = function (arrayToSearch, filterCallback, startIndex) {\n      // Default to end of the array\n      if (helpers$1.isNullOrUndef(startIndex)) {\n        startIndex = arrayToSearch.length;\n      }\n\n      for (var i = startIndex - 1; i >= 0; i--) {\n        var currentItem = arrayToSearch[i];\n\n        if (filterCallback(currentItem)) {\n          return currentItem;\n        }\n      }\n    }; // -- Math methods\n\n\n    helpers$1.isNumber = function (n) {\n      return !isNaN(parseFloat(n)) && isFinite(n);\n    };\n\n    helpers$1.almostEquals = function (x, y, epsilon) {\n      return Math.abs(x - y) < epsilon;\n    };\n\n    helpers$1.almostWhole = function (x, epsilon) {\n      var rounded = Math.round(x);\n      return rounded - epsilon < x && rounded + epsilon > x;\n    };\n\n    helpers$1.max = function (array) {\n      return array.reduce(function (max, value) {\n        if (!isNaN(value)) {\n          return Math.max(max, value);\n        }\n\n        return max;\n      }, Number.NEGATIVE_INFINITY);\n    };\n\n    helpers$1.min = function (array) {\n      return array.reduce(function (min, value) {\n        if (!isNaN(value)) {\n          return Math.min(min, value);\n        }\n\n        return min;\n      }, Number.POSITIVE_INFINITY);\n    };\n\n    helpers$1.sign = Math.sign ? function (x) {\n      return Math.sign(x);\n    } : function (x) {\n      x = +x; // convert to a number\n\n      if (x === 0 || isNaN(x)) {\n        return x;\n      }\n\n      return x > 0 ? 1 : -1;\n    };\n    helpers$1.log10 = Math.log10 ? function (x) {\n      return Math.log10(x);\n    } : function (x) {\n      var exponent = Math.log(x) * Math.LOG10E; // Math.LOG10E = 1 / Math.LN10.\n      // Check for whole powers of 10,\n      // which due to floating point rounding error should be corrected.\n\n      var powerOf10 = Math.round(exponent);\n      var isPowerOf10 = x === Math.pow(10, powerOf10);\n      return isPowerOf10 ? powerOf10 : exponent;\n    };\n\n    helpers$1.toRadians = function (degrees) {\n      return degrees * (Math.PI / 180);\n    };\n\n    helpers$1.toDegrees = function (radians) {\n      return radians * (180 / Math.PI);\n    };\n    /**\n     * Returns the number of decimal places\n     * i.e. the number of digits after the decimal point, of the value of this Number.\n     * @param {number} x - A number.\n     * @returns {number} The number of decimal places.\n     * @private\n     */\n\n\n    helpers$1._decimalPlaces = function (x) {\n      if (!helpers$1.isFinite(x)) {\n        return;\n      }\n\n      var e = 1;\n      var p = 0;\n\n      while (Math.round(x * e) / e !== x) {\n        e *= 10;\n        p++;\n      }\n\n      return p;\n    }; // Gets the angle from vertical upright to the point about a centre.\n\n\n    helpers$1.getAngleFromPoint = function (centrePoint, anglePoint) {\n      var distanceFromXCenter = anglePoint.x - centrePoint.x;\n      var distanceFromYCenter = anglePoint.y - centrePoint.y;\n      var radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n      var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n\n      if (angle < -0.5 * Math.PI) {\n        angle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\n      }\n\n      return {\n        angle: angle,\n        distance: radialDistanceFromCenter\n      };\n    };\n\n    helpers$1.distanceBetweenPoints = function (pt1, pt2) {\n      return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n    };\n    /**\n     * Provided for backward compatibility, not available anymore\n     * @function Chart.helpers.aliasPixel\n     * @deprecated since version 2.8.0\n     * @todo remove at version 3\n     */\n\n\n    helpers$1.aliasPixel = function (pixelWidth) {\n      return pixelWidth % 2 === 0 ? 0 : 0.5;\n    };\n    /**\n     * Returns the aligned pixel value to avoid anti-aliasing blur\n     * @param {Chart} chart - The chart instance.\n     * @param {number} pixel - A pixel value.\n     * @param {number} width - The width of the element.\n     * @returns {number} The aligned pixel value.\n     * @private\n     */\n\n\n    helpers$1._alignPixel = function (chart, pixel, width) {\n      var devicePixelRatio = chart.currentDevicePixelRatio;\n      var halfWidth = width / 2;\n      return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n    };\n\n    helpers$1.splineCurve = function (firstPoint, middlePoint, afterPoint, t) {\n      // Props to Rob Spencer at scaled innovation for his post on splining between points\n      // http://scaledinnovation.com/analytics/splines/aboutSplines.html\n      // This function must also respect \"skipped\" points\n      var previous = firstPoint.skip ? middlePoint : firstPoint;\n      var current = middlePoint;\n      var next = afterPoint.skip ? middlePoint : afterPoint;\n      var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));\n      var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));\n      var s01 = d01 / (d01 + d12);\n      var s12 = d12 / (d01 + d12); // If all points are the same, s01 & s02 will be inf\n\n      s01 = isNaN(s01) ? 0 : s01;\n      s12 = isNaN(s12) ? 0 : s12;\n      var fa = t * s01; // scaling factor for triangle Ta\n\n      var fb = t * s12;\n      return {\n        previous: {\n          x: current.x - fa * (next.x - previous.x),\n          y: current.y - fa * (next.y - previous.y)\n        },\n        next: {\n          x: current.x + fb * (next.x - previous.x),\n          y: current.y + fb * (next.y - previous.y)\n        }\n      };\n    };\n\n    helpers$1.EPSILON = Number.EPSILON || 1e-14;\n\n    helpers$1.splineCurveMonotone = function (points) {\n      // This function calculates Bézier control points in a similar way than |splineCurve|,\n      // but preserves monotonicity of the provided data and ensures no local extremums are added\n      // between the dataset discrete points due to the interpolation.\n      // See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n      var pointsWithTangents = (points || []).map(function (point) {\n        return {\n          model: point._model,\n          deltaK: 0,\n          mK: 0\n        };\n      }); // Calculate slopes (deltaK) and initialize tangents (mK)\n\n      var pointsLen = pointsWithTangents.length;\n      var i, pointBefore, pointCurrent, pointAfter;\n\n      for (i = 0; i < pointsLen; ++i) {\n        pointCurrent = pointsWithTangents[i];\n\n        if (pointCurrent.model.skip) {\n          continue;\n        }\n\n        pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;\n        pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;\n\n        if (pointAfter && !pointAfter.model.skip) {\n          var slopeDeltaX = pointAfter.model.x - pointCurrent.model.x; // In the case of two points that appear at the same x pixel, slopeDeltaX is 0\n\n          pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;\n        }\n\n        if (!pointBefore || pointBefore.model.skip) {\n          pointCurrent.mK = pointCurrent.deltaK;\n        } else if (!pointAfter || pointAfter.model.skip) {\n          pointCurrent.mK = pointBefore.deltaK;\n        } else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {\n          pointCurrent.mK = 0;\n        } else {\n          pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;\n        }\n      } // Adjust tangents to ensure monotonic properties\n\n\n      var alphaK, betaK, tauK, squaredMagnitude;\n\n      for (i = 0; i < pointsLen - 1; ++i) {\n        pointCurrent = pointsWithTangents[i];\n        pointAfter = pointsWithTangents[i + 1];\n\n        if (pointCurrent.model.skip || pointAfter.model.skip) {\n          continue;\n        }\n\n        if (helpers$1.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {\n          pointCurrent.mK = pointAfter.mK = 0;\n          continue;\n        }\n\n        alphaK = pointCurrent.mK / pointCurrent.deltaK;\n        betaK = pointAfter.mK / pointCurrent.deltaK;\n        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n\n        if (squaredMagnitude <= 9) {\n          continue;\n        }\n\n        tauK = 3 / Math.sqrt(squaredMagnitude);\n        pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;\n        pointAfter.mK = betaK * tauK * pointCurrent.deltaK;\n      } // Compute control points\n\n\n      var deltaX;\n\n      for (i = 0; i < pointsLen; ++i) {\n        pointCurrent = pointsWithTangents[i];\n\n        if (pointCurrent.model.skip) {\n          continue;\n        }\n\n        pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;\n        pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;\n\n        if (pointBefore && !pointBefore.model.skip) {\n          deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;\n          pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;\n          pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;\n        }\n\n        if (pointAfter && !pointAfter.model.skip) {\n          deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;\n          pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;\n          pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;\n        }\n      }\n    };\n\n    helpers$1.nextItem = function (collection, index, loop) {\n      if (loop) {\n        return index >= collection.length - 1 ? collection[0] : collection[index + 1];\n      }\n\n      return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];\n    };\n\n    helpers$1.previousItem = function (collection, index, loop) {\n      if (loop) {\n        return index <= 0 ? collection[collection.length - 1] : collection[index - 1];\n      }\n\n      return index <= 0 ? collection[0] : collection[index - 1];\n    }; // Implementation of the nice number algorithm used in determining where axis labels will go\n\n\n    helpers$1.niceNum = function (range, round) {\n      var exponent = Math.floor(helpers$1.log10(range));\n      var fraction = range / Math.pow(10, exponent);\n      var niceFraction;\n\n      if (round) {\n        if (fraction < 1.5) {\n          niceFraction = 1;\n        } else if (fraction < 3) {\n          niceFraction = 2;\n        } else if (fraction < 7) {\n          niceFraction = 5;\n        } else {\n          niceFraction = 10;\n        }\n      } else if (fraction <= 1.0) {\n        niceFraction = 1;\n      } else if (fraction <= 2) {\n        niceFraction = 2;\n      } else if (fraction <= 5) {\n        niceFraction = 5;\n      } else {\n        niceFraction = 10;\n      }\n\n      return niceFraction * Math.pow(10, exponent);\n    }; // Request animation polyfill - https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/\n\n\n    helpers$1.requestAnimFrame = function () {\n      if (typeof window === 'undefined') {\n        return function (callback) {\n          callback();\n        };\n      }\n\n      return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n        return window.setTimeout(callback, 1000 / 60);\n      };\n    }(); // -- DOM methods\n\n\n    helpers$1.getRelativePosition = function (evt, chart) {\n      var mouseX, mouseY;\n      var e = evt.originalEvent || evt;\n      var canvas = evt.target || evt.srcElement;\n      var boundingRect = canvas.getBoundingClientRect();\n      var touches = e.touches;\n\n      if (touches && touches.length > 0) {\n        mouseX = touches[0].clientX;\n        mouseY = touches[0].clientY;\n      } else {\n        mouseX = e.clientX;\n        mouseY = e.clientY;\n      } // Scale mouse coordinates into canvas coordinates\n      // by following the pattern laid out by 'jerryj' in the comments of\n      // https://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/\n\n\n      var paddingLeft = parseFloat(helpers$1.getStyle(canvas, 'padding-left'));\n      var paddingTop = parseFloat(helpers$1.getStyle(canvas, 'padding-top'));\n      var paddingRight = parseFloat(helpers$1.getStyle(canvas, 'padding-right'));\n      var paddingBottom = parseFloat(helpers$1.getStyle(canvas, 'padding-bottom'));\n      var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;\n      var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom; // We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However\n      // the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here\n\n      mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / width * canvas.width / chart.currentDevicePixelRatio);\n      mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / height * canvas.height / chart.currentDevicePixelRatio);\n      return {\n        x: mouseX,\n        y: mouseY\n      };\n    }; // Private helper function to convert max-width/max-height values that may be percentages into a number\n\n\n    function parseMaxStyle(styleValue, node, parentProperty) {\n      var valueInPixels;\n\n      if (typeof styleValue === 'string') {\n        valueInPixels = parseInt(styleValue, 10);\n\n        if (styleValue.indexOf('%') !== -1) {\n          // percentage * size in dimension\n          valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n        }\n      } else {\n        valueInPixels = styleValue;\n      }\n\n      return valueInPixels;\n    }\n    /**\n     * Returns if the given value contains an effective constraint.\n     * @private\n     */\n\n\n    function isConstrainedValue(value) {\n      return value !== undefined && value !== null && value !== 'none';\n    }\n    /**\n     * Returns the max width or height of the given DOM node in a cross-browser compatible fashion\n     * @param {HTMLElement} domNode - the node to check the constraint on\n     * @param {string} maxStyle - the style that defines the maximum for the direction we are using ('max-width' / 'max-height')\n     * @param {string} percentageProperty - property of parent to use when calculating width as a percentage\n     * @see {@link https://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser}\n     */\n\n\n    function getConstraintDimension(domNode, maxStyle, percentageProperty) {\n      var view = document.defaultView;\n\n      var parentNode = helpers$1._getParentNode(domNode);\n\n      var constrainedNode = view.getComputedStyle(domNode)[maxStyle];\n      var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];\n      var hasCNode = isConstrainedValue(constrainedNode);\n      var hasCContainer = isConstrainedValue(constrainedContainer);\n      var infinity = Number.POSITIVE_INFINITY;\n\n      if (hasCNode || hasCContainer) {\n        return Math.min(hasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity, hasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);\n      }\n\n      return 'none';\n    } // returns Number or undefined if no constraint\n\n\n    helpers$1.getConstraintWidth = function (domNode) {\n      return getConstraintDimension(domNode, 'max-width', 'clientWidth');\n    }; // returns Number or undefined if no constraint\n\n\n    helpers$1.getConstraintHeight = function (domNode) {\n      return getConstraintDimension(domNode, 'max-height', 'clientHeight');\n    };\n    /**\n     * @private\n    \t */\n\n\n    helpers$1._calculatePadding = function (container, padding, parentDimension) {\n      padding = helpers$1.getStyle(container, padding);\n      return padding.indexOf('%') > -1 ? parentDimension * parseInt(padding, 10) / 100 : parseInt(padding, 10);\n    };\n    /**\n     * @private\n     */\n\n\n    helpers$1._getParentNode = function (domNode) {\n      var parent = domNode.parentNode;\n\n      if (parent && parent.toString() === '[object ShadowRoot]') {\n        parent = parent.host;\n      }\n\n      return parent;\n    };\n\n    helpers$1.getMaximumWidth = function (domNode) {\n      var container = helpers$1._getParentNode(domNode);\n\n      if (!container) {\n        return domNode.clientWidth;\n      }\n\n      var clientWidth = container.clientWidth;\n\n      var paddingLeft = helpers$1._calculatePadding(container, 'padding-left', clientWidth);\n\n      var paddingRight = helpers$1._calculatePadding(container, 'padding-right', clientWidth);\n\n      var w = clientWidth - paddingLeft - paddingRight;\n      var cw = helpers$1.getConstraintWidth(domNode);\n      return isNaN(cw) ? w : Math.min(w, cw);\n    };\n\n    helpers$1.getMaximumHeight = function (domNode) {\n      var container = helpers$1._getParentNode(domNode);\n\n      if (!container) {\n        return domNode.clientHeight;\n      }\n\n      var clientHeight = container.clientHeight;\n\n      var paddingTop = helpers$1._calculatePadding(container, 'padding-top', clientHeight);\n\n      var paddingBottom = helpers$1._calculatePadding(container, 'padding-bottom', clientHeight);\n\n      var h = clientHeight - paddingTop - paddingBottom;\n      var ch = helpers$1.getConstraintHeight(domNode);\n      return isNaN(ch) ? h : Math.min(h, ch);\n    };\n\n    helpers$1.getStyle = function (el, property) {\n      return el.currentStyle ? el.currentStyle[property] : document.defaultView.getComputedStyle(el, null).getPropertyValue(property);\n    };\n\n    helpers$1.retinaScale = function (chart, forceRatio) {\n      var pixelRatio = chart.currentDevicePixelRatio = forceRatio || typeof window !== 'undefined' && window.devicePixelRatio || 1;\n\n      if (pixelRatio === 1) {\n        return;\n      }\n\n      var canvas = chart.canvas;\n      var height = chart.height;\n      var width = chart.width;\n      canvas.height = height * pixelRatio;\n      canvas.width = width * pixelRatio;\n      chart.ctx.scale(pixelRatio, pixelRatio); // If no style has been set on the canvas, the render size is used as display size,\n      // making the chart visually bigger, so let's enforce it to the \"correct\" values.\n      // See https://github.com/chartjs/Chart.js/issues/3575\n\n      if (!canvas.style.height && !canvas.style.width) {\n        canvas.style.height = height + 'px';\n        canvas.style.width = width + 'px';\n      }\n    }; // -- Canvas methods\n\n\n    helpers$1.fontString = function (pixelSize, fontStyle, fontFamily) {\n      return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n    };\n\n    helpers$1.longestText = function (ctx, font, arrayOfThings, cache) {\n      cache = cache || {};\n      var data = cache.data = cache.data || {};\n      var gc = cache.garbageCollect = cache.garbageCollect || [];\n\n      if (cache.font !== font) {\n        data = cache.data = {};\n        gc = cache.garbageCollect = [];\n        cache.font = font;\n      }\n\n      ctx.font = font;\n      var longest = 0;\n      helpers$1.each(arrayOfThings, function (thing) {\n        // Undefined strings and arrays should not be measured\n        if (thing !== undefined && thing !== null && helpers$1.isArray(thing) !== true) {\n          longest = helpers$1.measureText(ctx, data, gc, longest, thing);\n        } else if (helpers$1.isArray(thing)) {\n          // if it is an array lets measure each element\n          // to do maybe simplify this function a bit so we can do this more recursively?\n          helpers$1.each(thing, function (nestedThing) {\n            // Undefined strings and arrays should not be measured\n            if (nestedThing !== undefined && nestedThing !== null && !helpers$1.isArray(nestedThing)) {\n              longest = helpers$1.measureText(ctx, data, gc, longest, nestedThing);\n            }\n          });\n        }\n      });\n      var gcLen = gc.length / 2;\n\n      if (gcLen > arrayOfThings.length) {\n        for (var i = 0; i < gcLen; i++) {\n          delete data[gc[i]];\n        }\n\n        gc.splice(0, gcLen);\n      }\n\n      return longest;\n    };\n\n    helpers$1.measureText = function (ctx, data, gc, longest, string) {\n      var textWidth = data[string];\n\n      if (!textWidth) {\n        textWidth = data[string] = ctx.measureText(string).width;\n        gc.push(string);\n      }\n\n      if (textWidth > longest) {\n        longest = textWidth;\n      }\n\n      return longest;\n    };\n\n    helpers$1.numberOfLabelLines = function (arrayOfThings) {\n      var numberOfLines = 1;\n      helpers$1.each(arrayOfThings, function (thing) {\n        if (helpers$1.isArray(thing)) {\n          if (thing.length > numberOfLines) {\n            numberOfLines = thing.length;\n          }\n        }\n      });\n      return numberOfLines;\n    };\n\n    helpers$1.color = !chartjsColor ? function (value) {\n      console.error('Color.js not found!');\n      return value;\n    } : function (value) {\n      /* global CanvasGradient */\n      if (value instanceof CanvasGradient) {\n        value = core_defaults.global.defaultColor;\n      }\n\n      return chartjsColor(value);\n    };\n\n    helpers$1.getHoverColor = function (colorValue) {\n      /* global CanvasPattern */\n      return colorValue instanceof CanvasPattern || colorValue instanceof CanvasGradient ? colorValue : helpers$1.color(colorValue).saturate(0.5).darken(0.1).rgbString();\n    };\n  };\n\n  function abstract() {\n    throw new Error('This method is not implemented: either no adapter can ' + 'be found or an incomplete integration was provided.');\n  }\n  /**\n   * Date adapter (current used by the time scale)\n   * @namespace Chart._adapters._date\n   * @memberof Chart._adapters\n   * @private\n   */\n\n  /**\n   * Currently supported unit string values.\n   * @typedef {('millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year')}\n   * @memberof Chart._adapters._date\n   * @name Unit\n   */\n\n  /**\n   * @class\n   */\n\n\n  function DateAdapter(options) {\n    this.options = options || {};\n  }\n\n  helpers$1.extend(DateAdapter.prototype,\n  /** @lends DateAdapter */\n  {\n    /**\n     * Returns a map of time formats for the supported formatting units defined\n     * in Unit as well as 'datetime' representing a detailed date/time string.\n     * @returns {{string: string}}\n     */\n    formats: abstract,\n\n    /**\n     * Parses the given `value` and return the associated timestamp.\n     * @param {any} value - the value to parse (usually comes from the data)\n     * @param {string} [format] - the expected data format\n     * @returns {(number|null)}\n     * @function\n     */\n    parse: abstract,\n\n    /**\n     * Returns the formatted date in the specified `format` for a given `timestamp`.\n     * @param {number} timestamp - the timestamp to format\n     * @param {string} format - the date/time token\n     * @return {string}\n     * @function\n     */\n    format: abstract,\n\n    /**\n     * Adds the specified `amount` of `unit` to the given `timestamp`.\n     * @param {number} timestamp - the input timestamp\n     * @param {number} amount - the amount to add\n     * @param {Unit} unit - the unit as string\n     * @return {number}\n     * @function\n     */\n    add: abstract,\n\n    /**\n     * Returns the number of `unit` between the given timestamps.\n     * @param {number} max - the input timestamp (reference)\n     * @param {number} min - the timestamp to substract\n     * @param {Unit} unit - the unit as string\n     * @return {number}\n     * @function\n     */\n    diff: abstract,\n\n    /**\n     * Returns start of `unit` for the given `timestamp`.\n     * @param {number} timestamp - the input timestamp\n     * @param {Unit} unit - the unit as string\n     * @param {number} [weekday] - the ISO day of the week with 1 being Monday\n     * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n     * @function\n     */\n    startOf: abstract,\n\n    /**\n     * Returns end of `unit` for the given `timestamp`.\n     * @param {number} timestamp - the input timestamp\n     * @param {Unit} unit - the unit as string\n     * @function\n     */\n    endOf: abstract,\n    // DEPRECATIONS\n\n    /**\n     * Provided for backward compatibility for scale.getValueForPixel(),\n     * this method should be overridden only by the moment adapter.\n     * @deprecated since version 2.8.0\n     * @todo remove at version 3\n     * @private\n     */\n    _create: function _create(value) {\n      return value;\n    }\n  });\n\n  DateAdapter.override = function (members) {\n    helpers$1.extend(DateAdapter.prototype, members);\n  };\n\n  var _date = DateAdapter;\n  var core_adapters = {\n    _date: _date\n  };\n  /**\n   * Namespace to hold static tick generation functions\n   * @namespace Chart.Ticks\n   */\n\n  var core_ticks = {\n    /**\n     * Namespace to hold formatters for different types of ticks\n     * @namespace Chart.Ticks.formatters\n     */\n    formatters: {\n      /**\n       * Formatter for value labels\n       * @method Chart.Ticks.formatters.values\n       * @param value the value to display\n       * @return {string|string[]} the label to display\n       */\n      values: function values(value) {\n        return helpers$1.isArray(value) ? value : '' + value;\n      },\n\n      /**\n       * Formatter for linear numeric ticks\n       * @method Chart.Ticks.formatters.linear\n       * @param tickValue {number} the value to be formatted\n       * @param index {number} the position of the tickValue parameter in the ticks array\n       * @param ticks {number[]} the list of ticks being converted\n       * @return {string} string representation of the tickValue parameter\n       */\n      linear: function linear(tickValue, index, ticks) {\n        // If we have lots of ticks, don't use the ones\n        var delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0]; // If we have a number like 2.5 as the delta, figure out how many decimal places we need\n\n        if (Math.abs(delta) > 1) {\n          if (tickValue !== Math.floor(tickValue)) {\n            // not an integer\n            delta = tickValue - Math.floor(tickValue);\n          }\n        }\n\n        var logDelta = helpers$1.log10(Math.abs(delta));\n        var tickString = '';\n\n        if (tickValue !== 0) {\n          var maxTick = Math.max(Math.abs(ticks[0]), Math.abs(ticks[ticks.length - 1]));\n\n          if (maxTick < 1e-4) {\n            // all ticks are small numbers; use scientific notation\n            var logTick = helpers$1.log10(Math.abs(tickValue));\n            tickString = tickValue.toExponential(Math.floor(logTick) - Math.floor(logDelta));\n          } else {\n            var numDecimal = -1 * Math.floor(logDelta);\n            numDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places\n\n            tickString = tickValue.toFixed(numDecimal);\n          }\n        } else {\n          tickString = '0'; // never show decimal places for 0\n        }\n\n        return tickString;\n      },\n      logarithmic: function logarithmic(tickValue, index, ticks) {\n        var remain = tickValue / Math.pow(10, Math.floor(helpers$1.log10(tickValue)));\n\n        if (tickValue === 0) {\n          return '0';\n        } else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {\n          return tickValue.toExponential();\n        }\n\n        return '';\n      }\n    }\n  };\n  var valueOrDefault$9 = helpers$1.valueOrDefault;\n  var valueAtIndexOrDefault = helpers$1.valueAtIndexOrDefault;\n\n  core_defaults._set('scale', {\n    display: true,\n    position: 'left',\n    offset: false,\n    // grid line settings\n    gridLines: {\n      display: true,\n      color: 'rgba(0, 0, 0, 0.1)',\n      lineWidth: 1,\n      drawBorder: true,\n      drawOnChartArea: true,\n      drawTicks: true,\n      tickMarkLength: 10,\n      zeroLineWidth: 1,\n      zeroLineColor: 'rgba(0,0,0,0.25)',\n      zeroLineBorderDash: [],\n      zeroLineBorderDashOffset: 0.0,\n      offsetGridLines: false,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n    // scale label\n    scaleLabel: {\n      // display property\n      display: false,\n      // actual label\n      labelString: '',\n      // top/bottom padding\n      padding: {\n        top: 4,\n        bottom: 4\n      }\n    },\n    // label settings\n    ticks: {\n      beginAtZero: false,\n      minRotation: 0,\n      maxRotation: 50,\n      mirror: false,\n      padding: 0,\n      reverse: false,\n      display: true,\n      autoSkip: true,\n      autoSkipPadding: 0,\n      labelOffset: 0,\n      // We pass through arrays to be rendered as multiline labels, we convert Others to strings here.\n      callback: core_ticks.formatters.values,\n      minor: {},\n      major: {}\n    }\n  });\n\n  function labelsFromTicks(ticks) {\n    var labels = [];\n    var i, ilen;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      labels.push(ticks[i].label);\n    }\n\n    return labels;\n  }\n\n  function getPixelForGridLine(scale, index, offsetGridLines) {\n    var lineValue = scale.getPixelForTick(index);\n\n    if (offsetGridLines) {\n      if (scale.getTicks().length === 1) {\n        lineValue -= scale.isHorizontal() ? Math.max(lineValue - scale.left, scale.right - lineValue) : Math.max(lineValue - scale.top, scale.bottom - lineValue);\n      } else if (index === 0) {\n        lineValue -= (scale.getPixelForTick(1) - lineValue) / 2;\n      } else {\n        lineValue -= (lineValue - scale.getPixelForTick(index - 1)) / 2;\n      }\n    }\n\n    return lineValue;\n  }\n\n  function computeTextSize(context, tick, font) {\n    return helpers$1.isArray(tick) ? helpers$1.longestText(context, font, tick) : context.measureText(tick).width;\n  }\n\n  var core_scale = core_element.extend({\n    /**\n     * Get the padding needed for the scale\n     * @method getPadding\n     * @private\n     * @returns {Padding} the necessary padding\n     */\n    getPadding: function getPadding() {\n      var me = this;\n      return {\n        left: me.paddingLeft || 0,\n        top: me.paddingTop || 0,\n        right: me.paddingRight || 0,\n        bottom: me.paddingBottom || 0\n      };\n    },\n\n    /**\n     * Returns the scale tick objects ({label, major})\n     * @since 2.7\n     */\n    getTicks: function getTicks() {\n      return this._ticks;\n    },\n    // These methods are ordered by lifecyle. Utilities then follow.\n    // Any function defined here is inherited by all scale types.\n    // Any function can be extended by the scale type\n    mergeTicksOptions: function mergeTicksOptions() {\n      var ticks = this.options.ticks;\n\n      if (ticks.minor === false) {\n        ticks.minor = {\n          display: false\n        };\n      }\n\n      if (ticks.major === false) {\n        ticks.major = {\n          display: false\n        };\n      }\n\n      for (var key in ticks) {\n        if (key !== 'major' && key !== 'minor') {\n          if (typeof ticks.minor[key] === 'undefined') {\n            ticks.minor[key] = ticks[key];\n          }\n\n          if (typeof ticks.major[key] === 'undefined') {\n            ticks.major[key] = ticks[key];\n          }\n        }\n      }\n    },\n    beforeUpdate: function beforeUpdate() {\n      helpers$1.callback(this.options.beforeUpdate, [this]);\n    },\n    update: function update(maxWidth, maxHeight, margins) {\n      var me = this;\n      var i, ilen, labels, label, ticks, tick; // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\n      me.beforeUpdate(); // Absorb the master measurements\n\n      me.maxWidth = maxWidth;\n      me.maxHeight = maxHeight;\n      me.margins = helpers$1.extend({\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0\n      }, margins);\n      me._maxLabelLines = 0;\n      me.longestLabelWidth = 0;\n      me.longestTextCache = me.longestTextCache || {}; // Dimensions\n\n      me.beforeSetDimensions();\n      me.setDimensions();\n      me.afterSetDimensions(); // Data min/max\n\n      me.beforeDataLimits();\n      me.determineDataLimits();\n      me.afterDataLimits(); // Ticks - `this.ticks` is now DEPRECATED!\n      // Internal ticks are now stored as objects in the PRIVATE `this._ticks` member\n      // and must not be accessed directly from outside this class. `this.ticks` being\n      // around for long time and not marked as private, we can't change its structure\n      // without unexpected breaking changes. If you need to access the scale ticks,\n      // use scale.getTicks() instead.\n\n      me.beforeBuildTicks(); // New implementations should return an array of objects but for BACKWARD COMPAT,\n      // we still support no return (`this.ticks` internally set by calling this method).\n\n      ticks = me.buildTicks() || []; // Allow modification of ticks in callback.\n\n      ticks = me.afterBuildTicks(ticks) || ticks;\n      me.beforeTickToLabelConversion(); // New implementations should return the formatted tick labels but for BACKWARD\n      // COMPAT, we still support no return (`this.ticks` internally changed by calling\n      // this method and supposed to contain only string values).\n\n      labels = me.convertTicksToLabels(ticks) || me.ticks;\n      me.afterTickToLabelConversion();\n      me.ticks = labels; // BACKWARD COMPATIBILITY\n      // IMPORTANT: from this point, we consider that `this.ticks` will NEVER change!\n      // BACKWARD COMPAT: synchronize `_ticks` with labels (so potentially `this.ticks`)\n\n      for (i = 0, ilen = labels.length; i < ilen; ++i) {\n        label = labels[i];\n        tick = ticks[i];\n\n        if (!tick) {\n          ticks.push(tick = {\n            label: label,\n            major: false\n          });\n        } else {\n          tick.label = label;\n        }\n      }\n\n      me._ticks = ticks; // Tick Rotation\n\n      me.beforeCalculateTickRotation();\n      me.calculateTickRotation();\n      me.afterCalculateTickRotation(); // Fit\n\n      me.beforeFit();\n      me.fit();\n      me.afterFit(); //\n\n      me.afterUpdate();\n      return me.minSize;\n    },\n    afterUpdate: function afterUpdate() {\n      helpers$1.callback(this.options.afterUpdate, [this]);\n    },\n    //\n    beforeSetDimensions: function beforeSetDimensions() {\n      helpers$1.callback(this.options.beforeSetDimensions, [this]);\n    },\n    setDimensions: function setDimensions() {\n      var me = this; // Set the unconstrained dimension before label rotation\n\n      if (me.isHorizontal()) {\n        // Reset position before calculating rotation\n        me.width = me.maxWidth;\n        me.left = 0;\n        me.right = me.width;\n      } else {\n        me.height = me.maxHeight; // Reset position before calculating rotation\n\n        me.top = 0;\n        me.bottom = me.height;\n      } // Reset padding\n\n\n      me.paddingLeft = 0;\n      me.paddingTop = 0;\n      me.paddingRight = 0;\n      me.paddingBottom = 0;\n    },\n    afterSetDimensions: function afterSetDimensions() {\n      helpers$1.callback(this.options.afterSetDimensions, [this]);\n    },\n    // Data limits\n    beforeDataLimits: function beforeDataLimits() {\n      helpers$1.callback(this.options.beforeDataLimits, [this]);\n    },\n    determineDataLimits: helpers$1.noop,\n    afterDataLimits: function afterDataLimits() {\n      helpers$1.callback(this.options.afterDataLimits, [this]);\n    },\n    //\n    beforeBuildTicks: function beforeBuildTicks() {\n      helpers$1.callback(this.options.beforeBuildTicks, [this]);\n    },\n    buildTicks: helpers$1.noop,\n    afterBuildTicks: function afterBuildTicks(ticks) {\n      var me = this; // ticks is empty for old axis implementations here\n\n      if (helpers$1.isArray(ticks) && ticks.length) {\n        return helpers$1.callback(me.options.afterBuildTicks, [me, ticks]);\n      } // Support old implementations (that modified `this.ticks` directly in buildTicks)\n\n\n      me.ticks = helpers$1.callback(me.options.afterBuildTicks, [me, me.ticks]) || me.ticks;\n      return ticks;\n    },\n    beforeTickToLabelConversion: function beforeTickToLabelConversion() {\n      helpers$1.callback(this.options.beforeTickToLabelConversion, [this]);\n    },\n    convertTicksToLabels: function convertTicksToLabels() {\n      var me = this; // Convert ticks to strings\n\n      var tickOpts = me.options.ticks;\n      me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback, this);\n    },\n    afterTickToLabelConversion: function afterTickToLabelConversion() {\n      helpers$1.callback(this.options.afterTickToLabelConversion, [this]);\n    },\n    //\n    beforeCalculateTickRotation: function beforeCalculateTickRotation() {\n      helpers$1.callback(this.options.beforeCalculateTickRotation, [this]);\n    },\n    calculateTickRotation: function calculateTickRotation() {\n      var me = this;\n      var context = me.ctx;\n      var tickOpts = me.options.ticks;\n      var labels = labelsFromTicks(me._ticks); // Get the width of each grid by calculating the difference\n      // between x offsets between 0 and 1.\n\n      var tickFont = helpers$1.options._parseFont(tickOpts);\n\n      context.font = tickFont.string;\n      var labelRotation = tickOpts.minRotation || 0;\n\n      if (labels.length && me.options.display && me.isHorizontal()) {\n        var originalLabelWidth = helpers$1.longestText(context, tickFont.string, labels, me.longestTextCache);\n        var labelWidth = originalLabelWidth;\n        var cosRotation, sinRotation; // Allow 3 pixels x2 padding either side for label readability\n\n        var tickWidth = me.getPixelForTick(1) - me.getPixelForTick(0) - 6; // Max label rotation can be set or default to 90 - also act as a loop counter\n\n        while (labelWidth > tickWidth && labelRotation < tickOpts.maxRotation) {\n          var angleRadians = helpers$1.toRadians(labelRotation);\n          cosRotation = Math.cos(angleRadians);\n          sinRotation = Math.sin(angleRadians);\n\n          if (sinRotation * originalLabelWidth > me.maxHeight) {\n            // go back one step\n            labelRotation--;\n            break;\n          }\n\n          labelRotation++;\n          labelWidth = cosRotation * originalLabelWidth;\n        }\n      }\n\n      me.labelRotation = labelRotation;\n    },\n    afterCalculateTickRotation: function afterCalculateTickRotation() {\n      helpers$1.callback(this.options.afterCalculateTickRotation, [this]);\n    },\n    //\n    beforeFit: function beforeFit() {\n      helpers$1.callback(this.options.beforeFit, [this]);\n    },\n    fit: function fit() {\n      var me = this; // Reset\n\n      var minSize = me.minSize = {\n        width: 0,\n        height: 0\n      };\n      var labels = labelsFromTicks(me._ticks);\n      var opts = me.options;\n      var tickOpts = opts.ticks;\n      var scaleLabelOpts = opts.scaleLabel;\n      var gridLineOpts = opts.gridLines;\n\n      var display = me._isVisible();\n\n      var position = opts.position;\n      var isHorizontal = me.isHorizontal();\n      var parseFont = helpers$1.options._parseFont;\n      var tickFont = parseFont(tickOpts);\n      var tickMarkLength = opts.gridLines.tickMarkLength; // Width\n\n      if (isHorizontal) {\n        // subtract the margins to line up with the chartArea if we are a full width scale\n        minSize.width = me.isFullWidth() ? me.maxWidth - me.margins.left - me.margins.right : me.maxWidth;\n      } else {\n        minSize.width = display && gridLineOpts.drawTicks ? tickMarkLength : 0;\n      } // height\n\n\n      if (isHorizontal) {\n        minSize.height = display && gridLineOpts.drawTicks ? tickMarkLength : 0;\n      } else {\n        minSize.height = me.maxHeight; // fill all the height\n      } // Are we showing a title for the scale?\n\n\n      if (scaleLabelOpts.display && display) {\n        var scaleLabelFont = parseFont(scaleLabelOpts);\n        var scaleLabelPadding = helpers$1.options.toPadding(scaleLabelOpts.padding);\n        var deltaHeight = scaleLabelFont.lineHeight + scaleLabelPadding.height;\n\n        if (isHorizontal) {\n          minSize.height += deltaHeight;\n        } else {\n          minSize.width += deltaHeight;\n        }\n      } // Don't bother fitting the ticks if we are not showing the labels\n\n\n      if (tickOpts.display && display) {\n        var largestTextWidth = helpers$1.longestText(me.ctx, tickFont.string, labels, me.longestTextCache);\n        var tallestLabelHeightInLines = helpers$1.numberOfLabelLines(labels);\n        var lineSpace = tickFont.size * 0.5;\n        var tickPadding = me.options.ticks.padding; // Store max number of lines and widest label for _autoSkip\n\n        me._maxLabelLines = tallestLabelHeightInLines;\n        me.longestLabelWidth = largestTextWidth;\n\n        if (isHorizontal) {\n          var angleRadians = helpers$1.toRadians(me.labelRotation);\n          var cosRotation = Math.cos(angleRadians);\n          var sinRotation = Math.sin(angleRadians); // TODO - improve this calculation\n\n          var labelHeight = sinRotation * largestTextWidth + tickFont.lineHeight * tallestLabelHeightInLines + lineSpace; // padding\n\n          minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);\n          me.ctx.font = tickFont.string;\n          var firstLabelWidth = computeTextSize(me.ctx, labels[0], tickFont.string);\n          var lastLabelWidth = computeTextSize(me.ctx, labels[labels.length - 1], tickFont.string);\n          var offsetLeft = me.getPixelForTick(0) - me.left;\n          var offsetRight = me.right - me.getPixelForTick(labels.length - 1);\n          var paddingLeft, paddingRight; // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n          // which means that the right padding is dominated by the font height\n\n          if (me.labelRotation !== 0) {\n            paddingLeft = position === 'bottom' ? cosRotation * firstLabelWidth : cosRotation * lineSpace;\n            paddingRight = position === 'bottom' ? cosRotation * lineSpace : cosRotation * lastLabelWidth;\n          } else {\n            paddingLeft = firstLabelWidth / 2;\n            paddingRight = lastLabelWidth / 2;\n          }\n\n          me.paddingLeft = Math.max(paddingLeft - offsetLeft, 0) + 3; // add 3 px to move away from canvas edges\n\n          me.paddingRight = Math.max(paddingRight - offsetRight, 0) + 3;\n        } else {\n          // A vertical axis is more constrained by the width. Labels are the\n          // dominant factor here, so get that length first and account for padding\n          if (tickOpts.mirror) {\n            largestTextWidth = 0;\n          } else {\n            // use lineSpace for consistency with horizontal axis\n            // tickPadding is not implemented for horizontal\n            largestTextWidth += tickPadding + lineSpace;\n          }\n\n          minSize.width = Math.min(me.maxWidth, minSize.width + largestTextWidth);\n          me.paddingTop = tickFont.size / 2;\n          me.paddingBottom = tickFont.size / 2;\n        }\n      }\n\n      me.handleMargins();\n      me.width = minSize.width;\n      me.height = minSize.height;\n    },\n\n    /**\n     * Handle margins and padding interactions\n     * @private\n     */\n    handleMargins: function handleMargins() {\n      var me = this;\n\n      if (me.margins) {\n        me.paddingLeft = Math.max(me.paddingLeft - me.margins.left, 0);\n        me.paddingTop = Math.max(me.paddingTop - me.margins.top, 0);\n        me.paddingRight = Math.max(me.paddingRight - me.margins.right, 0);\n        me.paddingBottom = Math.max(me.paddingBottom - me.margins.bottom, 0);\n      }\n    },\n    afterFit: function afterFit() {\n      helpers$1.callback(this.options.afterFit, [this]);\n    },\n    // Shared Methods\n    isHorizontal: function isHorizontal() {\n      return this.options.position === 'top' || this.options.position === 'bottom';\n    },\n    isFullWidth: function isFullWidth() {\n      return this.options.fullWidth;\n    },\n    // Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not\n    getRightValue: function getRightValue(rawValue) {\n      // Null and undefined values first\n      if (helpers$1.isNullOrUndef(rawValue)) {\n        return NaN;\n      } // isNaN(object) returns true, so make sure NaN is checking for a number; Discard Infinite values\n\n\n      if ((typeof rawValue === 'number' || rawValue instanceof Number) && !isFinite(rawValue)) {\n        return NaN;\n      } // If it is in fact an object, dive in one more level\n\n\n      if (rawValue) {\n        if (this.isHorizontal()) {\n          if (rawValue.x !== undefined) {\n            return this.getRightValue(rawValue.x);\n          }\n        } else if (rawValue.y !== undefined) {\n          return this.getRightValue(rawValue.y);\n        }\n      } // Value is good, return it\n\n\n      return rawValue;\n    },\n\n    /**\n     * Used to get the value to display in the tooltip for the data at the given index\n     * @param index\n     * @param datasetIndex\n     */\n    getLabelForIndex: helpers$1.noop,\n\n    /**\n     * Returns the location of the given data point. Value can either be an index or a numerical value\n     * The coordinate (0, 0) is at the upper-left corner of the canvas\n     * @param value\n     * @param index\n     * @param datasetIndex\n     */\n    getPixelForValue: helpers$1.noop,\n\n    /**\n     * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n     * The coordinate (0, 0) is at the upper-left corner of the canvas\n     * @param pixel\n     */\n    getValueForPixel: helpers$1.noop,\n\n    /**\n     * Returns the location of the tick at the given index\n     * The coordinate (0, 0) is at the upper-left corner of the canvas\n     */\n    getPixelForTick: function getPixelForTick(index) {\n      var me = this;\n      var offset = me.options.offset;\n\n      if (me.isHorizontal()) {\n        var innerWidth = me.width - (me.paddingLeft + me.paddingRight);\n        var tickWidth = innerWidth / Math.max(me._ticks.length - (offset ? 0 : 1), 1);\n        var pixel = tickWidth * index + me.paddingLeft;\n\n        if (offset) {\n          pixel += tickWidth / 2;\n        }\n\n        var finalVal = me.left + pixel;\n        finalVal += me.isFullWidth() ? me.margins.left : 0;\n        return finalVal;\n      }\n\n      var innerHeight = me.height - (me.paddingTop + me.paddingBottom);\n      return me.top + index * (innerHeight / (me._ticks.length - 1));\n    },\n\n    /**\n     * Utility for getting the pixel location of a percentage of scale\n     * The coordinate (0, 0) is at the upper-left corner of the canvas\n     */\n    getPixelForDecimal: function getPixelForDecimal(decimal) {\n      var me = this;\n\n      if (me.isHorizontal()) {\n        var innerWidth = me.width - (me.paddingLeft + me.paddingRight);\n        var valueOffset = innerWidth * decimal + me.paddingLeft;\n        var finalVal = me.left + valueOffset;\n        finalVal += me.isFullWidth() ? me.margins.left : 0;\n        return finalVal;\n      }\n\n      return me.top + decimal * me.height;\n    },\n\n    /**\n     * Returns the pixel for the minimum chart value\n     * The coordinate (0, 0) is at the upper-left corner of the canvas\n     */\n    getBasePixel: function getBasePixel() {\n      return this.getPixelForValue(this.getBaseValue());\n    },\n    getBaseValue: function getBaseValue() {\n      var me = this;\n      var min = me.min;\n      var max = me.max;\n      return me.beginAtZero ? 0 : min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    },\n\n    /**\n     * Returns a subset of ticks to be plotted to avoid overlapping labels.\n     * @private\n     */\n    _autoSkip: function _autoSkip(ticks) {\n      var me = this;\n      var isHorizontal = me.isHorizontal();\n      var optionTicks = me.options.ticks.minor;\n      var tickCount = ticks.length;\n      var skipRatio = false;\n      var maxTicks = optionTicks.maxTicksLimit; // Total space needed to display all ticks. First and last ticks are\n      // drawn as their center at end of axis, so tickCount-1\n\n      var ticksLength = me._tickSize() * (tickCount - 1); // Axis length\n\n      var axisLength = isHorizontal ? me.width - (me.paddingLeft + me.paddingRight) : me.height - (me.paddingTop + me.PaddingBottom);\n      var result = [];\n      var i, tick;\n\n      if (ticksLength > axisLength) {\n        skipRatio = 1 + Math.floor(ticksLength / axisLength);\n      } // if they defined a max number of optionTicks,\n      // increase skipRatio until that number is met\n\n\n      if (tickCount > maxTicks) {\n        skipRatio = Math.max(skipRatio, 1 + Math.floor(tickCount / maxTicks));\n      }\n\n      for (i = 0; i < tickCount; i++) {\n        tick = ticks[i];\n\n        if (skipRatio > 1 && i % skipRatio > 0) {\n          // leave tick in place but make sure it's not displayed (#4635)\n          delete tick.label;\n        }\n\n        result.push(tick);\n      }\n\n      return result;\n    },\n\n    /**\n     * @private\n     */\n    _tickSize: function _tickSize() {\n      var me = this;\n      var isHorizontal = me.isHorizontal();\n      var optionTicks = me.options.ticks.minor; // Calculate space needed by label in axis direction.\n\n      var rot = helpers$1.toRadians(me.labelRotation);\n      var cos = Math.abs(Math.cos(rot));\n      var sin = Math.abs(Math.sin(rot));\n      var padding = optionTicks.autoSkipPadding || 0;\n      var w = me.longestLabelWidth + padding || 0;\n\n      var tickFont = helpers$1.options._parseFont(optionTicks);\n\n      var h = me._maxLabelLines * tickFont.lineHeight + padding || 0; // Calculate space needed for 1 tick in axis direction.\n\n      return isHorizontal ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    },\n\n    /**\n     * @private\n     */\n    _isVisible: function _isVisible() {\n      var me = this;\n      var chart = me.chart;\n      var display = me.options.display;\n      var i, ilen, meta;\n\n      if (display !== 'auto') {\n        return !!display;\n      } // When 'auto', the scale is visible if at least one associated dataset is visible.\n\n\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n\n          if (meta.xAxisID === me.id || meta.yAxisID === me.id) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Actually draw the scale on the canvas\n     * @param {object} chartArea - the area of the chart to draw full grid lines on\n     */\n    draw: function draw(chartArea) {\n      var me = this;\n      var options = me.options;\n\n      if (!me._isVisible()) {\n        return;\n      }\n\n      var chart = me.chart;\n      var context = me.ctx;\n      var globalDefaults = core_defaults.global;\n      var defaultFontColor = globalDefaults.defaultFontColor;\n      var optionTicks = options.ticks.minor;\n      var optionMajorTicks = options.ticks.major || optionTicks;\n      var gridLines = options.gridLines;\n      var scaleLabel = options.scaleLabel;\n      var position = options.position;\n      var isRotated = me.labelRotation !== 0;\n      var isMirrored = optionTicks.mirror;\n      var isHorizontal = me.isHorizontal();\n      var parseFont = helpers$1.options._parseFont;\n      var ticks = optionTicks.display && optionTicks.autoSkip ? me._autoSkip(me.getTicks()) : me.getTicks();\n      var tickFontColor = valueOrDefault$9(optionTicks.fontColor, defaultFontColor);\n      var tickFont = parseFont(optionTicks);\n      var lineHeight = tickFont.lineHeight;\n      var majorTickFontColor = valueOrDefault$9(optionMajorTicks.fontColor, defaultFontColor);\n      var majorTickFont = parseFont(optionMajorTicks);\n      var tickPadding = optionTicks.padding;\n      var labelOffset = optionTicks.labelOffset;\n      var tl = gridLines.drawTicks ? gridLines.tickMarkLength : 0;\n      var scaleLabelFontColor = valueOrDefault$9(scaleLabel.fontColor, defaultFontColor);\n      var scaleLabelFont = parseFont(scaleLabel);\n      var scaleLabelPadding = helpers$1.options.toPadding(scaleLabel.padding);\n      var labelRotationRadians = helpers$1.toRadians(me.labelRotation);\n      var itemsToDraw = [];\n      var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;\n      var alignPixel = helpers$1._alignPixel;\n      var borderValue, tickStart, tickEnd;\n\n      if (position === 'top') {\n        borderValue = alignPixel(chart, me.bottom, axisWidth);\n        tickStart = me.bottom - tl;\n        tickEnd = borderValue - axisWidth / 2;\n      } else if (position === 'bottom') {\n        borderValue = alignPixel(chart, me.top, axisWidth);\n        tickStart = borderValue + axisWidth / 2;\n        tickEnd = me.top + tl;\n      } else if (position === 'left') {\n        borderValue = alignPixel(chart, me.right, axisWidth);\n        tickStart = me.right - tl;\n        tickEnd = borderValue - axisWidth / 2;\n      } else {\n        borderValue = alignPixel(chart, me.left, axisWidth);\n        tickStart = borderValue + axisWidth / 2;\n        tickEnd = me.left + tl;\n      }\n\n      var epsilon = 0.0000001; // 0.0000001 is margin in pixels for Accumulated error.\n\n      helpers$1.each(ticks, function (tick, index) {\n        // autoskipper skipped this tick (#4635)\n        if (helpers$1.isNullOrUndef(tick.label)) {\n          return;\n        }\n\n        var label = tick.label;\n        var lineWidth, lineColor, borderDash, borderDashOffset;\n\n        if (index === me.zeroLineIndex && options.offset === gridLines.offsetGridLines) {\n          // Draw the first index specially\n          lineWidth = gridLines.zeroLineWidth;\n          lineColor = gridLines.zeroLineColor;\n          borderDash = gridLines.zeroLineBorderDash || [];\n          borderDashOffset = gridLines.zeroLineBorderDashOffset || 0.0;\n        } else {\n          lineWidth = valueAtIndexOrDefault(gridLines.lineWidth, index);\n          lineColor = valueAtIndexOrDefault(gridLines.color, index);\n          borderDash = gridLines.borderDash || [];\n          borderDashOffset = gridLines.borderDashOffset || 0.0;\n        } // Common properties\n\n\n        var tx1, ty1, tx2, ty2, x1, y1, x2, y2, labelX, labelY, textOffset, textAlign;\n        var labelCount = helpers$1.isArray(label) ? label.length : 1;\n        var lineValue = getPixelForGridLine(me, index, gridLines.offsetGridLines);\n\n        if (isHorizontal) {\n          var labelYOffset = tl + tickPadding;\n\n          if (lineValue < me.left - epsilon) {\n            lineColor = 'rgba(0,0,0,0)';\n          }\n\n          tx1 = tx2 = x1 = x2 = alignPixel(chart, lineValue, lineWidth);\n          ty1 = tickStart;\n          ty2 = tickEnd;\n          labelX = me.getPixelForTick(index) + labelOffset; // x values for optionTicks (need to consider offsetLabel option)\n\n          if (position === 'top') {\n            y1 = alignPixel(chart, chartArea.top, axisWidth) + axisWidth / 2;\n            y2 = chartArea.bottom;\n            textOffset = ((!isRotated ? 0.5 : 1) - labelCount) * lineHeight;\n            textAlign = !isRotated ? 'center' : 'left';\n            labelY = me.bottom - labelYOffset;\n          } else {\n            y1 = chartArea.top;\n            y2 = alignPixel(chart, chartArea.bottom, axisWidth) - axisWidth / 2;\n            textOffset = (!isRotated ? 0.5 : 0) * lineHeight;\n            textAlign = !isRotated ? 'center' : 'right';\n            labelY = me.top + labelYOffset;\n          }\n        } else {\n          var labelXOffset = (isMirrored ? 0 : tl) + tickPadding;\n\n          if (lineValue < me.top - epsilon) {\n            lineColor = 'rgba(0,0,0,0)';\n          }\n\n          tx1 = tickStart;\n          tx2 = tickEnd;\n          ty1 = ty2 = y1 = y2 = alignPixel(chart, lineValue, lineWidth);\n          labelY = me.getPixelForTick(index) + labelOffset;\n          textOffset = (1 - labelCount) * lineHeight / 2;\n\n          if (position === 'left') {\n            x1 = alignPixel(chart, chartArea.left, axisWidth) + axisWidth / 2;\n            x2 = chartArea.right;\n            textAlign = isMirrored ? 'left' : 'right';\n            labelX = me.right - labelXOffset;\n          } else {\n            x1 = chartArea.left;\n            x2 = alignPixel(chart, chartArea.right, axisWidth) - axisWidth / 2;\n            textAlign = isMirrored ? 'right' : 'left';\n            labelX = me.left + labelXOffset;\n          }\n        }\n\n        itemsToDraw.push({\n          tx1: tx1,\n          ty1: ty1,\n          tx2: tx2,\n          ty2: ty2,\n          x1: x1,\n          y1: y1,\n          x2: x2,\n          y2: y2,\n          labelX: labelX,\n          labelY: labelY,\n          glWidth: lineWidth,\n          glColor: lineColor,\n          glBorderDash: borderDash,\n          glBorderDashOffset: borderDashOffset,\n          rotation: -1 * labelRotationRadians,\n          label: label,\n          major: tick.major,\n          textOffset: textOffset,\n          textAlign: textAlign\n        });\n      }); // Draw all of the tick labels, tick marks, and grid lines at the correct places\n\n      helpers$1.each(itemsToDraw, function (itemToDraw) {\n        var glWidth = itemToDraw.glWidth;\n        var glColor = itemToDraw.glColor;\n\n        if (gridLines.display && glWidth && glColor) {\n          context.save();\n          context.lineWidth = glWidth;\n          context.strokeStyle = glColor;\n\n          if (context.setLineDash) {\n            context.setLineDash(itemToDraw.glBorderDash);\n            context.lineDashOffset = itemToDraw.glBorderDashOffset;\n          }\n\n          context.beginPath();\n\n          if (gridLines.drawTicks) {\n            context.moveTo(itemToDraw.tx1, itemToDraw.ty1);\n            context.lineTo(itemToDraw.tx2, itemToDraw.ty2);\n          }\n\n          if (gridLines.drawOnChartArea) {\n            context.moveTo(itemToDraw.x1, itemToDraw.y1);\n            context.lineTo(itemToDraw.x2, itemToDraw.y2);\n          }\n\n          context.stroke();\n          context.restore();\n        }\n\n        if (optionTicks.display) {\n          // Make sure we draw text in the correct color and font\n          context.save();\n          context.translate(itemToDraw.labelX, itemToDraw.labelY);\n          context.rotate(itemToDraw.rotation);\n          context.font = itemToDraw.major ? majorTickFont.string : tickFont.string;\n          context.fillStyle = itemToDraw.major ? majorTickFontColor : tickFontColor;\n          context.textBaseline = 'middle';\n          context.textAlign = itemToDraw.textAlign;\n          var label = itemToDraw.label;\n          var y = itemToDraw.textOffset;\n\n          if (helpers$1.isArray(label)) {\n            for (var i = 0; i < label.length; ++i) {\n              // We just make sure the multiline element is a string here..\n              context.fillText('' + label[i], 0, y);\n              y += lineHeight;\n            }\n          } else {\n            context.fillText(label, 0, y);\n          }\n\n          context.restore();\n        }\n      });\n\n      if (scaleLabel.display) {\n        // Draw the scale label\n        var scaleLabelX;\n        var scaleLabelY;\n        var rotation = 0;\n        var halfLineHeight = scaleLabelFont.lineHeight / 2;\n\n        if (isHorizontal) {\n          scaleLabelX = me.left + (me.right - me.left) / 2; // midpoint of the width\n\n          scaleLabelY = position === 'bottom' ? me.bottom - halfLineHeight - scaleLabelPadding.bottom : me.top + halfLineHeight + scaleLabelPadding.top;\n        } else {\n          var isLeft = position === 'left';\n          scaleLabelX = isLeft ? me.left + halfLineHeight + scaleLabelPadding.top : me.right - halfLineHeight - scaleLabelPadding.top;\n          scaleLabelY = me.top + (me.bottom - me.top) / 2;\n          rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;\n        }\n\n        context.save();\n        context.translate(scaleLabelX, scaleLabelY);\n        context.rotate(rotation);\n        context.textAlign = 'center';\n        context.textBaseline = 'middle';\n        context.fillStyle = scaleLabelFontColor; // render in correct colour\n\n        context.font = scaleLabelFont.string;\n        context.fillText(scaleLabel.labelString, 0, 0);\n        context.restore();\n      }\n\n      if (axisWidth) {\n        // Draw the line at the edge of the axis\n        var firstLineWidth = axisWidth;\n        var lastLineWidth = valueAtIndexOrDefault(gridLines.lineWidth, ticks.length - 1, 0);\n        var x1, x2, y1, y2;\n\n        if (isHorizontal) {\n          x1 = alignPixel(chart, me.left, firstLineWidth) - firstLineWidth / 2;\n          x2 = alignPixel(chart, me.right, lastLineWidth) + lastLineWidth / 2;\n          y1 = y2 = borderValue;\n        } else {\n          y1 = alignPixel(chart, me.top, firstLineWidth) - firstLineWidth / 2;\n          y2 = alignPixel(chart, me.bottom, lastLineWidth) + lastLineWidth / 2;\n          x1 = x2 = borderValue;\n        }\n\n        context.lineWidth = axisWidth;\n        context.strokeStyle = valueAtIndexOrDefault(gridLines.color, 0);\n        context.beginPath();\n        context.moveTo(x1, y1);\n        context.lineTo(x2, y2);\n        context.stroke();\n      }\n    }\n  });\n  var defaultConfig = {\n    position: 'bottom'\n  };\n  var scale_category = core_scale.extend({\n    /**\n    * Internal function to get the correct labels. If data.xLabels or data.yLabels are defined, use those\n    * else fall back to data.labels\n    * @private\n    */\n    getLabels: function getLabels() {\n      var data = this.chart.data;\n      return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels;\n    },\n    determineDataLimits: function determineDataLimits() {\n      var me = this;\n      var labels = me.getLabels();\n      me.minIndex = 0;\n      me.maxIndex = labels.length - 1;\n      var findIndex;\n\n      if (me.options.ticks.min !== undefined) {\n        // user specified min value\n        findIndex = labels.indexOf(me.options.ticks.min);\n        me.minIndex = findIndex !== -1 ? findIndex : me.minIndex;\n      }\n\n      if (me.options.ticks.max !== undefined) {\n        // user specified max value\n        findIndex = labels.indexOf(me.options.ticks.max);\n        me.maxIndex = findIndex !== -1 ? findIndex : me.maxIndex;\n      }\n\n      me.min = labels[me.minIndex];\n      me.max = labels[me.maxIndex];\n    },\n    buildTicks: function buildTicks() {\n      var me = this;\n      var labels = me.getLabels(); // If we are viewing some subset of labels, slice the original array\n\n      me.ticks = me.minIndex === 0 && me.maxIndex === labels.length - 1 ? labels : labels.slice(me.minIndex, me.maxIndex + 1);\n    },\n    getLabelForIndex: function getLabelForIndex(index, datasetIndex) {\n      var me = this;\n      var chart = me.chart;\n\n      if (chart.getDatasetMeta(datasetIndex).controller._getValueScaleId() === me.id) {\n        return me.getRightValue(chart.data.datasets[datasetIndex].data[index]);\n      }\n\n      return me.ticks[index - me.minIndex];\n    },\n    // Used to get data value locations.  Value can either be an index or a numerical value\n    getPixelForValue: function getPixelForValue(value, index) {\n      var me = this;\n      var offset = me.options.offset; // 1 is added because we need the length but we have the indexes\n\n      var offsetAmt = Math.max(me.maxIndex + 1 - me.minIndex - (offset ? 0 : 1), 1); // If value is a data object, then index is the index in the data array,\n      // not the index of the scale. We need to change that.\n\n      var valueCategory;\n\n      if (value !== undefined && value !== null) {\n        valueCategory = me.isHorizontal() ? value.x : value.y;\n      }\n\n      if (valueCategory !== undefined || value !== undefined && isNaN(index)) {\n        var labels = me.getLabels();\n        value = valueCategory || value;\n        var idx = labels.indexOf(value);\n        index = idx !== -1 ? idx : index;\n      }\n\n      if (me.isHorizontal()) {\n        var valueWidth = me.width / offsetAmt;\n        var widthOffset = valueWidth * (index - me.minIndex);\n\n        if (offset) {\n          widthOffset += valueWidth / 2;\n        }\n\n        return me.left + widthOffset;\n      }\n\n      var valueHeight = me.height / offsetAmt;\n      var heightOffset = valueHeight * (index - me.minIndex);\n\n      if (offset) {\n        heightOffset += valueHeight / 2;\n      }\n\n      return me.top + heightOffset;\n    },\n    getPixelForTick: function getPixelForTick(index) {\n      return this.getPixelForValue(this.ticks[index], index + this.minIndex, null);\n    },\n    getValueForPixel: function getValueForPixel(pixel) {\n      var me = this;\n      var offset = me.options.offset;\n      var value;\n      var offsetAmt = Math.max(me._ticks.length - (offset ? 0 : 1), 1);\n      var horz = me.isHorizontal();\n      var valueDimension = (horz ? me.width : me.height) / offsetAmt;\n      pixel -= horz ? me.left : me.top;\n\n      if (offset) {\n        pixel -= valueDimension / 2;\n      }\n\n      if (pixel <= 0) {\n        value = 0;\n      } else {\n        value = Math.round(pixel / valueDimension);\n      }\n\n      return value + me.minIndex;\n    },\n    getBasePixel: function getBasePixel() {\n      return this.bottom;\n    }\n  }); // INTERNAL: static default options, registered in src/index.js\n\n  var _defaults = defaultConfig;\n  scale_category._defaults = _defaults;\n  var noop = helpers$1.noop;\n  var isNullOrUndef = helpers$1.isNullOrUndef;\n  /**\n   * Generate a set of linear ticks\n   * @param generationOptions the options used to generate the ticks\n   * @param dataRange the range of the data\n   * @returns {number[]} array of tick values\n   */\n\n  function generateTicks(generationOptions, dataRange) {\n    var ticks = []; // To get a \"nice\" value for the tick spacing, we will use the appropriately named\n    // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n    // for details.\n\n    var MIN_SPACING = 1e-14;\n    var stepSize = generationOptions.stepSize;\n    var unit = stepSize || 1;\n    var maxNumSpaces = generationOptions.maxTicks - 1;\n    var min = generationOptions.min;\n    var max = generationOptions.max;\n    var precision = generationOptions.precision;\n    var rmin = dataRange.min;\n    var rmax = dataRange.max;\n    var spacing = helpers$1.niceNum((rmax - rmin) / maxNumSpaces / unit) * unit;\n    var factor, niceMin, niceMax, numSpaces; // Beyond MIN_SPACING floating point numbers being to lose precision\n    // such that we can't do the math necessary to generate ticks\n\n    if (spacing < MIN_SPACING && isNullOrUndef(min) && isNullOrUndef(max)) {\n      return [rmin, rmax];\n    }\n\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n\n    if (numSpaces > maxNumSpaces) {\n      // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n      spacing = helpers$1.niceNum(numSpaces * spacing / maxNumSpaces / unit) * unit;\n    }\n\n    if (stepSize || isNullOrUndef(precision)) {\n      // If a precision is not specified, calculate factor based on spacing\n      factor = Math.pow(10, helpers$1._decimalPlaces(spacing));\n    } else {\n      // If the user specified a precision, round to that number of decimal places\n      factor = Math.pow(10, precision);\n      spacing = Math.ceil(spacing * factor) / factor;\n    }\n\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing; // If min, max and stepSize is set and they make an evenly spaced scale use it.\n\n    if (stepSize) {\n      // If very close to our whole number, use it.\n      if (!isNullOrUndef(min) && helpers$1.almostWhole(min / spacing, spacing / 1000)) {\n        niceMin = min;\n      }\n\n      if (!isNullOrUndef(max) && helpers$1.almostWhole(max / spacing, spacing / 1000)) {\n        niceMax = max;\n      }\n    }\n\n    numSpaces = (niceMax - niceMin) / spacing; // If very close to our rounded value, use it.\n\n    if (helpers$1.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    ticks.push(isNullOrUndef(min) ? niceMin : min);\n\n    for (var j = 1; j < numSpaces; ++j) {\n      ticks.push(Math.round((niceMin + j * spacing) * factor) / factor);\n    }\n\n    ticks.push(isNullOrUndef(max) ? niceMax : max);\n    return ticks;\n  }\n\n  var scale_linearbase = core_scale.extend({\n    getRightValue: function getRightValue(value) {\n      if (typeof value === 'string') {\n        return +value;\n      }\n\n      return core_scale.prototype.getRightValue.call(this, value);\n    },\n    handleTickRangeOptions: function handleTickRangeOptions() {\n      var me = this;\n      var opts = me.options;\n      var tickOpts = opts.ticks; // If we are forcing it to begin at 0, but 0 will already be rendered on the chart,\n      // do nothing since that would make the chart weird. If the user really wants a weird chart\n      // axis, they can manually override it\n\n      if (tickOpts.beginAtZero) {\n        var minSign = helpers$1.sign(me.min);\n        var maxSign = helpers$1.sign(me.max);\n\n        if (minSign < 0 && maxSign < 0) {\n          // move the top up to 0\n          me.max = 0;\n        } else if (minSign > 0 && maxSign > 0) {\n          // move the bottom down to 0\n          me.min = 0;\n        }\n      }\n\n      var setMin = tickOpts.min !== undefined || tickOpts.suggestedMin !== undefined;\n      var setMax = tickOpts.max !== undefined || tickOpts.suggestedMax !== undefined;\n\n      if (tickOpts.min !== undefined) {\n        me.min = tickOpts.min;\n      } else if (tickOpts.suggestedMin !== undefined) {\n        if (me.min === null) {\n          me.min = tickOpts.suggestedMin;\n        } else {\n          me.min = Math.min(me.min, tickOpts.suggestedMin);\n        }\n      }\n\n      if (tickOpts.max !== undefined) {\n        me.max = tickOpts.max;\n      } else if (tickOpts.suggestedMax !== undefined) {\n        if (me.max === null) {\n          me.max = tickOpts.suggestedMax;\n        } else {\n          me.max = Math.max(me.max, tickOpts.suggestedMax);\n        }\n      }\n\n      if (setMin !== setMax) {\n        // We set the min or the max but not both.\n        // So ensure that our range is good\n        // Inverted or 0 length range can happen when\n        // ticks.min is set, and no datasets are visible\n        if (me.min >= me.max) {\n          if (setMin) {\n            me.max = me.min + 1;\n          } else {\n            me.min = me.max - 1;\n          }\n        }\n      }\n\n      if (me.min === me.max) {\n        me.max++;\n\n        if (!tickOpts.beginAtZero) {\n          me.min--;\n        }\n      }\n    },\n    getTickLimit: function getTickLimit() {\n      var me = this;\n      var tickOpts = me.options.ticks;\n      var stepSize = tickOpts.stepSize;\n      var maxTicksLimit = tickOpts.maxTicksLimit;\n      var maxTicks;\n\n      if (stepSize) {\n        maxTicks = Math.ceil(me.max / stepSize) - Math.floor(me.min / stepSize) + 1;\n      } else {\n        maxTicks = me._computeTickLimit();\n        maxTicksLimit = maxTicksLimit || 11;\n      }\n\n      if (maxTicksLimit) {\n        maxTicks = Math.min(maxTicksLimit, maxTicks);\n      }\n\n      return maxTicks;\n    },\n    _computeTickLimit: function _computeTickLimit() {\n      return Number.POSITIVE_INFINITY;\n    },\n    handleDirectionalChanges: noop,\n    buildTicks: function buildTicks() {\n      var me = this;\n      var opts = me.options;\n      var tickOpts = opts.ticks; // Figure out what the max number of ticks we can support it is based on the size of\n      // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n      // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n      // the graph. Make sure we always have at least 2 ticks\n\n      var maxTicks = me.getTickLimit();\n      maxTicks = Math.max(2, maxTicks);\n      var numericGeneratorOptions = {\n        maxTicks: maxTicks,\n        min: tickOpts.min,\n        max: tickOpts.max,\n        precision: tickOpts.precision,\n        stepSize: helpers$1.valueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)\n      };\n      var ticks = me.ticks = generateTicks(numericGeneratorOptions, me);\n      me.handleDirectionalChanges(); // At this point, we need to update our max and min given the tick values since we have expanded the\n      // range of the scale\n\n      me.max = helpers$1.max(ticks);\n      me.min = helpers$1.min(ticks);\n\n      if (tickOpts.reverse) {\n        ticks.reverse();\n        me.start = me.max;\n        me.end = me.min;\n      } else {\n        me.start = me.min;\n        me.end = me.max;\n      }\n    },\n    convertTicksToLabels: function convertTicksToLabels() {\n      var me = this;\n      me.ticksAsNumbers = me.ticks.slice();\n      me.zeroLineIndex = me.ticks.indexOf(0);\n      core_scale.prototype.convertTicksToLabels.call(me);\n    }\n  });\n  var defaultConfig$1 = {\n    position: 'left',\n    ticks: {\n      callback: core_ticks.formatters.linear\n    }\n  };\n  var scale_linear = scale_linearbase.extend({\n    determineDataLimits: function determineDataLimits() {\n      var me = this;\n      var opts = me.options;\n      var chart = me.chart;\n      var data = chart.data;\n      var datasets = data.datasets;\n      var isHorizontal = me.isHorizontal();\n      var DEFAULT_MIN = 0;\n      var DEFAULT_MAX = 1;\n\n      function IDMatches(meta) {\n        return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;\n      } // First Calculate the range\n\n\n      me.min = null;\n      me.max = null;\n      var hasStacks = opts.stacked;\n\n      if (hasStacks === undefined) {\n        helpers$1.each(datasets, function (dataset, datasetIndex) {\n          if (hasStacks) {\n            return;\n          }\n\n          var meta = chart.getDatasetMeta(datasetIndex);\n\n          if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) && meta.stack !== undefined) {\n            hasStacks = true;\n          }\n        });\n      }\n\n      if (opts.stacked || hasStacks) {\n        var valuesPerStack = {};\n        helpers$1.each(datasets, function (dataset, datasetIndex) {\n          var meta = chart.getDatasetMeta(datasetIndex);\n          var key = [meta.type, // we have a separate stack for stack=undefined datasets when the opts.stacked is undefined\n          opts.stacked === undefined && meta.stack === undefined ? datasetIndex : '', meta.stack].join('.');\n\n          if (valuesPerStack[key] === undefined) {\n            valuesPerStack[key] = {\n              positiveValues: [],\n              negativeValues: []\n            };\n          } // Store these per type\n\n\n          var positiveValues = valuesPerStack[key].positiveValues;\n          var negativeValues = valuesPerStack[key].negativeValues;\n\n          if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n            helpers$1.each(dataset.data, function (rawValue, index) {\n              var value = +me.getRightValue(rawValue);\n\n              if (isNaN(value) || meta.data[index].hidden) {\n                return;\n              }\n\n              positiveValues[index] = positiveValues[index] || 0;\n              negativeValues[index] = negativeValues[index] || 0;\n\n              if (opts.relativePoints) {\n                positiveValues[index] = 100;\n              } else if (value < 0) {\n                negativeValues[index] += value;\n              } else {\n                positiveValues[index] += value;\n              }\n            });\n          }\n        });\n        helpers$1.each(valuesPerStack, function (valuesForType) {\n          var values = valuesForType.positiveValues.concat(valuesForType.negativeValues);\n          var minVal = helpers$1.min(values);\n          var maxVal = helpers$1.max(values);\n          me.min = me.min === null ? minVal : Math.min(me.min, minVal);\n          me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);\n        });\n      } else {\n        helpers$1.each(datasets, function (dataset, datasetIndex) {\n          var meta = chart.getDatasetMeta(datasetIndex);\n\n          if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n            helpers$1.each(dataset.data, function (rawValue, index) {\n              var value = +me.getRightValue(rawValue);\n\n              if (isNaN(value) || meta.data[index].hidden) {\n                return;\n              }\n\n              if (me.min === null) {\n                me.min = value;\n              } else if (value < me.min) {\n                me.min = value;\n              }\n\n              if (me.max === null) {\n                me.max = value;\n              } else if (value > me.max) {\n                me.max = value;\n              }\n            });\n          }\n        });\n      }\n\n      me.min = isFinite(me.min) && !isNaN(me.min) ? me.min : DEFAULT_MIN;\n      me.max = isFinite(me.max) && !isNaN(me.max) ? me.max : DEFAULT_MAX; // Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero\n\n      this.handleTickRangeOptions();\n    },\n    // Returns the maximum number of ticks based on the scale dimension\n    _computeTickLimit: function _computeTickLimit() {\n      var me = this;\n      var tickFont;\n\n      if (me.isHorizontal()) {\n        return Math.ceil(me.width / 40);\n      }\n\n      tickFont = helpers$1.options._parseFont(me.options.ticks);\n      return Math.ceil(me.height / tickFont.lineHeight);\n    },\n    // Called after the ticks are built. We need\n    handleDirectionalChanges: function handleDirectionalChanges() {\n      if (!this.isHorizontal()) {\n        // We are in a vertical orientation. The top value is the highest. So reverse the array\n        this.ticks.reverse();\n      }\n    },\n    getLabelForIndex: function getLabelForIndex(index, datasetIndex) {\n      return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);\n    },\n    // Utils\n    getPixelForValue: function getPixelForValue(value) {\n      // This must be called after fit has been run so that\n      // this.left, this.top, this.right, and this.bottom have been defined\n      var me = this;\n      var start = me.start;\n      var rightValue = +me.getRightValue(value);\n      var pixel;\n      var range = me.end - start;\n\n      if (me.isHorizontal()) {\n        pixel = me.left + me.width / range * (rightValue - start);\n      } else {\n        pixel = me.bottom - me.height / range * (rightValue - start);\n      }\n\n      return pixel;\n    },\n    getValueForPixel: function getValueForPixel(pixel) {\n      var me = this;\n      var isHorizontal = me.isHorizontal();\n      var innerDimension = isHorizontal ? me.width : me.height;\n      var offset = (isHorizontal ? pixel - me.left : me.bottom - pixel) / innerDimension;\n      return me.start + (me.end - me.start) * offset;\n    },\n    getPixelForTick: function getPixelForTick(index) {\n      return this.getPixelForValue(this.ticksAsNumbers[index]);\n    }\n  }); // INTERNAL: static default options, registered in src/index.js\n\n  var _defaults$1 = defaultConfig$1;\n  scale_linear._defaults = _defaults$1;\n  var valueOrDefault$a = helpers$1.valueOrDefault;\n  /**\n   * Generate a set of logarithmic ticks\n   * @param generationOptions the options used to generate the ticks\n   * @param dataRange the range of the data\n   * @returns {number[]} array of tick values\n   */\n\n  function generateTicks$1(generationOptions, dataRange) {\n    var ticks = [];\n    var tickVal = valueOrDefault$a(generationOptions.min, Math.pow(10, Math.floor(helpers$1.log10(dataRange.min))));\n    var endExp = Math.floor(helpers$1.log10(dataRange.max));\n    var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));\n    var exp, significand;\n\n    if (tickVal === 0) {\n      exp = Math.floor(helpers$1.log10(dataRange.minNotZero));\n      significand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));\n      ticks.push(tickVal);\n      tickVal = significand * Math.pow(10, exp);\n    } else {\n      exp = Math.floor(helpers$1.log10(tickVal));\n      significand = Math.floor(tickVal / Math.pow(10, exp));\n    }\n\n    var precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n\n    do {\n      ticks.push(tickVal);\n      ++significand;\n\n      if (significand === 10) {\n        significand = 1;\n        ++exp;\n        precision = exp >= 0 ? 1 : precision;\n      }\n\n      tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;\n    } while (exp < endExp || exp === endExp && significand < endSignificand);\n\n    var lastTick = valueOrDefault$a(generationOptions.max, tickVal);\n    ticks.push(lastTick);\n    return ticks;\n  }\n\n  var defaultConfig$2 = {\n    position: 'left',\n    // label settings\n    ticks: {\n      callback: core_ticks.formatters.logarithmic\n    }\n  }; // TODO(v3): change this to positiveOrDefault\n\n  function nonNegativeOrDefault(value, defaultValue) {\n    return helpers$1.isFinite(value) && value >= 0 ? value : defaultValue;\n  }\n\n  var scale_logarithmic = core_scale.extend({\n    determineDataLimits: function determineDataLimits() {\n      var me = this;\n      var opts = me.options;\n      var chart = me.chart;\n      var data = chart.data;\n      var datasets = data.datasets;\n      var isHorizontal = me.isHorizontal();\n\n      function IDMatches(meta) {\n        return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;\n      } // Calculate Range\n\n\n      me.min = null;\n      me.max = null;\n      me.minNotZero = null;\n      var hasStacks = opts.stacked;\n\n      if (hasStacks === undefined) {\n        helpers$1.each(datasets, function (dataset, datasetIndex) {\n          if (hasStacks) {\n            return;\n          }\n\n          var meta = chart.getDatasetMeta(datasetIndex);\n\n          if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) && meta.stack !== undefined) {\n            hasStacks = true;\n          }\n        });\n      }\n\n      if (opts.stacked || hasStacks) {\n        var valuesPerStack = {};\n        helpers$1.each(datasets, function (dataset, datasetIndex) {\n          var meta = chart.getDatasetMeta(datasetIndex);\n          var key = [meta.type, // we have a separate stack for stack=undefined datasets when the opts.stacked is undefined\n          opts.stacked === undefined && meta.stack === undefined ? datasetIndex : '', meta.stack].join('.');\n\n          if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n            if (valuesPerStack[key] === undefined) {\n              valuesPerStack[key] = [];\n            }\n\n            helpers$1.each(dataset.data, function (rawValue, index) {\n              var values = valuesPerStack[key];\n              var value = +me.getRightValue(rawValue); // invalid, hidden and negative values are ignored\n\n              if (isNaN(value) || meta.data[index].hidden || value < 0) {\n                return;\n              }\n\n              values[index] = values[index] || 0;\n              values[index] += value;\n            });\n          }\n        });\n        helpers$1.each(valuesPerStack, function (valuesForType) {\n          if (valuesForType.length > 0) {\n            var minVal = helpers$1.min(valuesForType);\n            var maxVal = helpers$1.max(valuesForType);\n            me.min = me.min === null ? minVal : Math.min(me.min, minVal);\n            me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);\n          }\n        });\n      } else {\n        helpers$1.each(datasets, function (dataset, datasetIndex) {\n          var meta = chart.getDatasetMeta(datasetIndex);\n\n          if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n            helpers$1.each(dataset.data, function (rawValue, index) {\n              var value = +me.getRightValue(rawValue); // invalid, hidden and negative values are ignored\n\n              if (isNaN(value) || meta.data[index].hidden || value < 0) {\n                return;\n              }\n\n              if (me.min === null) {\n                me.min = value;\n              } else if (value < me.min) {\n                me.min = value;\n              }\n\n              if (me.max === null) {\n                me.max = value;\n              } else if (value > me.max) {\n                me.max = value;\n              }\n\n              if (value !== 0 && (me.minNotZero === null || value < me.minNotZero)) {\n                me.minNotZero = value;\n              }\n            });\n          }\n        });\n      } // Common base implementation to handle ticks.min, ticks.max\n\n\n      this.handleTickRangeOptions();\n    },\n    handleTickRangeOptions: function handleTickRangeOptions() {\n      var me = this;\n      var tickOpts = me.options.ticks;\n      var DEFAULT_MIN = 1;\n      var DEFAULT_MAX = 10;\n      me.min = nonNegativeOrDefault(tickOpts.min, me.min);\n      me.max = nonNegativeOrDefault(tickOpts.max, me.max);\n\n      if (me.min === me.max) {\n        if (me.min !== 0 && me.min !== null) {\n          me.min = Math.pow(10, Math.floor(helpers$1.log10(me.min)) - 1);\n          me.max = Math.pow(10, Math.floor(helpers$1.log10(me.max)) + 1);\n        } else {\n          me.min = DEFAULT_MIN;\n          me.max = DEFAULT_MAX;\n        }\n      }\n\n      if (me.min === null) {\n        me.min = Math.pow(10, Math.floor(helpers$1.log10(me.max)) - 1);\n      }\n\n      if (me.max === null) {\n        me.max = me.min !== 0 ? Math.pow(10, Math.floor(helpers$1.log10(me.min)) + 1) : DEFAULT_MAX;\n      }\n\n      if (me.minNotZero === null) {\n        if (me.min > 0) {\n          me.minNotZero = me.min;\n        } else if (me.max < 1) {\n          me.minNotZero = Math.pow(10, Math.floor(helpers$1.log10(me.max)));\n        } else {\n          me.minNotZero = DEFAULT_MIN;\n        }\n      }\n    },\n    buildTicks: function buildTicks() {\n      var me = this;\n      var tickOpts = me.options.ticks;\n      var reverse = !me.isHorizontal();\n      var generationOptions = {\n        min: nonNegativeOrDefault(tickOpts.min),\n        max: nonNegativeOrDefault(tickOpts.max)\n      };\n      var ticks = me.ticks = generateTicks$1(generationOptions, me); // At this point, we need to update our max and min given the tick values since we have expanded the\n      // range of the scale\n\n      me.max = helpers$1.max(ticks);\n      me.min = helpers$1.min(ticks);\n\n      if (tickOpts.reverse) {\n        reverse = !reverse;\n        me.start = me.max;\n        me.end = me.min;\n      } else {\n        me.start = me.min;\n        me.end = me.max;\n      }\n\n      if (reverse) {\n        ticks.reverse();\n      }\n    },\n    convertTicksToLabels: function convertTicksToLabels() {\n      this.tickValues = this.ticks.slice();\n      core_scale.prototype.convertTicksToLabels.call(this);\n    },\n    // Get the correct tooltip label\n    getLabelForIndex: function getLabelForIndex(index, datasetIndex) {\n      return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);\n    },\n    getPixelForTick: function getPixelForTick(index) {\n      return this.getPixelForValue(this.tickValues[index]);\n    },\n\n    /**\n     * Returns the value of the first tick.\n     * @param {number} value - The minimum not zero value.\n     * @return {number} The first tick value.\n     * @private\n     */\n    _getFirstTickValue: function _getFirstTickValue(value) {\n      var exp = Math.floor(helpers$1.log10(value));\n      var significand = Math.floor(value / Math.pow(10, exp));\n      return significand * Math.pow(10, exp);\n    },\n    getPixelForValue: function getPixelForValue(value) {\n      var me = this;\n      var tickOpts = me.options.ticks;\n      var reverse = tickOpts.reverse;\n      var log10 = helpers$1.log10;\n\n      var firstTickValue = me._getFirstTickValue(me.minNotZero);\n\n      var offset = 0;\n      var innerDimension, pixel, start, end, sign;\n      value = +me.getRightValue(value);\n\n      if (reverse) {\n        start = me.end;\n        end = me.start;\n        sign = -1;\n      } else {\n        start = me.start;\n        end = me.end;\n        sign = 1;\n      }\n\n      if (me.isHorizontal()) {\n        innerDimension = me.width;\n        pixel = reverse ? me.right : me.left;\n      } else {\n        innerDimension = me.height;\n        sign *= -1; // invert, since the upper-left corner of the canvas is at pixel (0, 0)\n\n        pixel = reverse ? me.top : me.bottom;\n      }\n\n      if (value !== start) {\n        if (start === 0) {\n          // include zero tick\n          offset = valueOrDefault$a(tickOpts.fontSize, core_defaults.global.defaultFontSize);\n          innerDimension -= offset;\n          start = firstTickValue;\n        }\n\n        if (value !== 0) {\n          offset += innerDimension / (log10(end) - log10(start)) * (log10(value) - log10(start));\n        }\n\n        pixel += sign * offset;\n      }\n\n      return pixel;\n    },\n    getValueForPixel: function getValueForPixel(pixel) {\n      var me = this;\n      var tickOpts = me.options.ticks;\n      var reverse = tickOpts.reverse;\n      var log10 = helpers$1.log10;\n\n      var firstTickValue = me._getFirstTickValue(me.minNotZero);\n\n      var innerDimension, start, end, value;\n\n      if (reverse) {\n        start = me.end;\n        end = me.start;\n      } else {\n        start = me.start;\n        end = me.end;\n      }\n\n      if (me.isHorizontal()) {\n        innerDimension = me.width;\n        value = reverse ? me.right - pixel : pixel - me.left;\n      } else {\n        innerDimension = me.height;\n        value = reverse ? pixel - me.top : me.bottom - pixel;\n      }\n\n      if (value !== start) {\n        if (start === 0) {\n          // include zero tick\n          var offset = valueOrDefault$a(tickOpts.fontSize, core_defaults.global.defaultFontSize);\n          value -= offset;\n          innerDimension -= offset;\n          start = firstTickValue;\n        }\n\n        value *= log10(end) - log10(start);\n        value /= innerDimension;\n        value = Math.pow(10, log10(start) + value);\n      }\n\n      return value;\n    }\n  }); // INTERNAL: static default options, registered in src/index.js\n\n  var _defaults$2 = defaultConfig$2;\n  scale_logarithmic._defaults = _defaults$2;\n  var valueOrDefault$b = helpers$1.valueOrDefault;\n  var valueAtIndexOrDefault$1 = helpers$1.valueAtIndexOrDefault;\n  var resolve$7 = helpers$1.options.resolve;\n  var defaultConfig$3 = {\n    display: true,\n    // Boolean - Whether to animate scaling the chart from the centre\n    animate: true,\n    position: 'chartArea',\n    angleLines: {\n      display: true,\n      color: 'rgba(0, 0, 0, 0.1)',\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n    gridLines: {\n      circular: false\n    },\n    // label settings\n    ticks: {\n      // Boolean - Show a backdrop to the scale label\n      showLabelBackdrop: true,\n      // String - The colour of the label backdrop\n      backdropColor: 'rgba(255,255,255,0.75)',\n      // Number - The backdrop padding above & below the label in pixels\n      backdropPaddingY: 2,\n      // Number - The backdrop padding to the side of the label in pixels\n      backdropPaddingX: 2,\n      callback: core_ticks.formatters.linear\n    },\n    pointLabels: {\n      // Boolean - if true, show point labels\n      display: true,\n      // Number - Point label font size in pixels\n      fontSize: 10,\n      // Function - Used to convert point labels\n      callback: function callback(label) {\n        return label;\n      }\n    }\n  };\n\n  function getValueCount(scale) {\n    var opts = scale.options;\n    return opts.angleLines.display || opts.pointLabels.display ? scale.chart.data.labels.length : 0;\n  }\n\n  function getTickBackdropHeight(opts) {\n    var tickOpts = opts.ticks;\n\n    if (tickOpts.display && opts.display) {\n      return valueOrDefault$b(tickOpts.fontSize, core_defaults.global.defaultFontSize) + tickOpts.backdropPaddingY * 2;\n    }\n\n    return 0;\n  }\n\n  function measureLabelSize(ctx, lineHeight, label) {\n    if (helpers$1.isArray(label)) {\n      return {\n        w: helpers$1.longestText(ctx, ctx.font, label),\n        h: label.length * lineHeight\n      };\n    }\n\n    return {\n      w: ctx.measureText(label).width,\n      h: lineHeight\n    };\n  }\n\n  function determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n      return {\n        start: pos - size / 2,\n        end: pos + size / 2\n      };\n    } else if (angle < min || angle > max) {\n      return {\n        start: pos - size,\n        end: pos\n      };\n    }\n\n    return {\n      start: pos,\n      end: pos + size\n    };\n  }\n  /**\n   * Helper function to fit a radial linear scale with point labels\n   */\n\n\n  function fitWithPointLabels(scale) {\n    // Right, this is really confusing and there is a lot of maths going on here\n    // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n    //\n    // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n    //\n    // Solution:\n    //\n    // We assume the radius of the polygon is half the size of the canvas at first\n    // at each index we check if the text overlaps.\n    //\n    // Where it does, we store that angle and that index.\n    //\n    // After finding the largest index and angle we calculate how much we need to remove\n    // from the shape radius to move the point inwards by that x.\n    //\n    // We average the left and right distances to get the maximum shape radius that can fit in the box\n    // along with labels.\n    //\n    // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n    // on each side, removing that from the size, halving it and adding the left x protrusion width.\n    //\n    // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n    // and position it in the most space efficient manner\n    //\n    // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n    var plFont = helpers$1.options._parseFont(scale.options.pointLabels); // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n    // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n\n\n    var furthestLimits = {\n      l: 0,\n      r: scale.width,\n      t: 0,\n      b: scale.height - scale.paddingTop\n    };\n    var furthestAngles = {};\n    var i, textSize, pointPosition;\n    scale.ctx.font = plFont.string;\n    scale._pointLabelSizes = [];\n    var valueCount = getValueCount(scale);\n\n    for (i = 0; i < valueCount; i++) {\n      pointPosition = scale.getPointPosition(i, scale.drawingArea + 5);\n      textSize = measureLabelSize(scale.ctx, plFont.lineHeight, scale.pointLabels[i] || '');\n      scale._pointLabelSizes[i] = textSize; // Add quarter circle to make degree 0 mean top of circle\n\n      var angleRadians = scale.getIndexAngle(i);\n      var angle = helpers$1.toDegrees(angleRadians) % 360;\n      var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n      var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n\n      if (hLimits.start < furthestLimits.l) {\n        furthestLimits.l = hLimits.start;\n        furthestAngles.l = angleRadians;\n      }\n\n      if (hLimits.end > furthestLimits.r) {\n        furthestLimits.r = hLimits.end;\n        furthestAngles.r = angleRadians;\n      }\n\n      if (vLimits.start < furthestLimits.t) {\n        furthestLimits.t = vLimits.start;\n        furthestAngles.t = angleRadians;\n      }\n\n      if (vLimits.end > furthestLimits.b) {\n        furthestLimits.b = vLimits.end;\n        furthestAngles.b = angleRadians;\n      }\n    }\n\n    scale.setReductions(scale.drawingArea, furthestLimits, furthestAngles);\n  }\n\n  function getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n      return 'center';\n    } else if (angle < 180) {\n      return 'left';\n    }\n\n    return 'right';\n  }\n\n  function fillText(ctx, text, position, lineHeight) {\n    var y = position.y + lineHeight / 2;\n    var i, ilen;\n\n    if (helpers$1.isArray(text)) {\n      for (i = 0, ilen = text.length; i < ilen; ++i) {\n        ctx.fillText(text[i], position.x, y);\n        y += lineHeight;\n      }\n    } else {\n      ctx.fillText(text, position.x, y);\n    }\n  }\n\n  function adjustPointPositionForLabelHeight(angle, textSize, position) {\n    if (angle === 90 || angle === 270) {\n      position.y -= textSize.h / 2;\n    } else if (angle > 270 || angle < 90) {\n      position.y -= textSize.h;\n    }\n  }\n\n  function drawPointLabels(scale) {\n    var ctx = scale.ctx;\n    var opts = scale.options;\n    var angleLineOpts = opts.angleLines;\n    var gridLineOpts = opts.gridLines;\n    var pointLabelOpts = opts.pointLabels;\n    var lineWidth = valueOrDefault$b(angleLineOpts.lineWidth, gridLineOpts.lineWidth);\n    var lineColor = valueOrDefault$b(angleLineOpts.color, gridLineOpts.color);\n    var tickBackdropHeight = getTickBackdropHeight(opts);\n    ctx.save();\n    ctx.lineWidth = lineWidth;\n    ctx.strokeStyle = lineColor;\n\n    if (ctx.setLineDash) {\n      ctx.setLineDash(resolve$7([angleLineOpts.borderDash, gridLineOpts.borderDash, []]));\n      ctx.lineDashOffset = resolve$7([angleLineOpts.borderDashOffset, gridLineOpts.borderDashOffset, 0.0]);\n    }\n\n    var outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max); // Point Label Font\n\n    var plFont = helpers$1.options._parseFont(pointLabelOpts);\n\n    ctx.font = plFont.string;\n    ctx.textBaseline = 'middle';\n\n    for (var i = getValueCount(scale) - 1; i >= 0; i--) {\n      if (angleLineOpts.display && lineWidth && lineColor) {\n        var outerPosition = scale.getPointPosition(i, outerDistance);\n        ctx.beginPath();\n        ctx.moveTo(scale.xCenter, scale.yCenter);\n        ctx.lineTo(outerPosition.x, outerPosition.y);\n        ctx.stroke();\n      }\n\n      if (pointLabelOpts.display) {\n        // Extra pixels out for some label spacing\n        var extra = i === 0 ? tickBackdropHeight / 2 : 0;\n        var pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + 5); // Keep this in loop since we may support array properties here\n\n        var pointLabelFontColor = valueAtIndexOrDefault$1(pointLabelOpts.fontColor, i, core_defaults.global.defaultFontColor);\n        ctx.fillStyle = pointLabelFontColor;\n        var angleRadians = scale.getIndexAngle(i);\n        var angle = helpers$1.toDegrees(angleRadians);\n        ctx.textAlign = getTextAlignForAngle(angle);\n        adjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);\n        fillText(ctx, scale.pointLabels[i] || '', pointLabelPosition, plFont.lineHeight);\n      }\n    }\n\n    ctx.restore();\n  }\n\n  function drawRadiusLine(scale, gridLineOpts, radius, index) {\n    var ctx = scale.ctx;\n    var circular = gridLineOpts.circular;\n    var valueCount = getValueCount(scale);\n    var lineColor = valueAtIndexOrDefault$1(gridLineOpts.color, index - 1);\n    var lineWidth = valueAtIndexOrDefault$1(gridLineOpts.lineWidth, index - 1);\n    var pointPosition;\n\n    if (!circular && !valueCount || !lineColor || !lineWidth) {\n      return;\n    }\n\n    ctx.save();\n    ctx.strokeStyle = lineColor;\n    ctx.lineWidth = lineWidth;\n\n    if (ctx.setLineDash) {\n      ctx.setLineDash(gridLineOpts.borderDash || []);\n      ctx.lineDashOffset = gridLineOpts.borderDashOffset || 0.0;\n    }\n\n    ctx.beginPath();\n\n    if (circular) {\n      // Draw circular arcs between the points\n      ctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);\n    } else {\n      // Draw straight lines connecting each index\n      pointPosition = scale.getPointPosition(0, radius);\n      ctx.moveTo(pointPosition.x, pointPosition.y);\n\n      for (var i = 1; i < valueCount; i++) {\n        pointPosition = scale.getPointPosition(i, radius);\n        ctx.lineTo(pointPosition.x, pointPosition.y);\n      }\n    }\n\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  function numberOrZero(param) {\n    return helpers$1.isNumber(param) ? param : 0;\n  }\n\n  var scale_radialLinear = scale_linearbase.extend({\n    setDimensions: function setDimensions() {\n      var me = this; // Set the unconstrained dimension before label rotation\n\n      me.width = me.maxWidth;\n      me.height = me.maxHeight;\n      me.paddingTop = getTickBackdropHeight(me.options) / 2;\n      me.xCenter = Math.floor(me.width / 2);\n      me.yCenter = Math.floor((me.height - me.paddingTop) / 2);\n      me.drawingArea = Math.min(me.height - me.paddingTop, me.width) / 2;\n    },\n    determineDataLimits: function determineDataLimits() {\n      var me = this;\n      var chart = me.chart;\n      var min = Number.POSITIVE_INFINITY;\n      var max = Number.NEGATIVE_INFINITY;\n      helpers$1.each(chart.data.datasets, function (dataset, datasetIndex) {\n        if (chart.isDatasetVisible(datasetIndex)) {\n          var meta = chart.getDatasetMeta(datasetIndex);\n          helpers$1.each(dataset.data, function (rawValue, index) {\n            var value = +me.getRightValue(rawValue);\n\n            if (isNaN(value) || meta.data[index].hidden) {\n              return;\n            }\n\n            min = Math.min(value, min);\n            max = Math.max(value, max);\n          });\n        }\n      });\n      me.min = min === Number.POSITIVE_INFINITY ? 0 : min;\n      me.max = max === Number.NEGATIVE_INFINITY ? 0 : max; // Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero\n\n      me.handleTickRangeOptions();\n    },\n    // Returns the maximum number of ticks based on the scale dimension\n    _computeTickLimit: function _computeTickLimit() {\n      return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    },\n    convertTicksToLabels: function convertTicksToLabels() {\n      var me = this;\n      scale_linearbase.prototype.convertTicksToLabels.call(me); // Point labels\n\n      me.pointLabels = me.chart.data.labels.map(me.options.pointLabels.callback, me);\n    },\n    getLabelForIndex: function getLabelForIndex(index, datasetIndex) {\n      return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);\n    },\n    fit: function fit() {\n      var me = this;\n      var opts = me.options;\n\n      if (opts.display && opts.pointLabels.display) {\n        fitWithPointLabels(me);\n      } else {\n        me.setCenterPoint(0, 0, 0, 0);\n      }\n    },\n\n    /**\n     * Set radius reductions and determine new radius and center point\n     * @private\n     */\n    setReductions: function setReductions(largestPossibleRadius, furthestLimits, furthestAngles) {\n      var me = this;\n      var radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);\n      var radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);\n      var radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);\n      var radiusReductionBottom = -Math.max(furthestLimits.b - (me.height - me.paddingTop), 0) / Math.cos(furthestAngles.b);\n      radiusReductionLeft = numberOrZero(radiusReductionLeft);\n      radiusReductionRight = numberOrZero(radiusReductionRight);\n      radiusReductionTop = numberOrZero(radiusReductionTop);\n      radiusReductionBottom = numberOrZero(radiusReductionBottom);\n      me.drawingArea = Math.min(Math.floor(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2), Math.floor(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));\n      me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);\n    },\n    setCenterPoint: function setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n      var me = this;\n      var maxRight = me.width - rightMovement - me.drawingArea;\n      var maxLeft = leftMovement + me.drawingArea;\n      var maxTop = topMovement + me.drawingArea;\n      var maxBottom = me.height - me.paddingTop - bottomMovement - me.drawingArea;\n      me.xCenter = Math.floor((maxLeft + maxRight) / 2 + me.left);\n      me.yCenter = Math.floor((maxTop + maxBottom) / 2 + me.top + me.paddingTop);\n    },\n    getIndexAngle: function getIndexAngle(index) {\n      var angleMultiplier = Math.PI * 2 / getValueCount(this);\n      var startAngle = this.chart.options && this.chart.options.startAngle ? this.chart.options.startAngle : 0;\n      var startAngleRadians = startAngle * Math.PI * 2 / 360; // Start from the top instead of right, so remove a quarter of the circle\n\n      return index * angleMultiplier + startAngleRadians;\n    },\n    getDistanceFromCenterForValue: function getDistanceFromCenterForValue(value) {\n      var me = this;\n\n      if (value === null) {\n        return 0; // null always in center\n      } // Take into account half font size + the yPadding of the top value\n\n\n      var scalingFactor = me.drawingArea / (me.max - me.min);\n\n      if (me.options.ticks.reverse) {\n        return (me.max - value) * scalingFactor;\n      }\n\n      return (value - me.min) * scalingFactor;\n    },\n    getPointPosition: function getPointPosition(index, distanceFromCenter) {\n      var me = this;\n      var thisAngle = me.getIndexAngle(index) - Math.PI / 2;\n      return {\n        x: Math.cos(thisAngle) * distanceFromCenter + me.xCenter,\n        y: Math.sin(thisAngle) * distanceFromCenter + me.yCenter\n      };\n    },\n    getPointPositionForValue: function getPointPositionForValue(index, value) {\n      return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    },\n    getBasePosition: function getBasePosition() {\n      var me = this;\n      var min = me.min;\n      var max = me.max;\n      return me.getPointPositionForValue(0, me.beginAtZero ? 0 : min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0);\n    },\n    draw: function draw() {\n      var me = this;\n      var opts = me.options;\n      var gridLineOpts = opts.gridLines;\n      var tickOpts = opts.ticks;\n\n      if (opts.display) {\n        var ctx = me.ctx;\n        var startAngle = this.getIndexAngle(0);\n\n        var tickFont = helpers$1.options._parseFont(tickOpts);\n\n        if (opts.angleLines.display || opts.pointLabels.display) {\n          drawPointLabels(me);\n        }\n\n        helpers$1.each(me.ticks, function (label, index) {\n          // Don't draw a centre value (if it is minimum)\n          if (index > 0 || tickOpts.reverse) {\n            var yCenterOffset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]); // Draw circular lines around the scale\n\n            if (gridLineOpts.display && index !== 0) {\n              drawRadiusLine(me, gridLineOpts, yCenterOffset, index);\n            }\n\n            if (tickOpts.display) {\n              var tickFontColor = valueOrDefault$b(tickOpts.fontColor, core_defaults.global.defaultFontColor);\n              ctx.font = tickFont.string;\n              ctx.save();\n              ctx.translate(me.xCenter, me.yCenter);\n              ctx.rotate(startAngle);\n\n              if (tickOpts.showLabelBackdrop) {\n                var labelWidth = ctx.measureText(label).width;\n                ctx.fillStyle = tickOpts.backdropColor;\n                ctx.fillRect(-labelWidth / 2 - tickOpts.backdropPaddingX, -yCenterOffset - tickFont.size / 2 - tickOpts.backdropPaddingY, labelWidth + tickOpts.backdropPaddingX * 2, tickFont.size + tickOpts.backdropPaddingY * 2);\n              }\n\n              ctx.textAlign = 'center';\n              ctx.textBaseline = 'middle';\n              ctx.fillStyle = tickFontColor;\n              ctx.fillText(label, 0, -yCenterOffset);\n              ctx.restore();\n            }\n          }\n        });\n      }\n    }\n  }); // INTERNAL: static default options, registered in src/index.js\n\n  var _defaults$3 = defaultConfig$3;\n  scale_radialLinear._defaults = _defaults$3;\n  var valueOrDefault$c = helpers$1.valueOrDefault; // Integer constants are from the ES6 spec.\n\n  var MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;\n  var MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\n  var INTERVALS = {\n    millisecond: {\n      common: true,\n      size: 1,\n      steps: [1, 2, 5, 10, 20, 50, 100, 250, 500]\n    },\n    second: {\n      common: true,\n      size: 1000,\n      steps: [1, 2, 5, 10, 15, 30]\n    },\n    minute: {\n      common: true,\n      size: 60000,\n      steps: [1, 2, 5, 10, 15, 30]\n    },\n    hour: {\n      common: true,\n      size: 3600000,\n      steps: [1, 2, 3, 6, 12]\n    },\n    day: {\n      common: true,\n      size: 86400000,\n      steps: [1, 2, 5]\n    },\n    week: {\n      common: false,\n      size: 604800000,\n      steps: [1, 2, 3, 4]\n    },\n    month: {\n      common: true,\n      size: 2.628e9,\n      steps: [1, 2, 3]\n    },\n    quarter: {\n      common: false,\n      size: 7.884e9,\n      steps: [1, 2, 3, 4]\n    },\n    year: {\n      common: true,\n      size: 3.154e10\n    }\n  };\n  var UNITS = Object.keys(INTERVALS);\n\n  function sorter(a, b) {\n    return a - b;\n  }\n\n  function arrayUnique(items) {\n    var hash = {};\n    var out = [];\n    var i, ilen, item;\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n\n      if (!hash[item]) {\n        hash[item] = true;\n        out.push(item);\n      }\n    }\n\n    return out;\n  }\n  /**\n   * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n   * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n   * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n   * extremity (left + width or top + height). Note that it would be more optimized to directly\n   * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n   * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n   *\n   * @param {number[]} timestamps - timestamps sorted from lowest to highest.\n   * @param {string} distribution - If 'linear', timestamps will be spread linearly along the min\n   * and max range, so basically, the table will contains only two items: {min, 0} and {max, 1}.\n   * If 'series', timestamps will be positioned at the same distance from each other. In this\n   * case, only timestamps that break the time linearity are registered, meaning that in the\n   * best case, all timestamps are linear, the table contains only min and max.\n   */\n\n\n  function buildLookupTable(timestamps, min, max, distribution) {\n    if (distribution === 'linear' || !timestamps.length) {\n      return [{\n        time: min,\n        pos: 0\n      }, {\n        time: max,\n        pos: 1\n      }];\n    }\n\n    var table = [];\n    var items = [min];\n    var i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n\n      if (curr > min && curr < max) {\n        items.push(curr);\n      }\n    }\n\n    items.push(max);\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i]; // only add points that breaks the scale linearity\n\n      if (prev === undefined || next === undefined || Math.round((next + prev) / 2) !== curr) {\n        table.push({\n          time: curr,\n          pos: i / (ilen - 1)\n        });\n      }\n    }\n\n    return table;\n  } // @see adapted from https://www.anujgakhar.com/2014/03/01/binary-search-in-javascript/\n\n\n  function lookup(table, key, value) {\n    var lo = 0;\n    var hi = table.length - 1;\n    var mid, i0, i1;\n\n    while (lo >= 0 && lo <= hi) {\n      mid = lo + hi >> 1;\n      i0 = table[mid - 1] || null;\n      i1 = table[mid];\n\n      if (!i0) {\n        // given value is outside table (before first item)\n        return {\n          lo: null,\n          hi: i1\n        };\n      } else if (i1[key] < value) {\n        lo = mid + 1;\n      } else if (i0[key] > value) {\n        hi = mid - 1;\n      } else {\n        return {\n          lo: i0,\n          hi: i1\n        };\n      }\n    } // given value is outside table (after last item)\n\n\n    return {\n      lo: i1,\n      hi: null\n    };\n  }\n  /**\n   * Linearly interpolates the given source `value` using the table items `skey` values and\n   * returns the associated `tkey` value. For example, interpolate(table, 'time', 42, 'pos')\n   * returns the position for a timestamp equal to 42. If value is out of bounds, values at\n   * index [0, 1] or [n - 1, n] are used for the interpolation.\n   */\n\n\n  function interpolate$1(table, skey, sval, tkey) {\n    var range = lookup(table, skey, sval); // Note: the lookup table ALWAYS contains at least 2 items (min and max)\n\n    var prev = !range.lo ? table[0] : !range.hi ? table[table.length - 2] : range.lo;\n    var next = !range.lo ? table[1] : !range.hi ? table[table.length - 1] : range.hi;\n    var span = next[skey] - prev[skey];\n    var ratio = span ? (sval - prev[skey]) / span : 0;\n    var offset = (next[tkey] - prev[tkey]) * ratio;\n    return prev[tkey] + offset;\n  }\n\n  function toTimestamp(scale, input) {\n    var adapter = scale._adapter;\n    var options = scale.options.time;\n    var parser = options.parser;\n    var format = parser || options.format;\n    var value = input;\n\n    if (typeof parser === 'function') {\n      value = parser(value);\n    } // Only parse if its not a timestamp already\n\n\n    if (!helpers$1.isFinite(value)) {\n      value = typeof format === 'string' ? adapter.parse(value, format) : adapter.parse(value);\n    }\n\n    if (value !== null) {\n      return +value;\n    } // Labels are in an incompatible format and no `parser` has been provided.\n    // The user might still use the deprecated `format` option for parsing.\n\n\n    if (!parser && typeof format === 'function') {\n      value = format(input); // `format` could return something else than a timestamp, if so, parse it\n\n      if (!helpers$1.isFinite(value)) {\n        value = adapter.parse(value);\n      }\n    }\n\n    return value;\n  }\n\n  function parse(scale, input) {\n    if (helpers$1.isNullOrUndef(input)) {\n      return null;\n    }\n\n    var options = scale.options.time;\n    var value = toTimestamp(scale, scale.getRightValue(input));\n\n    if (value === null) {\n      return value;\n    }\n\n    if (options.round) {\n      value = +scale._adapter.startOf(value, options.round);\n    }\n\n    return value;\n  }\n  /**\n   * Returns the number of unit to skip to be able to display up to `capacity` number of ticks\n   * in `unit` for the given `min` / `max` range and respecting the interval steps constraints.\n   */\n\n\n  function determineStepSize(min, max, unit, capacity) {\n    var range = max - min;\n    var interval = INTERVALS[unit];\n    var milliseconds = interval.size;\n    var steps = interval.steps;\n    var i, ilen, factor;\n\n    if (!steps) {\n      return Math.ceil(range / (capacity * milliseconds));\n    }\n\n    for (i = 0, ilen = steps.length; i < ilen; ++i) {\n      factor = steps[i];\n\n      if (Math.ceil(range / (milliseconds * factor)) <= capacity) {\n        break;\n      }\n    }\n\n    return factor;\n  }\n  /**\n   * Figures out what unit results in an appropriate number of auto-generated ticks\n   */\n\n\n  function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    var ilen = UNITS.length;\n    var i, interval, factor;\n\n    for (i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n      interval = INTERVALS[UNITS[i]];\n      factor = interval.steps ? interval.steps[interval.steps.length - 1] : MAX_INTEGER;\n\n      if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n        return UNITS[i];\n      }\n    }\n\n    return UNITS[ilen - 1];\n  }\n  /**\n   * Figures out what unit to format a set of ticks with\n   */\n\n\n  function determineUnitForFormatting(scale, ticks, minUnit, min, max) {\n    var ilen = UNITS.length;\n    var i, unit;\n\n    for (i = ilen - 1; i >= UNITS.indexOf(minUnit); i--) {\n      unit = UNITS[i];\n\n      if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= ticks.length) {\n        return unit;\n      }\n    }\n\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n  }\n\n  function determineMajorUnit(unit) {\n    for (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n      if (INTERVALS[UNITS[i]].common) {\n        return UNITS[i];\n      }\n    }\n  }\n  /**\n   * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n   * `minor` unit, aligned on the `major` unit and using the given scale time `options`.\n   * Important: this method can return ticks outside the min and max range, it's the\n   * responsibility of the calling code to clamp values if needed.\n   */\n\n\n  function generate(scale, min, max, capacity) {\n    var adapter = scale._adapter;\n    var options = scale.options;\n    var timeOpts = options.time;\n    var minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, capacity);\n    var major = determineMajorUnit(minor);\n    var stepSize = valueOrDefault$c(timeOpts.stepSize, timeOpts.unitStepSize);\n    var weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    var majorTicksEnabled = options.ticks.major.enabled;\n    var interval = INTERVALS[minor];\n    var first = min;\n    var last = max;\n    var ticks = [];\n    var time;\n\n    if (!stepSize) {\n      stepSize = determineStepSize(min, max, minor, capacity);\n    } // For 'week' unit, handle the first day of week option\n\n\n    if (weekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n      last = +adapter.startOf(last, 'isoWeek', weekday);\n    } // Align first/last ticks on unit\n\n\n    first = +adapter.startOf(first, weekday ? 'day' : minor);\n    last = +adapter.startOf(last, weekday ? 'day' : minor); // Make sure that the last tick include max\n\n    if (last < max) {\n      last = +adapter.add(last, 1, minor);\n    }\n\n    time = first;\n\n    if (majorTicksEnabled && major && !weekday && !timeOpts.round) {\n      // Align the first tick on the previous `minor` unit aligned on the `major` unit:\n      // we first aligned time on the previous `major` unit then add the number of full\n      // stepSize there is between first and the previous major time.\n      time = +adapter.startOf(time, major);\n      time = +adapter.add(time, ~~((first - time) / (interval.size * stepSize)) * stepSize, minor);\n    }\n\n    for (; time < last; time = +adapter.add(time, stepSize, minor)) {\n      ticks.push(+time);\n    }\n\n    ticks.push(+time);\n    return ticks;\n  }\n  /**\n   * Returns the start and end offsets from edges in the form of {start, end}\n   * where each value is a relative width to the scale and ranges between 0 and 1.\n   * They add extra margins on the both sides by scaling down the original scale.\n   * Offsets are added when the `offset` option is true.\n   */\n\n\n  function computeOffsets(table, ticks, min, max, options) {\n    var start = 0;\n    var end = 0;\n    var first, last;\n\n    if (options.offset && ticks.length) {\n      if (!options.time.min) {\n        first = interpolate$1(table, 'time', ticks[0], 'pos');\n\n        if (ticks.length === 1) {\n          start = 1 - first;\n        } else {\n          start = (interpolate$1(table, 'time', ticks[1], 'pos') - first) / 2;\n        }\n      }\n\n      if (!options.time.max) {\n        last = interpolate$1(table, 'time', ticks[ticks.length - 1], 'pos');\n\n        if (ticks.length === 1) {\n          end = last;\n        } else {\n          end = (last - interpolate$1(table, 'time', ticks[ticks.length - 2], 'pos')) / 2;\n        }\n      }\n    }\n\n    return {\n      start: start,\n      end: end\n    };\n  }\n\n  function ticksFromTimestamps(scale, values, majorUnit) {\n    var ticks = [];\n    var i, ilen, value, major;\n\n    for (i = 0, ilen = values.length; i < ilen; ++i) {\n      value = values[i];\n      major = majorUnit ? value === +scale._adapter.startOf(value, majorUnit) : false;\n      ticks.push({\n        value: value,\n        major: major\n      });\n    }\n\n    return ticks;\n  }\n\n  var defaultConfig$4 = {\n    position: 'bottom',\n\n    /**\n     * Data distribution along the scale:\n     * - 'linear': data are spread according to their time (distances can vary),\n     * - 'series': data are spread at the same distance from each other.\n     * @see https://github.com/chartjs/Chart.js/pull/4507\n     * @since 2.7.0\n     */\n    distribution: 'linear',\n\n    /**\n     * Scale boundary strategy (bypassed by min/max time options)\n     * - `data`: make sure data are fully visible, ticks outside are removed\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\n     * @see https://github.com/chartjs/Chart.js/pull/4556\n     * @since 2.7.0\n     */\n    bounds: 'data',\n    adapters: {},\n    time: {\n      parser: false,\n      // false == a pattern string from https://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment\n      format: false,\n      // DEPRECATED false == date objects, moment object, callback or a pattern string from https://momentjs.com/docs/#/parsing/string-format/\n      unit: false,\n      // false == automatic or override with week, month, year, etc.\n      round: false,\n      // none, or override with week, month, year, etc.\n      displayFormat: false,\n      // DEPRECATED\n      isoWeekday: false,\n      // override week start day - see https://momentjs.com/docs/#/get-set/iso-weekday/\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      autoSkip: false,\n\n      /**\n       * Ticks generation input values:\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\n       * @see https://github.com/chartjs/Chart.js/pull/4507\n       * @since 2.7.0\n       */\n      source: 'auto',\n      major: {\n        enabled: false\n      }\n    }\n  };\n  var scale_time = core_scale.extend({\n    initialize: function initialize() {\n      this.mergeTicksOptions();\n      core_scale.prototype.initialize.call(this);\n    },\n    update: function update() {\n      var me = this;\n      var options = me.options;\n      var time = options.time || (options.time = {});\n      var adapter = me._adapter = new core_adapters._date(options.adapters.date); // DEPRECATIONS: output a message only one time per update\n\n      if (time.format) {\n        console.warn('options.time.format is deprecated and replaced by options.time.parser.');\n      } // Backward compatibility: before introducing adapter, `displayFormats` was\n      // supposed to contain *all* unit/string pairs but this can't be resolved\n      // when loading the scale (adapters are loaded afterward), so let's populate\n      // missing formats on update\n\n\n      helpers$1.mergeIf(time.displayFormats, adapter.formats());\n      return core_scale.prototype.update.apply(me, arguments);\n    },\n\n    /**\n     * Allows data to be referenced via 't' attribute\n     */\n    getRightValue: function getRightValue(rawValue) {\n      if (rawValue && rawValue.t !== undefined) {\n        rawValue = rawValue.t;\n      }\n\n      return core_scale.prototype.getRightValue.call(this, rawValue);\n    },\n    determineDataLimits: function determineDataLimits() {\n      var me = this;\n      var chart = me.chart;\n      var adapter = me._adapter;\n      var timeOpts = me.options.time;\n      var unit = timeOpts.unit || 'day';\n      var min = MAX_INTEGER;\n      var max = MIN_INTEGER;\n      var timestamps = [];\n      var datasets = [];\n      var labels = [];\n      var i, j, ilen, jlen, data, timestamp;\n      var dataLabels = chart.data.labels || []; // Convert labels to timestamps\n\n      for (i = 0, ilen = dataLabels.length; i < ilen; ++i) {\n        labels.push(parse(me, dataLabels[i]));\n      } // Convert data to timestamps\n\n\n      for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          data = chart.data.datasets[i].data; // Let's consider that all data have the same format.\n\n          if (helpers$1.isObject(data[0])) {\n            datasets[i] = [];\n\n            for (j = 0, jlen = data.length; j < jlen; ++j) {\n              timestamp = parse(me, data[j]);\n              timestamps.push(timestamp);\n              datasets[i][j] = timestamp;\n            }\n          } else {\n            for (j = 0, jlen = labels.length; j < jlen; ++j) {\n              timestamps.push(labels[j]);\n            }\n\n            datasets[i] = labels.slice(0);\n          }\n        } else {\n          datasets[i] = [];\n        }\n      }\n\n      if (labels.length) {\n        // Sort labels **after** data have been converted\n        labels = arrayUnique(labels).sort(sorter);\n        min = Math.min(min, labels[0]);\n        max = Math.max(max, labels[labels.length - 1]);\n      }\n\n      if (timestamps.length) {\n        timestamps = arrayUnique(timestamps).sort(sorter);\n        min = Math.min(min, timestamps[0]);\n        max = Math.max(max, timestamps[timestamps.length - 1]);\n      }\n\n      min = parse(me, timeOpts.min) || min;\n      max = parse(me, timeOpts.max) || max; // In case there is no valid min/max, set limits based on unit time option\n\n      min = min === MAX_INTEGER ? +adapter.startOf(Date.now(), unit) : min;\n      max = max === MIN_INTEGER ? +adapter.endOf(Date.now(), unit) + 1 : max; // Make sure that max is strictly higher than min (required by the lookup table)\n\n      me.min = Math.min(min, max);\n      me.max = Math.max(min + 1, max); // PRIVATE\n\n      me._horizontal = me.isHorizontal();\n      me._table = [];\n      me._timestamps = {\n        data: timestamps,\n        datasets: datasets,\n        labels: labels\n      };\n    },\n    buildTicks: function buildTicks() {\n      var me = this;\n      var min = me.min;\n      var max = me.max;\n      var options = me.options;\n      var timeOpts = options.time;\n      var timestamps = [];\n      var ticks = [];\n      var i, ilen, timestamp;\n\n      switch (options.ticks.source) {\n        case 'data':\n          timestamps = me._timestamps.data;\n          break;\n\n        case 'labels':\n          timestamps = me._timestamps.labels;\n          break;\n\n        case 'auto':\n        default:\n          timestamps = generate(me, min, max, me.getLabelCapacity(min), options);\n      }\n\n      if (options.bounds === 'ticks' && timestamps.length) {\n        min = timestamps[0];\n        max = timestamps[timestamps.length - 1];\n      } // Enforce limits with user min/max options\n\n\n      min = parse(me, timeOpts.min) || min;\n      max = parse(me, timeOpts.max) || max; // Remove ticks outside the min/max range\n\n      for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n        timestamp = timestamps[i];\n\n        if (timestamp >= min && timestamp <= max) {\n          ticks.push(timestamp);\n        }\n      }\n\n      me.min = min;\n      me.max = max; // PRIVATE\n\n      me._unit = timeOpts.unit || determineUnitForFormatting(me, ticks, timeOpts.minUnit, me.min, me.max);\n      me._majorUnit = determineMajorUnit(me._unit);\n      me._table = buildLookupTable(me._timestamps.data, min, max, options.distribution);\n      me._offsets = computeOffsets(me._table, ticks, min, max, options);\n\n      if (options.ticks.reverse) {\n        ticks.reverse();\n      }\n\n      return ticksFromTimestamps(me, ticks, me._majorUnit);\n    },\n    getLabelForIndex: function getLabelForIndex(index, datasetIndex) {\n      var me = this;\n      var adapter = me._adapter;\n      var data = me.chart.data;\n      var timeOpts = me.options.time;\n      var label = data.labels && index < data.labels.length ? data.labels[index] : '';\n      var value = data.datasets[datasetIndex].data[index];\n\n      if (helpers$1.isObject(value)) {\n        label = me.getRightValue(value);\n      }\n\n      if (timeOpts.tooltipFormat) {\n        return adapter.format(toTimestamp(me, label), timeOpts.tooltipFormat);\n      }\n\n      if (typeof label === 'string') {\n        return label;\n      }\n\n      return adapter.format(toTimestamp(me, label), timeOpts.displayFormats.datetime);\n    },\n\n    /**\n     * Function to format an individual tick mark\n     * @private\n     */\n    tickFormatFunction: function tickFormatFunction(time, index, ticks, format) {\n      var me = this;\n      var adapter = me._adapter;\n      var options = me.options;\n      var formats = options.time.displayFormats;\n      var minorFormat = formats[me._unit];\n      var majorUnit = me._majorUnit;\n      var majorFormat = formats[majorUnit];\n      var majorTime = +adapter.startOf(time, majorUnit);\n      var majorTickOpts = options.ticks.major;\n      var major = majorTickOpts.enabled && majorUnit && majorFormat && time === majorTime;\n      var label = adapter.format(time, format ? format : major ? majorFormat : minorFormat);\n      var tickOpts = major ? majorTickOpts : options.ticks.minor;\n      var formatter = valueOrDefault$c(tickOpts.callback, tickOpts.userCallback);\n      return formatter ? formatter(label, index, ticks) : label;\n    },\n    convertTicksToLabels: function convertTicksToLabels(ticks) {\n      var labels = [];\n      var i, ilen;\n\n      for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n        labels.push(this.tickFormatFunction(ticks[i].value, i, ticks));\n      }\n\n      return labels;\n    },\n\n    /**\n     * @private\n     */\n    getPixelForOffset: function getPixelForOffset(time) {\n      var me = this;\n      var isReverse = me.options.ticks.reverse;\n      var size = me._horizontal ? me.width : me.height;\n      var start = me._horizontal ? isReverse ? me.right : me.left : isReverse ? me.bottom : me.top;\n      var pos = interpolate$1(me._table, 'time', time, 'pos');\n      var offset = size * (me._offsets.start + pos) / (me._offsets.start + 1 + me._offsets.end);\n      return isReverse ? start - offset : start + offset;\n    },\n    getPixelForValue: function getPixelForValue(value, index, datasetIndex) {\n      var me = this;\n      var time = null;\n\n      if (index !== undefined && datasetIndex !== undefined) {\n        time = me._timestamps.datasets[datasetIndex][index];\n      }\n\n      if (time === null) {\n        time = parse(me, value);\n      }\n\n      if (time !== null) {\n        return me.getPixelForOffset(time);\n      }\n    },\n    getPixelForTick: function getPixelForTick(index) {\n      var ticks = this.getTicks();\n      return index >= 0 && index < ticks.length ? this.getPixelForOffset(ticks[index].value) : null;\n    },\n    getValueForPixel: function getValueForPixel(pixel) {\n      var me = this;\n      var size = me._horizontal ? me.width : me.height;\n      var start = me._horizontal ? me.left : me.top;\n      var pos = (size ? (pixel - start) / size : 0) * (me._offsets.start + 1 + me._offsets.start) - me._offsets.end;\n      var time = interpolate$1(me._table, 'pos', pos, 'time'); // DEPRECATION, we should return time directly\n\n      return me._adapter._create(time);\n    },\n\n    /**\n     * Crude approximation of what the label width might be\n     * @private\n     */\n    getLabelWidth: function getLabelWidth(label) {\n      var me = this;\n      var ticksOpts = me.options.ticks;\n      var tickLabelWidth = me.ctx.measureText(label).width;\n      var angle = helpers$1.toRadians(ticksOpts.maxRotation);\n      var cosRotation = Math.cos(angle);\n      var sinRotation = Math.sin(angle);\n      var tickFontSize = valueOrDefault$c(ticksOpts.fontSize, core_defaults.global.defaultFontSize);\n      return tickLabelWidth * cosRotation + tickFontSize * sinRotation;\n    },\n\n    /**\n     * @private\n     */\n    getLabelCapacity: function getLabelCapacity(exampleTime) {\n      var me = this; // pick the longest format (milliseconds) for guestimation\n\n      var format = me.options.time.displayFormats.millisecond;\n      var exampleLabel = me.tickFormatFunction(exampleTime, 0, [], format);\n      var tickLabelWidth = me.getLabelWidth(exampleLabel);\n      var innerWidth = me.isHorizontal() ? me.width : me.height;\n      var capacity = Math.floor(innerWidth / tickLabelWidth);\n      return capacity > 0 ? capacity : 1;\n    }\n  }); // INTERNAL: static default options, registered in src/index.js\n\n  var _defaults$4 = defaultConfig$4;\n  scale_time._defaults = _defaults$4;\n  var scales = {\n    category: scale_category,\n    linear: scale_linear,\n    logarithmic: scale_logarithmic,\n    radialLinear: scale_radialLinear,\n    time: scale_time\n  };\n  var FORMATS = {\n    datetime: 'MMM D, YYYY, h:mm:ss a',\n    millisecond: 'h:mm:ss.SSS a',\n    second: 'h:mm:ss a',\n    minute: 'h:mm a',\n    hour: 'hA',\n    day: 'MMM D',\n    week: 'll',\n    month: 'MMM YYYY',\n    quarter: '[Q]Q - YYYY',\n    year: 'YYYY'\n  };\n\n  core_adapters._date.override(typeof moment === 'function' ? {\n    _id: 'moment',\n    // DEBUG ONLY\n    formats: function formats() {\n      return FORMATS;\n    },\n    parse: function parse(value, format) {\n      if (typeof value === 'string' && typeof format === 'string') {\n        value = moment(value, format);\n      } else if (!(value instanceof moment)) {\n        value = moment(value);\n      }\n\n      return value.isValid() ? value.valueOf() : null;\n    },\n    format: function format(time, _format) {\n      return moment(time).format(_format);\n    },\n    add: function add(time, amount, unit) {\n      return moment(time).add(amount, unit).valueOf();\n    },\n    diff: function diff(max, min, unit) {\n      return moment.duration(moment(max).diff(moment(min))).as(unit);\n    },\n    startOf: function startOf(time, unit, weekday) {\n      time = moment(time);\n\n      if (unit === 'isoWeek') {\n        return time.isoWeekday(weekday).valueOf();\n      }\n\n      return time.startOf(unit).valueOf();\n    },\n    endOf: function endOf(time, unit) {\n      return moment(time).endOf(unit).valueOf();\n    },\n    // DEPRECATIONS\n\n    /**\n     * Provided for backward compatibility with scale.getValueForPixel().\n     * @deprecated since version 2.8.0\n     * @todo remove at version 3\n     * @private\n     */\n    _create: function _create(time) {\n      return moment(time);\n    }\n  } : {});\n\n  core_defaults._set('global', {\n    plugins: {\n      filler: {\n        propagate: true\n      }\n    }\n  });\n\n  var mappers = {\n    dataset: function dataset(source) {\n      var index = source.fill;\n      var chart = source.chart;\n      var meta = chart.getDatasetMeta(index);\n      var visible = meta && chart.isDatasetVisible(index);\n      var points = visible && meta.dataset._children || [];\n      var length = points.length || 0;\n      return !length ? null : function (point, i) {\n        return i < length && points[i]._view || null;\n      };\n    },\n    boundary: function boundary(source) {\n      var boundary = source.boundary;\n      var x = boundary ? boundary.x : null;\n      var y = boundary ? boundary.y : null;\n      return function (point) {\n        return {\n          x: x === null ? point.x : x,\n          y: y === null ? point.y : y\n        };\n      };\n    }\n  }; // @todo if (fill[0] === '#')\n\n  function decodeFill(el, index, count) {\n    var model = el._model || {};\n    var fill = model.fill;\n    var target;\n\n    if (fill === undefined) {\n      fill = !!model.backgroundColor;\n    }\n\n    if (fill === false || fill === null) {\n      return false;\n    }\n\n    if (fill === true) {\n      return 'origin';\n    }\n\n    target = parseFloat(fill, 10);\n\n    if (isFinite(target) && Math.floor(target) === target) {\n      if (fill[0] === '-' || fill[0] === '+') {\n        target = index + target;\n      }\n\n      if (target === index || target < 0 || target >= count) {\n        return false;\n      }\n\n      return target;\n    }\n\n    switch (fill) {\n      // compatibility\n      case 'bottom':\n        return 'start';\n\n      case 'top':\n        return 'end';\n\n      case 'zero':\n        return 'origin';\n      // supported boundaries\n\n      case 'origin':\n      case 'start':\n      case 'end':\n        return fill;\n      // invalid fill values\n\n      default:\n        return false;\n    }\n  }\n\n  function computeBoundary(source) {\n    var model = source.el._model || {};\n    var scale = source.el._scale || {};\n    var fill = source.fill;\n    var target = null;\n    var horizontal;\n\n    if (isFinite(fill)) {\n      return null;\n    } // Backward compatibility: until v3, we still need to support boundary values set on\n    // the model (scaleTop, scaleBottom and scaleZero) because some external plugins and\n    // controllers might still use it (e.g. the Smith chart).\n\n\n    if (fill === 'start') {\n      target = model.scaleBottom === undefined ? scale.bottom : model.scaleBottom;\n    } else if (fill === 'end') {\n      target = model.scaleTop === undefined ? scale.top : model.scaleTop;\n    } else if (model.scaleZero !== undefined) {\n      target = model.scaleZero;\n    } else if (scale.getBasePosition) {\n      target = scale.getBasePosition();\n    } else if (scale.getBasePixel) {\n      target = scale.getBasePixel();\n    }\n\n    if (target !== undefined && target !== null) {\n      if (target.x !== undefined && target.y !== undefined) {\n        return target;\n      }\n\n      if (helpers$1.isFinite(target)) {\n        horizontal = scale.isHorizontal();\n        return {\n          x: horizontal ? target : null,\n          y: horizontal ? null : target\n        };\n      }\n    }\n\n    return null;\n  }\n\n  function resolveTarget(sources, index, propagate) {\n    var source = sources[index];\n    var fill = source.fill;\n    var visited = [index];\n    var target;\n\n    if (!propagate) {\n      return fill;\n    }\n\n    while (fill !== false && visited.indexOf(fill) === -1) {\n      if (!isFinite(fill)) {\n        return fill;\n      }\n\n      target = sources[fill];\n\n      if (!target) {\n        return false;\n      }\n\n      if (target.visible) {\n        return fill;\n      }\n\n      visited.push(fill);\n      fill = target.fill;\n    }\n\n    return false;\n  }\n\n  function createMapper(source) {\n    var fill = source.fill;\n    var type = 'dataset';\n\n    if (fill === false) {\n      return null;\n    }\n\n    if (!isFinite(fill)) {\n      type = 'boundary';\n    }\n\n    return mappers[type](source);\n  }\n\n  function isDrawable(point) {\n    return point && !point.skip;\n  }\n\n  function drawArea(ctx, curve0, curve1, len0, len1) {\n    var i;\n\n    if (!len0 || !len1) {\n      return;\n    } // building first area curve (normal)\n\n\n    ctx.moveTo(curve0[0].x, curve0[0].y);\n\n    for (i = 1; i < len0; ++i) {\n      helpers$1.canvas.lineTo(ctx, curve0[i - 1], curve0[i]);\n    } // joining the two area curves\n\n\n    ctx.lineTo(curve1[len1 - 1].x, curve1[len1 - 1].y); // building opposite area curve (reverse)\n\n    for (i = len1 - 1; i > 0; --i) {\n      helpers$1.canvas.lineTo(ctx, curve1[i], curve1[i - 1], true);\n    }\n  }\n\n  function doFill(ctx, points, mapper, view, color, loop) {\n    var count = points.length;\n    var span = view.spanGaps;\n    var curve0 = [];\n    var curve1 = [];\n    var len0 = 0;\n    var len1 = 0;\n    var i, ilen, index, p0, p1, d0, d1;\n    ctx.beginPath();\n\n    for (i = 0, ilen = count + !!loop; i < ilen; ++i) {\n      index = i % count;\n      p0 = points[index]._view;\n      p1 = mapper(p0, index, view);\n      d0 = isDrawable(p0);\n      d1 = isDrawable(p1);\n\n      if (d0 && d1) {\n        len0 = curve0.push(p0);\n        len1 = curve1.push(p1);\n      } else if (len0 && len1) {\n        if (!span) {\n          drawArea(ctx, curve0, curve1, len0, len1);\n          len0 = len1 = 0;\n          curve0 = [];\n          curve1 = [];\n        } else {\n          if (d0) {\n            curve0.push(p0);\n          }\n\n          if (d1) {\n            curve1.push(p1);\n          }\n        }\n      }\n    }\n\n    drawArea(ctx, curve0, curve1, len0, len1);\n    ctx.closePath();\n    ctx.fillStyle = color;\n    ctx.fill();\n  }\n\n  var plugin_filler = {\n    id: 'filler',\n    afterDatasetsUpdate: function afterDatasetsUpdate(chart, options) {\n      var count = (chart.data.datasets || []).length;\n      var propagate = options.propagate;\n      var sources = [];\n      var meta, i, el, source;\n\n      for (i = 0; i < count; ++i) {\n        meta = chart.getDatasetMeta(i);\n        el = meta.dataset;\n        source = null;\n\n        if (el && el._model && el instanceof elements.Line) {\n          source = {\n            visible: chart.isDatasetVisible(i),\n            fill: decodeFill(el, i, count),\n            chart: chart,\n            el: el\n          };\n        }\n\n        meta.$filler = source;\n        sources.push(source);\n      }\n\n      for (i = 0; i < count; ++i) {\n        source = sources[i];\n\n        if (!source) {\n          continue;\n        }\n\n        source.fill = resolveTarget(sources, i, propagate);\n        source.boundary = computeBoundary(source);\n        source.mapper = createMapper(source);\n      }\n    },\n    beforeDatasetDraw: function beforeDatasetDraw(chart, args) {\n      var meta = args.meta.$filler;\n\n      if (!meta) {\n        return;\n      }\n\n      var ctx = chart.ctx;\n      var el = meta.el;\n      var view = el._view;\n      var points = el._children || [];\n      var mapper = meta.mapper;\n      var color = view.backgroundColor || core_defaults.global.defaultColor;\n\n      if (mapper && color && points.length) {\n        helpers$1.canvas.clipArea(ctx, chart.chartArea);\n        doFill(ctx, points, mapper, view, color, el._loop);\n        helpers$1.canvas.unclipArea(ctx);\n      }\n    }\n  };\n  var noop$1 = helpers$1.noop;\n  var valueOrDefault$d = helpers$1.valueOrDefault;\n\n  core_defaults._set('global', {\n    legend: {\n      display: true,\n      position: 'top',\n      fullWidth: true,\n      reverse: false,\n      weight: 1000,\n      // a callback that will handle\n      onClick: function onClick(e, legendItem) {\n        var index = legendItem.datasetIndex;\n        var ci = this.chart;\n        var meta = ci.getDatasetMeta(index); // See controller.isDatasetVisible comment\n\n        meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null; // We hid a dataset ... rerender the chart\n\n        ci.update();\n      },\n      onHover: null,\n      onLeave: null,\n      labels: {\n        boxWidth: 40,\n        padding: 10,\n        // Generates labels shown in the legend\n        // Valid properties to return:\n        // text : text to display\n        // fillStyle : fill of coloured box\n        // strokeStyle: stroke of coloured box\n        // hidden : if this legend item refers to a hidden item\n        // lineCap : cap style for line\n        // lineDash\n        // lineDashOffset :\n        // lineJoin :\n        // lineWidth :\n        generateLabels: function generateLabels(chart) {\n          var data = chart.data;\n          return helpers$1.isArray(data.datasets) ? data.datasets.map(function (dataset, i) {\n            return {\n              text: dataset.label,\n              fillStyle: !helpers$1.isArray(dataset.backgroundColor) ? dataset.backgroundColor : dataset.backgroundColor[0],\n              hidden: !chart.isDatasetVisible(i),\n              lineCap: dataset.borderCapStyle,\n              lineDash: dataset.borderDash,\n              lineDashOffset: dataset.borderDashOffset,\n              lineJoin: dataset.borderJoinStyle,\n              lineWidth: dataset.borderWidth,\n              strokeStyle: dataset.borderColor,\n              pointStyle: dataset.pointStyle,\n              // Below is extra data used for toggling the datasets\n              datasetIndex: i\n            };\n          }, this) : [];\n        }\n      }\n    },\n    legendCallback: function legendCallback(chart) {\n      var text = [];\n      text.push('<ul class=\"' + chart.id + '-legend\">');\n\n      for (var i = 0; i < chart.data.datasets.length; i++) {\n        text.push('<li><span style=\"background-color:' + chart.data.datasets[i].backgroundColor + '\"></span>');\n\n        if (chart.data.datasets[i].label) {\n          text.push(chart.data.datasets[i].label);\n        }\n\n        text.push('</li>');\n      }\n\n      text.push('</ul>');\n      return text.join('');\n    }\n  });\n  /**\n   * Helper function to get the box width based on the usePointStyle option\n   * @param {object} labelopts - the label options on the legend\n   * @param {number} fontSize - the label font size\n   * @return {number} width of the color box area\n   */\n\n\n  function getBoxWidth(labelOpts, fontSize) {\n    return labelOpts.usePointStyle && labelOpts.boxWidth > fontSize ? fontSize : labelOpts.boxWidth;\n  }\n  /**\n   * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!\n   */\n\n\n  var Legend = core_element.extend({\n    initialize: function initialize(config) {\n      helpers$1.extend(this, config); // Contains hit boxes for each dataset (in dataset order)\n\n      this.legendHitBoxes = [];\n      /**\n      \t * @private\n      \t */\n\n      this._hoveredItem = null; // Are we in doughnut mode which has a different data type\n\n      this.doughnutMode = false;\n    },\n    // These methods are ordered by lifecycle. Utilities then follow.\n    // Any function defined here is inherited by all legend types.\n    // Any function can be extended by the legend type\n    beforeUpdate: noop$1,\n    update: function update(maxWidth, maxHeight, margins) {\n      var me = this; // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\n      me.beforeUpdate(); // Absorb the master measurements\n\n      me.maxWidth = maxWidth;\n      me.maxHeight = maxHeight;\n      me.margins = margins; // Dimensions\n\n      me.beforeSetDimensions();\n      me.setDimensions();\n      me.afterSetDimensions(); // Labels\n\n      me.beforeBuildLabels();\n      me.buildLabels();\n      me.afterBuildLabels(); // Fit\n\n      me.beforeFit();\n      me.fit();\n      me.afterFit(); //\n\n      me.afterUpdate();\n      return me.minSize;\n    },\n    afterUpdate: noop$1,\n    //\n    beforeSetDimensions: noop$1,\n    setDimensions: function setDimensions() {\n      var me = this; // Set the unconstrained dimension before label rotation\n\n      if (me.isHorizontal()) {\n        // Reset position before calculating rotation\n        me.width = me.maxWidth;\n        me.left = 0;\n        me.right = me.width;\n      } else {\n        me.height = me.maxHeight; // Reset position before calculating rotation\n\n        me.top = 0;\n        me.bottom = me.height;\n      } // Reset padding\n\n\n      me.paddingLeft = 0;\n      me.paddingTop = 0;\n      me.paddingRight = 0;\n      me.paddingBottom = 0; // Reset minSize\n\n      me.minSize = {\n        width: 0,\n        height: 0\n      };\n    },\n    afterSetDimensions: noop$1,\n    //\n    beforeBuildLabels: noop$1,\n    buildLabels: function buildLabels() {\n      var me = this;\n      var labelOpts = me.options.labels || {};\n      var legendItems = helpers$1.callback(labelOpts.generateLabels, [me.chart], me) || [];\n\n      if (labelOpts.filter) {\n        legendItems = legendItems.filter(function (item) {\n          return labelOpts.filter(item, me.chart.data);\n        });\n      }\n\n      if (me.options.reverse) {\n        legendItems.reverse();\n      }\n\n      me.legendItems = legendItems;\n    },\n    afterBuildLabels: noop$1,\n    //\n    beforeFit: noop$1,\n    fit: function fit() {\n      var me = this;\n      var opts = me.options;\n      var labelOpts = opts.labels;\n      var display = opts.display;\n      var ctx = me.ctx;\n\n      var labelFont = helpers$1.options._parseFont(labelOpts);\n\n      var fontSize = labelFont.size; // Reset hit boxes\n\n      var hitboxes = me.legendHitBoxes = [];\n      var minSize = me.minSize;\n      var isHorizontal = me.isHorizontal();\n\n      if (isHorizontal) {\n        minSize.width = me.maxWidth; // fill all the width\n\n        minSize.height = display ? 10 : 0;\n      } else {\n        minSize.width = display ? 10 : 0;\n        minSize.height = me.maxHeight; // fill all the height\n      } // Increase sizes here\n\n\n      if (display) {\n        ctx.font = labelFont.string;\n\n        if (isHorizontal) {\n          // Labels\n          // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n          var lineWidths = me.lineWidths = [0];\n          var totalHeight = 0;\n          ctx.textAlign = 'left';\n          ctx.textBaseline = 'top';\n          helpers$1.each(me.legendItems, function (legendItem, i) {\n            var boxWidth = getBoxWidth(labelOpts, fontSize);\n            var width = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n\n            if (i === 0 || lineWidths[lineWidths.length - 1] + width + labelOpts.padding > minSize.width) {\n              totalHeight += fontSize + labelOpts.padding;\n              lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = labelOpts.padding;\n            } // Store the hitbox width and height here. Final position will be updated in `draw`\n\n\n            hitboxes[i] = {\n              left: 0,\n              top: 0,\n              width: width,\n              height: fontSize\n            };\n            lineWidths[lineWidths.length - 1] += width + labelOpts.padding;\n          });\n          minSize.height += totalHeight;\n        } else {\n          var vPadding = labelOpts.padding;\n          var columnWidths = me.columnWidths = [];\n          var totalWidth = labelOpts.padding;\n          var currentColWidth = 0;\n          var currentColHeight = 0;\n          var itemHeight = fontSize + vPadding;\n          helpers$1.each(me.legendItems, function (legendItem, i) {\n            var boxWidth = getBoxWidth(labelOpts, fontSize);\n            var itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width; // If too tall, go to new column\n\n            if (i > 0 && currentColHeight + itemHeight > minSize.height - vPadding) {\n              totalWidth += currentColWidth + labelOpts.padding;\n              columnWidths.push(currentColWidth); // previous column width\n\n              currentColWidth = 0;\n              currentColHeight = 0;\n            } // Get max width\n\n\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight; // Store the hitbox width and height here. Final position will be updated in `draw`\n\n            hitboxes[i] = {\n              left: 0,\n              top: 0,\n              width: itemWidth,\n              height: fontSize\n            };\n          });\n          totalWidth += currentColWidth;\n          columnWidths.push(currentColWidth);\n          minSize.width += totalWidth;\n        }\n      }\n\n      me.width = minSize.width;\n      me.height = minSize.height;\n    },\n    afterFit: noop$1,\n    // Shared Methods\n    isHorizontal: function isHorizontal() {\n      return this.options.position === 'top' || this.options.position === 'bottom';\n    },\n    // Actually draw the legend on the canvas\n    draw: function draw() {\n      var me = this;\n      var opts = me.options;\n      var labelOpts = opts.labels;\n      var globalDefaults = core_defaults.global;\n      var defaultColor = globalDefaults.defaultColor;\n      var lineDefault = globalDefaults.elements.line;\n      var legendWidth = me.width;\n      var lineWidths = me.lineWidths;\n\n      if (opts.display) {\n        var ctx = me.ctx;\n        var fontColor = valueOrDefault$d(labelOpts.fontColor, globalDefaults.defaultFontColor);\n\n        var labelFont = helpers$1.options._parseFont(labelOpts);\n\n        var fontSize = labelFont.size;\n        var cursor; // Canvas setup\n\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.strokeStyle = fontColor; // for strikethrough effect\n\n        ctx.fillStyle = fontColor; // render in correct colour\n\n        ctx.font = labelFont.string;\n        var boxWidth = getBoxWidth(labelOpts, fontSize);\n        var hitboxes = me.legendHitBoxes; // current position\n\n        var drawLegendBox = function drawLegendBox(x, y, legendItem) {\n          if (isNaN(boxWidth) || boxWidth <= 0) {\n            return;\n          } // Set the ctx for the box\n\n\n          ctx.save();\n          var lineWidth = valueOrDefault$d(legendItem.lineWidth, lineDefault.borderWidth);\n          ctx.fillStyle = valueOrDefault$d(legendItem.fillStyle, defaultColor);\n          ctx.lineCap = valueOrDefault$d(legendItem.lineCap, lineDefault.borderCapStyle);\n          ctx.lineDashOffset = valueOrDefault$d(legendItem.lineDashOffset, lineDefault.borderDashOffset);\n          ctx.lineJoin = valueOrDefault$d(legendItem.lineJoin, lineDefault.borderJoinStyle);\n          ctx.lineWidth = lineWidth;\n          ctx.strokeStyle = valueOrDefault$d(legendItem.strokeStyle, defaultColor);\n\n          if (ctx.setLineDash) {\n            // IE 9 and 10 do not support line dash\n            ctx.setLineDash(valueOrDefault$d(legendItem.lineDash, lineDefault.borderDash));\n          }\n\n          if (opts.labels && opts.labels.usePointStyle) {\n            // Recalculate x and y for drawPoint() because its expecting\n            // x and y to be center of figure (instead of top left)\n            var radius = boxWidth * Math.SQRT2 / 2;\n            var centerX = x + boxWidth / 2;\n            var centerY = y + fontSize / 2; // Draw pointStyle as legend symbol\n\n            helpers$1.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY);\n          } else {\n            // Draw box as legend symbol\n            if (lineWidth !== 0) {\n              ctx.strokeRect(x, y, boxWidth, fontSize);\n            }\n\n            ctx.fillRect(x, y, boxWidth, fontSize);\n          }\n\n          ctx.restore();\n        };\n\n        var fillText = function fillText(x, y, legendItem, textWidth) {\n          var halfFontSize = fontSize / 2;\n          var xLeft = boxWidth + halfFontSize + x;\n          var yMiddle = y + halfFontSize;\n          ctx.fillText(legendItem.text, xLeft, yMiddle);\n\n          if (legendItem.hidden) {\n            // Strikethrough the text if hidden\n            ctx.beginPath();\n            ctx.lineWidth = 2;\n            ctx.moveTo(xLeft, yMiddle);\n            ctx.lineTo(xLeft + textWidth, yMiddle);\n            ctx.stroke();\n          }\n        }; // Horizontal\n\n\n        var isHorizontal = me.isHorizontal();\n\n        if (isHorizontal) {\n          cursor = {\n            x: me.left + (legendWidth - lineWidths[0]) / 2 + labelOpts.padding,\n            y: me.top + labelOpts.padding,\n            line: 0\n          };\n        } else {\n          cursor = {\n            x: me.left + labelOpts.padding,\n            y: me.top + labelOpts.padding,\n            line: 0\n          };\n        }\n\n        var itemHeight = fontSize + labelOpts.padding;\n        helpers$1.each(me.legendItems, function (legendItem, i) {\n          var textWidth = ctx.measureText(legendItem.text).width;\n          var width = boxWidth + fontSize / 2 + textWidth;\n          var x = cursor.x;\n          var y = cursor.y; // Use (me.left + me.minSize.width) and (me.top + me.minSize.height)\n          // instead of me.right and me.bottom because me.width and me.height\n          // may have been changed since me.minSize was calculated\n\n          if (isHorizontal) {\n            if (i > 0 && x + width + labelOpts.padding > me.left + me.minSize.width) {\n              y = cursor.y += itemHeight;\n              cursor.line++;\n              x = cursor.x = me.left + (legendWidth - lineWidths[cursor.line]) / 2 + labelOpts.padding;\n            }\n          } else if (i > 0 && y + itemHeight > me.top + me.minSize.height) {\n            x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;\n            y = cursor.y = me.top + labelOpts.padding;\n            cursor.line++;\n          }\n\n          drawLegendBox(x, y, legendItem);\n          hitboxes[i].left = x;\n          hitboxes[i].top = y; // Fill the actual label\n\n          fillText(x, y, legendItem, textWidth);\n\n          if (isHorizontal) {\n            cursor.x += width + labelOpts.padding;\n          } else {\n            cursor.y += itemHeight;\n          }\n        });\n      }\n    },\n\n    /**\n     * @private\n     */\n    _getLegendItemAt: function _getLegendItemAt(x, y) {\n      var me = this;\n      var i, hitBox, lh;\n\n      if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {\n        // See if we are touching one of the dataset boxes\n        lh = me.legendHitBoxes;\n\n        for (i = 0; i < lh.length; ++i) {\n          hitBox = lh[i];\n\n          if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {\n            // Touching an element\n            return me.legendItems[i];\n          }\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Handle an event\n     * @private\n     * @param {IEvent} event - The event to handle\n     */\n    handleEvent: function handleEvent(e) {\n      var me = this;\n      var opts = me.options;\n      var type = e.type === 'mouseup' ? 'click' : e.type;\n      var hoveredItem;\n\n      if (type === 'mousemove') {\n        if (!opts.onHover && !opts.onLeave) {\n          return;\n        }\n      } else if (type === 'click') {\n        if (!opts.onClick) {\n          return;\n        }\n      } else {\n        return;\n      } // Chart event already has relative position in it\n\n\n      hoveredItem = me._getLegendItemAt(e.x, e.y);\n\n      if (type === 'click') {\n        if (hoveredItem && opts.onClick) {\n          // use e.native for backwards compatibility\n          opts.onClick.call(me, e.native, hoveredItem);\n        }\n      } else {\n        if (opts.onLeave && hoveredItem !== me._hoveredItem) {\n          if (me._hoveredItem) {\n            opts.onLeave.call(me, e.native, me._hoveredItem);\n          }\n\n          me._hoveredItem = hoveredItem;\n        }\n\n        if (opts.onHover && hoveredItem) {\n          // use e.native for backwards compatibility\n          opts.onHover.call(me, e.native, hoveredItem);\n        }\n      }\n    }\n  });\n\n  function createNewLegendAndAttach(chart, legendOpts) {\n    var legend = new Legend({\n      ctx: chart.ctx,\n      options: legendOpts,\n      chart: chart\n    });\n    core_layouts.configure(chart, legend, legendOpts);\n    core_layouts.addBox(chart, legend);\n    chart.legend = legend;\n  }\n\n  var plugin_legend = {\n    id: 'legend',\n\n    /**\n     * Backward compatibility: since 2.1.5, the legend is registered as a plugin, making\n     * Chart.Legend obsolete. To avoid a breaking change, we export the Legend as part of\n     * the plugin, which one will be re-exposed in the chart.js file.\n     * https://github.com/chartjs/Chart.js/pull/2640\n     * @private\n     */\n    _element: Legend,\n    beforeInit: function beforeInit(chart) {\n      var legendOpts = chart.options.legend;\n\n      if (legendOpts) {\n        createNewLegendAndAttach(chart, legendOpts);\n      }\n    },\n    beforeUpdate: function beforeUpdate(chart) {\n      var legendOpts = chart.options.legend;\n      var legend = chart.legend;\n\n      if (legendOpts) {\n        helpers$1.mergeIf(legendOpts, core_defaults.global.legend);\n\n        if (legend) {\n          core_layouts.configure(chart, legend, legendOpts);\n          legend.options = legendOpts;\n        } else {\n          createNewLegendAndAttach(chart, legendOpts);\n        }\n      } else if (legend) {\n        core_layouts.removeBox(chart, legend);\n        delete chart.legend;\n      }\n    },\n    afterEvent: function afterEvent(chart, e) {\n      var legend = chart.legend;\n\n      if (legend) {\n        legend.handleEvent(e);\n      }\n    }\n  };\n  var noop$2 = helpers$1.noop;\n\n  core_defaults._set('global', {\n    title: {\n      display: false,\n      fontStyle: 'bold',\n      fullWidth: true,\n      padding: 10,\n      position: 'top',\n      text: '',\n      weight: 2000 // by default greater than legend (1000) to be above\n\n    }\n  });\n  /**\n   * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!\n   */\n\n\n  var Title = core_element.extend({\n    initialize: function initialize(config) {\n      var me = this;\n      helpers$1.extend(me, config); // Contains hit boxes for each dataset (in dataset order)\n\n      me.legendHitBoxes = [];\n    },\n    // These methods are ordered by lifecycle. Utilities then follow.\n    beforeUpdate: noop$2,\n    update: function update(maxWidth, maxHeight, margins) {\n      var me = this; // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\n      me.beforeUpdate(); // Absorb the master measurements\n\n      me.maxWidth = maxWidth;\n      me.maxHeight = maxHeight;\n      me.margins = margins; // Dimensions\n\n      me.beforeSetDimensions();\n      me.setDimensions();\n      me.afterSetDimensions(); // Labels\n\n      me.beforeBuildLabels();\n      me.buildLabels();\n      me.afterBuildLabels(); // Fit\n\n      me.beforeFit();\n      me.fit();\n      me.afterFit(); //\n\n      me.afterUpdate();\n      return me.minSize;\n    },\n    afterUpdate: noop$2,\n    //\n    beforeSetDimensions: noop$2,\n    setDimensions: function setDimensions() {\n      var me = this; // Set the unconstrained dimension before label rotation\n\n      if (me.isHorizontal()) {\n        // Reset position before calculating rotation\n        me.width = me.maxWidth;\n        me.left = 0;\n        me.right = me.width;\n      } else {\n        me.height = me.maxHeight; // Reset position before calculating rotation\n\n        me.top = 0;\n        me.bottom = me.height;\n      } // Reset padding\n\n\n      me.paddingLeft = 0;\n      me.paddingTop = 0;\n      me.paddingRight = 0;\n      me.paddingBottom = 0; // Reset minSize\n\n      me.minSize = {\n        width: 0,\n        height: 0\n      };\n    },\n    afterSetDimensions: noop$2,\n    //\n    beforeBuildLabels: noop$2,\n    buildLabels: noop$2,\n    afterBuildLabels: noop$2,\n    //\n    beforeFit: noop$2,\n    fit: function fit() {\n      var me = this;\n      var opts = me.options;\n      var display = opts.display;\n      var minSize = me.minSize;\n      var lineCount = helpers$1.isArray(opts.text) ? opts.text.length : 1;\n\n      var fontOpts = helpers$1.options._parseFont(opts);\n\n      var textSize = display ? lineCount * fontOpts.lineHeight + opts.padding * 2 : 0;\n\n      if (me.isHorizontal()) {\n        minSize.width = me.maxWidth; // fill all the width\n\n        minSize.height = textSize;\n      } else {\n        minSize.width = textSize;\n        minSize.height = me.maxHeight; // fill all the height\n      }\n\n      me.width = minSize.width;\n      me.height = minSize.height;\n    },\n    afterFit: noop$2,\n    // Shared Methods\n    isHorizontal: function isHorizontal() {\n      var pos = this.options.position;\n      return pos === 'top' || pos === 'bottom';\n    },\n    // Actually draw the title block on the canvas\n    draw: function draw() {\n      var me = this;\n      var ctx = me.ctx;\n      var opts = me.options;\n\n      if (opts.display) {\n        var fontOpts = helpers$1.options._parseFont(opts);\n\n        var lineHeight = fontOpts.lineHeight;\n        var offset = lineHeight / 2 + opts.padding;\n        var rotation = 0;\n        var top = me.top;\n        var left = me.left;\n        var bottom = me.bottom;\n        var right = me.right;\n        var maxWidth, titleX, titleY;\n        ctx.fillStyle = helpers$1.valueOrDefault(opts.fontColor, core_defaults.global.defaultFontColor); // render in correct colour\n\n        ctx.font = fontOpts.string; // Horizontal\n\n        if (me.isHorizontal()) {\n          titleX = left + (right - left) / 2; // midpoint of the width\n\n          titleY = top + offset;\n          maxWidth = right - left;\n        } else {\n          titleX = opts.position === 'left' ? left + offset : right - offset;\n          titleY = top + (bottom - top) / 2;\n          maxWidth = bottom - top;\n          rotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);\n        }\n\n        ctx.save();\n        ctx.translate(titleX, titleY);\n        ctx.rotate(rotation);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        var text = opts.text;\n\n        if (helpers$1.isArray(text)) {\n          var y = 0;\n\n          for (var i = 0; i < text.length; ++i) {\n            ctx.fillText(text[i], 0, y, maxWidth);\n            y += lineHeight;\n          }\n        } else {\n          ctx.fillText(text, 0, 0, maxWidth);\n        }\n\n        ctx.restore();\n      }\n    }\n  });\n\n  function createNewTitleBlockAndAttach(chart, titleOpts) {\n    var title = new Title({\n      ctx: chart.ctx,\n      options: titleOpts,\n      chart: chart\n    });\n    core_layouts.configure(chart, title, titleOpts);\n    core_layouts.addBox(chart, title);\n    chart.titleBlock = title;\n  }\n\n  var plugin_title = {\n    id: 'title',\n\n    /**\n     * Backward compatibility: since 2.1.5, the title is registered as a plugin, making\n     * Chart.Title obsolete. To avoid a breaking change, we export the Title as part of\n     * the plugin, which one will be re-exposed in the chart.js file.\n     * https://github.com/chartjs/Chart.js/pull/2640\n     * @private\n     */\n    _element: Title,\n    beforeInit: function beforeInit(chart) {\n      var titleOpts = chart.options.title;\n\n      if (titleOpts) {\n        createNewTitleBlockAndAttach(chart, titleOpts);\n      }\n    },\n    beforeUpdate: function beforeUpdate(chart) {\n      var titleOpts = chart.options.title;\n      var titleBlock = chart.titleBlock;\n\n      if (titleOpts) {\n        helpers$1.mergeIf(titleOpts, core_defaults.global.title);\n\n        if (titleBlock) {\n          core_layouts.configure(chart, titleBlock, titleOpts);\n          titleBlock.options = titleOpts;\n        } else {\n          createNewTitleBlockAndAttach(chart, titleOpts);\n        }\n      } else if (titleBlock) {\n        core_layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n      }\n    }\n  };\n  var plugins = {};\n  var filler = plugin_filler;\n  var legend = plugin_legend;\n  var title = plugin_title;\n  plugins.filler = filler;\n  plugins.legend = legend;\n  plugins.title = title;\n  /**\n   * @namespace Chart\n   */\n\n  core_controller.helpers = helpers$1; // @todo dispatch these helpers into appropriated helpers/helpers.* file and write unit tests!\n\n  core_helpers(core_controller);\n  core_controller._adapters = core_adapters;\n  core_controller.Animation = core_animation;\n  core_controller.animationService = core_animations;\n  core_controller.controllers = controllers;\n  core_controller.DatasetController = core_datasetController;\n  core_controller.defaults = core_defaults;\n  core_controller.Element = core_element;\n  core_controller.elements = elements;\n  core_controller.Interaction = core_interaction;\n  core_controller.layouts = core_layouts;\n  core_controller.platform = platform;\n  core_controller.plugins = core_plugins;\n  core_controller.Scale = core_scale;\n  core_controller.scaleService = core_scaleService;\n  core_controller.Ticks = core_ticks;\n  core_controller.Tooltip = core_tooltip; // Register built-in scales\n\n  core_controller.helpers.each(scales, function (scale, type) {\n    core_controller.scaleService.registerScaleType(type, scale, scale._defaults);\n  }); // Load to register built-in adapters (as side effects)\n  // Loading built-in plugins\n\n  for (var k in plugins) {\n    if (plugins.hasOwnProperty(k)) {\n      core_controller.plugins.register(plugins[k]);\n    }\n  }\n\n  core_controller.platform.initialize();\n  var src = core_controller;\n\n  if (typeof window !== 'undefined') {\n    window.Chart = core_controller;\n  } // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, not available anymore\n   * @namespace Chart.Chart\n   * @deprecated since version 2.8.0\n   * @todo remove at version 3\n   * @private\n   */\n\n\n  core_controller.Chart = core_controller;\n  /**\n   * Provided for backward compatibility, not available anymore\n   * @namespace Chart.Legend\n   * @deprecated since version 2.1.5\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.Legend = plugins.legend._element;\n  /**\n   * Provided for backward compatibility, not available anymore\n   * @namespace Chart.Title\n   * @deprecated since version 2.1.5\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.Title = plugins.title._element;\n  /**\n   * Provided for backward compatibility, use Chart.plugins instead\n   * @namespace Chart.pluginService\n   * @deprecated since version 2.1.5\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.pluginService = core_controller.plugins;\n  /**\n   * Provided for backward compatibility, inheriting from Chart.PlugingBase has no\n   * effect, instead simply create/register plugins via plain JavaScript objects.\n   * @interface Chart.PluginBase\n   * @deprecated since version 2.5.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.PluginBase = core_controller.Element.extend({});\n  /**\n   * Provided for backward compatibility, use Chart.helpers.canvas instead.\n   * @namespace Chart.canvasHelpers\n   * @deprecated since version 2.6.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.canvasHelpers = core_controller.helpers.canvas;\n  /**\n   * Provided for backward compatibility, use Chart.layouts instead.\n   * @namespace Chart.layoutService\n   * @deprecated since version 2.7.3\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.layoutService = core_controller.layouts;\n  /**\n   * Provided for backward compatibility, not available anymore.\n   * @namespace Chart.LinearScaleBase\n   * @deprecated since version 2.8\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.LinearScaleBase = scale_linearbase;\n  /**\n   * Provided for backward compatibility, instead we should create a new Chart\n   * by setting the type in the config (`new Chart(id, {type: '{chart-type}'}`).\n   * @deprecated since version 2.8.0\n   * @todo remove at version 3\n   */\n\n  core_controller.helpers.each(['Bar', 'Bubble', 'Doughnut', 'Line', 'PolarArea', 'Radar', 'Scatter'], function (klass) {\n    core_controller[klass] = function (ctx, cfg) {\n      return new core_controller(ctx, core_controller.helpers.merge(cfg || {}, {\n        type: klass.charAt(0).toLowerCase() + klass.slice(1)\n      }));\n    };\n  });\n  return src;\n});","var baseAssignValue = require('./_baseAssignValue'),\n    createAggregator = require('./_createAggregator');\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The corresponding value of\n * each key is the last element responsible for generating the key. The\n * iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * var array = [\n *   { 'dir': 'left', 'code': 97 },\n *   { 'dir': 'right', 'code': 100 }\n * ];\n *\n * _.keyBy(array, function(o) {\n *   return String.fromCharCode(o.code);\n * });\n * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n *\n * _.keyBy(array, 'dir');\n * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n */\n\n\nvar keyBy = createAggregator(function (result, value, key) {\n  baseAssignValue(result, key, value);\n});\nmodule.exports = keyBy;","var arrayAggregator = require('./_arrayAggregator'),\n    baseAggregator = require('./_baseAggregator'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\n\n\nfunction createAggregator(setter, initializer) {\n  return function (collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nmodule.exports = createAggregator;","/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n\n  return accumulator;\n}\n\nmodule.exports = arrayAggregator;","var baseEach = require('./_baseEach');\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\n\n\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function (value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nmodule.exports = baseAggregator;","var baseForOwn = require('./_baseForOwn'),\n    createBaseEach = require('./_createBaseEach');\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\n\n\nvar baseEach = createBaseEach(baseForOwn);\nmodule.exports = baseEach;","var baseFor = require('./_baseFor'),\n    keys = require('./keys');\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\n\n\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\nmodule.exports = baseForOwn;","var createBaseFor = require('./_createBaseFor');\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\n\n\nvar baseFor = createBaseFor();\nmodule.exports = baseFor;","/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function (object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n\n    return object;\n  };\n}\n\nmodule.exports = createBaseFor;","var isArrayLike = require('./isArrayLike');\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\n\n\nfunction createBaseEach(eachFunc, fromRight) {\n  return function (collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while (fromRight ? index-- : ++index < length) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n\n    return collection;\n  };\n}\n\nmodule.exports = createBaseEach;"],"sourceRoot":""}